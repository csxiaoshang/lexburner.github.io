{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/alipay.png","path":"css/images/alipay.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/wechatpay.png","path":"css/images/wechatpay.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/justified-gallery/jquery.justifiedGallery.min.js","path":"vendor/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/justified-gallery/justifiedGallery.min.css","path":"vendor/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/btn_reward.gif","path":"css/images/btn_reward.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/styles.css","path":"vendor/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/wechat.png","path":"css/images/wechat.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/styles.css","path":"vendor/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/post/converters.png","path":"css/images/post/converters.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.min.css","path":"vendor/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.css","path":"vendor/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/post/package1.png","path":"css/images/post/package1.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.eot","path":"vendor/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.svg","path":"vendor/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.woff","path":"vendor/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.js","path":"vendor/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.js","path":"vendor/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.min.js","path":"vendor/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.min.js","path":"vendor/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.js","path":"vendor/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.min.js","path":"vendor/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.js","path":"vendor/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.min.js","path":"vendor/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.min.js","path":"vendor/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.min.js","path":"vendor/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.js","path":"vendor/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.min.js","path":"vendor/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.min.js","path":"vendor/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.js","path":"vendor/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.js","path":"vendor/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.min.js","path":"vendor/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/vimeo-play.png","path":"vendor/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.js","path":"vendor/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.ttf","path":"vendor/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/loading.gif","path":"vendor/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/video-play.png","path":"vendor/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.min.css","path":"vendor/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css.map","path":"vendor/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css","path":"vendor/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css.map","path":"vendor/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css","path":"vendor/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css","path":"vendor/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css.map","path":"vendor/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.min.css","path":"vendor/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.min.css","path":"vendor/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.js","path":"vendor/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/post/httpMessageConveter.png","path":"css/images/post/httpMessageConveter.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/11.jpg","path":"css/images/banner/11.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/lightgallery/img/youtube-play.png","path":"vendor/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/FontAwesome.otf","path":"vendor/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","path":"vendor/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/jquery/2.1.3/jquery.min.js","path":"vendor/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/7.jpg","path":"css/images/banner/7.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/10.jpg","path":"css/images/banner/10.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/13.jpg","path":"css/images/banner/13.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/15.jpg","path":"css/images/banner/15.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/4.jpg","path":"css/images/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/6.jpg","path":"css/images/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendor/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/14.jpg","path":"css/images/banner/14.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/2.jpg","path":"css/images/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/12.jpg","path":"css/images/banner/12.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/5.jpg","path":"css/images/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/3.jpg","path":"css/images/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/8.jpg","path":"css/images/banner/8.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/16.jpg","path":"css/images/banner/16.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/1.jpg","path":"css/images/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","path":"vendor/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/9.jpg","path":"css/images/banner/9.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/banner/17.jpg","path":"css/images/banner/17.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/icarus/package.json","hash":"c156985c2689895a228188a29ceaae8f7d0bb34f","modified":1504525766998},{"_id":"themes/icarus/README.md","hash":"b2df0535d62f2729c256a67ac86f066cd984e5bd","modified":1504525766458},{"_id":"themes/icarus/_config.yml","hash":"ae4d90f3c30917988753e2e3696e577f921b870f","modified":1504525766464},{"_id":"source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1504525766451},{"_id":"source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1504525766452},{"_id":"themes/icarus/_config.yml.example","hash":"56c5996925c9b8d58a4f9ddd9d2c74078e352f30","modified":1504525766468},{"_id":"source/about/index.md","hash":"b1e7c0cbf064259e258a7f88abfe72c2b6d92763","modified":1504525766448},{"_id":"source/_posts/Re：从零开始的Spring Security OAuth2（一）.md","hash":"92ec792dedf8eb73d1cc720017c006fec3565bb6","modified":1504525766202},{"_id":"source/_posts/Re：从零开始的Spring Security OAuth2（三）.md","hash":"8057e936f0912cb31a84f92dd977c21daf27b324","modified":1504525766211},{"_id":"source/_posts/Re：从零开始的Spring Security OAuth2（二）.md","hash":"a9e236ada9c4e746154b96145cf7716386358b55","modified":1504525766220},{"_id":"source/_posts/JAVA程序员分级，你属于哪一级.md","hash":"291eff5cfadff9c489ad97f588156d33292dea07","modified":1504525766194},{"_id":"source/_posts/Re：从零开始的Spring Session(三).md","hash":"a405fab0f752d7cd303008f8d672ac487e138a6d","modified":1504536899194},{"_id":"source/_posts/Re：从零开始的Spring Session(二).md","hash":"163ac61ebfa41fa6c0bb7a7bb584409cd0d5cc04","modified":1504525766244},{"_id":"source/_posts/Re：从零开始的领域驱动设计.md","hash":"823f279884fa63974f879d5b484914073a6f86c3","modified":1504525766248},{"_id":"source/_posts/Re：从零开始的Spring Session(一).md","hash":"9e7ba7de8c79118580732692b871381de273e95b","modified":1504951144500},{"_id":"source/_posts/Zuul性能测试.md","hash":"9d0e804695ac4a3334bca11fc8989b7d0ae3e69d","modified":1504525766263},{"_id":"source/_posts/_@Transactional注解使用注意点.md","hash":"f715fc8b7563518b595e3233b3a6f48107929796","modified":1504525766265},{"_id":"source/_posts/ThreadLocal的最佳实践.md","hash":"f10c286c8b2591955725427da1f5f6299b0865e6","modified":1504525766258},{"_id":"source/_posts/drools用户指南----stateful session（有状态会话）的使用.md","hash":"72d2858cfcef51ef7cb7e793c83fdd106bb2bade","modified":1504525766282},{"_id":"source/_posts/drools用户指南----Cross Products.md","hash":"5978f0aa1bd808dcb12f38fd3647dcd122390f22","modified":1504525766269},{"_id":"source/_posts/feign-1.md","hash":"79a9a1bfd93c7655c0fe0b868971d042ed83066d","modified":1504952575582},{"_id":"source/_posts/hello-world.md","hash":"f5ba33d133b9ee33a78f4e797037f47d0e8420ef","modified":1504525766295},{"_id":"source/_posts/java trick--String.intern().md","hash":"701fcadf1a3603f11cc4b04c2b2bfabfa831cabc","modified":1504525766297},{"_id":"source/_posts/java trick--intergerCache.md","hash":"7be08f9951cf04a9a013b1a6491b384e11e08500","modified":1504525766298},{"_id":"source/_posts/java trick--system.out.println.md","hash":"817263c21b4610fd627b0ebbed86d28938b5ec5e","modified":1504525766301},{"_id":"source/_posts/drools用户指南----stateless session（无状态会话）的使用.md","hash":"567f0220e795d5248b6a62c85d97da9ac1bdd9db","modified":1504525766293},{"_id":"source/_posts/drools用户指南----Methods vs Rules.md","hash":"d9a351a02582c5de607df7b281d36a4098463450","modified":1504525766276},{"_id":"source/_posts/java并发实践--ConcurrentHashMap与CAS.md","hash":"1c3db2c8720f2d5a7eb991e7ba8e4870a51d8a90","modified":1504525766308},{"_id":"source/_posts/springcloud----Zuul动态路由.md","hash":"04819217157b8a860f15d1f94bb81dab269c6264","modified":1504525766322},{"_id":"source/_posts/volatile疑问记录.md","hash":"d93614a4347421e8e632973fb3eb1fb437b4d198","modified":1504525766336},{"_id":"source/_posts/spring中的懒加载与事务--排坑记录.md","hash":"a75d0578de1cf55cf952dc676b0a9bd7e9b5ae12","modified":1504525766334},{"_id":"source/_posts/DevOps的八荣八耻.md","hash":"f07139dd0b015c69589e679660ed9216f6ba41ee","modified":1504525766190},{"_id":"source/_posts/xml与javabean的转换.md","hash":"7a4dd51c835e327a5ae4b8644591db0d4ea1d5b2","modified":1504525766342},{"_id":"source/_posts/《微服务》九大特性笔记.md","hash":"7a495a7fb3ad91747e916b2ccd4be18bde9f11d8","modified":1504525766346},{"_id":"source/_posts/一个DDD指导下的实体类设计案例.md","hash":"b61d83a0b6f43ec30026c8e918e52cecf5a1f0ae","modified":1504525766352},{"_id":"source/_posts/一些需要普及的项目规范.md","hash":"ba326cf9dc3668ac756fbc5f7d7e3019a88f674b","modified":1504525766363},{"_id":"source/_posts/使用zipkin做分布式链路监控.md","hash":"271c945c69a1f1da5b3559f51cb4507210d3963f","modified":1504525766382},{"_id":"source/_posts/使用zkclient操作zookeeper的学习过程记录.md","hash":"ad7e62e92f555191c8befed14d420cb4df42a37b","modified":1504525766386},{"_id":"source/_posts/分布式限流.md","hash":"bca1073c6c35458cf80b076978c617b9d7ccf7c1","modified":1504525766395},{"_id":"source/_posts/博客搬家.md","hash":"26f66454f69fceea58d0cadad32dab366b92ceca","modified":1504525766400},{"_id":"source/_posts/使用JPA实现乐观锁.md","hash":"f4209452a99e1102f52fb4f842ec896e8f16e289","modified":1504525766367},{"_id":"source/_posts/对于Spring Cloud Feign入门示例的一点思考.md","hash":"aa26edbdd5b1cf07be439d2bc28bde7a3006e6c4","modified":1504525766405},{"_id":"source/_posts/浅析项目中的并发.md","hash":"c691a92d0740fb4ae20818d685b2d30ab636f1f2","modified":1504525766417},{"_id":"source/_posts/简单了解RPC实现原理.md","hash":"b75e133c0467e72dd20d04609c444b631f5a3c3d","modified":1504525766432},{"_id":"source/_posts/浅析java内存模型（JMM）.md","hash":"08d2c1613f76eca4a4019536540f8b6af5e564de","modified":1504525766412},{"_id":"themes/icarus/scripts/meta.js","hash":"2e5ac0cb9c90c072ca4b33e88f1892e954935ab7","modified":1504525767011},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1504525767019},{"_id":"source/_posts/聊聊IT行业应届生求职.md","hash":"e73d013a9d16d5d6815e5e6e75d10015d8da93a6","modified":1504525766435},{"_id":"source/_posts/解析Spring中的ResponseBody和RequestBody.md","hash":"f69970ad04f551610605afcb6133cb9c205f0226","modified":1504525766442},{"_id":"source/_posts/使用spring validation完成数据后端校验.md","hash":"9718e4995ac4303cecae59f83c68c0950225b4d7","modified":1504525766381},{"_id":"themes/icarus/languages/id.yml","hash":"2dc3671a92378f4bd499b0dcfb90170bb44c786b","modified":1504525766485},{"_id":"themes/icarus/languages/en.yml","hash":"2b888a89957e07f440452a12ef338af979abb4c6","modified":1504525766477},{"_id":"themes/icarus/languages/ja.yml","hash":"e13df67ba3666c0d95d60c081e41fb86f6f48663","modified":1504525766486},{"_id":"themes/icarus/languages/es.yml","hash":"f48b21e020b48a38747a5cd0a2c853d717ad8a7f","modified":1504525766480},{"_id":"themes/icarus/languages/fr.yml","hash":"7b386bf21226433cb7da7989aba07ce33da5b359","modified":1504525766484},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3cf767f94766ac3a93d6efb9ef954e20d16b2b44","modified":1504525766500},{"_id":"themes/icarus/languages/ko.yml","hash":"5e6e5b5d20c940cf0be26957f3a3f6a141f338e0","modified":1504525766495},{"_id":"themes/icarus/languages/ru.yml","hash":"7423608a9608766ab5998d6b8d3e8d76b792e30e","modified":1504525766503},{"_id":"themes/icarus/languages/tr.yml","hash":"50d94b21e1838db1214f6874f4f81b47c8c521db","modified":1504525766509},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"646a7ef3e85481b013ffb2f4d9f9a8900f092d73","modified":1504525766515},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"fdce6e6716768cfac9355c4e88a05260efeeae1c","modified":1504525766511},{"_id":"themes/icarus/layout/categories.ejs","hash":"7be3918bcfb9f04b5213aeda4ad19c952128bee3","modified":1504525766517},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1504525766521},{"_id":"themes/icarus/layout/archive.ejs","hash":"6a4adb703df447a754225fa665e679816e432ea2","modified":1504525766516},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1504525766807},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1504525766725},{"_id":"themes/icarus/layout/index.ejs","hash":"c329f4598a0af4d8678ba789fdc84fcdf10122de","modified":1504525766707},{"_id":"themes/icarus/layout/layout.ejs","hash":"2bc1e3071a5ec25096584d01726a3b7c4d53ffaf","modified":1504525766723},{"_id":"themes/icarus/layout/tags.ejs","hash":"2a5b11bdf0dbf7300e11eae34bba00490ed77a0f","modified":1504525766947},{"_id":"themes/icarus/_source/about/index.md","hash":"6c824dd4e506e98e5f3677d33fb12d0913b69456","modified":1504525766470},{"_id":"themes/icarus/_source/categories/index.md","hash":"62fe9cd3a09f7971c8bfb84f18ed7863f84cb30a","modified":1504525766471},{"_id":"themes/icarus/_source/tags/index.md","hash":"f913370f50299b9b8b4cfd73fbdd5c07f4950549","modified":1504525766474},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1504525766939},{"_id":"themes/icarus/source/css/_extend.styl","hash":"74dc73324adde45f2635be99e7b44fd8939342e0","modified":1504525767029},{"_id":"themes/icarus/source/css/_variables.styl","hash":"28d73a420f32c73595fcc559528544cf998590c7","modified":1504525767429},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"13f884f07e1ed39fde1a84cd51d45b4d90078b83","modified":1504525766534},{"_id":"themes/icarus/source/css/style.styl","hash":"7840c38175064d363675770b89bc4a2b7a204679","modified":1504525767581},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b83fd91a30ca2bd62e2d43ae48e0523e0e1994c0","modified":1504525766549},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"8767c30714baf8011bb191b8a1c652ea114a53f2","modified":1504525766576},{"_id":"themes/icarus/source/js/main.js","hash":"5ce90ef12baf067ff976180937b60a73943192b5","modified":1504525767597},{"_id":"themes/icarus/source/js/insight.js","hash":"154c023c13d913984e9f70e22affea1ee8abe444","modified":1504525767596},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"c36e6b376647ae715d417cb928c2082ef56766a9","modified":1504525766573},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"adc024b7205e934e64c98a5b912c41117a4425bd","modified":1504525766564},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"b4c49b97b757d01ba0c4e16f9862a2ec05f37b1f","modified":1504525766582},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"760a8f9ee9b81f6eb27a5f2c8c5159b220a88a74","modified":1504525766744},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"3218b9f6345aaa537f742ab4781bd27a3f40c378","modified":1504525766743},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"8cc6f6e601b14d310f20eaf29dc55d6c60ab4ee4","modified":1504525766833},{"_id":"themes/icarus/layout/custom/donate.ejs","hash":"0097111de35f3bf68b48733b152f315b74956c1a","modified":1504525766694},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"8e2e28b37a908f60e4953bf9175a7af329d15d40","modified":1504525766845},{"_id":"themes/icarus/layout/search/index.ejs","hash":"fb1ac5d6b44dbc96cbef7ecdbb6397c3d4fe3e0f","modified":1504525766855},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"21ec59e4534ac2417d6b215b6cfe3825245ad340","modified":1504525766864},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"cce9c44180d9490f45b30b8f052ac82675a9d66a","modified":1504525766878},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"b79f714da69c121729a136df0c94c09a85966d44","modified":1504525766879},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"d2a0826700c51d9edaf21fa6cbb047b5127cec8a","modified":1504525766896},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"17343389d4ca2b44c61ae42e83abd1f0333b897e","modified":1504525766804},{"_id":"themes/icarus/layout/share/default.ejs","hash":"8532f15f400dbc7c1e89ab26972fc4e404001849","modified":1504525766911},{"_id":"themes/icarus/layout/share/index.ejs","hash":"52c094140d19e7e2fce57fe43968b2bd86aa4ef0","modified":1504525766931},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"442abbc0fe5cab4171179257d172150f2a789638","modified":1504525766936},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"d1812a87a26a48723c30d32bf4a1f57f3b01908e","modified":1504525766602},{"_id":"themes/icarus/layout/common/article.ejs","hash":"cea5dc409d30264bbda0051f39068290301024e7","modified":1504525766601},{"_id":"themes/icarus/layout/common/header.ejs","hash":"c75d5c3e956f70b0b82552f1e3f5749f0229ddd7","modified":1504525766641},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"6c39352254c93f1fbedb4e81d2fdc94f34f54c2e","modified":1504525766666},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"c2a2fc5dd40fa6349127c0eb3144e55dfa7555cf","modified":1504525766667},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"b80d8733a620be64a6f7d73f0b012a986755fd91","modified":1504525766681},{"_id":"themes/icarus/layout/common/head.ejs","hash":"1d6cdd9ebfbc987d87e2714c9c2d48dc2d7cbe9c","modified":1504525766639},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"d4dfa98d6481f9cd8f78b7a749276a76241b35d1","modified":1504525766665},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d6412cd574744f994f16e3a70ce29a71b449133a","modified":1504525766948},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"a2ba07bd70a82a80df71133dc0cea1248a1e3b3e","modified":1504525766682},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"81c6c0a3450e1ab56a725bb953a5021a07c0e212","modified":1504525766949},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"23d637daed63e86ec7c4a12f5a48908905ed7819","modified":1504525766961},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"cf8a87b0573c9ff11d82ca5edb86267f77e11589","modified":1504525766987},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"a4b28996e0e7df2e582387455c02f5c33f691bbd","modified":1504525766995},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"7fc8a32cf235d0a977d9ff0c49263c0541025222","modified":1504525767385},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"4dd216a147dd65ddc37521fe8a1a01aa929aeea5","modified":1504525767379},{"_id":"themes/icarus/source/css/_partial/donate.styl","hash":"f993f3fd87c4862c69ab1c96f80c4846f0f61f3e","modified":1504525767390},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"06c2c9029ebfb16880a203c218657048a83a3e4b","modified":1504525767395},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"8a84868a13c7edb733347655b33dc169c682e8b8","modified":1504525767400},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"7767972b9d0cba456f0e0cff1b96b516936414ea","modified":1504525766984},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"218713de00dc6c503e7036fce2aab81dd94b4c0c","modified":1504525767395},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"05863d2a61ef386f93c0fcb81d00e26caa7eb9f5","modified":1504525767382},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"dfa3eab5933c6af4dfb7268c511157cbb926dcfa","modified":1504525767404},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"ba1ea8a87ca7c667f0d3cc40033b52bdf168fbdd","modified":1504525767412},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"fb211c3c747565e6fa2304f436b42d14ef84d71a","modified":1504525767407},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"866fc18d6368c4131b03601a15af7703a9a42b61","modified":1504525767414},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"3f8730ec2b1b582ba93b14f0e50a41fbbce52755","modified":1504525767419},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"c01db6c4e7648b217048a8deefeee189688a9290","modified":1504525767078},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"591962bfc758a521b4cb907750c19a1a2423b4d5","modified":1504525767092},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"b0923fe15d0b5eb24d3c6236cb2fc30ee14a4c56","modified":1504525767087},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"3bc322455f657aa29f455f91009034af08cdc65c","modified":1504525767095},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"ca087a3c70998c7ac6b0b42d5cf7a653b8707591","modified":1504525767099},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"a6b1960d8a3b39d035e06ce92af4f00a259b5c56","modified":1504525767101},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"f47de0b9d66617728f68096ed48371dd6bb9e67a","modified":1504525767105},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"68021a92fd7d6895426d0cc7f0929aa95633d742","modified":1504525767109},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"657fe215931fd06e21b56374df699a94890f7ab4","modified":1504525767113},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"6c051f034c229c49ffc9a2ec96c032441b0c6586","modified":1504525767114},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"15559324ee3a5f9bf6724ec9606f6f2e16cdc24d","modified":1504525767118},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"2b416a0567a53aa0fa8898b196ddd44315c1a5f3","modified":1504525767117},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"bf62cafe316eb874f1f43679957dc3add4fbea34","modified":1504525767124},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"8d7c7242974aa2454fa792c5d7a47c5f9632355a","modified":1504525767119},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"c1db353e8613607580d40b12ddc162d029560576","modified":1504525767126},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"64ab6ab93a092a890d3d0fdeb23e4b6a2d0f2887","modified":1504525767128},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"8a6c187afcd60152306c003e1a5903e57d9428dd","modified":1504525767134},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"8659eaae6a0c2e00b4b9199803e50adf4ff0128d","modified":1504525767131},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"96181544eeadc5b0749229f11607e7c01f81e078","modified":1504525767139},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"5261a100e84cf34f4752c24dfaddfa05c7be96f7","modified":1504525767142},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"434b7f0bdd5f91bf79d5b4ca46820db4a8e10166","modified":1504525767150},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"08e2df313c272d5c70c93e713639663c168180d0","modified":1504525767153},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"8a5207a0c30262a0bf5e1a41411a306f7a89a7e7","modified":1504525767147},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"fa0cccd0f0dc015218cf8c1bba0b53c8c9383135","modified":1504525767157},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"add3d88c9d12567dcfae7a8e49984d119fc72227","modified":1504525767161},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"d14846542a26b75fd26df5b5df6c5493733f73f6","modified":1504525767165},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"7432ce9edb047b6382d28c82054a7e2a77e476c3","modified":1504525767172},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"df4c1dc05567ad0812d0cd3133cb2a2a5fd23c04","modified":1504525767182},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"3c943561a885092286ec8db14e9177036bf8d21f","modified":1504525767186},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"9c4905eab730d0b389e6972e907057577f7e25f1","modified":1504525767179},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"28c59a31467c33bd51cbf3b6085782c2a724ff6c","modified":1504525767195},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"7bd3389ce16d20488ab336d557056cc703c921c7","modified":1504525767193},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"71f4b0fca91a587e6eba15a5306dca963bb8f441","modified":1504525767198},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"5989aea14ccd0153d17ee19b3e125dae06c75f3c","modified":1504525767194},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"a84eb710b302006120c3e7f8ca18f9e6fbc231c3","modified":1504525767203},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"7f5082ae008925a23eb713f160773fe647eb3ff7","modified":1504525767204},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"fd796a58c5d4590cda67c998187933788d45f30a","modified":1504525767212},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"d3ee1bcefc94f5f87a2b76a689f4c31594501d07","modified":1504525767219},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"7ec8d75a9c9d58f65868ea64289873302d3fad5e","modified":1504525767215},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"36c44375229613a5bb9ee84a8e90214978070439","modified":1504525767226},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"e284c1760e8da0848f56cd5601d867ceeb0192d7","modified":1504525767220},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"3b998c640eeb2c6192fee24bc78b4137de475dd7","modified":1504525767232},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"c83804abe39faebd80f8f4ff64fbd7137674cb1c","modified":1504525767206},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"ab179306c12a1cf2949482beaca328e379ef034a","modified":1504525767239},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"8489fc71bedefa8f271808126296fce6381f9e04","modified":1504525767249},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"c59db73998af32ce8419a5d2d335bcc9cfbaae45","modified":1504525767230},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"e901738455ec9a1bddde7b62bbd8595de6033e1e","modified":1504525767235},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"8145db8ec349548f09d91d7a05c00c83ff84d146","modified":1504525767252},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"14fb8678739b77f35771b6d63101ddbf1e7a9fbc","modified":1504525767242},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"32955f699687b5fc2e4072804cb90925912d3c7c","modified":1504525767246},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1504525767265},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"e428e8202b01e83b0f018a96058d806e7f4c76bf","modified":1504525767262},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"50f1cee8a5b3b165b4184ead0a99dc564b62ef4f","modified":1504525767258},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1504525767278},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"d9f4b35c9f6115029600a8a023b559013e2b4e75","modified":1504525767266},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"516c7080d64b12730357358dee2adc42c43c4516","modified":1504525767276},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"186c37e9c39e65aa291cce3317e35904693598d1","modified":1504525767280},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"1ff800d9b6de464fafe591682cc48bf983202758","modified":1504525767270},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"577458d1f6c02bc42e312066bf7dd7e427cab057","modified":1504525767283},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"bb04944fc06c12ecd7b56ad933dbedde60c2259a","modified":1504525767286},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"482bbb2bc461b22e9d6ce55f0f84767e1cfae99a","modified":1504525767287},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"eeafa86697c857c4e9a84ad48c0d56a7154997a3","modified":1504525767294},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"1cd947f3d414fa5c1435caea509f27c99f6dc5b3","modified":1504525767302},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"502335f0fac07ed74ca78207bcf3ef8dd2252cf6","modified":1504525767314},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"f3cd5ed391d40265e36fcd9f7daced52773fb886","modified":1504525767299},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"b2a175caa23631f764b2f6fe2bac9739f5f5e078","modified":1504525767309},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5fa8999c7f807c1aae29c7a1cdf681678576fb69","modified":1504525767319},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"14fbb0c43af440a290280b26968c8a5c0786b27f","modified":1504525767318},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"6908313d2666d31fc9d8658fd7e8dda3de2bb596","modified":1504525767325},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1504525767563},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1504525767166},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1504525767568},{"_id":"themes/icarus/source/css/images/alipay.png","hash":"614b5a0b9bc0bffa0952e0190a1efa43bce3893f","modified":1504525767431},{"_id":"themes/icarus/source/css/images/wechatpay.png","hash":"04129944dc912a00903f0addbdb9a645018c1913","modified":1504525767580},{"_id":"themes/icarus/source/vendor/justified-gallery/jquery.justifiedGallery.min.js","hash":"1c7fd3bd976f671ba396ad4dbbb7157006243bf5","modified":1504525767748},{"_id":"themes/icarus/source/vendor/justified-gallery/justifiedGallery.min.css","hash":"45fa2fad51cecfc41107dbd4637450b746a7cbc3","modified":1504525767751},{"_id":"themes/icarus/source/css/images/btn_reward.gif","hash":"019202c03db1b74f0a0d1a5ee5c5e279004e8901","modified":1504525767562},{"_id":"themes/icarus/source/vendor/open-sans/styles.css","hash":"08c8c7eeaf34cb2f8c3312a3ce2e96b58ce2b4c0","modified":1504525768340},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"6440d645666247d7a977a6793bfd527e9c00169d","modified":1504525767433},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"431b445dfa5dec4b710069c7f1b5fae3f0a907a5","modified":1504525766645},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"fc90dbfc227563029ece7cff13585083b62935bc","modified":1504525766649},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"96f999573eb908f7129a1c09e486d46d630c0a7d","modified":1504525766646},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"79d15e00ead668bf44a48f4e870ac0cde9dbdee3","modified":1504525766650},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"1ccdc66206e84668fa1f0d2440a8ed983aa321fd","modified":1504525766650},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"3620e4dad9c7f9c31efd4ad6cf5872cfb9d418c2","modified":1504525766664},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"7df16851b35da0ea09f7323bdbfb977198823f4c","modified":1504525766661},{"_id":"themes/icarus/source/css/images/wechat.png","hash":"eeb2a12c5af051ee968fd69781339e87612081b6","modified":1504525767578},{"_id":"themes/icarus/source/vendor/source-code-pro/styles.css","hash":"6335d719343cca455152ad71a1aaed9868339236","modified":1504525768350},{"_id":"themes/icarus/source/css/images/post/converters.png","hash":"f7ba582f66610282da19c7b9d21198ff0ec68ad3","modified":1504525767565},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.min.css","hash":"bd7c2763e15e568bdccc85e38432d79f65f8d9a1","modified":1504525767607},{"_id":"themes/icarus/source/vendor/font-awesome/css/font-awesome.css","hash":"bf188c224998b995d0119cfd18fade22e53f573c","modified":1504525767601},{"_id":"themes/icarus/source/css/images/post/package1.png","hash":"6af2bafcea7de14658aea189981f6deb59422652","modified":1504525767567},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1504525767832},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1504525767835},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1504525767841},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.js","hash":"6369e9704550f4207fa798dc6018da1d259fd318","modified":1504525767867},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.js","hash":"ba52bd55c0ab647e277c42b0e48a0ac25cbd3099","modified":1504525767850},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-autoplay.min.js","hash":"44203a1490749aff6aba9784868b6c888d3fb86e","modified":1504525767851},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.min.js","hash":"ec662f97ed5a15c2bd8cf87d5c93cd9a6b4df07a","modified":1504525767938},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.js","hash":"8a026dc31f912cbd3b8a110bb87984b372661f65","modified":1504525767894},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-fullscreen.min.js","hash":"a5c468d260e3a8e68c9026aa2b5f31ce1860b8bf","modified":1504525767869},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-pager.js","hash":"562f883ba3a5e8ea570fd5d0c40afe527938c026","modified":1504525767913},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.min.js","hash":"afe725882964c87a148ac6ab54955cb0da0974c4","modified":1504525767969},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-hash.min.js","hash":"fbdbcb46ae9fd668ba5e4dce5635c040359e3359","modified":1504525767912},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.min.js","hash":"e570807e2786a0acb393c1195c820a660312fffe","modified":1504525768032},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-share.js","hash":"b000585441e9bff2f5b7c538d623b698d48049a6","modified":1504525767941},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.min.js","hash":"050e7684bfbb133bed5375938fe0021f1fa88f7f","modified":1504525768124},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.min.js","hash":"8daabc26ceadc43741904b99db7e01bfababbd04","modified":1504525768166},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-video.js","hash":"11c8509a3e398cb8c2a32ff559ccdda6d9d71740","modified":1504525768109},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-zoom.js","hash":"69a127964e508699f5f13467dd1b58fbf04bcca9","modified":1504525768143},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.min.js","hash":"dc9c6447d3574fcba3868c35bb48e0bed9be6b7e","modified":1504525768217},{"_id":"themes/icarus/source/vendor/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1504525767846},{"_id":"themes/icarus/source/vendor/lightgallery/js/lg-thumbnail.js","hash":"99fe3cc63161f0d678360a939fbd54c5d1c11eeb","modified":1504525767998},{"_id":"themes/icarus/source/vendor/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1504525767839},{"_id":"themes/icarus/source/vendor/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1504525767843},{"_id":"themes/icarus/source/vendor/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1504525767845},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1504525768345},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1504525767761},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1504525767755},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-fb-comment-box.css","hash":"10c9630e41bb8d6bb7f75a3bfe8cdb33451ed7ba","modified":1504525767753},{"_id":"themes/icarus/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1504525768349},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1504525767769},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.css","hash":"2866c3f1eda31ed34485ff3511bcfb706d78ac56","modified":1504525767765},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css","hash":"d26b528a13ee1ef245bdb0aa3db149be3fe9cba6","modified":1504525767779},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1504525767782},{"_id":"themes/icarus/source/vendor/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1504525767775},{"_id":"themes/icarus/source/vendor/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1504525767830},{"_id":"themes/icarus/source/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1504525768219},{"_id":"themes/icarus/source/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1504525768245},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1504525768247},{"_id":"themes/icarus/source/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1504525768227},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1504525768255},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1504525768262},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1504525768250},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1504525768266},{"_id":"themes/icarus/source/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1504525768284},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1504525768270},{"_id":"themes/icarus/source/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1504525768273},{"_id":"themes/icarus/source/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1504525768279},{"_id":"themes/icarus/source/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1504525768288},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1504525768312},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1504525768319},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1504525768326},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1504525768333},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1504525768315},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1504525768332},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1504525768328},{"_id":"themes/icarus/source/vendor/lightgallery/js/lightgallery.js","hash":"6d424527be45ff4deedd198e195fdeb74f1c6567","modified":1504525768193},{"_id":"themes/icarus/source/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1504525768334},{"_id":"themes/icarus/source/css/images/post/httpMessageConveter.png","hash":"e712dc405577a48fda20a04a5f71d988eefa3231","modified":1504525767566},{"_id":"themes/icarus/source/css/images/banner/11.jpg","hash":"72a6fefb62d3cd7c157a4ea86bb74c7392e628f8","modified":1504525767451},{"_id":"themes/icarus/source/vendor/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1504525767848},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1504525767614},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1504525767634},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1504525767667},{"_id":"themes/icarus/source/vendor/jquery/2.1.3/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1504525767718},{"_id":"themes/icarus/source/css/images/banner/7.jpg","hash":"bf17289994316cec98aae7c5d0171ca185d2c0da","modified":1504525767549},{"_id":"themes/icarus/source/css/images/banner/10.jpg","hash":"95f801e46a8443aba632208662f502952e8d44ce","modified":1504525767447},{"_id":"themes/icarus/source/css/images/banner/13.jpg","hash":"c41a3ac15540fa0e504da2782a49cde7b20ac96e","modified":1504525767463},{"_id":"themes/icarus/source/css/images/banner/15.jpg","hash":"165652010e527f29cf05682120f0ea3f677c6eaa","modified":1504525767476},{"_id":"themes/icarus/source/css/images/banner/4.jpg","hash":"f33c6cb84d47daf6aa3bbd9e03f8b1b0ffe1cff2","modified":1504525767531},{"_id":"themes/icarus/source/css/images/banner/6.jpg","hash":"b92cc97fcb9a7c6001df9b87007d02979c2215c5","modified":1504525767543},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1504525767663},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1504525767673},{"_id":"themes/icarus/source/css/images/banner/14.jpg","hash":"b1f58e27cd6dbec81da89d71ab7598bb89da324a","modified":1504525767469},{"_id":"themes/icarus/source/css/images/banner/2.jpg","hash":"addfbae7acc0a5228389a25f0486d7042639ad96","modified":1504525767497},{"_id":"themes/icarus/source/css/images/banner/12.jpg","hash":"6dce609cb69db550bff59bc919f4a048ead20989","modified":1504525767459},{"_id":"themes/icarus/source/css/images/banner/5.jpg","hash":"58cc3bc1bf35c4938fa3cb4a0c9174997a375309","modified":1504525767536},{"_id":"themes/icarus/source/css/images/banner/3.jpg","hash":"7bbe800fef423f04b2fb85c7ffc875a3ec5fc1a7","modified":1504525767524},{"_id":"themes/icarus/source/css/images/banner/8.jpg","hash":"7b5abef4cb4b9b906a757436dfebc1e8fe3343b6","modified":1504525767554},{"_id":"themes/icarus/source/css/images/banner/16.jpg","hash":"a82e892fa55c4bdfedb852b26b25944ad7547065","modified":1504525767483},{"_id":"themes/icarus/source/css/images/banner/1.jpg","hash":"e09bdc265fff1ef2d57ffc1d1d0fed0a9c2eef4c","modified":1504525767441},{"_id":"themes/icarus/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1504525767652},{"_id":"themes/icarus/source/css/images/banner/9.jpg","hash":"14bd7b41046909c8e789f3f376d6c5253ecf8292","modified":1504525767561},{"_id":"themes/icarus/source/css/images/banner/17.jpg","hash":"78881d390aa1f80fca0692979cffd657a6833492","modified":1504525767491},{"_id":"public/content.json","hash":"6886a756cc5dc63b0946a6d15d8f6f5c1a237dea","modified":1504952609359},{"_id":"public/categories/index.html","hash":"01abab86b0f393a02c667956d216ddb6582859ae","modified":1504952609972},{"_id":"public/tags/index.html","hash":"8c47ff30623a7df8649fbb45831d0e6e8966e9d1","modified":1504952609991},{"_id":"public/about/index.html","hash":"1c57c213a8387f62633daecac5a69a6156276f27","modified":1504952609992},{"_id":"public/2017/09/09/feign-1/index.html","hash":"c9da0451e5f2c2e9eb44aad047cff2d91b8b3f1e","modified":1504952609992},{"_id":"public/2017/09/03/Re：从零开始的Spring Session(一)/index.html","hash":"8c0e43c844ecf78a4fdbd981d37a26d3922525c5","modified":1504952609992},{"_id":"public/2017/08/26/xml与javabean的转换/index.html","hash":"58f42d888e9f753cbc764342687f647f1d04109a","modified":1504952609992},{"_id":"public/2017/09/03/Re：从零开始的Spring Session(二)/index.html","hash":"6b1f2c7d09b798e7c91ac8bcb4c8735352afd117","modified":1504952609992},{"_id":"public/2017/09/04/Re：从零开始的Spring Session(三)/index.html","hash":"531932c5750eb57f1cf1fb7d14f3deb6f3b6eb9e","modified":1504952609992},{"_id":"public/2017/08/30/解析Spring中的ResponseBody和RequestBody/index.html","hash":"a06d63c4df2c827c41dbb4a35fbd4dafca775f39","modified":1504952609992},{"_id":"public/2017/08/25/一些需要普及的项目规范/index.html","hash":"f3e72548369f0840cae5c38ad2f76996fdc99e8f","modified":1504952609992},{"_id":"public/2017/08/22/博客搬家/index.html","hash":"b7ef9d8c15426fd9b0093a9570c48a99d5fddb92","modified":1504952609993},{"_id":"public/2017/08/09/Re：从零开始的Spring Security OAuth2（二）/index.html","hash":"f51a3f60f6a81ea97b549b2c763c0403ad503435","modified":1504952609993},{"_id":"public/2017/08/21/一个DDD指导下的实体类设计案例/index.html","hash":"82cbc95a24e946751dce69697dd37dde652cc85a","modified":1504952609993},{"_id":"public/2017/08/03/对于Spring Cloud Feign入门示例的一点思考/index.html","hash":"87de306bed95f3a67b0ef9c0f16f36c7377801d2","modified":1504952609993},{"_id":"public/2017/08/16/使用spring validation完成数据后端校验/index.html","hash":"8acf241b8dc5dabff66692e605da456b870e9741","modified":1504952609993},{"_id":"public/2017/08/10/Re：从零开始的Spring Security OAuth2（三）/index.html","hash":"bf8cd1b995aacd159fdfa59c72517ce8fd80b984","modified":1504952609993},{"_id":"public/2017/08/08/Re：从零开始的Spring Security OAuth2（一）/index.html","hash":"5ac445ab1ee586093c6ed422699d87cde6c62740","modified":1504952609993},{"_id":"public/2017/07/28/Re：从零开始的领域驱动设计/index.html","hash":"af2c3e3e63d26ff9dba1d416acd23e52c1b42cca","modified":1504952609993},{"_id":"public/2017/06/23/spring中的懒加载与事务--排坑记录/index.html","hash":"0bbea1b8bb6a803d9a3f445a226be9b0a781dfb7","modified":1504952609993},{"_id":"public/2017/04/11/drools用户指南----Methods vs Rules/index.html","hash":"b54efd15ab914583e3da9cc77d80a8d83445b4ec","modified":1504952609994},{"_id":"public/2017/06/12/使用zipkin做分布式链路监控/index.html","hash":"7258ea0876fa54fc8b18bf533f1f2ea5784ef2b9","modified":1504952609994},{"_id":"public/2017/05/02/JAVA程序员分级，你属于哪一级/index.html","hash":"feed1e173c1ec2f1667395ca000cf3807c6a03fc","modified":1504952609994},{"_id":"public/2017/04/11/drools用户指南----Cross Products/index.html","hash":"b35ebc191b72c4fd22ab9efabf05f3c07730b930","modified":1504952609994},{"_id":"public/2017/04/08/Zuul性能测试/index.html","hash":"666e8a535857b668ae3b8c589db2166763fe12a1","modified":1504952609994},{"_id":"public/2017/04/11/drools用户指南----stateless session（无状态会话）的使用/index.html","hash":"3bfb5178b21007dc50fd820c8ebc1c3e4d2cbe8d","modified":1504952609994},{"_id":"public/2017/04/01/springcloud----Zuul动态路由/index.html","hash":"f51749b0a600abae704d94e567e8fc2a4a9c9d0d","modified":1504952609994},{"_id":"public/2017/04/11/drools用户指南----stateful session（有状态会话）的使用/index.html","hash":"916da5b8bd869f398fdfc8871e5d637997a5a320","modified":1504952609994},{"_id":"public/2017/03/12/java并发实践--ConcurrentHashMap与CAS/index.html","hash":"191ed55edb70e6ad61e6d22021101db33a47f2b5","modified":1504952609994},{"_id":"public/2017/03/14/DevOps的八荣八耻/index.html","hash":"711262c678dc2779e950e1d49b852c1d1bedaa41","modified":1504952609994},{"_id":"public/2017/03/07/volatile疑问记录/index.html","hash":"c1228cd3a52360b44bd220e60208d2ee2b5329d5","modified":1504952609994},{"_id":"public/2017/02/24/浅析java内存模型（JMM）/index.html","hash":"a45a5025fb656e5b7dfddcd0c3928993fce861ce","modified":1504952609994},{"_id":"public/2017/02/20/聊聊IT行业应届生求职/index.html","hash":"841bd90024f5d5b532e810a2ea775a2219d58ca8","modified":1504952609995},{"_id":"public/2017/02/19/《微服务》九大特性笔记/index.html","hash":"f65e71a141da6ce2d37ebf6152cf4bae843db598","modified":1504952609995},{"_id":"public/2017/03/18/分布式限流/index.html","hash":"3b3731379655e280ad5a827bf35a199126c1e318","modified":1504952609994},{"_id":"public/2017/02/14/ThreadLocal的最佳实践/index.html","hash":"ba4159481e025bdcf616eaee3b957e4a88f48404","modified":1504952609995},{"_id":"public/2017/02/10/简单了解RPC实现原理/index.html","hash":"8ddad7d24ee82fa112ba9ad405f1ed4c02820ade","modified":1504952609995},{"_id":"public/2016/11/07/java trick--intergerCache/index.html","hash":"3079fdbf172db1a228a97273b947ae52865aad36","modified":1504952609995},{"_id":"public/2016/08/16/使用JPA实现乐观锁/index.html","hash":"9979fcf079b43349c65e06e1d6891c089f9a28b2","modified":1504952609995},{"_id":"public/2016/08/16/使用zkclient操作zookeeper的学习过程记录/index.html","hash":"8f77bf273038ad9f79c6ab51d7829d96285428c1","modified":1504952609995},{"_id":"public/2016/11/07/java trick--String.intern()/index.html","hash":"71dbd0c32080c2baadfc6f804269ff6189a5309e","modified":1504952609995},{"_id":"public/2016/08/16/hello-world/index.html","hash":"d999ff37a029053f6628c28456b0e9680a27e928","modified":1504952609995},{"_id":"public/2016/11/07/java trick--system.out.println/index.html","hash":"b1d3eb7104140be58e05997b62d0fab8292ae627","modified":1504952609995},{"_id":"public/archives/index.html","hash":"aeb9fdd69c3a883ac5a7aa7160c7341c4e1e9465","modified":1504952609995},{"_id":"public/archives/page/2/index.html","hash":"8450ae4bb570620da46a47ddc412de3fc257fe8d","modified":1504952609995},{"_id":"public/2017/02/22/浅析项目中的并发/index.html","hash":"95d5f9cb2fbfc14bda622c2fa93050d014589f72","modified":1504952609995},{"_id":"public/archives/2016/index.html","hash":"6c4eaa9c5f36f47e532ce2f5f75d9569a6f0eb79","modified":1504952609995},{"_id":"public/archives/2016/08/index.html","hash":"a8358c53450d3911161190b05cd5eff9bc0f6a0d","modified":1504952609995},{"_id":"public/archives/2017/index.html","hash":"b8b74043ffaf92d12b6459e21807e6f124924b99","modified":1504952609996},{"_id":"public/archives/2017/page/2/index.html","hash":"c1b32b59491169b225c584caf4d16b928f0b0f02","modified":1504952609996},{"_id":"public/archives/2017/page/3/index.html","hash":"110125aa6855e5a6d830b976a819ffa6f0a898bf","modified":1504952609996},{"_id":"public/archives/2017/page/4/index.html","hash":"6ed703cf8dc2354a6bce9d8bb18387405a41b8a0","modified":1504952609996},{"_id":"public/archives/2017/02/index.html","hash":"2243889b01e73928244e9e43f4e66989b6e10704","modified":1504952609996},{"_id":"public/archives/page/4/index.html","hash":"b1efca6ee249d389ad6f666dda54d54e65a856c9","modified":1504952609996},{"_id":"public/archives/2017/03/index.html","hash":"bea14c3b51c826a8ebe3da780a23d15ed5885e20","modified":1504952609996},{"_id":"public/archives/2017/05/index.html","hash":"62afada3342ef9d3817b8697b97d929bd79f0f58","modified":1504952609996},{"_id":"public/archives/page/3/index.html","hash":"731d2ff828e5e2743de4d9ea8d21bca142c5cd7c","modified":1504952609995},{"_id":"public/archives/2017/07/index.html","hash":"3fa885ae4527b400ae87d0aa7c7e77a41bf83ed3","modified":1504952609996},{"_id":"public/archives/2016/11/index.html","hash":"aaff488ff1408fb1b8db690f8f298946450a491d","modified":1504952609996},{"_id":"public/archives/2017/04/index.html","hash":"8ee7234ffec603fdc61e589735cffb752adb592e","modified":1504952609996},{"_id":"public/archives/2017/06/index.html","hash":"0bf2ecb2faab257595eb74c73eb07f719bc2e085","modified":1504952609996},{"_id":"public/categories/技术杂谈/index.html","hash":"e68d80179b2b066afc0430426bacc41fb197b6e4","modified":1504952609996},{"_id":"public/archives/2017/08/index.html","hash":"e84f0166b53f2842c8153a002c30cc06331d2da0","modified":1504952609996},{"_id":"public/archives/2017/09/index.html","hash":"797cdf39513f1fa676787136debe9c4aa8bfcca8","modified":1504952609996},{"_id":"public/categories/Spring-Session/index.html","hash":"698c5f952f6510e53188692ee21672ad1c414849","modified":1504952609997},{"_id":"public/categories/领域驱动设计/index.html","hash":"98da1cd7fe5eedf5fea1b34bd721e885ebfa0783","modified":1504952609996},{"_id":"public/categories/Spring-Cloud/index.html","hash":"55cca5b639ec05d03ba76f801f9f20532a7f845c","modified":1504952609997},{"_id":"public/categories/JAVA/index.html","hash":"f5e7e872d82c9e6f54f24f6c7fb5afa282f9338b","modified":1504952609997},{"_id":"public/categories/规则引擎/index.html","hash":"830adad58f449762aefd7581710e49001adcafd5","modified":1504952609997},{"_id":"public/categories/DevOps/index.html","hash":"c9495258e60fa845e51dddba3b6d89eedc2a3777","modified":1504952609997},{"_id":"public/tags/Spring-Security-OAuth2/index.html","hash":"2d38ea3311b7d8d7c5e9183c97e4879ca97d45fb","modified":1504952609997},{"_id":"public/categories/Spring-Security-OAuth2/index.html","hash":"71fd50aa9c64155e36468d29b24a1019066fb606","modified":1504952609996},{"_id":"public/tags/杂谈/index.html","hash":"8e384e342dd9e5755954383e4b94c444d58b3f57","modified":1504952609998},{"_id":"public/categories/Spring/index.html","hash":"0e376535aecb0a841dcfd85a5ff736a8d18ccb3a","modified":1504952609997},{"_id":"public/tags/Spring/index.html","hash":"bfdfccd9011fde0453eea4ed050ddc109da27e76","modified":1504952609998},{"_id":"public/categories/架构设计/index.html","hash":"9ba8c6d514e0d6ef28dcf1ffc154a4a8ed968bce","modified":1504952609997},{"_id":"public/tags/JAVA/index.html","hash":"731890ebd7fc2136939b3df6d7f6376430ce3e9b","modified":1504952609998},{"_id":"public/tags/Spring-Session/index.html","hash":"0855e8adf52fd9f5f0a04f1cb6785f3b8395d6af","modified":1504952609998},{"_id":"public/tags/规则引擎/index.html","hash":"5c9c570e075c468c1bd66125bb1df0568563f9f4","modified":1504952609998},{"_id":"public/tags/领域驱动设计/index.html","hash":"410f9175b9844d539980fc189e5de2647227734d","modified":1504952609998},{"_id":"public/tags/Validation/index.html","hash":"e1001e566f5d61922922e2f4d893eba4df83bce4","modified":1504952609999},{"_id":"public/tags/Spring-Cloud-Zuul/index.html","hash":"72e7f7330a0cd9a7302b9614afc8e5e08a5a4a71","modified":1504952609998},{"_id":"public/tags/DevOps/index.html","hash":"e12b77c2dbbdd99fe6cf4ebb6a405069a7c0ec80","modified":1504952609999},{"_id":"public/tags/XML/index.html","hash":"cf4e4bd60aab6da0147e5d8d15a87caf7402d326","modified":1504952609999},{"_id":"public/tags/多线程/index.html","hash":"8b136f2441ab4977cd9150865ea5a4b821056ef1","modified":1504952609998},{"_id":"public/tags/drools/index.html","hash":"4487dccbc6754ea391eced2bf9afa8b9b2729a63","modified":1504952609999},{"_id":"public/tags/事务/index.html","hash":"e7434ce94eff760de50707a807aee4048b2719a7","modified":1504952609999},{"_id":"public/tags/微服务/index.html","hash":"dcfe0ff03586194d02194c89ce25bd0cc67e2a6a","modified":1504952609999},{"_id":"public/tags/代码规范/index.html","hash":"09067b4cf45020d6d4bbdf58326593ca31ca18bd","modified":1504952609999},{"_id":"public/tags/lua/index.html","hash":"1802ce89ec0bab51e8a7216d47ca18329cb47006","modified":1504952609999},{"_id":"public/tags/zookeeper/index.html","hash":"20bfcdd076309039b8d6d93857f5308044c3de58","modified":1504952609999},{"_id":"public/tags/数据库/index.html","hash":"3b082d7e17c0bdf762073cf490962349728b410e","modified":1504952610001},{"_id":"public/tags/Spring-Cloud/index.html","hash":"e0f4624ad3a6e7e4ebad8e0323e2d95d2a767bd3","modified":1504952610001},{"_id":"public/tags/技术杂谈/index.html","hash":"f840cb5643b76e3744611eafba721ab8c8cdeaf3","modified":1504952609999},{"_id":"public/tags/RPC/index.html","hash":"a86d7253fb0d59a5fe329e2573359265bcc0ebea","modified":1504952610001},{"_id":"public/tags/JMM/index.html","hash":"38d0217fa5fafe5236eda2269e1b014b92cb7afa","modified":1504952610001},{"_id":"public/index.html","hash":"3fdfe9b4243462cde04ccc031f2af9ea6c65bf2d","modified":1504952609997},{"_id":"public/tags/求职/index.html","hash":"9f5f1736e26b5e89d997a07c7d0bff191e50ef4a","modified":1504952610001},{"_id":"public/page/2/index.html","hash":"f8d826cc543a7e8026a5953027d0dd492fdc77a4","modified":1504952609997},{"_id":"public/page/3/index.html","hash":"b2e8c308ebfb874df5b9a15e4095ce5a0020a29a","modified":1504952609997},{"_id":"public/tags/Zipkin/index.html","hash":"3acceabb11725204a21762e7a3b98b9f421ad942","modified":1504952609999},{"_id":"public/page/4/index.html","hash":"6c5b01066614900057e3af8b6f255b7b2e5f5076","modified":1504952609997},{"_id":"public/tags/redis/index.html","hash":"9d8ecf30b082257b841d97355b086b9a35831d20","modified":1504952609999},{"_id":"public/css/images/alipay.png","hash":"614b5a0b9bc0bffa0952e0190a1efa43bce3893f","modified":1504939486396},{"_id":"public/css/images/wechatpay.png","hash":"04129944dc912a00903f0addbdb9a645018c1913","modified":1504939486396},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1504939486396},{"_id":"public/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1504939486396},{"_id":"public/css/images/btn_reward.gif","hash":"019202c03db1b74f0a0d1a5ee5c5e279004e8901","modified":1504939486396},{"_id":"public/css/images/post/converters.png","hash":"f7ba582f66610282da19c7b9d21198ff0ec68ad3","modified":1504939486396},{"_id":"public/vendor/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1504939486396},{"_id":"public/css/images/post/package1.png","hash":"6af2bafcea7de14658aea189981f6deb59422652","modified":1504939486396},{"_id":"public/vendor/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1504939486396},{"_id":"public/vendor/lightgallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1504939486397},{"_id":"public/vendor/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1504939486397},{"_id":"public/vendor/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1504939486397},{"_id":"public/vendor/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1504939486397},{"_id":"public/vendor/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1504939486397},{"_id":"public/vendor/lightgallery/css/lg-fb-comment-box.css.map","hash":"5281d2cfb0ef278940c4860ea9aa7ef86d3dbc8d","modified":1504939486397},{"_id":"public/vendor/lightgallery/css/lightgallery.css.map","hash":"91788030e3c7107b6b4bf50a82d4309368850488","modified":1504939486397},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1504939486397},{"_id":"public/vendor/lightgallery/css/lg-transitions.css.map","hash":"6ee19f99bca3ecf2fa0d6f07fb5c200db07ddd11","modified":1504939486397},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1504939486397},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1504939486398},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1504939486398},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1504939486398},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1504939486398},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1504939486398},{"_id":"public/vendor/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1504939486398},{"_id":"public/vendor/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1504939486398},{"_id":"public/vendor/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1504939486398},{"_id":"public/vendor/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1504939486398},{"_id":"public/vendor/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1504939486398},{"_id":"public/css/images/avatar.png","hash":"6440d645666247d7a977a6793bfd527e9c00169d","modified":1504939487739},{"_id":"public/css/images/wechat.png","hash":"eeb2a12c5af051ee968fd69781339e87612081b6","modified":1504939487742},{"_id":"public/css/images/post/httpMessageConveter.png","hash":"e712dc405577a48fda20a04a5f71d988eefa3231","modified":1504939487745},{"_id":"public/css/images/banner/11.jpg","hash":"72a6fefb62d3cd7c157a4ea86bb74c7392e628f8","modified":1504939487745},{"_id":"public/vendor/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1504939487745},{"_id":"public/css/images/banner/7.jpg","hash":"bf17289994316cec98aae7c5d0171ca185d2c0da","modified":1504939487745},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1504939487745},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1504939487745},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1504939487745},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1504939487746},{"_id":"public/js/main.js","hash":"59278f69cba680b24aa60f10cc560a0e05ca1054","modified":1504939487747},{"_id":"public/vendor/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1504939487747},{"_id":"public/vendor/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1504939487747},{"_id":"public/vendor/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1504939487747},{"_id":"public/vendor/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1504939487748},{"_id":"public/vendor/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1504939487748},{"_id":"public/vendor/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1504939487748},{"_id":"public/vendor/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1504939487748},{"_id":"public/vendor/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1504939487748},{"_id":"public/css/style.css","hash":"ad96e5041e222f9a6be30ff681e62f43434f410b","modified":1504939487748},{"_id":"public/vendor/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1504939487748},{"_id":"public/vendor/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1504939487748},{"_id":"public/vendor/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1504939487748},{"_id":"public/vendor/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1504939487748},{"_id":"public/vendor/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1504939487749},{"_id":"public/vendor/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1504939487749},{"_id":"public/vendor/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1504939487749},{"_id":"public/vendor/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1504939487749},{"_id":"public/vendor/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1504939487749},{"_id":"public/vendor/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1504939487749},{"_id":"public/vendor/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1504939487749},{"_id":"public/vendor/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1504939487749},{"_id":"public/css/images/banner/13.jpg","hash":"c41a3ac15540fa0e504da2782a49cde7b20ac96e","modified":1504939487755},{"_id":"public/css/images/banner/10.jpg","hash":"95f801e46a8443aba632208662f502952e8d44ce","modified":1504939487755},{"_id":"public/css/images/banner/15.jpg","hash":"165652010e527f29cf05682120f0ea3f677c6eaa","modified":1504939487755},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1504939487756},{"_id":"public/css/images/banner/14.jpg","hash":"b1f58e27cd6dbec81da89d71ab7598bb89da324a","modified":1504939487756},{"_id":"public/css/images/banner/4.jpg","hash":"f33c6cb84d47daf6aa3bbd9e03f8b1b0ffe1cff2","modified":1504939487756},{"_id":"public/css/images/banner/6.jpg","hash":"b92cc97fcb9a7c6001df9b87007d02979c2215c5","modified":1504939487756},{"_id":"public/css/images/banner/12.jpg","hash":"6dce609cb69db550bff59bc919f4a048ead20989","modified":1504939488166},{"_id":"public/css/images/banner/3.jpg","hash":"7bbe800fef423f04b2fb85c7ffc875a3ec5fc1a7","modified":1504939488533},{"_id":"public/css/images/banner/8.jpg","hash":"7b5abef4cb4b9b906a757436dfebc1e8fe3343b6","modified":1504939488533},{"_id":"public/css/images/banner/2.jpg","hash":"addfbae7acc0a5228389a25f0486d7042639ad96","modified":1504939488533},{"_id":"public/css/images/banner/5.jpg","hash":"58cc3bc1bf35c4938fa3cb4a0c9174997a375309","modified":1504939488533},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1504939488723},{"_id":"public/css/images/banner/1.jpg","hash":"e09bdc265fff1ef2d57ffc1d1d0fed0a9c2eef4c","modified":1504939488739},{"_id":"public/css/images/banner/17.jpg","hash":"78881d390aa1f80fca0692979cffd657a6833492","modified":1504939488739},{"_id":"public/css/images/banner/16.jpg","hash":"a82e892fa55c4bdfedb852b26b25944ad7547065","modified":1504939488739},{"_id":"public/css/images/banner/9.jpg","hash":"14bd7b41046909c8e789f3f376d6c5253ecf8292","modified":1504939488739}],"Category":[{"name":"Spring Security OAuth2","_id":"cj7cy3zrp0004twv72cijjlak"},{"name":"技术杂谈","_id":"cj7cy3zs7000mtwv7ehjvzm7t"},{"name":"Spring Session","_id":"cj7cy3zs8000qtwv7l3f66rhp"},{"name":"领域驱动设计","_id":"cj7cy3zsc000ytwv7v4f2ksuc"},{"name":"Spring Cloud","_id":"cj7cy3zsg0015twv7cudkcy3u"},{"name":"JAVA","_id":"cj7cy3zt0001mtwv7hi1tn3wg"},{"name":"规则引擎","_id":"cj7cy3zt7001rtwv764yjsfau"},{"name":"Spring","_id":"cj7cy3ztj0026twv71bfm3p9z"},{"name":"DevOps","_id":"cj7cy3zu3002wtwv7ot8fvc2p"},{"name":"架构设计","_id":"cj7cy3zu70036twv77bxxhkiu"}],"Data":[],"Page":[{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2017-09-04T11:49:26.451Z","updated":"2017-09-04T11:49:26.451Z","path":"categories/index.html","comments":1,"_id":"cj7cy3zra0000twv734z4jihd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2017-09-04T11:49:26.452Z","updated":"2017-09-04T11:49:26.452Z","path":"tags/index.html","comments":1,"_id":"cj7cy3zrm0002twv7bxiyfjs7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"徐靖峰","layout":"page","_content":"\n生于1995年，江苏泰州人，毕业于常州大学，目前就职于中科软，地点位于上海浦东新区，从事业务开发和基础架构研发工作。\n\n大一时有幸加入校ACM队，使用C/C++，对算法和编程产生了浓厚的兴趣。大四来上海中科软担任JAVA后端实习后，就职至今。对如今主流的互联网技术均有不同程度的掌握，尤其擅长后端技术，对软件设计有自己的理解，运维测试方面有过涉猎，前端为弱势项。平时喜欢分享知识，交流见闻，博客旧址：[徐靖峰的CSDN](http://blog.csdn.net/u013815546)。\n\ncoding之外，有如下的兴趣爱好：\n\n- 看动漫(bilibili)，看电影，看直播(douyu)\n- 游戏(毕业后已经很少接触)\n- 写日记&感想，思考\n- 旅游摄影\n\n最近在研究领域驱动设计，ELK，openresty。在项目不忙时，会经常更新博客，记录自己对开发设计的理解。如果你对博客中有任何的疑问&建议，欢迎与我交流。","source":"about/index.md","raw":"title: \"徐靖峰\"\nlayout: \"page\"\n---\n\n生于1995年，江苏泰州人，毕业于常州大学，目前就职于中科软，地点位于上海浦东新区，从事业务开发和基础架构研发工作。\n\n大一时有幸加入校ACM队，使用C/C++，对算法和编程产生了浓厚的兴趣。大四来上海中科软担任JAVA后端实习后，就职至今。对如今主流的互联网技术均有不同程度的掌握，尤其擅长后端技术，对软件设计有自己的理解，运维测试方面有过涉猎，前端为弱势项。平时喜欢分享知识，交流见闻，博客旧址：[徐靖峰的CSDN](http://blog.csdn.net/u013815546)。\n\ncoding之外，有如下的兴趣爱好：\n\n- 看动漫(bilibili)，看电影，看直播(douyu)\n- 游戏(毕业后已经很少接触)\n- 写日记&感想，思考\n- 旅游摄影\n\n最近在研究领域驱动设计，ELK，openresty。在项目不忙时，会经常更新博客，记录自己对开发设计的理解。如果你对博客中有任何的疑问&建议，欢迎与我交流。","date":"2017-09-04T11:49:26.448Z","updated":"2017-09-04T11:49:26.448Z","path":"about/index.html","comments":1,"_id":"cj7cy3zrr0006twv7hptnss1q","content":"<p>生于1995年，江苏泰州人，毕业于常州大学，目前就职于中科软，地点位于上海浦东新区，从事业务开发和基础架构研发工作。</p>\n<p>大一时有幸加入校ACM队，使用C/C++，对算法和编程产生了浓厚的兴趣。大四来上海中科软担任JAVA后端实习后，就职至今。对如今主流的互联网技术均有不同程度的掌握，尤其擅长后端技术，对软件设计有自己的理解，运维测试方面有过涉猎，前端为弱势项。平时喜欢分享知识，交流见闻，博客旧址：<a href=\"http://blog.csdn.net/u013815546\" target=\"_blank\" rel=\"external\">徐靖峰的CSDN</a>。</p>\n<p>coding之外，有如下的兴趣爱好：</p>\n<ul>\n<li>看动漫(bilibili)，看电影，看直播(douyu)</li>\n<li>游戏(毕业后已经很少接触)</li>\n<li>写日记&amp;感想，思考</li>\n<li>旅游摄影</li>\n</ul>\n<p>最近在研究领域驱动设计，ELK，openresty。在项目不忙时，会经常更新博客，记录自己对开发设计的理解。如果你对博客中有任何的疑问&amp;建议，欢迎与我交流。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>生于1995年，江苏泰州人，毕业于常州大学，目前就职于中科软，地点位于上海浦东新区，从事业务开发和基础架构研发工作。</p>\n<p>大一时有幸加入校ACM队，使用C/C++，对算法和编程产生了浓厚的兴趣。大四来上海中科软担任JAVA后端实习后，就职至今。对如今主流的互联网技术均有不同程度的掌握，尤其擅长后端技术，对软件设计有自己的理解，运维测试方面有过涉猎，前端为弱势项。平时喜欢分享知识，交流见闻，博客旧址：<a href=\"http://blog.csdn.net/u013815546\" target=\"_blank\" rel=\"external\">徐靖峰的CSDN</a>。</p>\n<p>coding之外，有如下的兴趣爱好：</p>\n<ul>\n<li>看动漫(bilibili)，看电影，看直播(douyu)</li>\n<li>游戏(毕业后已经很少接触)</li>\n<li>写日记&amp;感想，思考</li>\n<li>旅游摄影</li>\n</ul>\n<p>最近在研究领域驱动设计，ELK，openresty。在项目不忙时，会经常更新博客，记录自己对开发设计的理解。如果你对博客中有任何的疑问&amp;建议，欢迎与我交流。</p>\n"}],"Post":[{"title":"Re：从零开始的Spring Security OAuth2（一）","date":"2017-08-08T07:16:52.000Z","_content":"\n\n\n##前言\n今天来聊聊一个接口对接的场景，A厂家有一套HTTP接口需要提供给B厂家使用，由于是外网环境，所以需要有一套安全机制保障，这个时候oauth2就可以作为一个方案。\n\n关于oauth2，其实是一个规范，本文重点讲解spring对他进行的实现，如果你还不清楚授权服务器，资源服务器，认证授权等基础概念，可以移步[理解OAuth 2.0 - 阮一峰](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)，这是一篇对于oauth2很好的科普文章。 \n\n需要对spring security有一定的配置使用经验，用户认证这一块，spring security oauth2建立在spring security的基础之上。第一篇文章主要是讲解使用springboot搭建一个简易的授权，资源服务器，在文末会给出具体代码的github地址。后续文章会进行spring security oauth2的相关源码分析。java中的安全框架如shrio，已经有[跟我学shiro - 开涛](http://jinnianshilongnian.iteye.com/blog/2018936)，非常成体系地，深入浅出地讲解了apache的这个开源安全框架，但是spring security包括oauth2一直没有成体系的文章，学习它们大多依赖于较少的官方文档，理解一下基本的使用配置；通过零散的博客，了解一下他人的使用经验；打断点，分析内部的工作流程；看源码中的接口设计，以及注释，了解设计者的用意。spring的各个框架都运用了很多的设计模式，在学习源码的过程中，也大概了解了一些套路。spring也在必要的地方添加了适当的注释，避免了源码阅读者对于一些细节设计的理解产生偏差，让我更加感叹，spring不仅仅是一个工具框架，更像是一个艺术品。\n\n<!-- more -->\n\n## 概述\n使用oauth2保护你的应用，可以分为简易的分为三个步骤\n\n* 配置资源服务器\n* 配置认证服务器\n* 配置spring security\n\n前两点是oauth2的主体内容，但前面我已经描述过了，spring security oauth2是建立在spring security基础之上的，所以有一些体系是公用的。\n\noauth2根据使用场景不同，分成了4种模式\n\n* 授权码模式（authorization code）\n* 简化模式（implicit）\n* 密码模式（resource owner password credentials）\n* 客户端模式（client credentials）\n\n本文重点讲解接口对接中常使用的密码模式（以下简称password模式）和客户端模式（以下简称client模式）。授权码模式使用到了回调地址，是最为复杂的方式，通常网站中经常出现的微博，qq第三方登录，都会采用这个形式。简化模式不常用。\n\n## 项目准备\n主要的maven依赖如下\n\n```xml\n<!-- 注意是starter,自动配置 -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<!-- 不是starter,手动配置 -->\n<dependency>\n    <groupId>org.springframework.security.oauth</groupId>\n    <artifactId>spring-security-oauth2</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<!-- 将token存储在redis中 -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n我们给自己先定个目标，要干什么事？既然说到保护应用，那必须得先有一些资源，我们创建一个endpoint作为提供给外部的接口：\n```java\n@RestController\npublic class TestEndpoints {\n\n    @GetMapping(\"/product/{id}\")\n    public String getProduct(@PathVariable String id) {\n        //for debug\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        return \"product id : \" + id;\n    }\n\n    @GetMapping(\"/order/{id}\")\n    public String getOrder(@PathVariable String id) {\n\t    //for debug\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        return \"order id : \" + id;\n    }\n\n}\n```\n\n暴露一个商品查询接口，后续不做安全限制，一个订单查询接口，后续添加访问控制。\n\n## 配置资源服务器和授权服务器\n由于是两个oauth2的核心配置，我们放到一个配置类中。\n为了方便下载代码直接运行，我这里将客户端信息放到了内存中，生产中可以配置到数据库中。token的存储一般选择使用redis，一是性能比较好，二是自动过期的机制，符合token的特性。\n```java\n@Configuration\npublic class OAuth2ServerConfig {\n\n    private static final String DEMO_RESOURCE_ID = \"order\";\n\n    @Configuration\n    @EnableResourceServer\n    protected static class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {\n\n        @Override\n        public void configure(ResourceServerSecurityConfigurer resources) {\n            resources.resourceId(DEMO_RESOURCE_ID).stateless(true);\n        }\n\n        @Override\n        public void configure(HttpSecurity http) throws Exception {\n            // @formatter:off\n            http\n                    // Since we want the protected resources to be accessible in the UI as well we need\n                    // session creation to be allowed (it's disabled by default in 2.0.6)\n                    .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)\n                    .and()\n                    .requestMatchers().anyRequest()\n                    .and()\n                    .anonymous()\n                    .and()\n                    .authorizeRequests()\n//                    .antMatchers(\"/product/**\").access(\"#oauth2.hasScope('select') and hasRole('ROLE_USER')\")\n                    .antMatchers(\"/order/**\").authenticated();//配置order访问控制，必须认证过后才可以访问\n            // @formatter:on\n        }\n    }\n    \n    @Configuration\n    @EnableAuthorizationServer\n    protected static class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter {\n\n        @Autowired\n        AuthenticationManager authenticationManager;\n        @Autowired\n        RedisConnectionFactory redisConnectionFactory;\n\n        @Override\n        public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n            //配置两个客户端,一个用于password认证一个用于client认证\n            clients.inMemory().withClient(\"client_1\")\n                    .resourceIds(DEMO_RESOURCE_ID)\n                    .authorizedGrantTypes(\"client_credentials\", \"refresh_token\")\n                    .scopes(\"select\")\n                    .authorities(\"client\")\n                    .secret(\"123456\")\n                    .and().withClient(\"client_2\")\n                    .resourceIds(DEMO_RESOURCE_ID)\n                    .authorizedGrantTypes(\"password\", \"refresh_token\")\n                    .scopes(\"select\")\n                    .authorities(\"client\")\n                    .secret(\"123456\");\n        }\n\n        @Override\n        public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n            endpoints\n                    .tokenStore(new RedisTokenStore(redisConnectionFactory))\n                    .authenticationManager(authenticationManager);\n        }\n\n        @Override\n        public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {\n            //允许表单认证\n            oauthServer.allowFormAuthenticationForClients();\n        }\n\n    }\n\n}\n```\n\n\n\n简单说下spring security oauth2的认证思路。\n\n* client模式，没有用户的概念，直接与认证服务器交互，用配置中的客户端信息去申请accessToken，客户端有自己的client_id,client_secret对应于用户的username,password，而客户端也拥有自己的authorities，当采取client模式认证时，对应的权限也就是客户端自己的authorities。\n\n* password模式，自己本身有一套用户体系，在认证时需要带上自己的用户名和密码，以及客户端的client_id,client_secret。此时，accessToken所包含的权限是用户本身的权限，而不是客户端的权限。\n\n我对于两种模式的理解便是，如果你的系统已经有了一套用户体系，每个用户也有了一定的权限，可以采用password模式；如果仅仅是接口的对接，不考虑用户，则可以使用client模式。\n\n## 配置spring security\n在spring security的版本迭代中，产生了多种配置方式，建造者模式，适配器模式等等设计模式的使用，spring security内部的认证flow也是错综复杂，在我一开始学习ss也产生了不少困惑，总结了一下配置经验：使用了springboot之后，spring security其实是有不少自动配置的，我们可以仅仅修改自己需要的那一部分，并且遵循一个原则，直接覆盖最需要的那一部分。这一说法比较抽象，举个例子。比如配置内存中的用户认证器。有两种配置方式\n\nplanA：\n\n```java\n@Bean\nprotected UserDetailsService userDetailsService(){\n    InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n    manager.createUser(User.withUsername(\"user_1\").password(\"123456\").authorities(\"USER\").build());\n    manager.createUser(User.withUsername(\"user_2\").password(\"123456\").authorities(\"USER\").build());\n    return manager;\n}\n```\n\nplanB：\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication()\n                .withUser(\"user_1\").password(\"123456\").authorities(\"USER\")\n                .and()\n                .withUser(\"user_2\").password(\"123456\").authorities(\"USER\");\n   }\n\n   @Bean\n   @Override\n   public AuthenticationManager authenticationManagerBean() throws Exception {\n       AuthenticationManager manager = super.authenticationManagerBean();\n        return manager;\n    }\n}\n```\n你最终都能得到配置在内存中的两个用户，前者是直接替换掉了容器中的UserDetailsService，这么做比较直观；后者是替换了AuthenticationManager，当然你还会在SecurityConfiguration 复写其他配置，这么配置最终会由一个委托者去认证。如果你熟悉spring security，会知道AuthenticationManager和AuthenticationProvider以及UserDetailsService的关系，他们都是顶级的接口，实现类之间错综复杂的聚合关系...配置方式千差万别，但理解清楚认证流程，知道各个实现类对应的职责才是掌握spring security的关键。\n\n下面给出我最终的配置：\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    @Override\n    protected UserDetailsService userDetailsService(){\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n        manager.createUser(User.withUsername(\"user_1\").password(\"123456\").authorities(\"USER\").build());\n        manager.createUser(User.withUsername(\"user_2\").password(\"123456\").authorities(\"USER\").build());\n        return manager;\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        // @formatter:off\n        http\n            .requestMatchers().anyRequest()\n            .and()\n                .authorizeRequests()\n                .antMatchers(\"/oauth/*\").permitAll();\n        // @formatter:on\n    }\n}\n```\n重点就是配置了一个UserDetailsService，和ClientDetailsService一样，为了方便运行，使用内存中的用户，实际项目中，一般使用的是数据库保存用户，具体的实现类可以使用JdbcDaoImpl或者JdbcUserDetailsManager。\n\n## 获取token\n进行如上配置之后，启动springboot应用就可以发现多了一些自动创建的endpoints：\n\n```java\n{[/oauth/authorize]}\n{[/oauth/authorize],methods=[POST]\n{[/oauth/token],methods=[GET]}\n{[/oauth/token],methods=[POST]}\n{[/oauth/check_token]}\n{[/oauth/error]}\n```\n重点关注一下/oauth/token，它是获取的token的endpoint。启动springboot应用之后，使用http工具访问\npassword模式：\n\n`http://localhost:8080/oauth/token?username=user_1&password=123456&grant_type=password&scope=select&client_id=client_2&client_secret=123456`\n\n响应如下：\n`{\"access_token\":\"950a7cc9-5a8a-42c9-a693-40e817b1a4b0\",\"token_type\":\"bearer\",\"refresh_token\":\"773a0fcd-6023-45f8-8848-e141296cb3cb\",\"expires_in\":27036,\"scope\":\"select\"}`\n\nclient模式：\n`http://localhost:8080/oauth/token?grant_type=client_credentials&scope=select&client_id=client_1&client_secret=123456`\n\n响应如下：\n`{\"access_token\":\"56465b41-429d-436c-ad8d-613d476ff322\",\"token_type\":\"bearer\",\"expires_in\":25074,\"scope\":\"select\"}`\n\n在配置中，我们已经配置了对order资源的保护，如果直接访问:`http://localhost:8080/order/1`会得到这样的响应:`{\"error\":\"unauthorized\",\"error_description\":\"Full authentication is required to access this resource\"}`\n（这样的错误响应可以通过重写配置来修改）\n\n而对于未受保护的product资源`http://localhost:8080/product/1`则可以直接访问，得到响应`product id : 1`\n\n携带accessToken参数访问受保护的资源：\n\n使用password模式获得的token:`http://localhost:8080/order/1?access_token=950a7cc9-5a8a-42c9-a693-40e817b1a4b0`，得到了之前匿名访问无法获取的资源：`order id : 1`\n\n使用client模式获得的token:`http://localhost:8080/order/1?access_token=56465b41-429d-436c-ad8d-613d476ff322`，同上的响应`order id : 1`\n\n我们重点关注一下debug后，对资源访问时系统记录的用户认证信息，可以看到如下的debug信息\n\npassword模式：\n![password模式](http://img.blog.csdn.net/20170808145230975?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nclient模式：\n![client模式](http://img.blog.csdn.net/20170808145304794?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n和我们的配置是一致的，仔细看可以发现两者的身份有些许的不同。想要查看更多的debug信息，可以选择下载demo代码自己查看，为了方便读者调试和验证，我去除了很多复杂的特性，基本实现了一个最简配置，涉及到数据库的地方也尽量配置到了内存中，这点记住在实际使用时一定要修改。\n\n到这儿，一个简单的oauth2入门示例就完成了，一个简单的配置教程。token的工作原理是什么，它包含了哪些信息？spring内部如何对身份信息进行验证？以及上述的配置到底影响了什么？这些内容会放到后面的文章中去分析。\n\n## 示例代码下载\n全部的代码可以在我的github上进行下载，项目使用springboot+maven构建：\nhttps://github.com/lexburner/oauth2-demo\n\n\n\n\n\n","source":"_posts/Re：从零开始的Spring Security OAuth2（一）.md","raw":"---\ntitle: Re：从零开始的Spring Security OAuth2（一）\ndate: 2017-08-08 15:16:52\ntags: \n- Spring Security OAuth2\ncategories: \n- Spring Security OAuth2\n---\n\n\n\n##前言\n今天来聊聊一个接口对接的场景，A厂家有一套HTTP接口需要提供给B厂家使用，由于是外网环境，所以需要有一套安全机制保障，这个时候oauth2就可以作为一个方案。\n\n关于oauth2，其实是一个规范，本文重点讲解spring对他进行的实现，如果你还不清楚授权服务器，资源服务器，认证授权等基础概念，可以移步[理解OAuth 2.0 - 阮一峰](http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html)，这是一篇对于oauth2很好的科普文章。 \n\n需要对spring security有一定的配置使用经验，用户认证这一块，spring security oauth2建立在spring security的基础之上。第一篇文章主要是讲解使用springboot搭建一个简易的授权，资源服务器，在文末会给出具体代码的github地址。后续文章会进行spring security oauth2的相关源码分析。java中的安全框架如shrio，已经有[跟我学shiro - 开涛](http://jinnianshilongnian.iteye.com/blog/2018936)，非常成体系地，深入浅出地讲解了apache的这个开源安全框架，但是spring security包括oauth2一直没有成体系的文章，学习它们大多依赖于较少的官方文档，理解一下基本的使用配置；通过零散的博客，了解一下他人的使用经验；打断点，分析内部的工作流程；看源码中的接口设计，以及注释，了解设计者的用意。spring的各个框架都运用了很多的设计模式，在学习源码的过程中，也大概了解了一些套路。spring也在必要的地方添加了适当的注释，避免了源码阅读者对于一些细节设计的理解产生偏差，让我更加感叹，spring不仅仅是一个工具框架，更像是一个艺术品。\n\n<!-- more -->\n\n## 概述\n使用oauth2保护你的应用，可以分为简易的分为三个步骤\n\n* 配置资源服务器\n* 配置认证服务器\n* 配置spring security\n\n前两点是oauth2的主体内容，但前面我已经描述过了，spring security oauth2是建立在spring security基础之上的，所以有一些体系是公用的。\n\noauth2根据使用场景不同，分成了4种模式\n\n* 授权码模式（authorization code）\n* 简化模式（implicit）\n* 密码模式（resource owner password credentials）\n* 客户端模式（client credentials）\n\n本文重点讲解接口对接中常使用的密码模式（以下简称password模式）和客户端模式（以下简称client模式）。授权码模式使用到了回调地址，是最为复杂的方式，通常网站中经常出现的微博，qq第三方登录，都会采用这个形式。简化模式不常用。\n\n## 项目准备\n主要的maven依赖如下\n\n```xml\n<!-- 注意是starter,自动配置 -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<!-- 不是starter,手动配置 -->\n<dependency>\n    <groupId>org.springframework.security.oauth</groupId>\n    <artifactId>spring-security-oauth2</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<!-- 将token存储在redis中 -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n我们给自己先定个目标，要干什么事？既然说到保护应用，那必须得先有一些资源，我们创建一个endpoint作为提供给外部的接口：\n```java\n@RestController\npublic class TestEndpoints {\n\n    @GetMapping(\"/product/{id}\")\n    public String getProduct(@PathVariable String id) {\n        //for debug\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        return \"product id : \" + id;\n    }\n\n    @GetMapping(\"/order/{id}\")\n    public String getOrder(@PathVariable String id) {\n\t    //for debug\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        return \"order id : \" + id;\n    }\n\n}\n```\n\n暴露一个商品查询接口，后续不做安全限制，一个订单查询接口，后续添加访问控制。\n\n## 配置资源服务器和授权服务器\n由于是两个oauth2的核心配置，我们放到一个配置类中。\n为了方便下载代码直接运行，我这里将客户端信息放到了内存中，生产中可以配置到数据库中。token的存储一般选择使用redis，一是性能比较好，二是自动过期的机制，符合token的特性。\n```java\n@Configuration\npublic class OAuth2ServerConfig {\n\n    private static final String DEMO_RESOURCE_ID = \"order\";\n\n    @Configuration\n    @EnableResourceServer\n    protected static class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {\n\n        @Override\n        public void configure(ResourceServerSecurityConfigurer resources) {\n            resources.resourceId(DEMO_RESOURCE_ID).stateless(true);\n        }\n\n        @Override\n        public void configure(HttpSecurity http) throws Exception {\n            // @formatter:off\n            http\n                    // Since we want the protected resources to be accessible in the UI as well we need\n                    // session creation to be allowed (it's disabled by default in 2.0.6)\n                    .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)\n                    .and()\n                    .requestMatchers().anyRequest()\n                    .and()\n                    .anonymous()\n                    .and()\n                    .authorizeRequests()\n//                    .antMatchers(\"/product/**\").access(\"#oauth2.hasScope('select') and hasRole('ROLE_USER')\")\n                    .antMatchers(\"/order/**\").authenticated();//配置order访问控制，必须认证过后才可以访问\n            // @formatter:on\n        }\n    }\n    \n    @Configuration\n    @EnableAuthorizationServer\n    protected static class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter {\n\n        @Autowired\n        AuthenticationManager authenticationManager;\n        @Autowired\n        RedisConnectionFactory redisConnectionFactory;\n\n        @Override\n        public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n            //配置两个客户端,一个用于password认证一个用于client认证\n            clients.inMemory().withClient(\"client_1\")\n                    .resourceIds(DEMO_RESOURCE_ID)\n                    .authorizedGrantTypes(\"client_credentials\", \"refresh_token\")\n                    .scopes(\"select\")\n                    .authorities(\"client\")\n                    .secret(\"123456\")\n                    .and().withClient(\"client_2\")\n                    .resourceIds(DEMO_RESOURCE_ID)\n                    .authorizedGrantTypes(\"password\", \"refresh_token\")\n                    .scopes(\"select\")\n                    .authorities(\"client\")\n                    .secret(\"123456\");\n        }\n\n        @Override\n        public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n            endpoints\n                    .tokenStore(new RedisTokenStore(redisConnectionFactory))\n                    .authenticationManager(authenticationManager);\n        }\n\n        @Override\n        public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception {\n            //允许表单认证\n            oauthServer.allowFormAuthenticationForClients();\n        }\n\n    }\n\n}\n```\n\n\n\n简单说下spring security oauth2的认证思路。\n\n* client模式，没有用户的概念，直接与认证服务器交互，用配置中的客户端信息去申请accessToken，客户端有自己的client_id,client_secret对应于用户的username,password，而客户端也拥有自己的authorities，当采取client模式认证时，对应的权限也就是客户端自己的authorities。\n\n* password模式，自己本身有一套用户体系，在认证时需要带上自己的用户名和密码，以及客户端的client_id,client_secret。此时，accessToken所包含的权限是用户本身的权限，而不是客户端的权限。\n\n我对于两种模式的理解便是，如果你的系统已经有了一套用户体系，每个用户也有了一定的权限，可以采用password模式；如果仅仅是接口的对接，不考虑用户，则可以使用client模式。\n\n## 配置spring security\n在spring security的版本迭代中，产生了多种配置方式，建造者模式，适配器模式等等设计模式的使用，spring security内部的认证flow也是错综复杂，在我一开始学习ss也产生了不少困惑，总结了一下配置经验：使用了springboot之后，spring security其实是有不少自动配置的，我们可以仅仅修改自己需要的那一部分，并且遵循一个原则，直接覆盖最需要的那一部分。这一说法比较抽象，举个例子。比如配置内存中的用户认证器。有两种配置方式\n\nplanA：\n\n```java\n@Bean\nprotected UserDetailsService userDetailsService(){\n    InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n    manager.createUser(User.withUsername(\"user_1\").password(\"123456\").authorities(\"USER\").build());\n    manager.createUser(User.withUsername(\"user_2\").password(\"123456\").authorities(\"USER\").build());\n    return manager;\n}\n```\n\nplanB：\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication()\n                .withUser(\"user_1\").password(\"123456\").authorities(\"USER\")\n                .and()\n                .withUser(\"user_2\").password(\"123456\").authorities(\"USER\");\n   }\n\n   @Bean\n   @Override\n   public AuthenticationManager authenticationManagerBean() throws Exception {\n       AuthenticationManager manager = super.authenticationManagerBean();\n        return manager;\n    }\n}\n```\n你最终都能得到配置在内存中的两个用户，前者是直接替换掉了容器中的UserDetailsService，这么做比较直观；后者是替换了AuthenticationManager，当然你还会在SecurityConfiguration 复写其他配置，这么配置最终会由一个委托者去认证。如果你熟悉spring security，会知道AuthenticationManager和AuthenticationProvider以及UserDetailsService的关系，他们都是顶级的接口，实现类之间错综复杂的聚合关系...配置方式千差万别，但理解清楚认证流程，知道各个实现类对应的职责才是掌握spring security的关键。\n\n下面给出我最终的配置：\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    @Override\n    protected UserDetailsService userDetailsService(){\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n        manager.createUser(User.withUsername(\"user_1\").password(\"123456\").authorities(\"USER\").build());\n        manager.createUser(User.withUsername(\"user_2\").password(\"123456\").authorities(\"USER\").build());\n        return manager;\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        // @formatter:off\n        http\n            .requestMatchers().anyRequest()\n            .and()\n                .authorizeRequests()\n                .antMatchers(\"/oauth/*\").permitAll();\n        // @formatter:on\n    }\n}\n```\n重点就是配置了一个UserDetailsService，和ClientDetailsService一样，为了方便运行，使用内存中的用户，实际项目中，一般使用的是数据库保存用户，具体的实现类可以使用JdbcDaoImpl或者JdbcUserDetailsManager。\n\n## 获取token\n进行如上配置之后，启动springboot应用就可以发现多了一些自动创建的endpoints：\n\n```java\n{[/oauth/authorize]}\n{[/oauth/authorize],methods=[POST]\n{[/oauth/token],methods=[GET]}\n{[/oauth/token],methods=[POST]}\n{[/oauth/check_token]}\n{[/oauth/error]}\n```\n重点关注一下/oauth/token，它是获取的token的endpoint。启动springboot应用之后，使用http工具访问\npassword模式：\n\n`http://localhost:8080/oauth/token?username=user_1&password=123456&grant_type=password&scope=select&client_id=client_2&client_secret=123456`\n\n响应如下：\n`{\"access_token\":\"950a7cc9-5a8a-42c9-a693-40e817b1a4b0\",\"token_type\":\"bearer\",\"refresh_token\":\"773a0fcd-6023-45f8-8848-e141296cb3cb\",\"expires_in\":27036,\"scope\":\"select\"}`\n\nclient模式：\n`http://localhost:8080/oauth/token?grant_type=client_credentials&scope=select&client_id=client_1&client_secret=123456`\n\n响应如下：\n`{\"access_token\":\"56465b41-429d-436c-ad8d-613d476ff322\",\"token_type\":\"bearer\",\"expires_in\":25074,\"scope\":\"select\"}`\n\n在配置中，我们已经配置了对order资源的保护，如果直接访问:`http://localhost:8080/order/1`会得到这样的响应:`{\"error\":\"unauthorized\",\"error_description\":\"Full authentication is required to access this resource\"}`\n（这样的错误响应可以通过重写配置来修改）\n\n而对于未受保护的product资源`http://localhost:8080/product/1`则可以直接访问，得到响应`product id : 1`\n\n携带accessToken参数访问受保护的资源：\n\n使用password模式获得的token:`http://localhost:8080/order/1?access_token=950a7cc9-5a8a-42c9-a693-40e817b1a4b0`，得到了之前匿名访问无法获取的资源：`order id : 1`\n\n使用client模式获得的token:`http://localhost:8080/order/1?access_token=56465b41-429d-436c-ad8d-613d476ff322`，同上的响应`order id : 1`\n\n我们重点关注一下debug后，对资源访问时系统记录的用户认证信息，可以看到如下的debug信息\n\npassword模式：\n![password模式](http://img.blog.csdn.net/20170808145230975?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nclient模式：\n![client模式](http://img.blog.csdn.net/20170808145304794?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n和我们的配置是一致的，仔细看可以发现两者的身份有些许的不同。想要查看更多的debug信息，可以选择下载demo代码自己查看，为了方便读者调试和验证，我去除了很多复杂的特性，基本实现了一个最简配置，涉及到数据库的地方也尽量配置到了内存中，这点记住在实际使用时一定要修改。\n\n到这儿，一个简单的oauth2入门示例就完成了，一个简单的配置教程。token的工作原理是什么，它包含了哪些信息？spring内部如何对身份信息进行验证？以及上述的配置到底影响了什么？这些内容会放到后面的文章中去分析。\n\n## 示例代码下载\n全部的代码可以在我的github上进行下载，项目使用springboot+maven构建：\nhttps://github.com/lexburner/oauth2-demo\n\n\n\n\n\n","slug":"Re：从零开始的Spring Security OAuth2（一）","published":1,"updated":"2017-09-04T11:49:26.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zrg0001twv7i3cwf7az","content":"<p>##前言<br>今天来聊聊一个接口对接的场景，A厂家有一套HTTP接口需要提供给B厂家使用，由于是外网环境，所以需要有一套安全机制保障，这个时候oauth2就可以作为一个方案。</p>\n<p>关于oauth2，其实是一个规范，本文重点讲解spring对他进行的实现，如果你还不清楚授权服务器，资源服务器，认证授权等基础概念，可以移步<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\" rel=\"external\">理解OAuth 2.0 - 阮一峰</a>，这是一篇对于oauth2很好的科普文章。 </p>\n<p>需要对spring security有一定的配置使用经验，用户认证这一块，spring security oauth2建立在spring security的基础之上。第一篇文章主要是讲解使用springboot搭建一个简易的授权，资源服务器，在文末会给出具体代码的github地址。后续文章会进行spring security oauth2的相关源码分析。java中的安全框架如shrio，已经有<a href=\"http://jinnianshilongnian.iteye.com/blog/2018936\" target=\"_blank\" rel=\"external\">跟我学shiro - 开涛</a>，非常成体系地，深入浅出地讲解了apache的这个开源安全框架，但是spring security包括oauth2一直没有成体系的文章，学习它们大多依赖于较少的官方文档，理解一下基本的使用配置；通过零散的博客，了解一下他人的使用经验；打断点，分析内部的工作流程；看源码中的接口设计，以及注释，了解设计者的用意。spring的各个框架都运用了很多的设计模式，在学习源码的过程中，也大概了解了一些套路。spring也在必要的地方添加了适当的注释，避免了源码阅读者对于一些细节设计的理解产生偏差，让我更加感叹，spring不仅仅是一个工具框架，更像是一个艺术品。</p>\n<a id=\"more\"></a>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>使用oauth2保护你的应用，可以分为简易的分为三个步骤</p>\n<ul>\n<li>配置资源服务器</li>\n<li>配置认证服务器</li>\n<li>配置spring security</li>\n</ul>\n<p>前两点是oauth2的主体内容，但前面我已经描述过了，spring security oauth2是建立在spring security基础之上的，所以有一些体系是公用的。</p>\n<p>oauth2根据使用场景不同，分成了4种模式</p>\n<ul>\n<li>授权码模式（authorization code）</li>\n<li>简化模式（implicit）</li>\n<li>密码模式（resource owner password credentials）</li>\n<li>客户端模式（client credentials）</li>\n</ul>\n<p>本文重点讲解接口对接中常使用的密码模式（以下简称password模式）和客户端模式（以下简称client模式）。授权码模式使用到了回调地址，是最为复杂的方式，通常网站中经常出现的微博，qq第三方登录，都会采用这个形式。简化模式不常用。</p>\n<h2 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h2><p>主要的maven依赖如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 注意是starter,自动配置 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 不是starter,手动配置 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security.oauth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-oauth2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 将token存储在redis中 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>我们给自己先定个目标，要干什么事？既然说到保护应用，那必须得先有一些资源，我们创建一个endpoint作为提供给外部的接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestEndpoints</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/product/&#123;id&#125;\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProduct</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//for debug</span></div><div class=\"line\">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"product id : \"</span> + id;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/order/&#123;id&#125;\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOrder</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"comment\">//for debug</span></div><div class=\"line\">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"order id : \"</span> + id;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>暴露一个商品查询接口，后续不做安全限制，一个订单查询接口，后续添加访问控制。</p>\n<h2 id=\"配置资源服务器和授权服务器\"><a href=\"#配置资源服务器和授权服务器\" class=\"headerlink\" title=\"配置资源服务器和授权服务器\"></a>配置资源服务器和授权服务器</h2><p>由于是两个oauth2的核心配置，我们放到一个配置类中。<br>为了方便下载代码直接运行，我这里将客户端信息放到了内存中，生产中可以配置到数据库中。token的存储一般选择使用redis，一是性能比较好，二是自动过期的机制，符合token的特性。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OAuth2ServerConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEMO_RESOURCE_ID = <span class=\"string\">\"order\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Configuration</span></div><div class=\"line\">    <span class=\"meta\">@EnableResourceServer</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceServerConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceServerConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ResourceServerSecurityConfigurer resources)</span> </span>&#123;</div><div class=\"line\">            resources.resourceId(DEMO_RESOURCE_ID).stateless(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// @formatter:off</span></div><div class=\"line\">            http</div><div class=\"line\">                    <span class=\"comment\">// Since we want the protected resources to be accessible in the UI as well we need</span></div><div class=\"line\">                    <span class=\"comment\">// session creation to be allowed (it's disabled by default in 2.0.6)</span></div><div class=\"line\">                    .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)</div><div class=\"line\">                    .and()</div><div class=\"line\">                    .requestMatchers().anyRequest()</div><div class=\"line\">                    .and()</div><div class=\"line\">                    .anonymous()</div><div class=\"line\">                    .and()</div><div class=\"line\">                    .authorizeRequests()</div><div class=\"line\"><span class=\"comment\">//                    .antMatchers(\"/product/**\").access(\"#oauth2.hasScope('select') and hasRole('ROLE_USER')\")</span></div><div class=\"line\">                    .antMatchers(<span class=\"string\">\"/order/**\"</span>).authenticated();<span class=\"comment\">//配置order访问控制，必须认证过后才可以访问</span></div><div class=\"line\">            <span class=\"comment\">// @formatter:on</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Configuration</span></div><div class=\"line\">    <span class=\"meta\">@EnableAuthorizationServer</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizationServerConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">AuthorizationServerConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Autowired</span></div><div class=\"line\">        AuthenticationManager authenticationManager;</div><div class=\"line\">        <span class=\"meta\">@Autowired</span></div><div class=\"line\">        RedisConnectionFactory redisConnectionFactory;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ClientDetailsServiceConfigurer clients)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//配置两个客户端,一个用于password认证一个用于client认证</span></div><div class=\"line\">            clients.inMemory().withClient(<span class=\"string\">\"client_1\"</span>)</div><div class=\"line\">                    .resourceIds(DEMO_RESOURCE_ID)</div><div class=\"line\">                    .authorizedGrantTypes(<span class=\"string\">\"client_credentials\"</span>, <span class=\"string\">\"refresh_token\"</span>)</div><div class=\"line\">                    .scopes(<span class=\"string\">\"select\"</span>)</div><div class=\"line\">                    .authorities(<span class=\"string\">\"client\"</span>)</div><div class=\"line\">                    .secret(<span class=\"string\">\"123456\"</span>)</div><div class=\"line\">                    .and().withClient(<span class=\"string\">\"client_2\"</span>)</div><div class=\"line\">                    .resourceIds(DEMO_RESOURCE_ID)</div><div class=\"line\">                    .authorizedGrantTypes(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"refresh_token\"</span>)</div><div class=\"line\">                    .scopes(<span class=\"string\">\"select\"</span>)</div><div class=\"line\">                    .authorities(<span class=\"string\">\"client\"</span>)</div><div class=\"line\">                    .secret(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            endpoints</div><div class=\"line\">                    .tokenStore(<span class=\"keyword\">new</span> RedisTokenStore(redisConnectionFactory))</div><div class=\"line\">                    .authenticationManager(authenticationManager);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerSecurityConfigurer oauthServer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//允许表单认证</span></div><div class=\"line\">            oauthServer.allowFormAuthenticationForClients();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>简单说下spring security oauth2的认证思路。</p>\n<ul>\n<li><p>client模式，没有用户的概念，直接与认证服务器交互，用配置中的客户端信息去申请accessToken，客户端有自己的client_id,client_secret对应于用户的username,password，而客户端也拥有自己的authorities，当采取client模式认证时，对应的权限也就是客户端自己的authorities。</p>\n</li>\n<li><p>password模式，自己本身有一套用户体系，在认证时需要带上自己的用户名和密码，以及客户端的client_id,client_secret。此时，accessToken所包含的权限是用户本身的权限，而不是客户端的权限。</p>\n</li>\n</ul>\n<p>我对于两种模式的理解便是，如果你的系统已经有了一套用户体系，每个用户也有了一定的权限，可以采用password模式；如果仅仅是接口的对接，不考虑用户，则可以使用client模式。</p>\n<h2 id=\"配置spring-security\"><a href=\"#配置spring-security\" class=\"headerlink\" title=\"配置spring security\"></a>配置spring security</h2><p>在spring security的版本迭代中，产生了多种配置方式，建造者模式，适配器模式等等设计模式的使用，spring security内部的认证flow也是错综复杂，在我一开始学习ss也产生了不少困惑，总结了一下配置经验：使用了springboot之后，spring security其实是有不少自动配置的，我们可以仅仅修改自己需要的那一部分，并且遵循一个原则，直接覆盖最需要的那一部分。这一说法比较抽象，举个例子。比如配置内存中的用户认证器。有两种配置方式</p>\n<p>planA：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> UserDetailsService <span class=\"title\">userDetailsService</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    InMemoryUserDetailsManager manager = <span class=\"keyword\">new</span> InMemoryUserDetailsManager();</div><div class=\"line\">    manager.createUser(User.withUsername(<span class=\"string\">\"user_1\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>).build());</div><div class=\"line\">    manager.createUser(User.withUsername(<span class=\"string\">\"user_2\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>).build());</div><div class=\"line\">    <span class=\"keyword\">return</span> manager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>planB：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        auth.inMemoryAuthentication()</div><div class=\"line\">                .withUser(<span class=\"string\">\"user_1\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>)</div><div class=\"line\">                .and()</div><div class=\"line\">                .withUser(<span class=\"string\">\"user_2\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Bean</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> AuthenticationManager <span class=\"title\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">       AuthenticationManager manager = <span class=\"keyword\">super</span>.authenticationManagerBean();</div><div class=\"line\">        <span class=\"keyword\">return</span> manager;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你最终都能得到配置在内存中的两个用户，前者是直接替换掉了容器中的UserDetailsService，这么做比较直观；后者是替换了AuthenticationManager，当然你还会在SecurityConfiguration 复写其他配置，这么配置最终会由一个委托者去认证。如果你熟悉spring security，会知道AuthenticationManager和AuthenticationProvider以及UserDetailsService的关系，他们都是顶级的接口，实现类之间错综复杂的聚合关系…配置方式千差万别，但理解清楚认证流程，知道各个实现类对应的职责才是掌握spring security的关键。</p>\n<p>下面给出我最终的配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> UserDetailsService <span class=\"title\">userDetailsService</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        InMemoryUserDetailsManager manager = <span class=\"keyword\">new</span> InMemoryUserDetailsManager();</div><div class=\"line\">        manager.createUser(User.withUsername(<span class=\"string\">\"user_1\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>).build());</div><div class=\"line\">        manager.createUser(User.withUsername(<span class=\"string\">\"user_2\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>).build());</div><div class=\"line\">        <span class=\"keyword\">return</span> manager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// @formatter:off</span></div><div class=\"line\">        http</div><div class=\"line\">            .requestMatchers().anyRequest()</div><div class=\"line\">            .and()</div><div class=\"line\">                .authorizeRequests()</div><div class=\"line\">                .antMatchers(<span class=\"string\">\"/oauth/*\"</span>).permitAll();</div><div class=\"line\">        <span class=\"comment\">// @formatter:on</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重点就是配置了一个UserDetailsService，和ClientDetailsService一样，为了方便运行，使用内存中的用户，实际项目中，一般使用的是数据库保存用户，具体的实现类可以使用JdbcDaoImpl或者JdbcUserDetailsManager。</p>\n<h2 id=\"获取token\"><a href=\"#获取token\" class=\"headerlink\" title=\"获取token\"></a>获取token</h2><p>进行如上配置之后，启动springboot应用就可以发现多了一些自动创建的endpoints：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;[/oauth/authorize]&#125;</div><div class=\"line\">&#123;[/oauth/authorize],methods=[POST]</div><div class=\"line\">&#123;[/oauth/token],methods=[GET]&#125;</div><div class=\"line\">&#123;[/oauth/token],methods=[POST]&#125;</div><div class=\"line\">&#123;[/oauth/check_token]&#125;</div><div class=\"line\">&#123;[/oauth/error]&#125;</div></pre></td></tr></table></figure>\n<p>重点关注一下/oauth/token，它是获取的token的endpoint。启动springboot应用之后，使用http工具访问<br>password模式：</p>\n<p><code>http://localhost:8080/oauth/token?username=user_1&amp;password=123456&amp;grant_type=password&amp;scope=select&amp;client_id=client_2&amp;client_secret=123456</code></p>\n<p>响应如下：<br><code>{&quot;access_token&quot;:&quot;950a7cc9-5a8a-42c9-a693-40e817b1a4b0&quot;,&quot;token_type&quot;:&quot;bearer&quot;,&quot;refresh_token&quot;:&quot;773a0fcd-6023-45f8-8848-e141296cb3cb&quot;,&quot;expires_in&quot;:27036,&quot;scope&quot;:&quot;select&quot;}</code></p>\n<p>client模式：<br><code>http://localhost:8080/oauth/token?grant_type=client_credentials&amp;scope=select&amp;client_id=client_1&amp;client_secret=123456</code></p>\n<p>响应如下：<br><code>{&quot;access_token&quot;:&quot;56465b41-429d-436c-ad8d-613d476ff322&quot;,&quot;token_type&quot;:&quot;bearer&quot;,&quot;expires_in&quot;:25074,&quot;scope&quot;:&quot;select&quot;}</code></p>\n<p>在配置中，我们已经配置了对order资源的保护，如果直接访问:<code>http://localhost:8080/order/1</code>会得到这样的响应:<code>{&quot;error&quot;:&quot;unauthorized&quot;,&quot;error_description&quot;:&quot;Full authentication is required to access this resource&quot;}</code><br>（这样的错误响应可以通过重写配置来修改）</p>\n<p>而对于未受保护的product资源<code>http://localhost:8080/product/1</code>则可以直接访问，得到响应<code>product id : 1</code></p>\n<p>携带accessToken参数访问受保护的资源：</p>\n<p>使用password模式获得的token:<code>http://localhost:8080/order/1?access_token=950a7cc9-5a8a-42c9-a693-40e817b1a4b0</code>，得到了之前匿名访问无法获取的资源：<code>order id : 1</code></p>\n<p>使用client模式获得的token:<code>http://localhost:8080/order/1?access_token=56465b41-429d-436c-ad8d-613d476ff322</code>，同上的响应<code>order id : 1</code></p>\n<p>我们重点关注一下debug后，对资源访问时系统记录的用户认证信息，可以看到如下的debug信息</p>\n<p>password模式：<br><img src=\"http://img.blog.csdn.net/20170808145230975?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"password模式\"></p>\n<p>client模式：<br><img src=\"http://img.blog.csdn.net/20170808145304794?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"client模式\"></p>\n<p>和我们的配置是一致的，仔细看可以发现两者的身份有些许的不同。想要查看更多的debug信息，可以选择下载demo代码自己查看，为了方便读者调试和验证，我去除了很多复杂的特性，基本实现了一个最简配置，涉及到数据库的地方也尽量配置到了内存中，这点记住在实际使用时一定要修改。</p>\n<p>到这儿，一个简单的oauth2入门示例就完成了，一个简单的配置教程。token的工作原理是什么，它包含了哪些信息？spring内部如何对身份信息进行验证？以及上述的配置到底影响了什么？这些内容会放到后面的文章中去分析。</p>\n<h2 id=\"示例代码下载\"><a href=\"#示例代码下载\" class=\"headerlink\" title=\"示例代码下载\"></a>示例代码下载</h2><p>全部的代码可以在我的github上进行下载，项目使用springboot+maven构建：<br><a href=\"https://github.com/lexburner/oauth2-demo\" target=\"_blank\" rel=\"external\">https://github.com/lexburner/oauth2-demo</a></p>\n","site":{"data":{}},"excerpt":"<p>##前言<br>今天来聊聊一个接口对接的场景，A厂家有一套HTTP接口需要提供给B厂家使用，由于是外网环境，所以需要有一套安全机制保障，这个时候oauth2就可以作为一个方案。</p>\n<p>关于oauth2，其实是一个规范，本文重点讲解spring对他进行的实现，如果你还不清楚授权服务器，资源服务器，认证授权等基础概念，可以移步<a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\" target=\"_blank\" rel=\"external\">理解OAuth 2.0 - 阮一峰</a>，这是一篇对于oauth2很好的科普文章。 </p>\n<p>需要对spring security有一定的配置使用经验，用户认证这一块，spring security oauth2建立在spring security的基础之上。第一篇文章主要是讲解使用springboot搭建一个简易的授权，资源服务器，在文末会给出具体代码的github地址。后续文章会进行spring security oauth2的相关源码分析。java中的安全框架如shrio，已经有<a href=\"http://jinnianshilongnian.iteye.com/blog/2018936\" target=\"_blank\" rel=\"external\">跟我学shiro - 开涛</a>，非常成体系地，深入浅出地讲解了apache的这个开源安全框架，但是spring security包括oauth2一直没有成体系的文章，学习它们大多依赖于较少的官方文档，理解一下基本的使用配置；通过零散的博客，了解一下他人的使用经验；打断点，分析内部的工作流程；看源码中的接口设计，以及注释，了解设计者的用意。spring的各个框架都运用了很多的设计模式，在学习源码的过程中，也大概了解了一些套路。spring也在必要的地方添加了适当的注释，避免了源码阅读者对于一些细节设计的理解产生偏差，让我更加感叹，spring不仅仅是一个工具框架，更像是一个艺术品。</p>","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>使用oauth2保护你的应用，可以分为简易的分为三个步骤</p>\n<ul>\n<li>配置资源服务器</li>\n<li>配置认证服务器</li>\n<li>配置spring security</li>\n</ul>\n<p>前两点是oauth2的主体内容，但前面我已经描述过了，spring security oauth2是建立在spring security基础之上的，所以有一些体系是公用的。</p>\n<p>oauth2根据使用场景不同，分成了4种模式</p>\n<ul>\n<li>授权码模式（authorization code）</li>\n<li>简化模式（implicit）</li>\n<li>密码模式（resource owner password credentials）</li>\n<li>客户端模式（client credentials）</li>\n</ul>\n<p>本文重点讲解接口对接中常使用的密码模式（以下简称password模式）和客户端模式（以下简称client模式）。授权码模式使用到了回调地址，是最为复杂的方式，通常网站中经常出现的微博，qq第三方登录，都会采用这个形式。简化模式不常用。</p>\n<h2 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h2><p>主要的maven依赖如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 注意是starter,自动配置 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 不是starter,手动配置 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security.oauth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-oauth2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 将token存储在redis中 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>我们给自己先定个目标，要干什么事？既然说到保护应用，那必须得先有一些资源，我们创建一个endpoint作为提供给外部的接口：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestEndpoints</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/product/&#123;id&#125;\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getProduct</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//for debug</span></div><div class=\"line\">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"product id : \"</span> + id;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/order/&#123;id&#125;\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getOrder</span><span class=\"params\">(@PathVariable String id)</span> </span>&#123;</div><div class=\"line\">\t    <span class=\"comment\">//for debug</span></div><div class=\"line\">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"order id : \"</span> + id;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>暴露一个商品查询接口，后续不做安全限制，一个订单查询接口，后续添加访问控制。</p>\n<h2 id=\"配置资源服务器和授权服务器\"><a href=\"#配置资源服务器和授权服务器\" class=\"headerlink\" title=\"配置资源服务器和授权服务器\"></a>配置资源服务器和授权服务器</h2><p>由于是两个oauth2的核心配置，我们放到一个配置类中。<br>为了方便下载代码直接运行，我这里将客户端信息放到了内存中，生产中可以配置到数据库中。token的存储一般选择使用redis，一是性能比较好，二是自动过期的机制，符合token的特性。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OAuth2ServerConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEMO_RESOURCE_ID = <span class=\"string\">\"order\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Configuration</span></div><div class=\"line\">    <span class=\"meta\">@EnableResourceServer</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceServerConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceServerConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ResourceServerSecurityConfigurer resources)</span> </span>&#123;</div><div class=\"line\">            resources.resourceId(DEMO_RESOURCE_ID).stateless(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// @formatter:off</span></div><div class=\"line\">            http</div><div class=\"line\">                    <span class=\"comment\">// Since we want the protected resources to be accessible in the UI as well we need</span></div><div class=\"line\">                    <span class=\"comment\">// session creation to be allowed (it's disabled by default in 2.0.6)</span></div><div class=\"line\">                    .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)</div><div class=\"line\">                    .and()</div><div class=\"line\">                    .requestMatchers().anyRequest()</div><div class=\"line\">                    .and()</div><div class=\"line\">                    .anonymous()</div><div class=\"line\">                    .and()</div><div class=\"line\">                    .authorizeRequests()</div><div class=\"line\"><span class=\"comment\">//                    .antMatchers(\"/product/**\").access(\"#oauth2.hasScope('select') and hasRole('ROLE_USER')\")</span></div><div class=\"line\">                    .antMatchers(<span class=\"string\">\"/order/**\"</span>).authenticated();<span class=\"comment\">//配置order访问控制，必须认证过后才可以访问</span></div><div class=\"line\">            <span class=\"comment\">// @formatter:on</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Configuration</span></div><div class=\"line\">    <span class=\"meta\">@EnableAuthorizationServer</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizationServerConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">AuthorizationServerConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Autowired</span></div><div class=\"line\">        AuthenticationManager authenticationManager;</div><div class=\"line\">        <span class=\"meta\">@Autowired</span></div><div class=\"line\">        RedisConnectionFactory redisConnectionFactory;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ClientDetailsServiceConfigurer clients)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//配置两个客户端,一个用于password认证一个用于client认证</span></div><div class=\"line\">            clients.inMemory().withClient(<span class=\"string\">\"client_1\"</span>)</div><div class=\"line\">                    .resourceIds(DEMO_RESOURCE_ID)</div><div class=\"line\">                    .authorizedGrantTypes(<span class=\"string\">\"client_credentials\"</span>, <span class=\"string\">\"refresh_token\"</span>)</div><div class=\"line\">                    .scopes(<span class=\"string\">\"select\"</span>)</div><div class=\"line\">                    .authorities(<span class=\"string\">\"client\"</span>)</div><div class=\"line\">                    .secret(<span class=\"string\">\"123456\"</span>)</div><div class=\"line\">                    .and().withClient(<span class=\"string\">\"client_2\"</span>)</div><div class=\"line\">                    .resourceIds(DEMO_RESOURCE_ID)</div><div class=\"line\">                    .authorizedGrantTypes(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"refresh_token\"</span>)</div><div class=\"line\">                    .scopes(<span class=\"string\">\"select\"</span>)</div><div class=\"line\">                    .authorities(<span class=\"string\">\"client\"</span>)</div><div class=\"line\">                    .secret(<span class=\"string\">\"123456\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            endpoints</div><div class=\"line\">                    .tokenStore(<span class=\"keyword\">new</span> RedisTokenStore(redisConnectionFactory))</div><div class=\"line\">                    .authenticationManager(authenticationManager);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerSecurityConfigurer oauthServer)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//允许表单认证</span></div><div class=\"line\">            oauthServer.allowFormAuthenticationForClients();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>简单说下spring security oauth2的认证思路。</p>\n<ul>\n<li><p>client模式，没有用户的概念，直接与认证服务器交互，用配置中的客户端信息去申请accessToken，客户端有自己的client_id,client_secret对应于用户的username,password，而客户端也拥有自己的authorities，当采取client模式认证时，对应的权限也就是客户端自己的authorities。</p>\n</li>\n<li><p>password模式，自己本身有一套用户体系，在认证时需要带上自己的用户名和密码，以及客户端的client_id,client_secret。此时，accessToken所包含的权限是用户本身的权限，而不是客户端的权限。</p>\n</li>\n</ul>\n<p>我对于两种模式的理解便是，如果你的系统已经有了一套用户体系，每个用户也有了一定的权限，可以采用password模式；如果仅仅是接口的对接，不考虑用户，则可以使用client模式。</p>\n<h2 id=\"配置spring-security\"><a href=\"#配置spring-security\" class=\"headerlink\" title=\"配置spring security\"></a>配置spring security</h2><p>在spring security的版本迭代中，产生了多种配置方式，建造者模式，适配器模式等等设计模式的使用，spring security内部的认证flow也是错综复杂，在我一开始学习ss也产生了不少困惑，总结了一下配置经验：使用了springboot之后，spring security其实是有不少自动配置的，我们可以仅仅修改自己需要的那一部分，并且遵循一个原则，直接覆盖最需要的那一部分。这一说法比较抽象，举个例子。比如配置内存中的用户认证器。有两种配置方式</p>\n<p>planA：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> UserDetailsService <span class=\"title\">userDetailsService</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    InMemoryUserDetailsManager manager = <span class=\"keyword\">new</span> InMemoryUserDetailsManager();</div><div class=\"line\">    manager.createUser(User.withUsername(<span class=\"string\">\"user_1\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>).build());</div><div class=\"line\">    manager.createUser(User.withUsername(<span class=\"string\">\"user_2\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>).build());</div><div class=\"line\">    <span class=\"keyword\">return</span> manager;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>planB：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        auth.inMemoryAuthentication()</div><div class=\"line\">                .withUser(<span class=\"string\">\"user_1\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>)</div><div class=\"line\">                .and()</div><div class=\"line\">                .withUser(<span class=\"string\">\"user_2\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Bean</span></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> AuthenticationManager <span class=\"title\">authenticationManagerBean</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">       AuthenticationManager manager = <span class=\"keyword\">super</span>.authenticationManagerBean();</div><div class=\"line\">        <span class=\"keyword\">return</span> manager;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你最终都能得到配置在内存中的两个用户，前者是直接替换掉了容器中的UserDetailsService，这么做比较直观；后者是替换了AuthenticationManager，当然你还会在SecurityConfiguration 复写其他配置，这么配置最终会由一个委托者去认证。如果你熟悉spring security，会知道AuthenticationManager和AuthenticationProvider以及UserDetailsService的关系，他们都是顶级的接口，实现类之间错综复杂的聚合关系…配置方式千差万别，但理解清楚认证流程，知道各个实现类对应的职责才是掌握spring security的关键。</p>\n<p>下面给出我最终的配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> UserDetailsService <span class=\"title\">userDetailsService</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        InMemoryUserDetailsManager manager = <span class=\"keyword\">new</span> InMemoryUserDetailsManager();</div><div class=\"line\">        manager.createUser(User.withUsername(<span class=\"string\">\"user_1\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>).build());</div><div class=\"line\">        manager.createUser(User.withUsername(<span class=\"string\">\"user_2\"</span>).password(<span class=\"string\">\"123456\"</span>).authorities(<span class=\"string\">\"USER\"</span>).build());</div><div class=\"line\">        <span class=\"keyword\">return</span> manager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// @formatter:off</span></div><div class=\"line\">        http</div><div class=\"line\">            .requestMatchers().anyRequest()</div><div class=\"line\">            .and()</div><div class=\"line\">                .authorizeRequests()</div><div class=\"line\">                .antMatchers(<span class=\"string\">\"/oauth/*\"</span>).permitAll();</div><div class=\"line\">        <span class=\"comment\">// @formatter:on</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重点就是配置了一个UserDetailsService，和ClientDetailsService一样，为了方便运行，使用内存中的用户，实际项目中，一般使用的是数据库保存用户，具体的实现类可以使用JdbcDaoImpl或者JdbcUserDetailsManager。</p>\n<h2 id=\"获取token\"><a href=\"#获取token\" class=\"headerlink\" title=\"获取token\"></a>获取token</h2><p>进行如上配置之后，启动springboot应用就可以发现多了一些自动创建的endpoints：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;[/oauth/authorize]&#125;</div><div class=\"line\">&#123;[/oauth/authorize],methods=[POST]</div><div class=\"line\">&#123;[/oauth/token],methods=[GET]&#125;</div><div class=\"line\">&#123;[/oauth/token],methods=[POST]&#125;</div><div class=\"line\">&#123;[/oauth/check_token]&#125;</div><div class=\"line\">&#123;[/oauth/error]&#125;</div></pre></td></tr></table></figure>\n<p>重点关注一下/oauth/token，它是获取的token的endpoint。启动springboot应用之后，使用http工具访问<br>password模式：</p>\n<p><code>http://localhost:8080/oauth/token?username=user_1&amp;password=123456&amp;grant_type=password&amp;scope=select&amp;client_id=client_2&amp;client_secret=123456</code></p>\n<p>响应如下：<br><code>{&quot;access_token&quot;:&quot;950a7cc9-5a8a-42c9-a693-40e817b1a4b0&quot;,&quot;token_type&quot;:&quot;bearer&quot;,&quot;refresh_token&quot;:&quot;773a0fcd-6023-45f8-8848-e141296cb3cb&quot;,&quot;expires_in&quot;:27036,&quot;scope&quot;:&quot;select&quot;}</code></p>\n<p>client模式：<br><code>http://localhost:8080/oauth/token?grant_type=client_credentials&amp;scope=select&amp;client_id=client_1&amp;client_secret=123456</code></p>\n<p>响应如下：<br><code>{&quot;access_token&quot;:&quot;56465b41-429d-436c-ad8d-613d476ff322&quot;,&quot;token_type&quot;:&quot;bearer&quot;,&quot;expires_in&quot;:25074,&quot;scope&quot;:&quot;select&quot;}</code></p>\n<p>在配置中，我们已经配置了对order资源的保护，如果直接访问:<code>http://localhost:8080/order/1</code>会得到这样的响应:<code>{&quot;error&quot;:&quot;unauthorized&quot;,&quot;error_description&quot;:&quot;Full authentication is required to access this resource&quot;}</code><br>（这样的错误响应可以通过重写配置来修改）</p>\n<p>而对于未受保护的product资源<code>http://localhost:8080/product/1</code>则可以直接访问，得到响应<code>product id : 1</code></p>\n<p>携带accessToken参数访问受保护的资源：</p>\n<p>使用password模式获得的token:<code>http://localhost:8080/order/1?access_token=950a7cc9-5a8a-42c9-a693-40e817b1a4b0</code>，得到了之前匿名访问无法获取的资源：<code>order id : 1</code></p>\n<p>使用client模式获得的token:<code>http://localhost:8080/order/1?access_token=56465b41-429d-436c-ad8d-613d476ff322</code>，同上的响应<code>order id : 1</code></p>\n<p>我们重点关注一下debug后，对资源访问时系统记录的用户认证信息，可以看到如下的debug信息</p>\n<p>password模式：<br><img src=\"http://img.blog.csdn.net/20170808145230975?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"password模式\"></p>\n<p>client模式：<br><img src=\"http://img.blog.csdn.net/20170808145304794?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"client模式\"></p>\n<p>和我们的配置是一致的，仔细看可以发现两者的身份有些许的不同。想要查看更多的debug信息，可以选择下载demo代码自己查看，为了方便读者调试和验证，我去除了很多复杂的特性，基本实现了一个最简配置，涉及到数据库的地方也尽量配置到了内存中，这点记住在实际使用时一定要修改。</p>\n<p>到这儿，一个简单的oauth2入门示例就完成了，一个简单的配置教程。token的工作原理是什么，它包含了哪些信息？spring内部如何对身份信息进行验证？以及上述的配置到底影响了什么？这些内容会放到后面的文章中去分析。</p>\n<h2 id=\"示例代码下载\"><a href=\"#示例代码下载\" class=\"headerlink\" title=\"示例代码下载\"></a>示例代码下载</h2><p>全部的代码可以在我的github上进行下载，项目使用springboot+maven构建：<br><a href=\"https://github.com/lexburner/oauth2-demo\" target=\"_blank\" rel=\"external\">https://github.com/lexburner/oauth2-demo</a></p>"},{"title":"Re：从零开始的Spring Security OAuth2（三）","date":"2017-08-10T06:22:12.000Z","_content":"\n\n\n上一篇文章中我们介绍了获取token的流程，这一篇重点分析一下，携带token访问受限资源时，内部的工作流程。\n\n## @EnableResourceServer与@EnableAuthorizationServer\n还记得我们在第一节中就介绍过了OAuth2的两个核心概念，资源服务器与身份认证服务器。我们对两个注解进行配置的同时，到底触发了内部的什么相关配置呢？\n\n上一篇文章重点介绍的其实是与身份认证相关的流程，即如果获取token，而本节要分析的携带token访问受限资源，自然便是与@EnableResourceServer相关的资源服务器配置了。\n\n我们注意到其相关配置类是ResourceServerConfigurer，内部关联了ResourceServerSecurityConfigurer和HttpSecurity。前者与资源安全配置相关，后者与http安全配置相关。（类名比较类似，注意区分，以Adapter结尾的是适配器，以Configurer结尾的是配置器，以Builder结尾的是建造器，他们分别代表不同的设计模式，对设计模式有所了解可以更加方便理解其设计思路）\n\n\n```java\npublic class ResourceServerConfigurerAdapter implements ResourceServerConfigurer {\n\t@Override\n\tpublic void configure(ResourceServerSecurityConfigurer resources <1> ) throws Exception {\n\t}\n\n\t@Override\n\tpublic void configure(HttpSecurity http) throws Exception {\n\t\thttp.authorizeRequests().anyRequest().authenticated();\n\t}\n\n}\n```\n\n<1> ResourceServerSecurityConfigurer显然便是我们分析的重点了。\n\n<!-- more -->\n\n## ResourceServerSecurityConfigurer（了解）\n\n其核心配置如下所示：\n\n\n```java\npublic void configure(HttpSecurity http) throws Exception {\n\tAuthenticationManager oauthAuthenticationManager = oauthAuthenticationManager(http);\n\tresourcesServerFilter = new OAuth2AuthenticationProcessingFilter();//<1>\n\tresourcesServerFilter.setAuthenticationEntryPoint(authenticationEntryPoint);\n\tresourcesServerFilter.setAuthenticationManager(oauthAuthenticationManager);//<2>\n\tif (eventPublisher != null) {\n\t\tresourcesServerFilter.setAuthenticationEventPublisher(eventPublisher);\n\t}\n\tif (tokenExtractor != null) {\n\t\tresourcesServerFilter.setTokenExtractor(tokenExtractor);//<3>\n\t}\n\tresourcesServerFilter = postProcess(resourcesServerFilter);\n\tresourcesServerFilter.setStateless(stateless);\n\n\t// @formatter:off\n\thttp\n\t\t.authorizeRequests().expressionHandler(expressionHandler)\n\t.and()\n\t\t.addFilterBefore(resourcesServerFilter, AbstractPreAuthenticatedProcessingFilter.class)\n\t\t.exceptionHandling()\n\t\t\t.accessDeniedHandler(accessDeniedHandler)//<4>\n\t\t\t.authenticationEntryPoint(authenticationEntryPoint);\n\t// @formatter:on\n}\n```\n\n这段是整个oauth2与HttpSecurity相关的核心配置，其中有非常多的注意点，顺带的都强调一下：\n\n<1> 创建OAuth2AuthenticationProcessingFilter，即下一节所要介绍的OAuth2核心过滤器。\n\n<2> 为OAuth2AuthenticationProcessingFilter提供固定的AuthenticationManager即OAuth2AuthenticationManager，它并没有将OAuth2AuthenticationManager添加到spring的容器中，不然可能会影响spring security的普通认证流程（非oauth2请求），只有被OAuth2AuthenticationProcessingFilter拦截到的oauth2相关请求才被特殊的身份认证器处理。\n\n<3> 设置了TokenExtractor默认的实现----BearerTokenExtractor，这个类在下一节介绍。\n\n<4> 相关的异常处理器，可以重写相关实现，达到自定义异常的目的。\n\n还记得我们在一开始的配置中配置了资源服务器，是它触发了相关的配置。\n```java\n@Configuration\n@EnableResourceServer\nprotected static class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {}\n```\n\n\n## 核心过滤器 OAuth2AuthenticationProcessingFilter（掌握）\n回顾一下我们之前是如何携带token访问受限资源的：\n`http://localhost:8080/order/1?access_token=950a7cc9-5a8a-42c9-a693-40e817b1a4b0`\n唯一的身份凭证，便是这个access_token，携带它进行访问，会进入OAuth2AuthenticationProcessingFilter之中，其核心代码如下：\n\n\n```java\npublic void doFilter(ServletRequest req, ServletResponse res, FilterChain chain){\n\tfinal HttpServletRequest request = (HttpServletRequest) req;\n\tfinal HttpServletResponse response = (HttpServletResponse) res;\n\n\ttry {\n\t\t//从请求中取出身份信息，即access_token\n\t\tAuthentication authentication = tokenExtractor.extract(request);\n\t\t\n\t\tif (authentication == null) {\n\t\t\t...\n\t\t}\n\t\telse {\n\t\t\trequest.setAttribute(OAuth2AuthenticationDetails.ACCESS_TOKEN_VALUE, authentication.getPrincipal());\n\t\t\tif (authentication instanceof AbstractAuthenticationToken) {\n\t\t\t\tAbstractAuthenticationToken needsDetails = (AbstractAuthenticationToken) authentication;\n\t\t\t\tneedsDetails.setDetails(authenticationDetailsSource.buildDetails(request));\n\t\t\t}\n\t\t\t//认证身份\n\t\t\tAuthentication authResult = authenticationManager.authenticate(authentication);\n\t\t\t...\n\t\t\teventPublisher.publishAuthenticationSuccess(authResult);\n\t\t\t//将身份信息绑定到SecurityContextHolder中\n\t\t\tSecurityContextHolder.getContext().setAuthentication(authResult);\n\t\t}\n\t}\n\tcatch (OAuth2Exception failed) {\n\t\t...\n\t\treturn;\n\t}\n\n\tchain.doFilter(request, response);\n}\n```\n整个过滤器便是oauth2身份鉴定的关键，在源码中，对这个类有一段如下的描述\n\n>A pre-authentication filter for OAuth2 protected resources. Extracts an OAuth2 token from the incoming request and uses it to populate the Spring Security context with an {@link OAuth2Authentication} (if used in conjunction with an {@link OAuth2AuthenticationManager}).  OAuth2保护资源的预先认证过滤器。如果与OAuth2AuthenticationManager结合使用，则会从到来的请求之中提取一个OAuth2 token，之后使用OAuth2Authentication来填充Spring Security上下文。\n\n\n其中涉及到了两个关键的类TokenExtractor，AuthenticationManager。相信后者这个接口大家已经不陌生，但前面这个类之前还未出现在我们的视野中。\n\n\n\n## OAuth2的身份管理器--OAuth2AuthenticationManager（掌握）\n\n在之前的OAuth2核心过滤器中出现的AuthenticationManager其实在我们意料之中，携带access_token必定得经过身份认证，但是在我们debug进入其中后，发现了一个出乎意料的事，AuthenticationManager的实现类并不是我们在前面文章中聊到的常用实现类ProviderManager，而是OAuth2AuthenticationManager。\n\n![OAuth2AuthenticationManager](http://img.blog.csdn.net/20170810122532720?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n<div align=center>\n图1 新的AuthenticationManager实现类OAuth2AuthenticationManager\n</div>\n\n回顾我们第一篇文章的配置，压根没有出现过这个OAuth2AuthenticationManager，并且它脱离了我们熟悉的认证流程（第二篇文章中的认证管理器UML图是一张经典的spring security结构类图），它直接重写了容器的顶级身份认证接口，内部维护了一个ClientDetailService和ResourceServerTokenServices，这两个核心类在 Re：从零开始的Spring Security Oauth2（二）有分析过。在ResourceServerSecurityConfigurer的小节中我们已经知晓了它是如何被框架自动配置的，这里要强调的是OAuth2AuthenticationManager是密切与token认证相关的，而不是与获取token密切相关的。\n\n其判别身份的关键代码如下：\n\n\n```java\npublic Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\t...\n\tString token = (String) authentication.getPrincipal();\n\t//最终还是借助tokenServices根据token加载身份信息\n\tOAuth2Authentication auth = tokenServices.loadAuthentication(token);\n\t...\n\n\tcheckClientDetails(auth);\n\n\tif (authentication.getDetails() instanceof OAuth2AuthenticationDetails) {\n\t\tOAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) authentication.getDetails();\n\t\t...\n\t}\n\tauth.setDetails(authentication.getDetails());\n\tauth.setAuthenticated(true);\n\treturn auth;\n\n}\n```\n\n说到tokenServices这个密切与token相关的接口，这里要强调下，避免产生误解。tokenServices分为两类，一个是用在AuthenticationServer端，第二篇文章中介绍的\n\n```java\npublic interface AuthorizationServerTokenServices {\n    //创建token\n    OAuth2AccessToken createAccessToken(OAuth2Authentication authentication) throws AuthenticationException;\n    //刷新token\n    OAuth2AccessToken refreshAccessToken(String refreshToken, TokenRequest tokenRequest)\n            throws AuthenticationException;\n    //获取token\n    OAuth2AccessToken getAccessToken(OAuth2Authentication authentication);\n}\n```\n而在ResourceServer端有自己的tokenServices接口：\n\n\n```java\npublic interface ResourceServerTokenServices {\n\t//根据accessToken加载客户端信息\n\tOAuth2Authentication loadAuthentication(String accessToken) throws AuthenticationException, InvalidTokenException;\n\n\t//根据accessToken获取完整的访问令牌详细信息。\n\tOAuth2AccessToken readAccessToken(String accessToken);\n\n}\n```\n具体内部如何加载，和AuthorizationServer大同小异，只是从tokenStore中取出相应身份的流程有点区别，不再详细看实现类了。\n\n## TokenExtractor（了解）\n\n这个接口只有一个实现类，而且代码非常简单\n\n\n```java\npublic class BearerTokenExtractor implements TokenExtractor {\n\tprivate final static Log logger = LogFactory.getLog(BearerTokenExtractor.class);\n\t@Override\n\tpublic Authentication extract(HttpServletRequest request) {\n\t\tString tokenValue = extractToken(request);\n\t\tif (tokenValue != null) {\n\t\t\tPreAuthenticatedAuthenticationToken authentication = new PreAuthenticatedAuthenticationToken(tokenValue, \"\");\n\t\t\treturn authentication;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprotected String extractToken(HttpServletRequest request) {\n\t\t// first check the header...\n\t\tString token = extractHeaderToken(request);\n\n\t\t// bearer type allows a request parameter as well\n\t\tif (token == null) {\n\t\t\t...\n\t\t\t//从requestParameter中获取token\n\t\t}\n\n\t\treturn token;\n\t}\n\n/**\n\t * Extract the OAuth bearer token from a header.\n\t */\n\tprotected String extractHeaderToken(HttpServletRequest request) {\n\t\tEnumeration<String> headers = request.getHeaders(\"Authorization\");\n\t\twhile (headers.hasMoreElements()) { // typically there is only one (most servers enforce that)\n\t\t\t...\n\t\t\t//从Header中获取token\n\t\t}\n\t\treturn null;\n\t}\n\n}\n```\n它的作用在于分离出请求中包含的token。也启示了我们可以使用多种方式携带token。\n1 在Header中携带\n\n```\nhttp://localhost:8080/order/1\nHeader：\nAuthentication：Bearer f732723d-af7f-41bb-bd06-2636ab2be135\n```\n\n2 拼接在url中作为requestParam\n\n```\nhttp://localhost:8080/order/1?access_token=f732723d-af7f-41bb-bd06-2636ab2be135\n```\n\n3 在form表单中携带\n\n```\nhttp://localhost:8080/order/1\nform param：\naccess_token=f732723d-af7f-41bb-bd06-2636ab2be135\n```\n\n## 异常处理\n\nOAuth2在资源服务器端的异常处理不算特别完善，但基本够用，如果想要重写异常机制，可以直接替换掉相关的Handler，如权限相关的AccessDeniedHandler。具体的配置应该在@EnableResourceServer中被覆盖，这是适配器+配置器的好处。\n\n## 总结\n\n到这儿，Spring Security OAuth2的整个内部流程就算是分析结束了。本系列的文章只能算是揭示一个大概的流程，重点还是介绍相关设计+接口，想要了解更多的细节，需要自己去翻看源码，研究各个实现类。在分析源码过程中总结出的一点经验，与君共勉：\n\n1. 先掌握宏观，如研究UML类图，搞清楚关联\n2. 分析顶级接口，设计是面向接口的，不重要的部分，具体实现类甚至都可以忽略\n\n3. 学会对比，如ResourceServer和AuthenticationServer是一种对称的设计，整个框架内部的类非常多，但分门别类的记忆，会加深记忆。如ResourceServerTokenServices ，AuthenticationServerTokenServices就一定是作用相关，但所属领域不同的两个接口\n\n4. 熟悉设计模式，spring中涉及了大量的设计模式，在框架的设计中也是遵循着设计模式的规范，如以Adapter结尾，便是运用了适配器模式；以Factory结尾，便是运用了适配器模式；Template结尾，便是运用了模板方法模式；Builder结尾，便是运用了建造者模式...\n\n5. 一点自己的理解：对源码的理解和灵感，这一切都建立自身的编码经验之上，自己遵循规范便能更好的理解别人同样遵守规范的代码。相对的，阅读好的源码，也能帮助我们自身提升编码规范。\n\n","source":"_posts/Re：从零开始的Spring Security OAuth2（三）.md","raw":"---\ntitle:\tRe：从零开始的Spring Security OAuth2（三）\ndate: 2017-08-10 14:22:12\ntags: \n- Spring Security OAuth2\ncategories: \n- Spring Security OAuth2\n---\n\n\n\n上一篇文章中我们介绍了获取token的流程，这一篇重点分析一下，携带token访问受限资源时，内部的工作流程。\n\n## @EnableResourceServer与@EnableAuthorizationServer\n还记得我们在第一节中就介绍过了OAuth2的两个核心概念，资源服务器与身份认证服务器。我们对两个注解进行配置的同时，到底触发了内部的什么相关配置呢？\n\n上一篇文章重点介绍的其实是与身份认证相关的流程，即如果获取token，而本节要分析的携带token访问受限资源，自然便是与@EnableResourceServer相关的资源服务器配置了。\n\n我们注意到其相关配置类是ResourceServerConfigurer，内部关联了ResourceServerSecurityConfigurer和HttpSecurity。前者与资源安全配置相关，后者与http安全配置相关。（类名比较类似，注意区分，以Adapter结尾的是适配器，以Configurer结尾的是配置器，以Builder结尾的是建造器，他们分别代表不同的设计模式，对设计模式有所了解可以更加方便理解其设计思路）\n\n\n```java\npublic class ResourceServerConfigurerAdapter implements ResourceServerConfigurer {\n\t@Override\n\tpublic void configure(ResourceServerSecurityConfigurer resources <1> ) throws Exception {\n\t}\n\n\t@Override\n\tpublic void configure(HttpSecurity http) throws Exception {\n\t\thttp.authorizeRequests().anyRequest().authenticated();\n\t}\n\n}\n```\n\n<1> ResourceServerSecurityConfigurer显然便是我们分析的重点了。\n\n<!-- more -->\n\n## ResourceServerSecurityConfigurer（了解）\n\n其核心配置如下所示：\n\n\n```java\npublic void configure(HttpSecurity http) throws Exception {\n\tAuthenticationManager oauthAuthenticationManager = oauthAuthenticationManager(http);\n\tresourcesServerFilter = new OAuth2AuthenticationProcessingFilter();//<1>\n\tresourcesServerFilter.setAuthenticationEntryPoint(authenticationEntryPoint);\n\tresourcesServerFilter.setAuthenticationManager(oauthAuthenticationManager);//<2>\n\tif (eventPublisher != null) {\n\t\tresourcesServerFilter.setAuthenticationEventPublisher(eventPublisher);\n\t}\n\tif (tokenExtractor != null) {\n\t\tresourcesServerFilter.setTokenExtractor(tokenExtractor);//<3>\n\t}\n\tresourcesServerFilter = postProcess(resourcesServerFilter);\n\tresourcesServerFilter.setStateless(stateless);\n\n\t// @formatter:off\n\thttp\n\t\t.authorizeRequests().expressionHandler(expressionHandler)\n\t.and()\n\t\t.addFilterBefore(resourcesServerFilter, AbstractPreAuthenticatedProcessingFilter.class)\n\t\t.exceptionHandling()\n\t\t\t.accessDeniedHandler(accessDeniedHandler)//<4>\n\t\t\t.authenticationEntryPoint(authenticationEntryPoint);\n\t// @formatter:on\n}\n```\n\n这段是整个oauth2与HttpSecurity相关的核心配置，其中有非常多的注意点，顺带的都强调一下：\n\n<1> 创建OAuth2AuthenticationProcessingFilter，即下一节所要介绍的OAuth2核心过滤器。\n\n<2> 为OAuth2AuthenticationProcessingFilter提供固定的AuthenticationManager即OAuth2AuthenticationManager，它并没有将OAuth2AuthenticationManager添加到spring的容器中，不然可能会影响spring security的普通认证流程（非oauth2请求），只有被OAuth2AuthenticationProcessingFilter拦截到的oauth2相关请求才被特殊的身份认证器处理。\n\n<3> 设置了TokenExtractor默认的实现----BearerTokenExtractor，这个类在下一节介绍。\n\n<4> 相关的异常处理器，可以重写相关实现，达到自定义异常的目的。\n\n还记得我们在一开始的配置中配置了资源服务器，是它触发了相关的配置。\n```java\n@Configuration\n@EnableResourceServer\nprotected static class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {}\n```\n\n\n## 核心过滤器 OAuth2AuthenticationProcessingFilter（掌握）\n回顾一下我们之前是如何携带token访问受限资源的：\n`http://localhost:8080/order/1?access_token=950a7cc9-5a8a-42c9-a693-40e817b1a4b0`\n唯一的身份凭证，便是这个access_token，携带它进行访问，会进入OAuth2AuthenticationProcessingFilter之中，其核心代码如下：\n\n\n```java\npublic void doFilter(ServletRequest req, ServletResponse res, FilterChain chain){\n\tfinal HttpServletRequest request = (HttpServletRequest) req;\n\tfinal HttpServletResponse response = (HttpServletResponse) res;\n\n\ttry {\n\t\t//从请求中取出身份信息，即access_token\n\t\tAuthentication authentication = tokenExtractor.extract(request);\n\t\t\n\t\tif (authentication == null) {\n\t\t\t...\n\t\t}\n\t\telse {\n\t\t\trequest.setAttribute(OAuth2AuthenticationDetails.ACCESS_TOKEN_VALUE, authentication.getPrincipal());\n\t\t\tif (authentication instanceof AbstractAuthenticationToken) {\n\t\t\t\tAbstractAuthenticationToken needsDetails = (AbstractAuthenticationToken) authentication;\n\t\t\t\tneedsDetails.setDetails(authenticationDetailsSource.buildDetails(request));\n\t\t\t}\n\t\t\t//认证身份\n\t\t\tAuthentication authResult = authenticationManager.authenticate(authentication);\n\t\t\t...\n\t\t\teventPublisher.publishAuthenticationSuccess(authResult);\n\t\t\t//将身份信息绑定到SecurityContextHolder中\n\t\t\tSecurityContextHolder.getContext().setAuthentication(authResult);\n\t\t}\n\t}\n\tcatch (OAuth2Exception failed) {\n\t\t...\n\t\treturn;\n\t}\n\n\tchain.doFilter(request, response);\n}\n```\n整个过滤器便是oauth2身份鉴定的关键，在源码中，对这个类有一段如下的描述\n\n>A pre-authentication filter for OAuth2 protected resources. Extracts an OAuth2 token from the incoming request and uses it to populate the Spring Security context with an {@link OAuth2Authentication} (if used in conjunction with an {@link OAuth2AuthenticationManager}).  OAuth2保护资源的预先认证过滤器。如果与OAuth2AuthenticationManager结合使用，则会从到来的请求之中提取一个OAuth2 token，之后使用OAuth2Authentication来填充Spring Security上下文。\n\n\n其中涉及到了两个关键的类TokenExtractor，AuthenticationManager。相信后者这个接口大家已经不陌生，但前面这个类之前还未出现在我们的视野中。\n\n\n\n## OAuth2的身份管理器--OAuth2AuthenticationManager（掌握）\n\n在之前的OAuth2核心过滤器中出现的AuthenticationManager其实在我们意料之中，携带access_token必定得经过身份认证，但是在我们debug进入其中后，发现了一个出乎意料的事，AuthenticationManager的实现类并不是我们在前面文章中聊到的常用实现类ProviderManager，而是OAuth2AuthenticationManager。\n\n![OAuth2AuthenticationManager](http://img.blog.csdn.net/20170810122532720?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n<div align=center>\n图1 新的AuthenticationManager实现类OAuth2AuthenticationManager\n</div>\n\n回顾我们第一篇文章的配置，压根没有出现过这个OAuth2AuthenticationManager，并且它脱离了我们熟悉的认证流程（第二篇文章中的认证管理器UML图是一张经典的spring security结构类图），它直接重写了容器的顶级身份认证接口，内部维护了一个ClientDetailService和ResourceServerTokenServices，这两个核心类在 Re：从零开始的Spring Security Oauth2（二）有分析过。在ResourceServerSecurityConfigurer的小节中我们已经知晓了它是如何被框架自动配置的，这里要强调的是OAuth2AuthenticationManager是密切与token认证相关的，而不是与获取token密切相关的。\n\n其判别身份的关键代码如下：\n\n\n```java\npublic Authentication authenticate(Authentication authentication) throws AuthenticationException {\n\t...\n\tString token = (String) authentication.getPrincipal();\n\t//最终还是借助tokenServices根据token加载身份信息\n\tOAuth2Authentication auth = tokenServices.loadAuthentication(token);\n\t...\n\n\tcheckClientDetails(auth);\n\n\tif (authentication.getDetails() instanceof OAuth2AuthenticationDetails) {\n\t\tOAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) authentication.getDetails();\n\t\t...\n\t}\n\tauth.setDetails(authentication.getDetails());\n\tauth.setAuthenticated(true);\n\treturn auth;\n\n}\n```\n\n说到tokenServices这个密切与token相关的接口，这里要强调下，避免产生误解。tokenServices分为两类，一个是用在AuthenticationServer端，第二篇文章中介绍的\n\n```java\npublic interface AuthorizationServerTokenServices {\n    //创建token\n    OAuth2AccessToken createAccessToken(OAuth2Authentication authentication) throws AuthenticationException;\n    //刷新token\n    OAuth2AccessToken refreshAccessToken(String refreshToken, TokenRequest tokenRequest)\n            throws AuthenticationException;\n    //获取token\n    OAuth2AccessToken getAccessToken(OAuth2Authentication authentication);\n}\n```\n而在ResourceServer端有自己的tokenServices接口：\n\n\n```java\npublic interface ResourceServerTokenServices {\n\t//根据accessToken加载客户端信息\n\tOAuth2Authentication loadAuthentication(String accessToken) throws AuthenticationException, InvalidTokenException;\n\n\t//根据accessToken获取完整的访问令牌详细信息。\n\tOAuth2AccessToken readAccessToken(String accessToken);\n\n}\n```\n具体内部如何加载，和AuthorizationServer大同小异，只是从tokenStore中取出相应身份的流程有点区别，不再详细看实现类了。\n\n## TokenExtractor（了解）\n\n这个接口只有一个实现类，而且代码非常简单\n\n\n```java\npublic class BearerTokenExtractor implements TokenExtractor {\n\tprivate final static Log logger = LogFactory.getLog(BearerTokenExtractor.class);\n\t@Override\n\tpublic Authentication extract(HttpServletRequest request) {\n\t\tString tokenValue = extractToken(request);\n\t\tif (tokenValue != null) {\n\t\t\tPreAuthenticatedAuthenticationToken authentication = new PreAuthenticatedAuthenticationToken(tokenValue, \"\");\n\t\t\treturn authentication;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprotected String extractToken(HttpServletRequest request) {\n\t\t// first check the header...\n\t\tString token = extractHeaderToken(request);\n\n\t\t// bearer type allows a request parameter as well\n\t\tif (token == null) {\n\t\t\t...\n\t\t\t//从requestParameter中获取token\n\t\t}\n\n\t\treturn token;\n\t}\n\n/**\n\t * Extract the OAuth bearer token from a header.\n\t */\n\tprotected String extractHeaderToken(HttpServletRequest request) {\n\t\tEnumeration<String> headers = request.getHeaders(\"Authorization\");\n\t\twhile (headers.hasMoreElements()) { // typically there is only one (most servers enforce that)\n\t\t\t...\n\t\t\t//从Header中获取token\n\t\t}\n\t\treturn null;\n\t}\n\n}\n```\n它的作用在于分离出请求中包含的token。也启示了我们可以使用多种方式携带token。\n1 在Header中携带\n\n```\nhttp://localhost:8080/order/1\nHeader：\nAuthentication：Bearer f732723d-af7f-41bb-bd06-2636ab2be135\n```\n\n2 拼接在url中作为requestParam\n\n```\nhttp://localhost:8080/order/1?access_token=f732723d-af7f-41bb-bd06-2636ab2be135\n```\n\n3 在form表单中携带\n\n```\nhttp://localhost:8080/order/1\nform param：\naccess_token=f732723d-af7f-41bb-bd06-2636ab2be135\n```\n\n## 异常处理\n\nOAuth2在资源服务器端的异常处理不算特别完善，但基本够用，如果想要重写异常机制，可以直接替换掉相关的Handler，如权限相关的AccessDeniedHandler。具体的配置应该在@EnableResourceServer中被覆盖，这是适配器+配置器的好处。\n\n## 总结\n\n到这儿，Spring Security OAuth2的整个内部流程就算是分析结束了。本系列的文章只能算是揭示一个大概的流程，重点还是介绍相关设计+接口，想要了解更多的细节，需要自己去翻看源码，研究各个实现类。在分析源码过程中总结出的一点经验，与君共勉：\n\n1. 先掌握宏观，如研究UML类图，搞清楚关联\n2. 分析顶级接口，设计是面向接口的，不重要的部分，具体实现类甚至都可以忽略\n\n3. 学会对比，如ResourceServer和AuthenticationServer是一种对称的设计，整个框架内部的类非常多，但分门别类的记忆，会加深记忆。如ResourceServerTokenServices ，AuthenticationServerTokenServices就一定是作用相关，但所属领域不同的两个接口\n\n4. 熟悉设计模式，spring中涉及了大量的设计模式，在框架的设计中也是遵循着设计模式的规范，如以Adapter结尾，便是运用了适配器模式；以Factory结尾，便是运用了适配器模式；Template结尾，便是运用了模板方法模式；Builder结尾，便是运用了建造者模式...\n\n5. 一点自己的理解：对源码的理解和灵感，这一切都建立自身的编码经验之上，自己遵循规范便能更好的理解别人同样遵守规范的代码。相对的，阅读好的源码，也能帮助我们自身提升编码规范。\n\n","slug":"Re：从零开始的Spring Security OAuth2（三）","published":1,"updated":"2017-09-04T11:49:26.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zrm0003twv7m1ijx9sd","content":"<p>上一篇文章中我们介绍了获取token的流程，这一篇重点分析一下，携带token访问受限资源时，内部的工作流程。</p>\n<h2 id=\"EnableResourceServer与-EnableAuthorizationServer\"><a href=\"#EnableResourceServer与-EnableAuthorizationServer\" class=\"headerlink\" title=\"@EnableResourceServer与@EnableAuthorizationServer\"></a>@EnableResourceServer与@EnableAuthorizationServer</h2><p>还记得我们在第一节中就介绍过了OAuth2的两个核心概念，资源服务器与身份认证服务器。我们对两个注解进行配置的同时，到底触发了内部的什么相关配置呢？</p>\n<p>上一篇文章重点介绍的其实是与身份认证相关的流程，即如果获取token，而本节要分析的携带token访问受限资源，自然便是与@EnableResourceServer相关的资源服务器配置了。</p>\n<p>我们注意到其相关配置类是ResourceServerConfigurer，内部关联了ResourceServerSecurityConfigurer和HttpSecurity。前者与资源安全配置相关，后者与http安全配置相关。（类名比较类似，注意区分，以Adapter结尾的是适配器，以Configurer结尾的是配置器，以Builder结尾的是建造器，他们分别代表不同的设计模式，对设计模式有所了解可以更加方便理解其设计思路）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceServerConfigurerAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResourceServerConfigurer</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ResourceServerSecurityConfigurer resources &lt;<span class=\"number\">1</span>&gt; )</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\thttp.authorizeRequests().anyRequest().authenticated();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> ResourceServerSecurityConfigurer显然便是我们分析的重点了。</1></p>\n<a id=\"more\"></a>\n<h2 id=\"ResourceServerSecurityConfigurer（了解）\"><a href=\"#ResourceServerSecurityConfigurer（了解）\" class=\"headerlink\" title=\"ResourceServerSecurityConfigurer（了解）\"></a>ResourceServerSecurityConfigurer（了解）</h2><p>其核心配置如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\tAuthenticationManager oauthAuthenticationManager = oauthAuthenticationManager(http);</div><div class=\"line\">\tresourcesServerFilter = <span class=\"keyword\">new</span> OAuth2AuthenticationProcessingFilter();<span class=\"comment\">//&lt;1&gt;</span></div><div class=\"line\">\tresourcesServerFilter.setAuthenticationEntryPoint(authenticationEntryPoint);</div><div class=\"line\">\tresourcesServerFilter.setAuthenticationManager(oauthAuthenticationManager);<span class=\"comment\">//&lt;2&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (eventPublisher != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tresourcesServerFilter.setAuthenticationEventPublisher(eventPublisher);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (tokenExtractor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tresourcesServerFilter.setTokenExtractor(tokenExtractor);<span class=\"comment\">//&lt;3&gt;</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tresourcesServerFilter = postProcess(resourcesServerFilter);</div><div class=\"line\">\tresourcesServerFilter.setStateless(stateless);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// @formatter:off</span></div><div class=\"line\">\thttp</div><div class=\"line\">\t\t.authorizeRequests().expressionHandler(expressionHandler)</div><div class=\"line\">\t.and()</div><div class=\"line\">\t\t.addFilterBefore(resourcesServerFilter, AbstractPreAuthenticatedProcessingFilter.class)</div><div class=\"line\">\t\t.exceptionHandling()</div><div class=\"line\">\t\t\t.accessDeniedHandler(accessDeniedHandler)<span class=\"comment\">//&lt;4&gt;</span></div><div class=\"line\">\t\t\t.authenticationEntryPoint(authenticationEntryPoint);</div><div class=\"line\">\t<span class=\"comment\">// @formatter:on</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段是整个oauth2与HttpSecurity相关的核心配置，其中有非常多的注意点，顺带的都强调一下：</p>\n<p><1> 创建OAuth2AuthenticationProcessingFilter，即下一节所要介绍的OAuth2核心过滤器。</1></p>\n<p><2> 为OAuth2AuthenticationProcessingFilter提供固定的AuthenticationManager即OAuth2AuthenticationManager，它并没有将OAuth2AuthenticationManager添加到spring的容器中，不然可能会影响spring security的普通认证流程（非oauth2请求），只有被OAuth2AuthenticationProcessingFilter拦截到的oauth2相关请求才被特殊的身份认证器处理。</2></p>\n<p><3> 设置了TokenExtractor默认的实现—-BearerTokenExtractor，这个类在下一节介绍。</3></p>\n<p><4> 相关的异常处理器，可以重写相关实现，达到自定义异常的目的。</4></p>\n<p>还记得我们在一开始的配置中配置了资源服务器，是它触发了相关的配置。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableResourceServer</span></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceServerConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceServerConfigurerAdapter</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"核心过滤器-OAuth2AuthenticationProcessingFilter（掌握）\"><a href=\"#核心过滤器-OAuth2AuthenticationProcessingFilter（掌握）\" class=\"headerlink\" title=\"核心过滤器 OAuth2AuthenticationProcessingFilter（掌握）\"></a>核心过滤器 OAuth2AuthenticationProcessingFilter（掌握）</h2><p>回顾一下我们之前是如何携带token访问受限资源的：<br><code>http://localhost:8080/order/1?access_token=950a7cc9-5a8a-42c9-a693-40e817b1a4b0</code><br>唯一的身份凭证，便是这个access_token，携带它进行访问，会进入OAuth2AuthenticationProcessingFilter之中，其核心代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> HttpServletRequest request = (HttpServletRequest) req;</div><div class=\"line\">\t<span class=\"keyword\">final</span> HttpServletResponse response = (HttpServletResponse) res;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//从请求中取出身份信息，即access_token</span></div><div class=\"line\">\t\tAuthentication authentication = tokenExtractor.extract(request);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (authentication == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t...</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\trequest.setAttribute(OAuth2AuthenticationDetails.ACCESS_TOKEN_VALUE, authentication.getPrincipal());</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (authentication <span class=\"keyword\">instanceof</span> AbstractAuthenticationToken) &#123;</div><div class=\"line\">\t\t\t\tAbstractAuthenticationToken needsDetails = (AbstractAuthenticationToken) authentication;</div><div class=\"line\">\t\t\t\tneedsDetails.setDetails(authenticationDetailsSource.buildDetails(request));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">//认证身份</span></div><div class=\"line\">\t\t\tAuthentication authResult = authenticationManager.authenticate(authentication);</div><div class=\"line\">\t\t\t...</div><div class=\"line\">\t\t\teventPublisher.publishAuthenticationSuccess(authResult);</div><div class=\"line\">\t\t\t<span class=\"comment\">//将身份信息绑定到SecurityContextHolder中</span></div><div class=\"line\">\t\t\tSecurityContextHolder.getContext().setAuthentication(authResult);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">catch</span> (OAuth2Exception failed) &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tchain.doFilter(request, response);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>整个过滤器便是oauth2身份鉴定的关键，在源码中，对这个类有一段如下的描述</p>\n<blockquote>\n<p>A pre-authentication filter for OAuth2 protected resources. Extracts an OAuth2 token from the incoming request and uses it to populate the Spring Security context with an {@link OAuth2Authentication} (if used in conjunction with an {@link OAuth2AuthenticationManager}).  OAuth2保护资源的预先认证过滤器。如果与OAuth2AuthenticationManager结合使用，则会从到来的请求之中提取一个OAuth2 token，之后使用OAuth2Authentication来填充Spring Security上下文。</p>\n</blockquote>\n<p>其中涉及到了两个关键的类TokenExtractor，AuthenticationManager。相信后者这个接口大家已经不陌生，但前面这个类之前还未出现在我们的视野中。</p>\n<h2 id=\"OAuth2的身份管理器–OAuth2AuthenticationManager（掌握）\"><a href=\"#OAuth2的身份管理器–OAuth2AuthenticationManager（掌握）\" class=\"headerlink\" title=\"OAuth2的身份管理器–OAuth2AuthenticationManager（掌握）\"></a>OAuth2的身份管理器–OAuth2AuthenticationManager（掌握）</h2><p>在之前的OAuth2核心过滤器中出现的AuthenticationManager其实在我们意料之中，携带access_token必定得经过身份认证，但是在我们debug进入其中后，发现了一个出乎意料的事，AuthenticationManager的实现类并不是我们在前面文章中聊到的常用实现类ProviderManager，而是OAuth2AuthenticationManager。</p>\n<p><img src=\"http://img.blog.csdn.net/20170810122532720?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"OAuth2AuthenticationManager\"></p>\n<div align=\"center\"><br>图1 新的AuthenticationManager实现类OAuth2AuthenticationManager<br></div>\n\n<p>回顾我们第一篇文章的配置，压根没有出现过这个OAuth2AuthenticationManager，并且它脱离了我们熟悉的认证流程（第二篇文章中的认证管理器UML图是一张经典的spring security结构类图），它直接重写了容器的顶级身份认证接口，内部维护了一个ClientDetailService和ResourceServerTokenServices，这两个核心类在 Re：从零开始的Spring Security Oauth2（二）有分析过。在ResourceServerSecurityConfigurer的小节中我们已经知晓了它是如何被框架自动配置的，这里要强调的是OAuth2AuthenticationManager是密切与token认证相关的，而不是与获取token密切相关的。</p>\n<p>其判别身份的关键代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</div><div class=\"line\">\t...</div><div class=\"line\">\tString token = (String) authentication.getPrincipal();</div><div class=\"line\">\t<span class=\"comment\">//最终还是借助tokenServices根据token加载身份信息</span></div><div class=\"line\">\tOAuth2Authentication auth = tokenServices.loadAuthentication(token);</div><div class=\"line\">\t...</div><div class=\"line\"></div><div class=\"line\">\tcheckClientDetails(auth);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (authentication.getDetails() <span class=\"keyword\">instanceof</span> OAuth2AuthenticationDetails) &#123;</div><div class=\"line\">\t\tOAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) authentication.getDetails();</div><div class=\"line\">\t\t...</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tauth.setDetails(authentication.getDetails());</div><div class=\"line\">\tauth.setAuthenticated(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> auth;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说到tokenServices这个密切与token相关的接口，这里要强调下，避免产生误解。tokenServices分为两类，一个是用在AuthenticationServer端，第二篇文章中介绍的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AuthorizationServerTokenServices</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//创建token</span></div><div class=\"line\">    <span class=\"function\">OAuth2AccessToken <span class=\"title\">createAccessToken</span><span class=\"params\">(OAuth2Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException</span>;</div><div class=\"line\">    <span class=\"comment\">//刷新token</span></div><div class=\"line\">    <span class=\"function\">OAuth2AccessToken <span class=\"title\">refreshAccessToken</span><span class=\"params\">(String refreshToken, TokenRequest tokenRequest)</span></span></div><div class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> AuthenticationException</span>;</div><div class=\"line\">    <span class=\"comment\">//获取token</span></div><div class=\"line\">    <span class=\"function\">OAuth2AccessToken <span class=\"title\">getAccessToken</span><span class=\"params\">(OAuth2Authentication authentication)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而在ResourceServer端有自己的tokenServices接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ResourceServerTokenServices</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//根据accessToken加载客户端信息</span></div><div class=\"line\">\t<span class=\"function\">OAuth2Authentication <span class=\"title\">loadAuthentication</span><span class=\"params\">(String accessToken)</span> <span class=\"keyword\">throws</span> AuthenticationException, InvalidTokenException</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//根据accessToken获取完整的访问令牌详细信息。</span></div><div class=\"line\">\t<span class=\"function\">OAuth2AccessToken <span class=\"title\">readAccessToken</span><span class=\"params\">(String accessToken)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体内部如何加载，和AuthorizationServer大同小异，只是从tokenStore中取出相应身份的流程有点区别，不再详细看实现类了。</p>\n<h2 id=\"TokenExtractor（了解）\"><a href=\"#TokenExtractor（了解）\" class=\"headerlink\" title=\"TokenExtractor（了解）\"></a>TokenExtractor（了解）</h2><p>这个接口只有一个实现类，而且代码非常简单</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BearerTokenExtractor</span> <span class=\"keyword\">implements</span> <span class=\"title\">TokenExtractor</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log logger = LogFactory.getLog(BearerTokenExtractor.class);</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">extract</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t\tString tokenValue = extractToken(request);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (tokenValue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tPreAuthenticatedAuthenticationToken authentication = <span class=\"keyword\">new</span> PreAuthenticatedAuthenticationToken(tokenValue, <span class=\"string\">\"\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> authentication;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">extractToken</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// first check the header...</span></div><div class=\"line\">\t\tString token = extractHeaderToken(request);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// bearer type allows a request parameter as well</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (token == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t...</div><div class=\"line\">\t\t\t<span class=\"comment\">//从requestParameter中获取token</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> token;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * Extract the OAuth bearer token from a header.</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">extractHeaderToken</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t\tEnumeration&lt;String&gt; headers = request.getHeaders(<span class=\"string\">\"Authorization\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (headers.hasMoreElements()) &#123; <span class=\"comment\">// typically there is only one (most servers enforce that)</span></div><div class=\"line\">\t\t\t...</div><div class=\"line\">\t\t\t<span class=\"comment\">//从Header中获取token</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它的作用在于分离出请求中包含的token。也启示了我们可以使用多种方式携带token。<br>1 在Header中携带</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/order/1</div><div class=\"line\">Header：</div><div class=\"line\">Authentication：Bearer f732723d-af7f-41bb-bd06-2636ab2be135</div></pre></td></tr></table></figure>\n<p>2 拼接在url中作为requestParam</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/order/1?access_token=f732723d-af7f-41bb-bd06-2636ab2be135</div></pre></td></tr></table></figure>\n<p>3 在form表单中携带</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/order/1</div><div class=\"line\">form param：</div><div class=\"line\">access_token=f732723d-af7f-41bb-bd06-2636ab2be135</div></pre></td></tr></table></figure>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>OAuth2在资源服务器端的异常处理不算特别完善，但基本够用，如果想要重写异常机制，可以直接替换掉相关的Handler，如权限相关的AccessDeniedHandler。具体的配置应该在@EnableResourceServer中被覆盖，这是适配器+配置器的好处。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这儿，Spring Security OAuth2的整个内部流程就算是分析结束了。本系列的文章只能算是揭示一个大概的流程，重点还是介绍相关设计+接口，想要了解更多的细节，需要自己去翻看源码，研究各个实现类。在分析源码过程中总结出的一点经验，与君共勉：</p>\n<ol>\n<li>先掌握宏观，如研究UML类图，搞清楚关联</li>\n<li><p>分析顶级接口，设计是面向接口的，不重要的部分，具体实现类甚至都可以忽略</p>\n</li>\n<li><p>学会对比，如ResourceServer和AuthenticationServer是一种对称的设计，整个框架内部的类非常多，但分门别类的记忆，会加深记忆。如ResourceServerTokenServices ，AuthenticationServerTokenServices就一定是作用相关，但所属领域不同的两个接口</p>\n</li>\n<li><p>熟悉设计模式，spring中涉及了大量的设计模式，在框架的设计中也是遵循着设计模式的规范，如以Adapter结尾，便是运用了适配器模式；以Factory结尾，便是运用了适配器模式；Template结尾，便是运用了模板方法模式；Builder结尾，便是运用了建造者模式…</p>\n</li>\n<li><p>一点自己的理解：对源码的理解和灵感，这一切都建立自身的编码经验之上，自己遵循规范便能更好的理解别人同样遵守规范的代码。相对的，阅读好的源码，也能帮助我们自身提升编码规范。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>上一篇文章中我们介绍了获取token的流程，这一篇重点分析一下，携带token访问受限资源时，内部的工作流程。</p>\n<h2 id=\"EnableResourceServer与-EnableAuthorizationServer\"><a href=\"#EnableResourceServer与-EnableAuthorizationServer\" class=\"headerlink\" title=\"@EnableResourceServer与@EnableAuthorizationServer\"></a>@EnableResourceServer与@EnableAuthorizationServer</h2><p>还记得我们在第一节中就介绍过了OAuth2的两个核心概念，资源服务器与身份认证服务器。我们对两个注解进行配置的同时，到底触发了内部的什么相关配置呢？</p>\n<p>上一篇文章重点介绍的其实是与身份认证相关的流程，即如果获取token，而本节要分析的携带token访问受限资源，自然便是与@EnableResourceServer相关的资源服务器配置了。</p>\n<p>我们注意到其相关配置类是ResourceServerConfigurer，内部关联了ResourceServerSecurityConfigurer和HttpSecurity。前者与资源安全配置相关，后者与http安全配置相关。（类名比较类似，注意区分，以Adapter结尾的是适配器，以Configurer结尾的是配置器，以Builder结尾的是建造器，他们分别代表不同的设计模式，对设计模式有所了解可以更加方便理解其设计思路）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceServerConfigurerAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResourceServerConfigurer</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ResourceServerSecurityConfigurer resources &lt;<span class=\"number\">1</span>&gt; )</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\thttp.authorizeRequests().anyRequest().authenticated();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> ResourceServerSecurityConfigurer显然便是我们分析的重点了。</1></p>","more":"<h2 id=\"ResourceServerSecurityConfigurer（了解）\"><a href=\"#ResourceServerSecurityConfigurer（了解）\" class=\"headerlink\" title=\"ResourceServerSecurityConfigurer（了解）\"></a>ResourceServerSecurityConfigurer（了解）</h2><p>其核心配置如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\tAuthenticationManager oauthAuthenticationManager = oauthAuthenticationManager(http);</div><div class=\"line\">\tresourcesServerFilter = <span class=\"keyword\">new</span> OAuth2AuthenticationProcessingFilter();<span class=\"comment\">//&lt;1&gt;</span></div><div class=\"line\">\tresourcesServerFilter.setAuthenticationEntryPoint(authenticationEntryPoint);</div><div class=\"line\">\tresourcesServerFilter.setAuthenticationManager(oauthAuthenticationManager);<span class=\"comment\">//&lt;2&gt;</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (eventPublisher != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tresourcesServerFilter.setAuthenticationEventPublisher(eventPublisher);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (tokenExtractor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tresourcesServerFilter.setTokenExtractor(tokenExtractor);<span class=\"comment\">//&lt;3&gt;</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">\tresourcesServerFilter = postProcess(resourcesServerFilter);</div><div class=\"line\">\tresourcesServerFilter.setStateless(stateless);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// @formatter:off</span></div><div class=\"line\">\thttp</div><div class=\"line\">\t\t.authorizeRequests().expressionHandler(expressionHandler)</div><div class=\"line\">\t.and()</div><div class=\"line\">\t\t.addFilterBefore(resourcesServerFilter, AbstractPreAuthenticatedProcessingFilter.class)</div><div class=\"line\">\t\t.exceptionHandling()</div><div class=\"line\">\t\t\t.accessDeniedHandler(accessDeniedHandler)<span class=\"comment\">//&lt;4&gt;</span></div><div class=\"line\">\t\t\t.authenticationEntryPoint(authenticationEntryPoint);</div><div class=\"line\">\t<span class=\"comment\">// @formatter:on</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段是整个oauth2与HttpSecurity相关的核心配置，其中有非常多的注意点，顺带的都强调一下：</p>\n<p><1> 创建OAuth2AuthenticationProcessingFilter，即下一节所要介绍的OAuth2核心过滤器。</1></p>\n<p><2> 为OAuth2AuthenticationProcessingFilter提供固定的AuthenticationManager即OAuth2AuthenticationManager，它并没有将OAuth2AuthenticationManager添加到spring的容器中，不然可能会影响spring security的普通认证流程（非oauth2请求），只有被OAuth2AuthenticationProcessingFilter拦截到的oauth2相关请求才被特殊的身份认证器处理。</2></p>\n<p><3> 设置了TokenExtractor默认的实现—-BearerTokenExtractor，这个类在下一节介绍。</3></p>\n<p><4> 相关的异常处理器，可以重写相关实现，达到自定义异常的目的。</4></p>\n<p>还记得我们在一开始的配置中配置了资源服务器，是它触发了相关的配置。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableResourceServer</span></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceServerConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">ResourceServerConfigurerAdapter</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"核心过滤器-OAuth2AuthenticationProcessingFilter（掌握）\"><a href=\"#核心过滤器-OAuth2AuthenticationProcessingFilter（掌握）\" class=\"headerlink\" title=\"核心过滤器 OAuth2AuthenticationProcessingFilter（掌握）\"></a>核心过滤器 OAuth2AuthenticationProcessingFilter（掌握）</h2><p>回顾一下我们之前是如何携带token访问受限资源的：<br><code>http://localhost:8080/order/1?access_token=950a7cc9-5a8a-42c9-a693-40e817b1a4b0</code><br>唯一的身份凭证，便是这个access_token，携带它进行访问，会进入OAuth2AuthenticationProcessingFilter之中，其核心代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">final</span> HttpServletRequest request = (HttpServletRequest) req;</div><div class=\"line\">\t<span class=\"keyword\">final</span> HttpServletResponse response = (HttpServletResponse) res;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//从请求中取出身份信息，即access_token</span></div><div class=\"line\">\t\tAuthentication authentication = tokenExtractor.extract(request);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (authentication == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t...</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\trequest.setAttribute(OAuth2AuthenticationDetails.ACCESS_TOKEN_VALUE, authentication.getPrincipal());</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (authentication <span class=\"keyword\">instanceof</span> AbstractAuthenticationToken) &#123;</div><div class=\"line\">\t\t\t\tAbstractAuthenticationToken needsDetails = (AbstractAuthenticationToken) authentication;</div><div class=\"line\">\t\t\t\tneedsDetails.setDetails(authenticationDetailsSource.buildDetails(request));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">//认证身份</span></div><div class=\"line\">\t\t\tAuthentication authResult = authenticationManager.authenticate(authentication);</div><div class=\"line\">\t\t\t...</div><div class=\"line\">\t\t\teventPublisher.publishAuthenticationSuccess(authResult);</div><div class=\"line\">\t\t\t<span class=\"comment\">//将身份信息绑定到SecurityContextHolder中</span></div><div class=\"line\">\t\t\tSecurityContextHolder.getContext().setAuthentication(authResult);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">catch</span> (OAuth2Exception failed) &#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tchain.doFilter(request, response);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>整个过滤器便是oauth2身份鉴定的关键，在源码中，对这个类有一段如下的描述</p>\n<blockquote>\n<p>A pre-authentication filter for OAuth2 protected resources. Extracts an OAuth2 token from the incoming request and uses it to populate the Spring Security context with an {@link OAuth2Authentication} (if used in conjunction with an {@link OAuth2AuthenticationManager}).  OAuth2保护资源的预先认证过滤器。如果与OAuth2AuthenticationManager结合使用，则会从到来的请求之中提取一个OAuth2 token，之后使用OAuth2Authentication来填充Spring Security上下文。</p>\n</blockquote>\n<p>其中涉及到了两个关键的类TokenExtractor，AuthenticationManager。相信后者这个接口大家已经不陌生，但前面这个类之前还未出现在我们的视野中。</p>\n<h2 id=\"OAuth2的身份管理器–OAuth2AuthenticationManager（掌握）\"><a href=\"#OAuth2的身份管理器–OAuth2AuthenticationManager（掌握）\" class=\"headerlink\" title=\"OAuth2的身份管理器–OAuth2AuthenticationManager（掌握）\"></a>OAuth2的身份管理器–OAuth2AuthenticationManager（掌握）</h2><p>在之前的OAuth2核心过滤器中出现的AuthenticationManager其实在我们意料之中，携带access_token必定得经过身份认证，但是在我们debug进入其中后，发现了一个出乎意料的事，AuthenticationManager的实现类并不是我们在前面文章中聊到的常用实现类ProviderManager，而是OAuth2AuthenticationManager。</p>\n<p><img src=\"http://img.blog.csdn.net/20170810122532720?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"OAuth2AuthenticationManager\"></p>\n<div align=\"center\"><br>图1 新的AuthenticationManager实现类OAuth2AuthenticationManager<br></div>\n\n<p>回顾我们第一篇文章的配置，压根没有出现过这个OAuth2AuthenticationManager，并且它脱离了我们熟悉的认证流程（第二篇文章中的认证管理器UML图是一张经典的spring security结构类图），它直接重写了容器的顶级身份认证接口，内部维护了一个ClientDetailService和ResourceServerTokenServices，这两个核心类在 Re：从零开始的Spring Security Oauth2（二）有分析过。在ResourceServerSecurityConfigurer的小节中我们已经知晓了它是如何被框架自动配置的，这里要强调的是OAuth2AuthenticationManager是密切与token认证相关的，而不是与获取token密切相关的。</p>\n<p>其判别身份的关键代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">authenticate</span><span class=\"params\">(Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</div><div class=\"line\">\t...</div><div class=\"line\">\tString token = (String) authentication.getPrincipal();</div><div class=\"line\">\t<span class=\"comment\">//最终还是借助tokenServices根据token加载身份信息</span></div><div class=\"line\">\tOAuth2Authentication auth = tokenServices.loadAuthentication(token);</div><div class=\"line\">\t...</div><div class=\"line\"></div><div class=\"line\">\tcheckClientDetails(auth);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (authentication.getDetails() <span class=\"keyword\">instanceof</span> OAuth2AuthenticationDetails) &#123;</div><div class=\"line\">\t\tOAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) authentication.getDetails();</div><div class=\"line\">\t\t...</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tauth.setDetails(authentication.getDetails());</div><div class=\"line\">\tauth.setAuthenticated(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> auth;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>说到tokenServices这个密切与token相关的接口，这里要强调下，避免产生误解。tokenServices分为两类，一个是用在AuthenticationServer端，第二篇文章中介绍的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AuthorizationServerTokenServices</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//创建token</span></div><div class=\"line\">    <span class=\"function\">OAuth2AccessToken <span class=\"title\">createAccessToken</span><span class=\"params\">(OAuth2Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException</span>;</div><div class=\"line\">    <span class=\"comment\">//刷新token</span></div><div class=\"line\">    <span class=\"function\">OAuth2AccessToken <span class=\"title\">refreshAccessToken</span><span class=\"params\">(String refreshToken, TokenRequest tokenRequest)</span></span></div><div class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> AuthenticationException</span>;</div><div class=\"line\">    <span class=\"comment\">//获取token</span></div><div class=\"line\">    <span class=\"function\">OAuth2AccessToken <span class=\"title\">getAccessToken</span><span class=\"params\">(OAuth2Authentication authentication)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而在ResourceServer端有自己的tokenServices接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ResourceServerTokenServices</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//根据accessToken加载客户端信息</span></div><div class=\"line\">\t<span class=\"function\">OAuth2Authentication <span class=\"title\">loadAuthentication</span><span class=\"params\">(String accessToken)</span> <span class=\"keyword\">throws</span> AuthenticationException, InvalidTokenException</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//根据accessToken获取完整的访问令牌详细信息。</span></div><div class=\"line\">\t<span class=\"function\">OAuth2AccessToken <span class=\"title\">readAccessToken</span><span class=\"params\">(String accessToken)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体内部如何加载，和AuthorizationServer大同小异，只是从tokenStore中取出相应身份的流程有点区别，不再详细看实现类了。</p>\n<h2 id=\"TokenExtractor（了解）\"><a href=\"#TokenExtractor（了解）\" class=\"headerlink\" title=\"TokenExtractor（了解）\"></a>TokenExtractor（了解）</h2><p>这个接口只有一个实现类，而且代码非常简单</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BearerTokenExtractor</span> <span class=\"keyword\">implements</span> <span class=\"title\">TokenExtractor</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log logger = LogFactory.getLog(BearerTokenExtractor.class);</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">extract</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t\tString tokenValue = extractToken(request);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (tokenValue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tPreAuthenticatedAuthenticationToken authentication = <span class=\"keyword\">new</span> PreAuthenticatedAuthenticationToken(tokenValue, <span class=\"string\">\"\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> authentication;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">extractToken</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// first check the header...</span></div><div class=\"line\">\t\tString token = extractHeaderToken(request);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// bearer type allows a request parameter as well</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (token == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t...</div><div class=\"line\">\t\t\t<span class=\"comment\">//从requestParameter中获取token</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> token;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * Extract the OAuth bearer token from a header.</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">extractHeaderToken</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</div><div class=\"line\">\t\tEnumeration&lt;String&gt; headers = request.getHeaders(<span class=\"string\">\"Authorization\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (headers.hasMoreElements()) &#123; <span class=\"comment\">// typically there is only one (most servers enforce that)</span></div><div class=\"line\">\t\t\t...</div><div class=\"line\">\t\t\t<span class=\"comment\">//从Header中获取token</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>它的作用在于分离出请求中包含的token。也启示了我们可以使用多种方式携带token。<br>1 在Header中携带</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/order/1</div><div class=\"line\">Header：</div><div class=\"line\">Authentication：Bearer f732723d-af7f-41bb-bd06-2636ab2be135</div></pre></td></tr></table></figure>\n<p>2 拼接在url中作为requestParam</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/order/1?access_token=f732723d-af7f-41bb-bd06-2636ab2be135</div></pre></td></tr></table></figure>\n<p>3 在form表单中携带</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/order/1</div><div class=\"line\">form param：</div><div class=\"line\">access_token=f732723d-af7f-41bb-bd06-2636ab2be135</div></pre></td></tr></table></figure>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>OAuth2在资源服务器端的异常处理不算特别完善，但基本够用，如果想要重写异常机制，可以直接替换掉相关的Handler，如权限相关的AccessDeniedHandler。具体的配置应该在@EnableResourceServer中被覆盖，这是适配器+配置器的好处。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这儿，Spring Security OAuth2的整个内部流程就算是分析结束了。本系列的文章只能算是揭示一个大概的流程，重点还是介绍相关设计+接口，想要了解更多的细节，需要自己去翻看源码，研究各个实现类。在分析源码过程中总结出的一点经验，与君共勉：</p>\n<ol>\n<li>先掌握宏观，如研究UML类图，搞清楚关联</li>\n<li><p>分析顶级接口，设计是面向接口的，不重要的部分，具体实现类甚至都可以忽略</p>\n</li>\n<li><p>学会对比，如ResourceServer和AuthenticationServer是一种对称的设计，整个框架内部的类非常多，但分门别类的记忆，会加深记忆。如ResourceServerTokenServices ，AuthenticationServerTokenServices就一定是作用相关，但所属领域不同的两个接口</p>\n</li>\n<li><p>熟悉设计模式，spring中涉及了大量的设计模式，在框架的设计中也是遵循着设计模式的规范，如以Adapter结尾，便是运用了适配器模式；以Factory结尾，便是运用了适配器模式；Template结尾，便是运用了模板方法模式；Builder结尾，便是运用了建造者模式…</p>\n</li>\n<li><p>一点自己的理解：对源码的理解和灵感，这一切都建立自身的编码经验之上，自己遵循规范便能更好的理解别人同样遵守规范的代码。相对的，阅读好的源码，也能帮助我们自身提升编码规范。</p>\n</li>\n</ol>"},{"title":"Re：从零开始的Spring Security OAuth2（二）","date":"2017-08-09T06:58:52.000Z","_content":"\n\n\n本文开始从源码的层面，讲解一些Spring Security Oauth2的认证流程。本文较长，适合在空余时间段观看。且涉及了较多的源码，非关键性代码以...代替。\n\n## 准备工作\n\n首先开启debug信息：\n\n```yaml\nlogging:\n  level:\n    org.springframework: DEBUG\n```\n\n可以完整的看到内部的运转流程。\n\nclient模式稍微简单一些，使用client模式获取token\n `http://localhost:8080/oauth/token?client_id=client_1&client_secret=123456&scope=select&grant_type=client_credentials`\n\n由于debug信息太多了，我简单按照顺序列了一下关键的几个类：\n\n```java\nClientCredentialsTokenEndpointFilter\nDaoAuthenticationProvider\nTokenEndpoint\nTokenGranter\n```\n\n<!-- more -->\n\n## @EnableAuthorizationServer\n\n上一篇博客中我们尝试使用了password模式和client模式，有一个比较关键的endpoint：/oauth/token。从这个入口开始分析，spring security oauth2内部是如何生成token的。获取token，与第一篇文章中的两个重要概念之一有关，也就是AuthorizationServer与ResourceServer中的AuthorizationServer。\n\n在之前的配置中\n\n```java\n@Configuration\n@EnableAuthorizationServer\nprotected static class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter {}\n```\n\n出现了AuthorizationServerConfigurerAdapter 关键类，他关联了三个重要的配置类，分别是\n\n```java\npublic class AuthorizationServerConfigurerAdapter implements AuthorizationServerConfigurer {\n\t@Override\n\tpublic void configure(AuthorizationServerSecurityConfigurer security <1>) throws Exception{\n\t}\n\n\t@Override\n\tpublic void configure(ClientDetailsServiceConfigurer clients <2>) throws Exception {\n\t}\n\n\t@Override\n\tpublic void configure(AuthorizationServerEndpointsConfigurer endpoints <3>) throws Exception {\n\t}\n\n}\n```\n<1>  配置AuthorizationServer安全认证的相关信息，创建ClientCredentialsTokenEndpointFilter核心过滤器\n\n<2> 配置OAuth2的客户端相关信息\n\n<3> 配置AuthorizationServerEndpointsConfigurer众多相关类，包括配置身份认证器，配置认证方式，TokenStore，TokenGranter，OAuth2RequestFactory\n\n我们逐步分析其中关键的类\n\n## 客户端身份认证核心过滤器ClientCredentialsTokenEndpointFilter（掌握）\n\n截取关键的代码，可以分析出大概的流程\n在请求到达/oauth/token之前经过了ClientCredentialsTokenEndpointFilter这个过滤器，关键方法如下\n\n```java\npublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n\t\tthrows AuthenticationException, IOException, ServletException {\n\t...\n\tString clientId = request.getParameter(\"client_id\");\n\tString clientSecret = request.getParameter(\"client_secret\");\n\n\t...\n\tclientId = clientId.trim();\n\tUsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(clientId,\n\t\t\tclientSecret);\n\n\treturn this.getAuthenticationManager().authenticate(authRequest);\n\n}\n```\n\n## 顶级身份管理者AuthenticationManager（掌握）\n\n用来从请求中获取client_id,client_secret，组装成一个UsernamePasswordAuthenticationToken作为身份标识，使用容器中的顶级身份管理器AuthenticationManager去进行身份认证（AuthenticationManager的实现类一般是ProviderManager。而ProviderManager内部维护了一个List<AuthenticationProvider>,真正的身份认证是由一系列AuthenticationProvider去完成。而AuthenticationProvider的常用实现类则是DaoAuthenticationProvider，DaoAuthenticationProvider内部又聚合了一个UserDetailsService接口，UserDetailsService才是获取用户详细信息的最终接口，而我们上一篇文章中在内存中配置用户，就是使用了UserDetailsService的一个实现类InMemoryUserDetailsManager）。UML类图可以大概理解下这些类的关系，省略了授权部分。\n![认证相关](http://img.blog.csdn.net/20170809145344042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<div align=center>图1 认证相关UML类图</div>\n可能机智的读者会发现一个问题，我前面一篇文章已经提到了client模式是不存在“用户”的概念的，那么这里的身份认证是在认证什么呢？debug可以发现UserDetailsService的实现被适配成了ClientDetailsUserDetailsService，这个设计是将client客户端的信息（client_id,client_secret）适配成用户的信息(username,password)，这样我们的认证流程就不需要修改了。\n\n经过ClientCredentialsTokenEndpointFilter之后，身份信息已经得到了AuthenticationManager的验证。接着便到达了\nTokenEndpoint。\n\n## Token处理端点TokenEndpoint（掌握）\n\n前面的两个ClientCredentialsTokenEndpointFilter和AuthenticationManager可以理解为一些前置校验，和身份封装，而这个类一看名字就知道和我们的token是密切相关的。\n\n```java\n@FrameworkEndpoint\npublic class TokenEndpoint extends AbstractEndpoint {\n\n\t@RequestMapping(value = \"/oauth/token\", method=RequestMethod.POST)\n\tpublic ResponseEntity<OAuth2AccessToken> postAccessToken(Principal principal, @RequestParam\n\tMap<String, String> parameters) throws HttpRequestMethodNotSupportedException {\n\t\t ...\n\t\tString clientId = getClientId(principal);\n\t\tClientDetails authenticatedClient = getClientDetailsService().loadClientByClientId(clientId);//<1>\n\t\t...\n\t\tTokenRequest tokenRequest = getOAuth2RequestFactory().createTokenRequest(parameters, authenticatedClient);//<2>\n\t\t...\n\t\tOAuth2AccessToken token = getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest);//<3>\n\t\t...\n\t\treturn getResponse(token);\n\t\n\t}\n\t\n\tprivate TokenGranter tokenGranter;\n}\n```\n <1> 加载客户端信息\n\n<2> 结合请求信息，创建TokenRequest\n\n<3> 将TokenRequest传递给TokenGranter颁发token\n\n 省略了一些校验代码之后，真正的/oauth/token端点暴露在了我们眼前，其中方法参数中的Principal经过之前的过滤器，已经被填充了相关的信息，而方法的内部则是依赖了一个TokenGranter 来颁发token。其中OAuth2AccessToken的实现类DefaultOAuth2AccessToken就是最终在控制台得到的token序列化之前的原始类:\n​\t\n```java\npublic class DefaultOAuth2AccessToken implements Serializable, OAuth2AccessToken {\n  private static final long serialVersionUID = 914967629530462926L;\n  private String value;\n  private Date expiration;\n  private String tokenType = BEARER_TYPE.toLowerCase();\n  private OAuth2RefreshToken refreshToken;\n  private Set<String> scope;\n  private Map<String, Object> additionalInformation = Collections.emptyMap();\n  //getter,setter\n}\n```\n\n\n```java\n@org.codehaus.jackson.map.annotate.JsonSerialize(using = OAuth2AccessTokenJackson1Serializer.class)\n@org.codehaus.jackson.map.annotate.JsonDeserialize(using = OAuth2AccessTokenJackson1Deserializer.class)\n@com.fasterxml.jackson.databind.annotation.JsonSerialize(using = OAuth2AccessTokenJackson2Serializer.class)\n@com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = OAuth2AccessTokenJackson2Deserializer.class)\npublic interface OAuth2AccessToken {\n\tpublic static String BEARER_TYPE = \"Bearer\";\n\tpublic static String OAUTH2_TYPE = \"OAuth2\";\n\tpublic static String ACCESS_TOKEN = \"access_token\";\n\tpublic static String TOKEN_TYPE = \"token_type\";\n\tpublic static String EXPIRES_IN = \"expires_in\";\n\tpublic static String REFRESH_TOKEN = \"refresh_token\";\n\tpublic static String SCOPE = \"scope\";\n\t...\n}\n```\n\n一个典型的样例token响应,如下所示，就是上述类序列化后的结果：\n\n```java\n{ \n\t\"access_token\":\"950a7cc9-5a8a-42c9-a693-40e817b1a4b0\", \n\t\"token_type\":\"bearer\", \n\t\"refresh_token\":\"773a0fcd-6023-45f8-8848-e141296cb3cb\", \n\t\"expires_in\":27036, \n\t\"scope\":\"select\" \n}\n```\n\n## TokenGranter（掌握）\n\n先从UML类图对TokenGranter接口的设计有一个宏观的认识\n\n![这里写图片描述](http://img.blog.csdn.net/20170809134129753?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)<div align=center>图2 TokenGranter相关UML类图</div>\n\nTokenGranter的设计思路是使用CompositeTokenGranter管理一个List<TokenGranter>列表，每一种grantType对应一个具体的真正授权者，在debug过程中可以发现CompositeTokenGranter 内部就是在循环调用五种TokenGranter实现类的grant方法，而granter内部则是通过grantType来区分是否是各自的授权类型。\t\n\n\n```java\npublic class CompositeTokenGranter implements TokenGranter {\n\t\n\tprivate final List<TokenGranter> tokenGranters;\n\t\n\tpublic CompositeTokenGranter(List<TokenGranter> tokenGranters) {\n\t\tthis.tokenGranters = new ArrayList<TokenGranter>(tokenGranters);\n\t}\n\t\n\tpublic OAuth2AccessToken grant(String grantType, TokenRequest tokenRequest) {\n\t\tfor (TokenGranter granter : tokenGranters) {\n\t\t\tOAuth2AccessToken grant = granter.grant(grantType, tokenRequest);\n\t\t\tif (grant!=null) {\n\t\t\t\treturn grant;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n```\n五种类型分别是：\n\n* ResourceOwnerPasswordTokenGranter ==> password密码模式\n* AuthorizationCodeTokenGranter ==> authorization_code授权码模式\n* ClientCredentialsTokenGranter ==> client_credentials客户端模式\n* ImplicitTokenGranter ==> implicit简化模式\n* RefreshTokenGranter ==>refresh_token 刷新token专用\n\n以客户端模式为例，思考如何产生token的，则需要继续研究5种授权者的抽象类：AbstractTokenGranter\n\n\n```java\npublic abstract class AbstractTokenGranter implements TokenGranter {\n\tprotected final Log logger = LogFactory.getLog(getClass());\n\t//与token相关的service，重点\n\tprivate final AuthorizationServerTokenServices tokenServices;\n\t//与clientDetails相关的service，重点\n\tprivate final ClientDetailsService clientDetailsService;\n\t//创建oauth2Request的工厂，重点\n\tprivate final OAuth2RequestFactory requestFactory;\n\t\n\tprivate final String grantType;\n\t...\n\t\n\tpublic OAuth2AccessToken grant(String grantType, TokenRequest tokenRequest) {\n\t\n\t\t...\n\t\tString clientId = tokenRequest.getClientId();\n\t\tClientDetails client = clientDetailsService.loadClientByClientId(clientId);\n\t\tvalidateGrantType(grantType, client);\n\t\t\n\t\tlogger.debug(\"Getting access token for: \" + clientId);\n\t\n\t\treturn getAccessToken(client, tokenRequest);\n\t\n\t}\n\t\n\tprotected OAuth2AccessToken getAccessToken(ClientDetails client, TokenRequest tokenRequest) {\n\t\treturn tokenServices.createAccessToken(getOAuth2Authentication(client, tokenRequest));\n\t}\n\t\n\tprotected OAuth2Authentication getOAuth2Authentication(ClientDetails client, TokenRequest tokenRequest) {\n\t\tOAuth2Request storedOAuth2Request = requestFactory.createOAuth2Request(client, tokenRequest);\n\t\treturn new OAuth2Authentication(storedOAuth2Request, null);\n\t}\n\t\n\t...\n}\n```\n\n回过头去看TokenEndpoint中，正是调用了这里的三个重要的类变量的相关方法。由于篇幅限制，不能延展太多，不然没完没了，所以重点分析下AuthorizationServerTokenServices是何方神圣。\n\n## AuthorizationServerTokenServices（了解）\n\nAuthorizationServer端的token操作service，接口设计如下：\n\n```java\npublic interface AuthorizationServerTokenServices {\n\t//创建token\n\tOAuth2AccessToken createAccessToken(OAuth2Authentication authentication) throws AuthenticationException;\n\t//刷新token\n\tOAuth2AccessToken refreshAccessToken(String refreshToken, TokenRequest tokenRequest)\n\t\t\tthrows AuthenticationException;\n\t//获取token\n\tOAuth2AccessToken getAccessToken(OAuth2Authentication authentication);\n\n}\n```\n在默认的实现类DefaultTokenServices中，可以看到token是如何产生的，并且了解了框架对token进行哪些信息的关联。\n\n```java\n@Transactional\npublic OAuth2AccessToken createAccessToken(OAuth2Authentication authentication) throws AuthenticationException {\n\n\tOAuth2AccessToken existingAccessToken = tokenStore.getAccessToken(authentication);\n\tOAuth2RefreshToken refreshToken = null;\n\tif (existingAccessToken != null) {\n\t\tif (existingAccessToken.isExpired()) {\n\t\t\tif (existingAccessToken.getRefreshToken() != null) {\n\t\t\t\trefreshToken = existingAccessToken.getRefreshToken();\n\t\t\t\t// The token store could remove the refresh token when the\n\t\t\t\t// access token is removed, but we want to\n\t\t\t\t// be sure...\n\t\t\t\ttokenStore.removeRefreshToken(refreshToken);\n\t\t\t}\n\t\t\ttokenStore.removeAccessToken(existingAccessToken);\n\t\t}\n\t\telse {\n\t\t\t// Re-store the access token in case the authentication has changed\n\t\t\ttokenStore.storeAccessToken(existingAccessToken, authentication);\n\t\t\treturn existingAccessToken;\n\t\t}\n\t}\n\n\t// Only create a new refresh token if there wasn't an existing one\n\t// associated with an expired access token.\n\t// Clients might be holding existing refresh tokens, so we re-use it in\n\t// the case that the old access token\n\t// expired.\n\tif (refreshToken == null) {\n\t\trefreshToken = createRefreshToken(authentication);\n\t}\n\t// But the refresh token itself might need to be re-issued if it has\n\t// expired.\n\telse if (refreshToken instanceof ExpiringOAuth2RefreshToken) {\n\t\tExpiringOAuth2RefreshToken expiring = (ExpiringOAuth2RefreshToken) refreshToken;\n\t\tif (System.currentTimeMillis() > expiring.getExpiration().getTime()) {\n\t\t\trefreshToken = createRefreshToken(authentication);\n\t\t}\n\t}\n\n\tOAuth2AccessToken accessToken = createAccessToken(authentication, refreshToken);\n\ttokenStore.storeAccessToken(accessToken, authentication);\n\t// In case it was modified\n\trefreshToken = accessToken.getRefreshToken();\n\tif (refreshToken != null) {\n\t\ttokenStore.storeRefreshToken(refreshToken, authentication);\n\t}\n\treturn accessToken;\n\n}\n```\n简单总结一下AuthorizationServerTokenServices的作用，他提供了创建token，刷新token，获取token的实现。在创建token时，他会调用tokenStore对产生的token和相关信息存储到对应的实现类中，可以是redis，数据库，内存，jwt。\n\n## 总结\n本篇总结了使用客户端模式获取Token时，spring security oauth2内部的运作流程，重点是在分析AuthenticationServer相关的类。其他模式有一定的不同，但抽象功能是固定的，只是具体的实现类会被相应地替换。阅读spring的源码，会发现它的设计中出现了非常多的抽象接口，这对我们理清楚内部工作流程产生了不小的困扰，我的方式是可以借助UML类图，先从宏观理清楚作者的设计思路，这会让我们的分析事半功倍。\n\n下一篇文章重点分析用户携带token访问受限资源时，spring security oauth2内部的工作流程。即ResourceServer相关的类。\n\n","source":"_posts/Re：从零开始的Spring Security OAuth2（二）.md","raw":"---\ntitle:\tRe：从零开始的Spring Security OAuth2（二）\ndate: 2017-08-09 14:58:52\ntags: \n- Spring Security OAuth2\ncategories: \n- Spring Security OAuth2\n---\n\n\n\n本文开始从源码的层面，讲解一些Spring Security Oauth2的认证流程。本文较长，适合在空余时间段观看。且涉及了较多的源码，非关键性代码以...代替。\n\n## 准备工作\n\n首先开启debug信息：\n\n```yaml\nlogging:\n  level:\n    org.springframework: DEBUG\n```\n\n可以完整的看到内部的运转流程。\n\nclient模式稍微简单一些，使用client模式获取token\n `http://localhost:8080/oauth/token?client_id=client_1&client_secret=123456&scope=select&grant_type=client_credentials`\n\n由于debug信息太多了，我简单按照顺序列了一下关键的几个类：\n\n```java\nClientCredentialsTokenEndpointFilter\nDaoAuthenticationProvider\nTokenEndpoint\nTokenGranter\n```\n\n<!-- more -->\n\n## @EnableAuthorizationServer\n\n上一篇博客中我们尝试使用了password模式和client模式，有一个比较关键的endpoint：/oauth/token。从这个入口开始分析，spring security oauth2内部是如何生成token的。获取token，与第一篇文章中的两个重要概念之一有关，也就是AuthorizationServer与ResourceServer中的AuthorizationServer。\n\n在之前的配置中\n\n```java\n@Configuration\n@EnableAuthorizationServer\nprotected static class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter {}\n```\n\n出现了AuthorizationServerConfigurerAdapter 关键类，他关联了三个重要的配置类，分别是\n\n```java\npublic class AuthorizationServerConfigurerAdapter implements AuthorizationServerConfigurer {\n\t@Override\n\tpublic void configure(AuthorizationServerSecurityConfigurer security <1>) throws Exception{\n\t}\n\n\t@Override\n\tpublic void configure(ClientDetailsServiceConfigurer clients <2>) throws Exception {\n\t}\n\n\t@Override\n\tpublic void configure(AuthorizationServerEndpointsConfigurer endpoints <3>) throws Exception {\n\t}\n\n}\n```\n<1>  配置AuthorizationServer安全认证的相关信息，创建ClientCredentialsTokenEndpointFilter核心过滤器\n\n<2> 配置OAuth2的客户端相关信息\n\n<3> 配置AuthorizationServerEndpointsConfigurer众多相关类，包括配置身份认证器，配置认证方式，TokenStore，TokenGranter，OAuth2RequestFactory\n\n我们逐步分析其中关键的类\n\n## 客户端身份认证核心过滤器ClientCredentialsTokenEndpointFilter（掌握）\n\n截取关键的代码，可以分析出大概的流程\n在请求到达/oauth/token之前经过了ClientCredentialsTokenEndpointFilter这个过滤器，关键方法如下\n\n```java\npublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n\t\tthrows AuthenticationException, IOException, ServletException {\n\t...\n\tString clientId = request.getParameter(\"client_id\");\n\tString clientSecret = request.getParameter(\"client_secret\");\n\n\t...\n\tclientId = clientId.trim();\n\tUsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(clientId,\n\t\t\tclientSecret);\n\n\treturn this.getAuthenticationManager().authenticate(authRequest);\n\n}\n```\n\n## 顶级身份管理者AuthenticationManager（掌握）\n\n用来从请求中获取client_id,client_secret，组装成一个UsernamePasswordAuthenticationToken作为身份标识，使用容器中的顶级身份管理器AuthenticationManager去进行身份认证（AuthenticationManager的实现类一般是ProviderManager。而ProviderManager内部维护了一个List<AuthenticationProvider>,真正的身份认证是由一系列AuthenticationProvider去完成。而AuthenticationProvider的常用实现类则是DaoAuthenticationProvider，DaoAuthenticationProvider内部又聚合了一个UserDetailsService接口，UserDetailsService才是获取用户详细信息的最终接口，而我们上一篇文章中在内存中配置用户，就是使用了UserDetailsService的一个实现类InMemoryUserDetailsManager）。UML类图可以大概理解下这些类的关系，省略了授权部分。\n![认证相关](http://img.blog.csdn.net/20170809145344042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<div align=center>图1 认证相关UML类图</div>\n可能机智的读者会发现一个问题，我前面一篇文章已经提到了client模式是不存在“用户”的概念的，那么这里的身份认证是在认证什么呢？debug可以发现UserDetailsService的实现被适配成了ClientDetailsUserDetailsService，这个设计是将client客户端的信息（client_id,client_secret）适配成用户的信息(username,password)，这样我们的认证流程就不需要修改了。\n\n经过ClientCredentialsTokenEndpointFilter之后，身份信息已经得到了AuthenticationManager的验证。接着便到达了\nTokenEndpoint。\n\n## Token处理端点TokenEndpoint（掌握）\n\n前面的两个ClientCredentialsTokenEndpointFilter和AuthenticationManager可以理解为一些前置校验，和身份封装，而这个类一看名字就知道和我们的token是密切相关的。\n\n```java\n@FrameworkEndpoint\npublic class TokenEndpoint extends AbstractEndpoint {\n\n\t@RequestMapping(value = \"/oauth/token\", method=RequestMethod.POST)\n\tpublic ResponseEntity<OAuth2AccessToken> postAccessToken(Principal principal, @RequestParam\n\tMap<String, String> parameters) throws HttpRequestMethodNotSupportedException {\n\t\t ...\n\t\tString clientId = getClientId(principal);\n\t\tClientDetails authenticatedClient = getClientDetailsService().loadClientByClientId(clientId);//<1>\n\t\t...\n\t\tTokenRequest tokenRequest = getOAuth2RequestFactory().createTokenRequest(parameters, authenticatedClient);//<2>\n\t\t...\n\t\tOAuth2AccessToken token = getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest);//<3>\n\t\t...\n\t\treturn getResponse(token);\n\t\n\t}\n\t\n\tprivate TokenGranter tokenGranter;\n}\n```\n <1> 加载客户端信息\n\n<2> 结合请求信息，创建TokenRequest\n\n<3> 将TokenRequest传递给TokenGranter颁发token\n\n 省略了一些校验代码之后，真正的/oauth/token端点暴露在了我们眼前，其中方法参数中的Principal经过之前的过滤器，已经被填充了相关的信息，而方法的内部则是依赖了一个TokenGranter 来颁发token。其中OAuth2AccessToken的实现类DefaultOAuth2AccessToken就是最终在控制台得到的token序列化之前的原始类:\n​\t\n```java\npublic class DefaultOAuth2AccessToken implements Serializable, OAuth2AccessToken {\n  private static final long serialVersionUID = 914967629530462926L;\n  private String value;\n  private Date expiration;\n  private String tokenType = BEARER_TYPE.toLowerCase();\n  private OAuth2RefreshToken refreshToken;\n  private Set<String> scope;\n  private Map<String, Object> additionalInformation = Collections.emptyMap();\n  //getter,setter\n}\n```\n\n\n```java\n@org.codehaus.jackson.map.annotate.JsonSerialize(using = OAuth2AccessTokenJackson1Serializer.class)\n@org.codehaus.jackson.map.annotate.JsonDeserialize(using = OAuth2AccessTokenJackson1Deserializer.class)\n@com.fasterxml.jackson.databind.annotation.JsonSerialize(using = OAuth2AccessTokenJackson2Serializer.class)\n@com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = OAuth2AccessTokenJackson2Deserializer.class)\npublic interface OAuth2AccessToken {\n\tpublic static String BEARER_TYPE = \"Bearer\";\n\tpublic static String OAUTH2_TYPE = \"OAuth2\";\n\tpublic static String ACCESS_TOKEN = \"access_token\";\n\tpublic static String TOKEN_TYPE = \"token_type\";\n\tpublic static String EXPIRES_IN = \"expires_in\";\n\tpublic static String REFRESH_TOKEN = \"refresh_token\";\n\tpublic static String SCOPE = \"scope\";\n\t...\n}\n```\n\n一个典型的样例token响应,如下所示，就是上述类序列化后的结果：\n\n```java\n{ \n\t\"access_token\":\"950a7cc9-5a8a-42c9-a693-40e817b1a4b0\", \n\t\"token_type\":\"bearer\", \n\t\"refresh_token\":\"773a0fcd-6023-45f8-8848-e141296cb3cb\", \n\t\"expires_in\":27036, \n\t\"scope\":\"select\" \n}\n```\n\n## TokenGranter（掌握）\n\n先从UML类图对TokenGranter接口的设计有一个宏观的认识\n\n![这里写图片描述](http://img.blog.csdn.net/20170809134129753?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)<div align=center>图2 TokenGranter相关UML类图</div>\n\nTokenGranter的设计思路是使用CompositeTokenGranter管理一个List<TokenGranter>列表，每一种grantType对应一个具体的真正授权者，在debug过程中可以发现CompositeTokenGranter 内部就是在循环调用五种TokenGranter实现类的grant方法，而granter内部则是通过grantType来区分是否是各自的授权类型。\t\n\n\n```java\npublic class CompositeTokenGranter implements TokenGranter {\n\t\n\tprivate final List<TokenGranter> tokenGranters;\n\t\n\tpublic CompositeTokenGranter(List<TokenGranter> tokenGranters) {\n\t\tthis.tokenGranters = new ArrayList<TokenGranter>(tokenGranters);\n\t}\n\t\n\tpublic OAuth2AccessToken grant(String grantType, TokenRequest tokenRequest) {\n\t\tfor (TokenGranter granter : tokenGranters) {\n\t\t\tOAuth2AccessToken grant = granter.grant(grantType, tokenRequest);\n\t\t\tif (grant!=null) {\n\t\t\t\treturn grant;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n```\n五种类型分别是：\n\n* ResourceOwnerPasswordTokenGranter ==> password密码模式\n* AuthorizationCodeTokenGranter ==> authorization_code授权码模式\n* ClientCredentialsTokenGranter ==> client_credentials客户端模式\n* ImplicitTokenGranter ==> implicit简化模式\n* RefreshTokenGranter ==>refresh_token 刷新token专用\n\n以客户端模式为例，思考如何产生token的，则需要继续研究5种授权者的抽象类：AbstractTokenGranter\n\n\n```java\npublic abstract class AbstractTokenGranter implements TokenGranter {\n\tprotected final Log logger = LogFactory.getLog(getClass());\n\t//与token相关的service，重点\n\tprivate final AuthorizationServerTokenServices tokenServices;\n\t//与clientDetails相关的service，重点\n\tprivate final ClientDetailsService clientDetailsService;\n\t//创建oauth2Request的工厂，重点\n\tprivate final OAuth2RequestFactory requestFactory;\n\t\n\tprivate final String grantType;\n\t...\n\t\n\tpublic OAuth2AccessToken grant(String grantType, TokenRequest tokenRequest) {\n\t\n\t\t...\n\t\tString clientId = tokenRequest.getClientId();\n\t\tClientDetails client = clientDetailsService.loadClientByClientId(clientId);\n\t\tvalidateGrantType(grantType, client);\n\t\t\n\t\tlogger.debug(\"Getting access token for: \" + clientId);\n\t\n\t\treturn getAccessToken(client, tokenRequest);\n\t\n\t}\n\t\n\tprotected OAuth2AccessToken getAccessToken(ClientDetails client, TokenRequest tokenRequest) {\n\t\treturn tokenServices.createAccessToken(getOAuth2Authentication(client, tokenRequest));\n\t}\n\t\n\tprotected OAuth2Authentication getOAuth2Authentication(ClientDetails client, TokenRequest tokenRequest) {\n\t\tOAuth2Request storedOAuth2Request = requestFactory.createOAuth2Request(client, tokenRequest);\n\t\treturn new OAuth2Authentication(storedOAuth2Request, null);\n\t}\n\t\n\t...\n}\n```\n\n回过头去看TokenEndpoint中，正是调用了这里的三个重要的类变量的相关方法。由于篇幅限制，不能延展太多，不然没完没了，所以重点分析下AuthorizationServerTokenServices是何方神圣。\n\n## AuthorizationServerTokenServices（了解）\n\nAuthorizationServer端的token操作service，接口设计如下：\n\n```java\npublic interface AuthorizationServerTokenServices {\n\t//创建token\n\tOAuth2AccessToken createAccessToken(OAuth2Authentication authentication) throws AuthenticationException;\n\t//刷新token\n\tOAuth2AccessToken refreshAccessToken(String refreshToken, TokenRequest tokenRequest)\n\t\t\tthrows AuthenticationException;\n\t//获取token\n\tOAuth2AccessToken getAccessToken(OAuth2Authentication authentication);\n\n}\n```\n在默认的实现类DefaultTokenServices中，可以看到token是如何产生的，并且了解了框架对token进行哪些信息的关联。\n\n```java\n@Transactional\npublic OAuth2AccessToken createAccessToken(OAuth2Authentication authentication) throws AuthenticationException {\n\n\tOAuth2AccessToken existingAccessToken = tokenStore.getAccessToken(authentication);\n\tOAuth2RefreshToken refreshToken = null;\n\tif (existingAccessToken != null) {\n\t\tif (existingAccessToken.isExpired()) {\n\t\t\tif (existingAccessToken.getRefreshToken() != null) {\n\t\t\t\trefreshToken = existingAccessToken.getRefreshToken();\n\t\t\t\t// The token store could remove the refresh token when the\n\t\t\t\t// access token is removed, but we want to\n\t\t\t\t// be sure...\n\t\t\t\ttokenStore.removeRefreshToken(refreshToken);\n\t\t\t}\n\t\t\ttokenStore.removeAccessToken(existingAccessToken);\n\t\t}\n\t\telse {\n\t\t\t// Re-store the access token in case the authentication has changed\n\t\t\ttokenStore.storeAccessToken(existingAccessToken, authentication);\n\t\t\treturn existingAccessToken;\n\t\t}\n\t}\n\n\t// Only create a new refresh token if there wasn't an existing one\n\t// associated with an expired access token.\n\t// Clients might be holding existing refresh tokens, so we re-use it in\n\t// the case that the old access token\n\t// expired.\n\tif (refreshToken == null) {\n\t\trefreshToken = createRefreshToken(authentication);\n\t}\n\t// But the refresh token itself might need to be re-issued if it has\n\t// expired.\n\telse if (refreshToken instanceof ExpiringOAuth2RefreshToken) {\n\t\tExpiringOAuth2RefreshToken expiring = (ExpiringOAuth2RefreshToken) refreshToken;\n\t\tif (System.currentTimeMillis() > expiring.getExpiration().getTime()) {\n\t\t\trefreshToken = createRefreshToken(authentication);\n\t\t}\n\t}\n\n\tOAuth2AccessToken accessToken = createAccessToken(authentication, refreshToken);\n\ttokenStore.storeAccessToken(accessToken, authentication);\n\t// In case it was modified\n\trefreshToken = accessToken.getRefreshToken();\n\tif (refreshToken != null) {\n\t\ttokenStore.storeRefreshToken(refreshToken, authentication);\n\t}\n\treturn accessToken;\n\n}\n```\n简单总结一下AuthorizationServerTokenServices的作用，他提供了创建token，刷新token，获取token的实现。在创建token时，他会调用tokenStore对产生的token和相关信息存储到对应的实现类中，可以是redis，数据库，内存，jwt。\n\n## 总结\n本篇总结了使用客户端模式获取Token时，spring security oauth2内部的运作流程，重点是在分析AuthenticationServer相关的类。其他模式有一定的不同，但抽象功能是固定的，只是具体的实现类会被相应地替换。阅读spring的源码，会发现它的设计中出现了非常多的抽象接口，这对我们理清楚内部工作流程产生了不小的困扰，我的方式是可以借助UML类图，先从宏观理清楚作者的设计思路，这会让我们的分析事半功倍。\n\n下一篇文章重点分析用户携带token访问受限资源时，spring security oauth2内部的工作流程。即ResourceServer相关的类。\n\n","slug":"Re：从零开始的Spring Security OAuth2（二）","published":1,"updated":"2017-09-04T11:49:26.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zrr0007twv761jzxlic","content":"<p>本文开始从源码的层面，讲解一些Spring Security Oauth2的认证流程。本文较长，适合在空余时间段观看。且涉及了较多的源码，非关键性代码以…代替。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先开启debug信息：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">logging:</span></div><div class=\"line\"><span class=\"attr\">  level:</span></div><div class=\"line\">    <span class=\"string\">org.springframework:</span> <span class=\"string\">DEBUG</span></div></pre></td></tr></table></figure>\n<p>可以完整的看到内部的运转流程。</p>\n<p>client模式稍微简单一些，使用client模式获取token<br> <code>http://localhost:8080/oauth/token?client_id=client_1&amp;client_secret=123456&amp;scope=select&amp;grant_type=client_credentials</code></p>\n<p>由于debug信息太多了，我简单按照顺序列了一下关键的几个类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ClientCredentialsTokenEndpointFilter</div><div class=\"line\">DaoAuthenticationProvider</div><div class=\"line\">TokenEndpoint</div><div class=\"line\">TokenGranter</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"EnableAuthorizationServer\"><a href=\"#EnableAuthorizationServer\" class=\"headerlink\" title=\"@EnableAuthorizationServer\"></a>@EnableAuthorizationServer</h2><p>上一篇博客中我们尝试使用了password模式和client模式，有一个比较关键的endpoint：/oauth/token。从这个入口开始分析，spring security oauth2内部是如何生成token的。获取token，与第一篇文章中的两个重要概念之一有关，也就是AuthorizationServer与ResourceServer中的AuthorizationServer。</p>\n<p>在之前的配置中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableAuthorizationServer</span></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizationServerConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">AuthorizationServerConfigurerAdapter</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>出现了AuthorizationServerConfigurerAdapter 关键类，他关联了三个重要的配置类，分别是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizationServerConfigurerAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">AuthorizationServerConfigurer</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerSecurityConfigurer security &lt;<span class=\"number\">1</span>&gt;)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ClientDetailsServiceConfigurer clients &lt;<span class=\"number\">2</span>&gt;)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerEndpointsConfigurer endpoints &lt;<span class=\"number\">3</span>&gt;)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1>  配置AuthorizationServer安全认证的相关信息，创建ClientCredentialsTokenEndpointFilter核心过滤器</1></p>\n<p><2> 配置OAuth2的客户端相关信息</2></p>\n<p><3> 配置AuthorizationServerEndpointsConfigurer众多相关类，包括配置身份认证器，配置认证方式，TokenStore，TokenGranter，OAuth2RequestFactory</3></p>\n<p>我们逐步分析其中关键的类</p>\n<h2 id=\"客户端身份认证核心过滤器ClientCredentialsTokenEndpointFilter（掌握）\"><a href=\"#客户端身份认证核心过滤器ClientCredentialsTokenEndpointFilter（掌握）\" class=\"headerlink\" title=\"客户端身份认证核心过滤器ClientCredentialsTokenEndpointFilter（掌握）\"></a>客户端身份认证核心过滤器ClientCredentialsTokenEndpointFilter（掌握）</h2><p>截取关键的代码，可以分析出大概的流程<br>在请求到达/oauth/token之前经过了ClientCredentialsTokenEndpointFilter这个过滤器，关键方法如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> AuthenticationException, IOException, ServletException </span>&#123;</div><div class=\"line\">\t...</div><div class=\"line\">\tString clientId = request.getParameter(<span class=\"string\">\"client_id\"</span>);</div><div class=\"line\">\tString clientSecret = request.getParameter(<span class=\"string\">\"client_secret\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t...</div><div class=\"line\">\tclientId = clientId.trim();</div><div class=\"line\">\tUsernamePasswordAuthenticationToken authRequest = <span class=\"keyword\">new</span> UsernamePasswordAuthenticationToken(clientId,</div><div class=\"line\">\t\t\tclientSecret);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAuthenticationManager().authenticate(authRequest);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"顶级身份管理者AuthenticationManager（掌握）\"><a href=\"#顶级身份管理者AuthenticationManager（掌握）\" class=\"headerlink\" title=\"顶级身份管理者AuthenticationManager（掌握）\"></a>顶级身份管理者AuthenticationManager（掌握）</h2><p>用来从请求中获取client_id,client_secret，组装成一个UsernamePasswordAuthenticationToken作为身份标识，使用容器中的顶级身份管理器AuthenticationManager去进行身份认证（AuthenticationManager的实现类一般是ProviderManager。而ProviderManager内部维护了一个List<authenticationprovider>,真正的身份认证是由一系列AuthenticationProvider去完成。而AuthenticationProvider的常用实现类则是DaoAuthenticationProvider，DaoAuthenticationProvider内部又聚合了一个UserDetailsService接口，UserDetailsService才是获取用户详细信息的最终接口，而我们上一篇文章中在内存中配置用户，就是使用了UserDetailsService的一个实现类InMemoryUserDetailsManager）。UML类图可以大概理解下这些类的关系，省略了授权部分。<br><img src=\"http://img.blog.csdn.net/20170809145344042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"认证相关\"></authenticationprovider></p>\n<div align=\"center\">图1 认证相关UML类图</div><br>可能机智的读者会发现一个问题，我前面一篇文章已经提到了client模式是不存在“用户”的概念的，那么这里的身份认证是在认证什么呢？debug可以发现UserDetailsService的实现被适配成了ClientDetailsUserDetailsService，这个设计是将client客户端的信息（client_id,client_secret）适配成用户的信息(username,password)，这样我们的认证流程就不需要修改了。<br><br>经过ClientCredentialsTokenEndpointFilter之后，身份信息已经得到了AuthenticationManager的验证。接着便到达了<br>TokenEndpoint。<br><br>## Token处理端点TokenEndpoint（掌握）<br><br>前面的两个ClientCredentialsTokenEndpointFilter和AuthenticationManager可以理解为一些前置校验，和身份封装，而这个类一看名字就知道和我们的token是密切相关的。<br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FrameworkEndpoint</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenEndpoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractEndpoint</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/oauth/token\"</span>, method=RequestMethod.POST)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ResponseEntity&lt;OAuth2AccessToken&gt; <span class=\"title\">postAccessToken</span><span class=\"params\">(Principal principal, @RequestParam</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">\tMap&lt;String, String&gt; parameters)</span> <span class=\"keyword\">throws</span> HttpRequestMethodNotSupportedException </span>&#123;</div><div class=\"line\">\t\t ...</div><div class=\"line\">\t\tString clientId = getClientId(principal);</div><div class=\"line\">\t\tClientDetails authenticatedClient = getClientDetailsService().loadClientByClientId(clientId);<span class=\"comment\">//&lt;1&gt;</span></div><div class=\"line\">\t\t...</div><div class=\"line\">\t\tTokenRequest tokenRequest = getOAuth2RequestFactory().createTokenRequest(parameters, authenticatedClient);<span class=\"comment\">//&lt;2&gt;</span></div><div class=\"line\">\t\t...</div><div class=\"line\">\t\tOAuth2AccessToken token = getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest);<span class=\"comment\">//&lt;3&gt;</span></div><div class=\"line\">\t\t...</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> getResponse(token);</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> TokenGranter tokenGranter;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br> <1> 加载客户端信息<br><br><2> 结合请求信息，创建TokenRequest<br><br><3> 将TokenRequest传递给TokenGranter颁发token<br><br> 省略了一些校验代码之后，真正的/oauth/token端点暴露在了我们眼前，其中方法参数中的Principal经过之前的过滤器，已经被填充了相关的信息，而方法的内部则是依赖了一个TokenGranter 来颁发token。其中OAuth2AccessToken的实现类DefaultOAuth2AccessToken就是最终在控制台得到的token序列化之前的原始类:<br>​<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultOAuth2AccessToken</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">OAuth2AccessToken</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">914967629530462926L</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String value;</div><div class=\"line\">  <span class=\"keyword\">private</span> Date expiration;</div><div class=\"line\">  <span class=\"keyword\">private</span> String tokenType = BEARER_TYPE.toLowerCase();</div><div class=\"line\">  <span class=\"keyword\">private</span> OAuth2RefreshToken refreshToken;</div><div class=\"line\">  <span class=\"keyword\">private</span> Set&lt;String&gt; scope;</div><div class=\"line\">  <span class=\"keyword\">private</span> Map&lt;String, Object&gt; additionalInformation = Collections.emptyMap();</div><div class=\"line\">  <span class=\"comment\">//getter,setter</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@org</span>.codehaus.jackson.map.annotate.JsonSerialize(using = OAuth2AccessTokenJackson1Serializer.class)</div><div class=\"line\"><span class=\"meta\">@org</span>.codehaus.jackson.map.annotate.JsonDeserialize(using = OAuth2AccessTokenJackson1Deserializer.class)</div><div class=\"line\"><span class=\"meta\">@com</span>.fasterxml.jackson.databind.annotation.JsonSerialize(using = OAuth2AccessTokenJackson2Serializer.class)</div><div class=\"line\"><span class=\"meta\">@com</span>.fasterxml.jackson.databind.annotation.JsonDeserialize(using = OAuth2AccessTokenJackson2Deserializer.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OAuth2AccessToken</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String BEARER_TYPE = <span class=\"string\">\"Bearer\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String OAUTH2_TYPE = <span class=\"string\">\"OAuth2\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String ACCESS_TOKEN = <span class=\"string\">\"access_token\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String TOKEN_TYPE = <span class=\"string\">\"token_type\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String EXPIRES_IN = <span class=\"string\">\"expires_in\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String REFRESH_TOKEN = <span class=\"string\">\"refresh_token\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String SCOPE = <span class=\"string\">\"scope\"</span>;</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>一个典型的样例token响应,如下所示，就是上述类序列化后的结果：<br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">\t<span class=\"string\">\"access_token\"</span>:<span class=\"string\">\"950a7cc9-5a8a-42c9-a693-40e817b1a4b0\"</span>, </div><div class=\"line\">\t<span class=\"string\">\"token_type\"</span>:<span class=\"string\">\"bearer\"</span>, </div><div class=\"line\">\t<span class=\"string\">\"refresh_token\"</span>:<span class=\"string\">\"773a0fcd-6023-45f8-8848-e141296cb3cb\"</span>, </div><div class=\"line\">\t<span class=\"string\">\"expires_in\"</span>:<span class=\"number\">27036</span>, </div><div class=\"line\">\t<span class=\"string\">\"scope\"</span>:<span class=\"string\">\"select\"</span> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>## TokenGranter（掌握）<br><br>先从UML类图对TokenGranter接口的设计有一个宏观的认识<br><br><img src=\"http://img.blog.csdn.net/20170809134129753?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><div align=\"center\">图2 TokenGranter相关UML类图</div>\n\n<p>TokenGranter的设计思路是使用CompositeTokenGranter管理一个List<tokengranter>列表，每一种grantType对应一个具体的真正授权者，在debug过程中可以发现CompositeTokenGranter 内部就是在循环调用五种TokenGranter实现类的grant方法，而granter内部则是通过grantType来区分是否是各自的授权类型。    </tokengranter></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeTokenGranter</span> <span class=\"keyword\">implements</span> <span class=\"title\">TokenGranter</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;TokenGranter&gt; tokenGranters;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CompositeTokenGranter</span><span class=\"params\">(List&lt;TokenGranter&gt; tokenGranters)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.tokenGranters = <span class=\"keyword\">new</span> ArrayList&lt;TokenGranter&gt;(tokenGranters);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> OAuth2AccessToken <span class=\"title\">grant</span><span class=\"params\">(String grantType, TokenRequest tokenRequest)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (TokenGranter granter : tokenGranters) &#123;</div><div class=\"line\">\t\t\tOAuth2AccessToken grant = granter.grant(grantType, tokenRequest);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grant!=<span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> grant;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>五种类型分别是：</p>\n<ul>\n<li>ResourceOwnerPasswordTokenGranter ==&gt; password密码模式</li>\n<li>AuthorizationCodeTokenGranter ==&gt; authorization_code授权码模式</li>\n<li>ClientCredentialsTokenGranter ==&gt; client_credentials客户端模式</li>\n<li>ImplicitTokenGranter ==&gt; implicit简化模式</li>\n<li>RefreshTokenGranter ==&gt;refresh_token 刷新token专用</li>\n</ul>\n<p>以客户端模式为例，思考如何产生token的，则需要继续研究5种授权者的抽象类：AbstractTokenGranter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractTokenGranter</span> <span class=\"keyword\">implements</span> <span class=\"title\">TokenGranter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> Log logger = LogFactory.getLog(getClass());</div><div class=\"line\">\t<span class=\"comment\">//与token相关的service，重点</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AuthorizationServerTokenServices tokenServices;</div><div class=\"line\">\t<span class=\"comment\">//与clientDetails相关的service，重点</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ClientDetailsService clientDetailsService;</div><div class=\"line\">\t<span class=\"comment\">//创建oauth2Request的工厂，重点</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OAuth2RequestFactory requestFactory;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String grantType;</div><div class=\"line\">\t...</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> OAuth2AccessToken <span class=\"title\">grant</span><span class=\"params\">(String grantType, TokenRequest tokenRequest)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\t...</div><div class=\"line\">\t\tString clientId = tokenRequest.getClientId();</div><div class=\"line\">\t\tClientDetails client = clientDetailsService.loadClientByClientId(clientId);</div><div class=\"line\">\t\tvalidateGrantType(grantType, client);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlogger.debug(<span class=\"string\">\"Getting access token for: \"</span> + clientId);</div><div class=\"line\">\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> getAccessToken(client, tokenRequest);</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> OAuth2AccessToken <span class=\"title\">getAccessToken</span><span class=\"params\">(ClientDetails client, TokenRequest tokenRequest)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> tokenServices.createAccessToken(getOAuth2Authentication(client, tokenRequest));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> OAuth2Authentication <span class=\"title\">getOAuth2Authentication</span><span class=\"params\">(ClientDetails client, TokenRequest tokenRequest)</span> </span>&#123;</div><div class=\"line\">\t\tOAuth2Request storedOAuth2Request = requestFactory.createOAuth2Request(client, tokenRequest);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OAuth2Authentication(storedOAuth2Request, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>回过头去看TokenEndpoint中，正是调用了这里的三个重要的类变量的相关方法。由于篇幅限制，不能延展太多，不然没完没了，所以重点分析下AuthorizationServerTokenServices是何方神圣。</p>\n<h2 id=\"AuthorizationServerTokenServices（了解）\"><a href=\"#AuthorizationServerTokenServices（了解）\" class=\"headerlink\" title=\"AuthorizationServerTokenServices（了解）\"></a>AuthorizationServerTokenServices（了解）</h2><p>AuthorizationServer端的token操作service，接口设计如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AuthorizationServerTokenServices</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//创建token</span></div><div class=\"line\">\t<span class=\"function\">OAuth2AccessToken <span class=\"title\">createAccessToken</span><span class=\"params\">(OAuth2Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException</span>;</div><div class=\"line\">\t<span class=\"comment\">//刷新token</span></div><div class=\"line\">\t<span class=\"function\">OAuth2AccessToken <span class=\"title\">refreshAccessToken</span><span class=\"params\">(String refreshToken, TokenRequest tokenRequest)</span></span></div><div class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> AuthenticationException</span>;</div><div class=\"line\">\t<span class=\"comment\">//获取token</span></div><div class=\"line\">\t<span class=\"function\">OAuth2AccessToken <span class=\"title\">getAccessToken</span><span class=\"params\">(OAuth2Authentication authentication)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在默认的实现类DefaultTokenServices中，可以看到token是如何产生的，并且了解了框架对token进行哪些信息的关联。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Transactional</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> OAuth2AccessToken <span class=\"title\">createAccessToken</span><span class=\"params\">(OAuth2Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tOAuth2AccessToken existingAccessToken = tokenStore.getAccessToken(authentication);</div><div class=\"line\">\tOAuth2RefreshToken refreshToken = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (existingAccessToken != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (existingAccessToken.isExpired()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (existingAccessToken.getRefreshToken() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\trefreshToken = existingAccessToken.getRefreshToken();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// The token store could remove the refresh token when the</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// access token is removed, but we want to</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// be sure...</span></div><div class=\"line\">\t\t\t\ttokenStore.removeRefreshToken(refreshToken);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ttokenStore.removeAccessToken(existingAccessToken);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// Re-store the access token in case the authentication has changed</span></div><div class=\"line\">\t\t\ttokenStore.storeAccessToken(existingAccessToken, authentication);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> existingAccessToken;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Only create a new refresh token if there wasn't an existing one</span></div><div class=\"line\">\t<span class=\"comment\">// associated with an expired access token.</span></div><div class=\"line\">\t<span class=\"comment\">// Clients might be holding existing refresh tokens, so we re-use it in</span></div><div class=\"line\">\t<span class=\"comment\">// the case that the old access token</span></div><div class=\"line\">\t<span class=\"comment\">// expired.</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (refreshToken == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\trefreshToken = createRefreshToken(authentication);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// But the refresh token itself might need to be re-issued if it has</span></div><div class=\"line\">\t<span class=\"comment\">// expired.</span></div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (refreshToken <span class=\"keyword\">instanceof</span> ExpiringOAuth2RefreshToken) &#123;</div><div class=\"line\">\t\tExpiringOAuth2RefreshToken expiring = (ExpiringOAuth2RefreshToken) refreshToken;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (System.currentTimeMillis() &gt; expiring.getExpiration().getTime()) &#123;</div><div class=\"line\">\t\t\trefreshToken = createRefreshToken(authentication);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tOAuth2AccessToken accessToken = createAccessToken(authentication, refreshToken);</div><div class=\"line\">\ttokenStore.storeAccessToken(accessToken, authentication);</div><div class=\"line\">\t<span class=\"comment\">// In case it was modified</span></div><div class=\"line\">\trefreshToken = accessToken.getRefreshToken();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (refreshToken != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\ttokenStore.storeRefreshToken(refreshToken, authentication);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> accessToken;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单总结一下AuthorizationServerTokenServices的作用，他提供了创建token，刷新token，获取token的实现。在创建token时，他会调用tokenStore对产生的token和相关信息存储到对应的实现类中，可以是redis，数据库，内存，jwt。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇总结了使用客户端模式获取Token时，spring security oauth2内部的运作流程，重点是在分析AuthenticationServer相关的类。其他模式有一定的不同，但抽象功能是固定的，只是具体的实现类会被相应地替换。阅读spring的源码，会发现它的设计中出现了非常多的抽象接口，这对我们理清楚内部工作流程产生了不小的困扰，我的方式是可以借助UML类图，先从宏观理清楚作者的设计思路，这会让我们的分析事半功倍。</p>\n<p>下一篇文章重点分析用户携带token访问受限资源时，spring security oauth2内部的工作流程。即ResourceServer相关的类。</p>\n</3></2></1>","site":{"data":{}},"excerpt":"<p>本文开始从源码的层面，讲解一些Spring Security Oauth2的认证流程。本文较长，适合在空余时间段观看。且涉及了较多的源码，非关键性代码以…代替。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先开启debug信息：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">logging:</span></div><div class=\"line\"><span class=\"attr\">  level:</span></div><div class=\"line\">    <span class=\"string\">org.springframework:</span> <span class=\"string\">DEBUG</span></div></pre></td></tr></table></figure>\n<p>可以完整的看到内部的运转流程。</p>\n<p>client模式稍微简单一些，使用client模式获取token<br> <code>http://localhost:8080/oauth/token?client_id=client_1&amp;client_secret=123456&amp;scope=select&amp;grant_type=client_credentials</code></p>\n<p>由于debug信息太多了，我简单按照顺序列了一下关键的几个类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ClientCredentialsTokenEndpointFilter</div><div class=\"line\">DaoAuthenticationProvider</div><div class=\"line\">TokenEndpoint</div><div class=\"line\">TokenGranter</div></pre></td></tr></table></figure>","more":"<h2 id=\"EnableAuthorizationServer\"><a href=\"#EnableAuthorizationServer\" class=\"headerlink\" title=\"@EnableAuthorizationServer\"></a>@EnableAuthorizationServer</h2><p>上一篇博客中我们尝试使用了password模式和client模式，有一个比较关键的endpoint：/oauth/token。从这个入口开始分析，spring security oauth2内部是如何生成token的。获取token，与第一篇文章中的两个重要概念之一有关，也就是AuthorizationServer与ResourceServer中的AuthorizationServer。</p>\n<p>在之前的配置中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableAuthorizationServer</span></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizationServerConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">AuthorizationServerConfigurerAdapter</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>出现了AuthorizationServerConfigurerAdapter 关键类，他关联了三个重要的配置类，分别是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorizationServerConfigurerAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">AuthorizationServerConfigurer</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerSecurityConfigurer security &lt;<span class=\"number\">1</span>&gt;)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(ClientDetailsServiceConfigurer clients &lt;<span class=\"number\">2</span>&gt;)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(AuthorizationServerEndpointsConfigurer endpoints &lt;<span class=\"number\">3</span>&gt;)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1>  配置AuthorizationServer安全认证的相关信息，创建ClientCredentialsTokenEndpointFilter核心过滤器</1></p>\n<p><2> 配置OAuth2的客户端相关信息</2></p>\n<p><3> 配置AuthorizationServerEndpointsConfigurer众多相关类，包括配置身份认证器，配置认证方式，TokenStore，TokenGranter，OAuth2RequestFactory</3></p>\n<p>我们逐步分析其中关键的类</p>\n<h2 id=\"客户端身份认证核心过滤器ClientCredentialsTokenEndpointFilter（掌握）\"><a href=\"#客户端身份认证核心过滤器ClientCredentialsTokenEndpointFilter（掌握）\" class=\"headerlink\" title=\"客户端身份认证核心过滤器ClientCredentialsTokenEndpointFilter（掌握）\"></a>客户端身份认证核心过滤器ClientCredentialsTokenEndpointFilter（掌握）</h2><p>截取关键的代码，可以分析出大概的流程<br>在请求到达/oauth/token之前经过了ClientCredentialsTokenEndpointFilter这个过滤器，关键方法如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Authentication <span class=\"title\">attemptAuthentication</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> AuthenticationException, IOException, ServletException </span>&#123;</div><div class=\"line\">\t...</div><div class=\"line\">\tString clientId = request.getParameter(<span class=\"string\">\"client_id\"</span>);</div><div class=\"line\">\tString clientSecret = request.getParameter(<span class=\"string\">\"client_secret\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t...</div><div class=\"line\">\tclientId = clientId.trim();</div><div class=\"line\">\tUsernamePasswordAuthenticationToken authRequest = <span class=\"keyword\">new</span> UsernamePasswordAuthenticationToken(clientId,</div><div class=\"line\">\t\t\tclientSecret);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getAuthenticationManager().authenticate(authRequest);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"顶级身份管理者AuthenticationManager（掌握）\"><a href=\"#顶级身份管理者AuthenticationManager（掌握）\" class=\"headerlink\" title=\"顶级身份管理者AuthenticationManager（掌握）\"></a>顶级身份管理者AuthenticationManager（掌握）</h2><p>用来从请求中获取client_id,client_secret，组装成一个UsernamePasswordAuthenticationToken作为身份标识，使用容器中的顶级身份管理器AuthenticationManager去进行身份认证（AuthenticationManager的实现类一般是ProviderManager。而ProviderManager内部维护了一个List<authenticationprovider>,真正的身份认证是由一系列AuthenticationProvider去完成。而AuthenticationProvider的常用实现类则是DaoAuthenticationProvider，DaoAuthenticationProvider内部又聚合了一个UserDetailsService接口，UserDetailsService才是获取用户详细信息的最终接口，而我们上一篇文章中在内存中配置用户，就是使用了UserDetailsService的一个实现类InMemoryUserDetailsManager）。UML类图可以大概理解下这些类的关系，省略了授权部分。<br><img src=\"http://img.blog.csdn.net/20170809145344042?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"认证相关\"></authenticationprovider></p>\n<div align=\"center\">图1 认证相关UML类图</div><br>可能机智的读者会发现一个问题，我前面一篇文章已经提到了client模式是不存在“用户”的概念的，那么这里的身份认证是在认证什么呢？debug可以发现UserDetailsService的实现被适配成了ClientDetailsUserDetailsService，这个设计是将client客户端的信息（client_id,client_secret）适配成用户的信息(username,password)，这样我们的认证流程就不需要修改了。<br><br>经过ClientCredentialsTokenEndpointFilter之后，身份信息已经得到了AuthenticationManager的验证。接着便到达了<br>TokenEndpoint。<br><br>## Token处理端点TokenEndpoint（掌握）<br><br>前面的两个ClientCredentialsTokenEndpointFilter和AuthenticationManager可以理解为一些前置校验，和身份封装，而这个类一看名字就知道和我们的token是密切相关的。<br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FrameworkEndpoint</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenEndpoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractEndpoint</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/oauth/token\"</span>, method=RequestMethod.POST)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ResponseEntity&lt;OAuth2AccessToken&gt; <span class=\"title\">postAccessToken</span><span class=\"params\">(Principal principal, @RequestParam</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">\tMap&lt;String, String&gt; parameters)</span> <span class=\"keyword\">throws</span> HttpRequestMethodNotSupportedException </span>&#123;</div><div class=\"line\">\t\t ...</div><div class=\"line\">\t\tString clientId = getClientId(principal);</div><div class=\"line\">\t\tClientDetails authenticatedClient = getClientDetailsService().loadClientByClientId(clientId);<span class=\"comment\">//&lt;1&gt;</span></div><div class=\"line\">\t\t...</div><div class=\"line\">\t\tTokenRequest tokenRequest = getOAuth2RequestFactory().createTokenRequest(parameters, authenticatedClient);<span class=\"comment\">//&lt;2&gt;</span></div><div class=\"line\">\t\t...</div><div class=\"line\">\t\tOAuth2AccessToken token = getTokenGranter().grant(tokenRequest.getGrantType(), tokenRequest);<span class=\"comment\">//&lt;3&gt;</span></div><div class=\"line\">\t\t...</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> getResponse(token);</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> TokenGranter tokenGranter;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br> <1> 加载客户端信息<br><br><2> 结合请求信息，创建TokenRequest<br><br><3> 将TokenRequest传递给TokenGranter颁发token<br><br> 省略了一些校验代码之后，真正的/oauth/token端点暴露在了我们眼前，其中方法参数中的Principal经过之前的过滤器，已经被填充了相关的信息，而方法的内部则是依赖了一个TokenGranter 来颁发token。其中OAuth2AccessToken的实现类DefaultOAuth2AccessToken就是最终在控制台得到的token序列化之前的原始类:<br>​<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultOAuth2AccessToken</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span>, <span class=\"title\">OAuth2AccessToken</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">914967629530462926L</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String value;</div><div class=\"line\">  <span class=\"keyword\">private</span> Date expiration;</div><div class=\"line\">  <span class=\"keyword\">private</span> String tokenType = BEARER_TYPE.toLowerCase();</div><div class=\"line\">  <span class=\"keyword\">private</span> OAuth2RefreshToken refreshToken;</div><div class=\"line\">  <span class=\"keyword\">private</span> Set&lt;String&gt; scope;</div><div class=\"line\">  <span class=\"keyword\">private</span> Map&lt;String, Object&gt; additionalInformation = Collections.emptyMap();</div><div class=\"line\">  <span class=\"comment\">//getter,setter</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@org</span>.codehaus.jackson.map.annotate.JsonSerialize(using = OAuth2AccessTokenJackson1Serializer.class)</div><div class=\"line\"><span class=\"meta\">@org</span>.codehaus.jackson.map.annotate.JsonDeserialize(using = OAuth2AccessTokenJackson1Deserializer.class)</div><div class=\"line\"><span class=\"meta\">@com</span>.fasterxml.jackson.databind.annotation.JsonSerialize(using = OAuth2AccessTokenJackson2Serializer.class)</div><div class=\"line\"><span class=\"meta\">@com</span>.fasterxml.jackson.databind.annotation.JsonDeserialize(using = OAuth2AccessTokenJackson2Deserializer.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OAuth2AccessToken</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String BEARER_TYPE = <span class=\"string\">\"Bearer\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String OAUTH2_TYPE = <span class=\"string\">\"OAuth2\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String ACCESS_TOKEN = <span class=\"string\">\"access_token\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String TOKEN_TYPE = <span class=\"string\">\"token_type\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String EXPIRES_IN = <span class=\"string\">\"expires_in\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String REFRESH_TOKEN = <span class=\"string\">\"refresh_token\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String SCOPE = <span class=\"string\">\"scope\"</span>;</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>一个典型的样例token响应,如下所示，就是上述类序列化后的结果：<br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; </div><div class=\"line\">\t<span class=\"string\">\"access_token\"</span>:<span class=\"string\">\"950a7cc9-5a8a-42c9-a693-40e817b1a4b0\"</span>, </div><div class=\"line\">\t<span class=\"string\">\"token_type\"</span>:<span class=\"string\">\"bearer\"</span>, </div><div class=\"line\">\t<span class=\"string\">\"refresh_token\"</span>:<span class=\"string\">\"773a0fcd-6023-45f8-8848-e141296cb3cb\"</span>, </div><div class=\"line\">\t<span class=\"string\">\"expires_in\"</span>:<span class=\"number\">27036</span>, </div><div class=\"line\">\t<span class=\"string\">\"scope\"</span>:<span class=\"string\">\"select\"</span> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>## TokenGranter（掌握）<br><br>先从UML类图对TokenGranter接口的设计有一个宏观的认识<br><br><img src=\"http://img.blog.csdn.net/20170809134129753?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><div align=\"center\">图2 TokenGranter相关UML类图</div>\n\n<p>TokenGranter的设计思路是使用CompositeTokenGranter管理一个List<tokengranter>列表，每一种grantType对应一个具体的真正授权者，在debug过程中可以发现CompositeTokenGranter 内部就是在循环调用五种TokenGranter实现类的grant方法，而granter内部则是通过grantType来区分是否是各自的授权类型。    </tokengranter></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositeTokenGranter</span> <span class=\"keyword\">implements</span> <span class=\"title\">TokenGranter</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;TokenGranter&gt; tokenGranters;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CompositeTokenGranter</span><span class=\"params\">(List&lt;TokenGranter&gt; tokenGranters)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.tokenGranters = <span class=\"keyword\">new</span> ArrayList&lt;TokenGranter&gt;(tokenGranters);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> OAuth2AccessToken <span class=\"title\">grant</span><span class=\"params\">(String grantType, TokenRequest tokenRequest)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (TokenGranter granter : tokenGranters) &#123;</div><div class=\"line\">\t\t\tOAuth2AccessToken grant = granter.grant(grantType, tokenRequest);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (grant!=<span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> grant;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>五种类型分别是：</p>\n<ul>\n<li>ResourceOwnerPasswordTokenGranter ==&gt; password密码模式</li>\n<li>AuthorizationCodeTokenGranter ==&gt; authorization_code授权码模式</li>\n<li>ClientCredentialsTokenGranter ==&gt; client_credentials客户端模式</li>\n<li>ImplicitTokenGranter ==&gt; implicit简化模式</li>\n<li>RefreshTokenGranter ==&gt;refresh_token 刷新token专用</li>\n</ul>\n<p>以客户端模式为例，思考如何产生token的，则需要继续研究5种授权者的抽象类：AbstractTokenGranter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractTokenGranter</span> <span class=\"keyword\">implements</span> <span class=\"title\">TokenGranter</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> Log logger = LogFactory.getLog(getClass());</div><div class=\"line\">\t<span class=\"comment\">//与token相关的service，重点</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AuthorizationServerTokenServices tokenServices;</div><div class=\"line\">\t<span class=\"comment\">//与clientDetails相关的service，重点</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ClientDetailsService clientDetailsService;</div><div class=\"line\">\t<span class=\"comment\">//创建oauth2Request的工厂，重点</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> OAuth2RequestFactory requestFactory;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String grantType;</div><div class=\"line\">\t...</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> OAuth2AccessToken <span class=\"title\">grant</span><span class=\"params\">(String grantType, TokenRequest tokenRequest)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\t...</div><div class=\"line\">\t\tString clientId = tokenRequest.getClientId();</div><div class=\"line\">\t\tClientDetails client = clientDetailsService.loadClientByClientId(clientId);</div><div class=\"line\">\t\tvalidateGrantType(grantType, client);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlogger.debug(<span class=\"string\">\"Getting access token for: \"</span> + clientId);</div><div class=\"line\">\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> getAccessToken(client, tokenRequest);</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> OAuth2AccessToken <span class=\"title\">getAccessToken</span><span class=\"params\">(ClientDetails client, TokenRequest tokenRequest)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> tokenServices.createAccessToken(getOAuth2Authentication(client, tokenRequest));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> OAuth2Authentication <span class=\"title\">getOAuth2Authentication</span><span class=\"params\">(ClientDetails client, TokenRequest tokenRequest)</span> </span>&#123;</div><div class=\"line\">\t\tOAuth2Request storedOAuth2Request = requestFactory.createOAuth2Request(client, tokenRequest);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OAuth2Authentication(storedOAuth2Request, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>回过头去看TokenEndpoint中，正是调用了这里的三个重要的类变量的相关方法。由于篇幅限制，不能延展太多，不然没完没了，所以重点分析下AuthorizationServerTokenServices是何方神圣。</p>\n<h2 id=\"AuthorizationServerTokenServices（了解）\"><a href=\"#AuthorizationServerTokenServices（了解）\" class=\"headerlink\" title=\"AuthorizationServerTokenServices（了解）\"></a>AuthorizationServerTokenServices（了解）</h2><p>AuthorizationServer端的token操作service，接口设计如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AuthorizationServerTokenServices</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//创建token</span></div><div class=\"line\">\t<span class=\"function\">OAuth2AccessToken <span class=\"title\">createAccessToken</span><span class=\"params\">(OAuth2Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException</span>;</div><div class=\"line\">\t<span class=\"comment\">//刷新token</span></div><div class=\"line\">\t<span class=\"function\">OAuth2AccessToken <span class=\"title\">refreshAccessToken</span><span class=\"params\">(String refreshToken, TokenRequest tokenRequest)</span></span></div><div class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> AuthenticationException</span>;</div><div class=\"line\">\t<span class=\"comment\">//获取token</span></div><div class=\"line\">\t<span class=\"function\">OAuth2AccessToken <span class=\"title\">getAccessToken</span><span class=\"params\">(OAuth2Authentication authentication)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在默认的实现类DefaultTokenServices中，可以看到token是如何产生的，并且了解了框架对token进行哪些信息的关联。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Transactional</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> OAuth2AccessToken <span class=\"title\">createAccessToken</span><span class=\"params\">(OAuth2Authentication authentication)</span> <span class=\"keyword\">throws</span> AuthenticationException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\tOAuth2AccessToken existingAccessToken = tokenStore.getAccessToken(authentication);</div><div class=\"line\">\tOAuth2RefreshToken refreshToken = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (existingAccessToken != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (existingAccessToken.isExpired()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (existingAccessToken.getRefreshToken() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\trefreshToken = existingAccessToken.getRefreshToken();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// The token store could remove the refresh token when the</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// access token is removed, but we want to</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// be sure...</span></div><div class=\"line\">\t\t\t\ttokenStore.removeRefreshToken(refreshToken);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ttokenStore.removeAccessToken(existingAccessToken);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// Re-store the access token in case the authentication has changed</span></div><div class=\"line\">\t\t\ttokenStore.storeAccessToken(existingAccessToken, authentication);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> existingAccessToken;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// Only create a new refresh token if there wasn't an existing one</span></div><div class=\"line\">\t<span class=\"comment\">// associated with an expired access token.</span></div><div class=\"line\">\t<span class=\"comment\">// Clients might be holding existing refresh tokens, so we re-use it in</span></div><div class=\"line\">\t<span class=\"comment\">// the case that the old access token</span></div><div class=\"line\">\t<span class=\"comment\">// expired.</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (refreshToken == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\trefreshToken = createRefreshToken(authentication);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// But the refresh token itself might need to be re-issued if it has</span></div><div class=\"line\">\t<span class=\"comment\">// expired.</span></div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (refreshToken <span class=\"keyword\">instanceof</span> ExpiringOAuth2RefreshToken) &#123;</div><div class=\"line\">\t\tExpiringOAuth2RefreshToken expiring = (ExpiringOAuth2RefreshToken) refreshToken;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (System.currentTimeMillis() &gt; expiring.getExpiration().getTime()) &#123;</div><div class=\"line\">\t\t\trefreshToken = createRefreshToken(authentication);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tOAuth2AccessToken accessToken = createAccessToken(authentication, refreshToken);</div><div class=\"line\">\ttokenStore.storeAccessToken(accessToken, authentication);</div><div class=\"line\">\t<span class=\"comment\">// In case it was modified</span></div><div class=\"line\">\trefreshToken = accessToken.getRefreshToken();</div><div class=\"line\">\t<span class=\"keyword\">if</span> (refreshToken != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\ttokenStore.storeRefreshToken(refreshToken, authentication);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> accessToken;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单总结一下AuthorizationServerTokenServices的作用，他提供了创建token，刷新token，获取token的实现。在创建token时，他会调用tokenStore对产生的token和相关信息存储到对应的实现类中，可以是redis，数据库，内存，jwt。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇总结了使用客户端模式获取Token时，spring security oauth2内部的运作流程，重点是在分析AuthenticationServer相关的类。其他模式有一定的不同，但抽象功能是固定的，只是具体的实现类会被相应地替换。阅读spring的源码，会发现它的设计中出现了非常多的抽象接口，这对我们理清楚内部工作流程产生了不小的困扰，我的方式是可以借助UML类图，先从宏观理清楚作者的设计思路，这会让我们的分析事半功倍。</p>\n<p>下一篇文章重点分析用户携带token访问受限资源时，spring security oauth2内部的工作流程。即ResourceServer相关的类。</p>\n</3></2></1>"},{"title":"JAVA程序员分级，你属于哪一种？","date":"2017-05-02T11:21:03.000Z","_content":"\n - 初级---初\n\n  掌握java基础，熟悉常用类库。理解java web中的servlet，jsp，并了解常用的框架对java web的封装原理，能够借助框架完成增删改查功能。理解数据库在web开发中的地位。\n\n - 初级---中\n\n    理解java中较为高级的特性，如反射，动态代理，JVM，内存模型，多线程等等。熟练使用框架，对框架中遇到的bug，能够借助日志和搜索引擎分析出问题的原因。在团队中，能够独立完成普通后台业务功能的开发。了解数据库的高级特性，如索引，存储引擎等等。\n\n - 初级---高\n\n  理解java分布式架构，微服务架构，了解其与集中式架构的区别，并能保证分布式代码质量。熟练使用各个中间件如redis，mq，zookeeper等等，并了解其工作原理和使用场景。能够在中级或高级程序员的带领之下，完成非核心功能的研发。能够关注开源，并且具有阅读源码的能力。\n\n - 中级\n\n  具备一定的项目开发经验（3年之上一线互联网产品研发经验），拥有线上bug的处理能力，JVM调优能力，以及完成核心业务功能的开发。并且带领团队的新人，能够按能力分配任务。\n\n - 高级\n\n  团队的核心人物，把控整个项目的质量，包括代码漏洞和规范问题。具有5年以上项目开发经验，2年以上架构搭建的经验，能够根据业务选择不同的架构类型；根据团队组成，分配不同的任务。具有将自己的知识分享出去的能力，带领初级程序员走向中级，中级程序员走向高级的能力。","source":"_posts/JAVA程序员分级，你属于哪一级.md","raw":"---\ntitle: JAVA程序员分级，你属于哪一种？\ndate: 2017-05-02 19:21:03\ntags: \n- JAVA\n- 杂谈\ncategories: \n- 技术杂谈\n---\n\n - 初级---初\n\n  掌握java基础，熟悉常用类库。理解java web中的servlet，jsp，并了解常用的框架对java web的封装原理，能够借助框架完成增删改查功能。理解数据库在web开发中的地位。\n\n - 初级---中\n\n    理解java中较为高级的特性，如反射，动态代理，JVM，内存模型，多线程等等。熟练使用框架，对框架中遇到的bug，能够借助日志和搜索引擎分析出问题的原因。在团队中，能够独立完成普通后台业务功能的开发。了解数据库的高级特性，如索引，存储引擎等等。\n\n - 初级---高\n\n  理解java分布式架构，微服务架构，了解其与集中式架构的区别，并能保证分布式代码质量。熟练使用各个中间件如redis，mq，zookeeper等等，并了解其工作原理和使用场景。能够在中级或高级程序员的带领之下，完成非核心功能的研发。能够关注开源，并且具有阅读源码的能力。\n\n - 中级\n\n  具备一定的项目开发经验（3年之上一线互联网产品研发经验），拥有线上bug的处理能力，JVM调优能力，以及完成核心业务功能的开发。并且带领团队的新人，能够按能力分配任务。\n\n - 高级\n\n  团队的核心人物，把控整个项目的质量，包括代码漏洞和规范问题。具有5年以上项目开发经验，2年以上架构搭建的经验，能够根据业务选择不同的架构类型；根据团队组成，分配不同的任务。具有将自己的知识分享出去的能力，带领初级程序员走向中级，中级程序员走向高级的能力。","slug":"JAVA程序员分级，你属于哪一级","published":1,"updated":"2017-09-04T11:49:26.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zrs0008twv7uflg5a0k","content":"<ul>\n<li><p>初级—初</p>\n<p>掌握java基础，熟悉常用类库。理解java web中的servlet，jsp，并了解常用的框架对java web的封装原理，能够借助框架完成增删改查功能。理解数据库在web开发中的地位。</p>\n</li>\n<li><p>初级—中</p>\n<p> 理解java中较为高级的特性，如反射，动态代理，JVM，内存模型，多线程等等。熟练使用框架，对框架中遇到的bug，能够借助日志和搜索引擎分析出问题的原因。在团队中，能够独立完成普通后台业务功能的开发。了解数据库的高级特性，如索引，存储引擎等等。</p>\n</li>\n<li><p>初级—高</p>\n<p>理解java分布式架构，微服务架构，了解其与集中式架构的区别，并能保证分布式代码质量。熟练使用各个中间件如redis，mq，zookeeper等等，并了解其工作原理和使用场景。能够在中级或高级程序员的带领之下，完成非核心功能的研发。能够关注开源，并且具有阅读源码的能力。</p>\n</li>\n<li><p>中级</p>\n<p>具备一定的项目开发经验（3年之上一线互联网产品研发经验），拥有线上bug的处理能力，JVM调优能力，以及完成核心业务功能的开发。并且带领团队的新人，能够按能力分配任务。</p>\n</li>\n<li><p>高级</p>\n<p>团队的核心人物，把控整个项目的质量，包括代码漏洞和规范问题。具有5年以上项目开发经验，2年以上架构搭建的经验，能够根据业务选择不同的架构类型；根据团队组成，分配不同的任务。具有将自己的知识分享出去的能力，带领初级程序员走向中级，中级程序员走向高级的能力。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>初级—初</p>\n<p>掌握java基础，熟悉常用类库。理解java web中的servlet，jsp，并了解常用的框架对java web的封装原理，能够借助框架完成增删改查功能。理解数据库在web开发中的地位。</p>\n</li>\n<li><p>初级—中</p>\n<p> 理解java中较为高级的特性，如反射，动态代理，JVM，内存模型，多线程等等。熟练使用框架，对框架中遇到的bug，能够借助日志和搜索引擎分析出问题的原因。在团队中，能够独立完成普通后台业务功能的开发。了解数据库的高级特性，如索引，存储引擎等等。</p>\n</li>\n<li><p>初级—高</p>\n<p>理解java分布式架构，微服务架构，了解其与集中式架构的区别，并能保证分布式代码质量。熟练使用各个中间件如redis，mq，zookeeper等等，并了解其工作原理和使用场景。能够在中级或高级程序员的带领之下，完成非核心功能的研发。能够关注开源，并且具有阅读源码的能力。</p>\n</li>\n<li><p>中级</p>\n<p>具备一定的项目开发经验（3年之上一线互联网产品研发经验），拥有线上bug的处理能力，JVM调优能力，以及完成核心业务功能的开发。并且带领团队的新人，能够按能力分配任务。</p>\n</li>\n<li><p>高级</p>\n<p>团队的核心人物，把控整个项目的质量，包括代码漏洞和规范问题。具有5年以上项目开发经验，2年以上架构搭建的经验，能够根据业务选择不同的架构类型；根据团队组成，分配不同的任务。具有将自己的知识分享出去的能力，带领初级程序员走向中级，中级程序员走向高级的能力。</p>\n</li>\n</ul>\n"},{"title":"Re：从零开始的Spring Session(三)","date":"2017-09-04T12:57:43.000Z","_content":"\n上一篇文章中，我们使用Redis集成了Spring Session。大多数的配置都是Spring Boot帮我们自动配置的，这一节我们介绍一点Spring Session较为高级的特性。\n\n## 集成Spring Security\n\n之所以把Spring Session和Spring Security放在一起讨论，是因为我们的应用在集成Spring Security之后，用户相关的认证与Session密不可分，如果不注意一些细节，会引发意想不到的问题。\n\n与Spring Session相关的依赖可以参考上一篇文章，这里给出增量的依赖：\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```\n\n我们引入依赖后，就已经自动配置了Spring Security，我们在application.yml添加一个内存中的用户：\n\n```yaml\nsecurity:\n  user:\n    name: admin\n    password: admin\n```\n\n测试登录点沿用上一篇文章的端点，访问`http://localhost:8080/test/cookie?browser=chrome`端点后会出现http basic的认证框，我们输入admin/admin，即可获得结果，也遇到了第一个坑点，我们会发现每次请求，sessionId都会被刷新，这显然不是我们想要的结果。\n\n![诡异的运行结果](http://ov0zuistv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170904212709.png)\n\n这个现象笔者研究了不少源码，但并没有得到非常满意的解释，只能理解为SecurityAutoConfiguration提供的默认配置，没有触发到响应的配置，导致了session的不断刷新（如果读者有合理的解释可以和我沟通）。Spring Session之所以能够替换默认的tomcat httpSession是因为配置了`springSessionRepositoryFilter`这个过滤器，且提供了非常高的优先级，这归功于`AbstractSecurityWebApplicationInitializer` ，`AbstractHttpSessionApplicationInitializer` 这两个初始化器，当然，也保证了Spring Session会在Spring Security之前起作用。\n\n而解决上述的诡异现象也比较容易（但原理不清），我们使用@EnableWebSecurity对Spring Security进行一些配置，即可解决这个问题。\n\n```java\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    // @formatter:off\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n            .antMatchers(\"/resources/**\").permitAll()\n            .anyRequest().authenticated()\n            .and()\n                .httpBasic()//<1>\n            .and()\n            .logout().permitAll();\n    }\n    // @formatter:on\n\n    // @formatter:off\n    @Autowired\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n        auth\n                .inMemoryAuthentication()\n                .withUser(\"admin\").password(\"admin\").roles(\"USER\");//<2>\n    }\n    // @formatter:on\n}\n```\n\n<1> 不想大费周章写一个登录页面，于是开启了http basic认证\n\n<2> 配置了security config之后，springboot的autoConfig就会失效，于是需要手动配置用户。\n\n再次请求，可以发现SessionId返回正常，@EnableWebSecurity似乎触发了相关的配置，当然了，我们在使用Spring Security时不可能使用autoconfig，但是这个现象的确是一个疑点。\n\n## 使用自定义CookieSerializer\n\n```java\n@Bean\npublic CookieSerializer cookieSerializer() {\n    DefaultCookieSerializer serializer = new DefaultCookieSerializer();\n    serializer.setCookieName(\"JSESSIONID\");\n    serializer.setCookiePath(\"/\");\n    serializer.setDomainNamePattern(\"^.+?\\\\.(\\\\w+\\\\.[a-z]+)$\");\n    return serializer;\n}\n```\n\n使用上述配置后，我们可以将Spring Session默认的Cookie Key从SESSION替换为原生的JSESSIONID。而CookiePath设置为根路径且配置了相关的正则表达式，可以达到同父域下的单点登录的效果，在未涉及跨域的单点登录系统中，这是一个非常优雅的解决方案。如果我们的当前域名是`moe.cnkirito.moe`，该正则会将Cookie设置在父域`cnkirito.moe`中，如果有另一个相同父域的子域名`blog.cnkirito.moe`也会识别这个Cookie，便可以很方便的实现同父域下的单点登录。\n\n## 根据用户名查找用户归属的SESSION\n\n这个特性听起来非常有意思，你可以在一些有趣的场景下使用它，如知道用户名后即可删除其SESSION。一直以来我们都是通过线程绑定的方式，让用户操作自己的SESSION，包括获取用户名等操作。但如今它提供了一个反向的操作，根据用户名获取SESSION，恰巧，在一些项目中真的可以使用到这个特性，最起码，当别人问起你，或者讨论到和SESSION相关的知识时，你可以明晰一点，这是可以做到的。\n\n我们使用Redis作为Session Store还有一个好处，就是其实现了`FindByIndexNameSessionRepository`接口，下面让我们来见证这一点。\n\n```java\n@Controller\npublic class CookieController {\n    @Autowired\n    FindByIndexNameSessionRepository<? extends ExpiringSession> sessionRepository;\n\n    @RequestMapping(\"/test/findByUsername\")\n    @ResponseBody\n    public Map findByUsername(@RequestParam String username) {\n        Map<String, ? extends ExpiringSession> usersSessions = sessionRepository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME, username);\n        return usersSessions;\n    }\n}\n```\n\n由于一个用户可能拥有多个Session，所以返回的是一个Map信息，而这里的username，则就是与Spring Security集成之后的用户名，最令人感动Spring厉害的地方，是这一切都是自动配置好的。我们在内存中配置的用户的username是admin，于是我们访问这个端点,可以看到如下的结果\n\n![用户名访问session](http://ov0zuistv.bkt.clouddn.com/2.png)\n\n连同我们存入session中的browser=chrome，browser=360都可以看见（只有键名）。\n\n## 总结\n\nSpring Session对各种场景下的Session管理提供一套非常完善的实现。笔者所介绍的，仅仅是Spring Session常用的一些特性，更多的知识点可以在spring.io的文档中一览无余，以及本文中作者存在的一个疑惑，如有兴趣可与我沟通。","source":"_posts/Re：从零开始的Spring Session(三).md","raw":"---\ntitle: Re：从零开始的Spring Session(三)\ndate: 2017-09-04 20:57:43\ntags: \n- Spring Session\n- Spring\ncategories:\n- Spring Session\n---\n\n上一篇文章中，我们使用Redis集成了Spring Session。大多数的配置都是Spring Boot帮我们自动配置的，这一节我们介绍一点Spring Session较为高级的特性。\n\n## 集成Spring Security\n\n之所以把Spring Session和Spring Security放在一起讨论，是因为我们的应用在集成Spring Security之后，用户相关的认证与Session密不可分，如果不注意一些细节，会引发意想不到的问题。\n\n与Spring Session相关的依赖可以参考上一篇文章，这里给出增量的依赖：\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```\n\n我们引入依赖后，就已经自动配置了Spring Security，我们在application.yml添加一个内存中的用户：\n\n```yaml\nsecurity:\n  user:\n    name: admin\n    password: admin\n```\n\n测试登录点沿用上一篇文章的端点，访问`http://localhost:8080/test/cookie?browser=chrome`端点后会出现http basic的认证框，我们输入admin/admin，即可获得结果，也遇到了第一个坑点，我们会发现每次请求，sessionId都会被刷新，这显然不是我们想要的结果。\n\n![诡异的运行结果](http://ov0zuistv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170904212709.png)\n\n这个现象笔者研究了不少源码，但并没有得到非常满意的解释，只能理解为SecurityAutoConfiguration提供的默认配置，没有触发到响应的配置，导致了session的不断刷新（如果读者有合理的解释可以和我沟通）。Spring Session之所以能够替换默认的tomcat httpSession是因为配置了`springSessionRepositoryFilter`这个过滤器，且提供了非常高的优先级，这归功于`AbstractSecurityWebApplicationInitializer` ，`AbstractHttpSessionApplicationInitializer` 这两个初始化器，当然，也保证了Spring Session会在Spring Security之前起作用。\n\n而解决上述的诡异现象也比较容易（但原理不清），我们使用@EnableWebSecurity对Spring Security进行一些配置，即可解决这个问题。\n\n```java\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    // @formatter:off\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n            .antMatchers(\"/resources/**\").permitAll()\n            .anyRequest().authenticated()\n            .and()\n                .httpBasic()//<1>\n            .and()\n            .logout().permitAll();\n    }\n    // @formatter:on\n\n    // @formatter:off\n    @Autowired\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n        auth\n                .inMemoryAuthentication()\n                .withUser(\"admin\").password(\"admin\").roles(\"USER\");//<2>\n    }\n    // @formatter:on\n}\n```\n\n<1> 不想大费周章写一个登录页面，于是开启了http basic认证\n\n<2> 配置了security config之后，springboot的autoConfig就会失效，于是需要手动配置用户。\n\n再次请求，可以发现SessionId返回正常，@EnableWebSecurity似乎触发了相关的配置，当然了，我们在使用Spring Security时不可能使用autoconfig，但是这个现象的确是一个疑点。\n\n## 使用自定义CookieSerializer\n\n```java\n@Bean\npublic CookieSerializer cookieSerializer() {\n    DefaultCookieSerializer serializer = new DefaultCookieSerializer();\n    serializer.setCookieName(\"JSESSIONID\");\n    serializer.setCookiePath(\"/\");\n    serializer.setDomainNamePattern(\"^.+?\\\\.(\\\\w+\\\\.[a-z]+)$\");\n    return serializer;\n}\n```\n\n使用上述配置后，我们可以将Spring Session默认的Cookie Key从SESSION替换为原生的JSESSIONID。而CookiePath设置为根路径且配置了相关的正则表达式，可以达到同父域下的单点登录的效果，在未涉及跨域的单点登录系统中，这是一个非常优雅的解决方案。如果我们的当前域名是`moe.cnkirito.moe`，该正则会将Cookie设置在父域`cnkirito.moe`中，如果有另一个相同父域的子域名`blog.cnkirito.moe`也会识别这个Cookie，便可以很方便的实现同父域下的单点登录。\n\n## 根据用户名查找用户归属的SESSION\n\n这个特性听起来非常有意思，你可以在一些有趣的场景下使用它，如知道用户名后即可删除其SESSION。一直以来我们都是通过线程绑定的方式，让用户操作自己的SESSION，包括获取用户名等操作。但如今它提供了一个反向的操作，根据用户名获取SESSION，恰巧，在一些项目中真的可以使用到这个特性，最起码，当别人问起你，或者讨论到和SESSION相关的知识时，你可以明晰一点，这是可以做到的。\n\n我们使用Redis作为Session Store还有一个好处，就是其实现了`FindByIndexNameSessionRepository`接口，下面让我们来见证这一点。\n\n```java\n@Controller\npublic class CookieController {\n    @Autowired\n    FindByIndexNameSessionRepository<? extends ExpiringSession> sessionRepository;\n\n    @RequestMapping(\"/test/findByUsername\")\n    @ResponseBody\n    public Map findByUsername(@RequestParam String username) {\n        Map<String, ? extends ExpiringSession> usersSessions = sessionRepository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME, username);\n        return usersSessions;\n    }\n}\n```\n\n由于一个用户可能拥有多个Session，所以返回的是一个Map信息，而这里的username，则就是与Spring Security集成之后的用户名，最令人感动Spring厉害的地方，是这一切都是自动配置好的。我们在内存中配置的用户的username是admin，于是我们访问这个端点,可以看到如下的结果\n\n![用户名访问session](http://ov0zuistv.bkt.clouddn.com/2.png)\n\n连同我们存入session中的browser=chrome，browser=360都可以看见（只有键名）。\n\n## 总结\n\nSpring Session对各种场景下的Session管理提供一套非常完善的实现。笔者所介绍的，仅仅是Spring Session常用的一些特性，更多的知识点可以在spring.io的文档中一览无余，以及本文中作者存在的一个疑惑，如有兴趣可与我沟通。","slug":"Re：从零开始的Spring Session(三)","published":1,"updated":"2017-09-04T14:54:59.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zrt0009twv7q4ax2xrm","content":"<p>上一篇文章中，我们使用Redis集成了Spring Session。大多数的配置都是Spring Boot帮我们自动配置的，这一节我们介绍一点Spring Session较为高级的特性。</p>\n<h2 id=\"集成Spring-Security\"><a href=\"#集成Spring-Security\" class=\"headerlink\" title=\"集成Spring Security\"></a>集成Spring Security</h2><p>之所以把Spring Session和Spring Security放在一起讨论，是因为我们的应用在集成Spring Security之后，用户相关的认证与Session密不可分，如果不注意一些细节，会引发意想不到的问题。</p>\n<p>与Spring Session相关的依赖可以参考上一篇文章，这里给出增量的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>我们引入依赖后，就已经自动配置了Spring Security，我们在application.yml添加一个内存中的用户：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">security:</span></div><div class=\"line\"><span class=\"attr\">  user:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">admin</span></div><div class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">admin</span></div></pre></td></tr></table></figure>\n<p>测试登录点沿用上一篇文章的端点，访问<code>http://localhost:8080/test/cookie?browser=chrome</code>端点后会出现http basic的认证框，我们输入admin/admin，即可获得结果，也遇到了第一个坑点，我们会发现每次请求，sessionId都会被刷新，这显然不是我们想要的结果。</p>\n<p><img src=\"http://ov0zuistv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170904212709.png\" alt=\"诡异的运行结果\"></p>\n<p>这个现象笔者研究了不少源码，但并没有得到非常满意的解释，只能理解为SecurityAutoConfiguration提供的默认配置，没有触发到响应的配置，导致了session的不断刷新（如果读者有合理的解释可以和我沟通）。Spring Session之所以能够替换默认的tomcat httpSession是因为配置了<code>springSessionRepositoryFilter</code>这个过滤器，且提供了非常高的优先级，这归功于<code>AbstractSecurityWebApplicationInitializer</code> ，<code>AbstractHttpSessionApplicationInitializer</code> 这两个初始化器，当然，也保证了Spring Session会在Spring Security之前起作用。</p>\n<p>而解决上述的诡异现象也比较容易（但原理不清），我们使用@EnableWebSecurity对Spring Security进行一些配置，即可解决这个问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// @formatter:off</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        http</div><div class=\"line\">            .authorizeRequests()</div><div class=\"line\">            .antMatchers(<span class=\"string\">\"/resources/**\"</span>).permitAll()</div><div class=\"line\">            .anyRequest().authenticated()</div><div class=\"line\">            .and()</div><div class=\"line\">                .httpBasic()<span class=\"comment\">//&lt;1&gt;</span></div><div class=\"line\">            .and()</div><div class=\"line\">            .logout().permitAll();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// @formatter:on</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// @formatter:off</span></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureGlobal</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        auth</div><div class=\"line\">                .inMemoryAuthentication()</div><div class=\"line\">                .withUser(<span class=\"string\">\"admin\"</span>).password(<span class=\"string\">\"admin\"</span>).roles(<span class=\"string\">\"USER\"</span>);<span class=\"comment\">//&lt;2&gt;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// @formatter:on</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> 不想大费周章写一个登录页面，于是开启了http basic认证</1></p>\n<p><2> 配置了security config之后，springboot的autoConfig就会失效，于是需要手动配置用户。</2></p>\n<p>再次请求，可以发现SessionId返回正常，@EnableWebSecurity似乎触发了相关的配置，当然了，我们在使用Spring Security时不可能使用autoconfig，但是这个现象的确是一个疑点。</p>\n<h2 id=\"使用自定义CookieSerializer\"><a href=\"#使用自定义CookieSerializer\" class=\"headerlink\" title=\"使用自定义CookieSerializer\"></a>使用自定义CookieSerializer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CookieSerializer <span class=\"title\">cookieSerializer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    DefaultCookieSerializer serializer = <span class=\"keyword\">new</span> DefaultCookieSerializer();</div><div class=\"line\">    serializer.setCookieName(<span class=\"string\">\"JSESSIONID\"</span>);</div><div class=\"line\">    serializer.setCookiePath(<span class=\"string\">\"/\"</span>);</div><div class=\"line\">    serializer.setDomainNamePattern(<span class=\"string\">\"^.+?\\\\.(\\\\w+\\\\.[a-z]+)$\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> serializer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用上述配置后，我们可以将Spring Session默认的Cookie Key从SESSION替换为原生的JSESSIONID。而CookiePath设置为根路径且配置了相关的正则表达式，可以达到同父域下的单点登录的效果，在未涉及跨域的单点登录系统中，这是一个非常优雅的解决方案。如果我们的当前域名是<code>moe.cnkirito.moe</code>，该正则会将Cookie设置在父域<code>cnkirito.moe</code>中，如果有另一个相同父域的子域名<code>blog.cnkirito.moe</code>也会识别这个Cookie，便可以很方便的实现同父域下的单点登录。</p>\n<h2 id=\"根据用户名查找用户归属的SESSION\"><a href=\"#根据用户名查找用户归属的SESSION\" class=\"headerlink\" title=\"根据用户名查找用户归属的SESSION\"></a>根据用户名查找用户归属的SESSION</h2><p>这个特性听起来非常有意思，你可以在一些有趣的场景下使用它，如知道用户名后即可删除其SESSION。一直以来我们都是通过线程绑定的方式，让用户操作自己的SESSION，包括获取用户名等操作。但如今它提供了一个反向的操作，根据用户名获取SESSION，恰巧，在一些项目中真的可以使用到这个特性，最起码，当别人问起你，或者讨论到和SESSION相关的知识时，你可以明晰一点，这是可以做到的。</p>\n<p>我们使用Redis作为Session Store还有一个好处，就是其实现了<code>FindByIndexNameSessionRepository</code>接口，下面让我们来见证这一点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieController</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    FindByIndexNameSessionRepository&lt;? extends ExpiringSession&gt; sessionRepository;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test/findByUsername\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">findByUsername</span><span class=\"params\">(@RequestParam String username)</span> </span>&#123;</div><div class=\"line\">        Map&lt;String, ? extends ExpiringSession&gt; usersSessions = sessionRepository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME, username);</div><div class=\"line\">        <span class=\"keyword\">return</span> usersSessions;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于一个用户可能拥有多个Session，所以返回的是一个Map信息，而这里的username，则就是与Spring Security集成之后的用户名，最令人感动Spring厉害的地方，是这一切都是自动配置好的。我们在内存中配置的用户的username是admin，于是我们访问这个端点,可以看到如下的结果</p>\n<p><img src=\"http://ov0zuistv.bkt.clouddn.com/2.png\" alt=\"用户名访问session\"></p>\n<p>连同我们存入session中的browser=chrome，browser=360都可以看见（只有键名）。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Spring Session对各种场景下的Session管理提供一套非常完善的实现。笔者所介绍的，仅仅是Spring Session常用的一些特性，更多的知识点可以在spring.io的文档中一览无余，以及本文中作者存在的一个疑惑，如有兴趣可与我沟通。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇文章中，我们使用Redis集成了Spring Session。大多数的配置都是Spring Boot帮我们自动配置的，这一节我们介绍一点Spring Session较为高级的特性。</p>\n<h2 id=\"集成Spring-Security\"><a href=\"#集成Spring-Security\" class=\"headerlink\" title=\"集成Spring Security\"></a>集成Spring Security</h2><p>之所以把Spring Session和Spring Security放在一起讨论，是因为我们的应用在集成Spring Security之后，用户相关的认证与Session密不可分，如果不注意一些细节，会引发意想不到的问题。</p>\n<p>与Spring Session相关的依赖可以参考上一篇文章，这里给出增量的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>我们引入依赖后，就已经自动配置了Spring Security，我们在application.yml添加一个内存中的用户：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">security:</span></div><div class=\"line\"><span class=\"attr\">  user:</span></div><div class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">admin</span></div><div class=\"line\"><span class=\"attr\">    password:</span> <span class=\"string\">admin</span></div></pre></td></tr></table></figure>\n<p>测试登录点沿用上一篇文章的端点，访问<code>http://localhost:8080/test/cookie?browser=chrome</code>端点后会出现http basic的认证框，我们输入admin/admin，即可获得结果，也遇到了第一个坑点，我们会发现每次请求，sessionId都会被刷新，这显然不是我们想要的结果。</p>\n<p><img src=\"http://ov0zuistv.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170904212709.png\" alt=\"诡异的运行结果\"></p>\n<p>这个现象笔者研究了不少源码，但并没有得到非常满意的解释，只能理解为SecurityAutoConfiguration提供的默认配置，没有触发到响应的配置，导致了session的不断刷新（如果读者有合理的解释可以和我沟通）。Spring Session之所以能够替换默认的tomcat httpSession是因为配置了<code>springSessionRepositoryFilter</code>这个过滤器，且提供了非常高的优先级，这归功于<code>AbstractSecurityWebApplicationInitializer</code> ，<code>AbstractHttpSessionApplicationInitializer</code> 这两个初始化器，当然，也保证了Spring Session会在Spring Security之前起作用。</p>\n<p>而解决上述的诡异现象也比较容易（但原理不清），我们使用@EnableWebSecurity对Spring Security进行一些配置，即可解决这个问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// @formatter:off</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        http</div><div class=\"line\">            .authorizeRequests()</div><div class=\"line\">            .antMatchers(<span class=\"string\">\"/resources/**\"</span>).permitAll()</div><div class=\"line\">            .anyRequest().authenticated()</div><div class=\"line\">            .and()</div><div class=\"line\">                .httpBasic()<span class=\"comment\">//&lt;1&gt;</span></div><div class=\"line\">            .and()</div><div class=\"line\">            .logout().permitAll();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// @formatter:on</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// @formatter:off</span></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureGlobal</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        auth</div><div class=\"line\">                .inMemoryAuthentication()</div><div class=\"line\">                .withUser(<span class=\"string\">\"admin\"</span>).password(<span class=\"string\">\"admin\"</span>).roles(<span class=\"string\">\"USER\"</span>);<span class=\"comment\">//&lt;2&gt;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// @formatter:on</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> 不想大费周章写一个登录页面，于是开启了http basic认证</1></p>\n<p><2> 配置了security config之后，springboot的autoConfig就会失效，于是需要手动配置用户。</2></p>\n<p>再次请求，可以发现SessionId返回正常，@EnableWebSecurity似乎触发了相关的配置，当然了，我们在使用Spring Security时不可能使用autoconfig，但是这个现象的确是一个疑点。</p>\n<h2 id=\"使用自定义CookieSerializer\"><a href=\"#使用自定义CookieSerializer\" class=\"headerlink\" title=\"使用自定义CookieSerializer\"></a>使用自定义CookieSerializer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> CookieSerializer <span class=\"title\">cookieSerializer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    DefaultCookieSerializer serializer = <span class=\"keyword\">new</span> DefaultCookieSerializer();</div><div class=\"line\">    serializer.setCookieName(<span class=\"string\">\"JSESSIONID\"</span>);</div><div class=\"line\">    serializer.setCookiePath(<span class=\"string\">\"/\"</span>);</div><div class=\"line\">    serializer.setDomainNamePattern(<span class=\"string\">\"^.+?\\\\.(\\\\w+\\\\.[a-z]+)$\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> serializer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用上述配置后，我们可以将Spring Session默认的Cookie Key从SESSION替换为原生的JSESSIONID。而CookiePath设置为根路径且配置了相关的正则表达式，可以达到同父域下的单点登录的效果，在未涉及跨域的单点登录系统中，这是一个非常优雅的解决方案。如果我们的当前域名是<code>moe.cnkirito.moe</code>，该正则会将Cookie设置在父域<code>cnkirito.moe</code>中，如果有另一个相同父域的子域名<code>blog.cnkirito.moe</code>也会识别这个Cookie，便可以很方便的实现同父域下的单点登录。</p>\n<h2 id=\"根据用户名查找用户归属的SESSION\"><a href=\"#根据用户名查找用户归属的SESSION\" class=\"headerlink\" title=\"根据用户名查找用户归属的SESSION\"></a>根据用户名查找用户归属的SESSION</h2><p>这个特性听起来非常有意思，你可以在一些有趣的场景下使用它，如知道用户名后即可删除其SESSION。一直以来我们都是通过线程绑定的方式，让用户操作自己的SESSION，包括获取用户名等操作。但如今它提供了一个反向的操作，根据用户名获取SESSION，恰巧，在一些项目中真的可以使用到这个特性，最起码，当别人问起你，或者讨论到和SESSION相关的知识时，你可以明晰一点，这是可以做到的。</p>\n<p>我们使用Redis作为Session Store还有一个好处，就是其实现了<code>FindByIndexNameSessionRepository</code>接口，下面让我们来见证这一点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieController</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    FindByIndexNameSessionRepository&lt;? extends ExpiringSession&gt; sessionRepository;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test/findByUsername\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">findByUsername</span><span class=\"params\">(@RequestParam String username)</span> </span>&#123;</div><div class=\"line\">        Map&lt;String, ? extends ExpiringSession&gt; usersSessions = sessionRepository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME, username);</div><div class=\"line\">        <span class=\"keyword\">return</span> usersSessions;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于一个用户可能拥有多个Session，所以返回的是一个Map信息，而这里的username，则就是与Spring Security集成之后的用户名，最令人感动Spring厉害的地方，是这一切都是自动配置好的。我们在内存中配置的用户的username是admin，于是我们访问这个端点,可以看到如下的结果</p>\n<p><img src=\"http://ov0zuistv.bkt.clouddn.com/2.png\" alt=\"用户名访问session\"></p>\n<p>连同我们存入session中的browser=chrome，browser=360都可以看见（只有键名）。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Spring Session对各种场景下的Session管理提供一套非常完善的实现。笔者所介绍的，仅仅是Spring Session常用的一些特性，更多的知识点可以在spring.io的文档中一览无余，以及本文中作者存在的一个疑惑，如有兴趣可与我沟通。</p>\n"},{"title":"Re：从零开始的Spring Session(二)","date":"2017-09-03T12:06:12.000Z","_content":"\n上一篇文章介绍了一些Session和Cookie的基础知识，这篇文章开始正式介绍Spring Session是如何对传统的Session进行改造的。官网这么介绍Spring Session：\n\nSpring Session provides an API and implementations for managing a user’s session information. It also provides transparent integration with:\n\n- [HttpSession](https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession) - allows replacing the HttpSession in an application container (i.e. Tomcat) neutral way. Additional features include:\n  - **Clustered Sessions** - Spring Session makes it trivial to support [clustered sessions](https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-redis) without being tied to an application container specific solution.\n  - **Multiple Browser Sessions** - Spring Session supports [managing multiple users' sessions](https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-multi) in a single browser instance (i.e. multiple authenticated accounts similar to Google).\n  - **RESTful APIs** - Spring Session allows providing session ids in headers to work with [RESTful APIs](https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-rest)\n- [WebSocket](https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#websocket) - provides the ability to keep the `HttpSession` alive when receiving WebSocket messages\n\n其具体的特性非常之多，具体的内容可以从文档中了解到，笔者做一点自己的总结，Spring Session的特性包括但不限于以下：\n\n- 使用GemFire来构建C/S架构的httpSession（不关注）\n- 使用第三方仓储来实现集群session管理，也就是常说的分布式session容器，替换应用容器（如tomcat的session容器）。仓储的实现，Spring Session提供了三个实现（redis，mongodb，jdbc），其中redis使我们最常用的。程序的实现，使用AOP技术，几乎可以做到透明化地替换。（核心）\n- 可以非常方便的扩展Cookie和自定义Session相关的Listener，Filter。\n- 可以很方便的与Spring Security集成，增加诸如findSessionsByUserName，rememberMe，限制同一个账号可以同时在线的Session数（如设置成1，即可达到把前一次登录顶掉的效果）等等\n\n介绍完特性，下面开始一步步集成Spring Session\n\n<!-- more -->\n\n##使用Redis集成Spring Session \n\n- 引入依赖，Spring Boot的版本采用1.5.4\n\n  ```xml\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n  </dependency>\n  <dependency>\n      <groupId>org.springframework.session</groupId>\n      <artifactId>spring-session-data-redis</artifactId>\n  </dependency>\n  ```\n\n- 配置\n\n  配置类开启Redis Http Session\n\n  ```java\n  @Configuration\n  @EnableRedisHttpSession\n  public class HttpSessionConfig {\n\n  }\n  ```\n\n  基本是0配置，只需要让主配置扫描到@EnableRedisHttpSession即可\n\n  配置文件application.yml，配置连接的redis信息\n\n  ```yaml\n  spring:\n    redis:\n      host: localhost\n      port: 6379\n      database: 0\n  ```\n\n- 编写测试Controller，以便于观察Spring Session的特性，和前一篇文章使用同样的代码\n\n  ```java\n  @Controller\n  public class CookieController {\n\n      @RequestMapping(\"/test/cookie\")\n      public String cookie(@RequestParam(\"browser\") String browser, HttpServletRequest request, HttpSession session) {\n          //取出session中的browser\n          Object sessionBrowser = session.getAttribute(\"browser\");\n          if (sessionBrowser == null) {\n              System.out.println(\"不存在session，设置browser=\" + browser);\n              session.setAttribute(\"browser\", browser);\n          } else {\n              System.out.println(\"存在session，browser=\" + sessionBrowser.toString());\n          }\n          Cookie[] cookies = request.getCookies();\n          if (cookies != null && cookies.length > 0) {\n              for (Cookie cookie : cookies) {\n                  System.out.println(cookie.getName() + \" : \" + cookie.getValue());\n              }\n          }\n          return \"index\";\n      }\n  }\n  ```\n\n启动类省略，下面开始测试。\n\n在浏览器中访问如下端点：`http://localhost:8080/test/cookie?browser=chrome`，下面是连续访问4次的结果\n\n```\n1\t不存在session，设置browser=chrome\n2\t存在session，browser=chrome\n\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159\n3\t存在session，browser=chrome\n\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159\n4\t存在session，browser=chrome\n\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159\n```\n\n如果还记得上一篇文章中运行结果的话，会发现和原生的session管理是有一些差别，原先的信息中我们记得Cookie中记录的Key值是JSESSIONID，而替换成RedisHttpSession之后变成了SESSION。接着观察redis中的变化：\n\n![redis中的session](http://ov0zuistv.bkt.clouddn.com/image/redisSession.png)\n\n解析一下这个redis store，如果不纠结于细节，可以跳过，不影响使用。\n\n​1 spring:session是默认的Redis HttpSession前缀（redis中，我们常用':'作为分割符）。\n\n2 每一个session都会有三个相关的key，第三个key最为重要，它是一个HASH数据结构，将内存中的session信息序列化到了redis中。如上文的browser，就被记录为sessionAttr:browser=chrome,还有一些meta信息，如创建时间，最后访问时间等。\n\n3 另外两个key，expirations:1504446540000和sessions:expires:7079...我发现大多数的文章都没有对其分析，前者是一个SET类型，后者是一个STRING类型，可能会有读者发出这样的疑问，redis自身就有过期时间的设置方式TTL，为什么要额外添加两个key来维持session过期的特性呢？这需要对redis有一定深入的了解才能想到这层设计。当然这不是本节的重点，简单提一下：redis清除过期key的行为是一个异步行为且是一个低优先级的行为，用文档中的原话来说便是，可能会导致session不被清除。于是引入了专门的expiresKey，来专门负责session的清除，包括我们自己在使用redis时也需要关注这一点。在开发层面，我们仅仅需要关注第三个key就行了。\n\n## 总结\n\n本节主要讲解了Spring Boot如何集成Spring Session，下一节将介绍更加复杂的特性。包括自定义Cookie序列化策略，与Spring Security的集成，根据用户名查找session等特性以及使用注意点。\n\n\n\n\n\n\n\n","source":"_posts/Re：从零开始的Spring Session(二).md","raw":"---\ntitle: Re：从零开始的Spring Session(二)\ndate: 2017-09-03 20:06:12\ntags: \n- Spring Session\n- Spring\ncategories:\n- Spring Session\n---\n\n上一篇文章介绍了一些Session和Cookie的基础知识，这篇文章开始正式介绍Spring Session是如何对传统的Session进行改造的。官网这么介绍Spring Session：\n\nSpring Session provides an API and implementations for managing a user’s session information. It also provides transparent integration with:\n\n- [HttpSession](https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession) - allows replacing the HttpSession in an application container (i.e. Tomcat) neutral way. Additional features include:\n  - **Clustered Sessions** - Spring Session makes it trivial to support [clustered sessions](https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-redis) without being tied to an application container specific solution.\n  - **Multiple Browser Sessions** - Spring Session supports [managing multiple users' sessions](https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-multi) in a single browser instance (i.e. multiple authenticated accounts similar to Google).\n  - **RESTful APIs** - Spring Session allows providing session ids in headers to work with [RESTful APIs](https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-rest)\n- [WebSocket](https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#websocket) - provides the ability to keep the `HttpSession` alive when receiving WebSocket messages\n\n其具体的特性非常之多，具体的内容可以从文档中了解到，笔者做一点自己的总结，Spring Session的特性包括但不限于以下：\n\n- 使用GemFire来构建C/S架构的httpSession（不关注）\n- 使用第三方仓储来实现集群session管理，也就是常说的分布式session容器，替换应用容器（如tomcat的session容器）。仓储的实现，Spring Session提供了三个实现（redis，mongodb，jdbc），其中redis使我们最常用的。程序的实现，使用AOP技术，几乎可以做到透明化地替换。（核心）\n- 可以非常方便的扩展Cookie和自定义Session相关的Listener，Filter。\n- 可以很方便的与Spring Security集成，增加诸如findSessionsByUserName，rememberMe，限制同一个账号可以同时在线的Session数（如设置成1，即可达到把前一次登录顶掉的效果）等等\n\n介绍完特性，下面开始一步步集成Spring Session\n\n<!-- more -->\n\n##使用Redis集成Spring Session \n\n- 引入依赖，Spring Boot的版本采用1.5.4\n\n  ```xml\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n  </dependency>\n  <dependency>\n      <groupId>org.springframework.session</groupId>\n      <artifactId>spring-session-data-redis</artifactId>\n  </dependency>\n  ```\n\n- 配置\n\n  配置类开启Redis Http Session\n\n  ```java\n  @Configuration\n  @EnableRedisHttpSession\n  public class HttpSessionConfig {\n\n  }\n  ```\n\n  基本是0配置，只需要让主配置扫描到@EnableRedisHttpSession即可\n\n  配置文件application.yml，配置连接的redis信息\n\n  ```yaml\n  spring:\n    redis:\n      host: localhost\n      port: 6379\n      database: 0\n  ```\n\n- 编写测试Controller，以便于观察Spring Session的特性，和前一篇文章使用同样的代码\n\n  ```java\n  @Controller\n  public class CookieController {\n\n      @RequestMapping(\"/test/cookie\")\n      public String cookie(@RequestParam(\"browser\") String browser, HttpServletRequest request, HttpSession session) {\n          //取出session中的browser\n          Object sessionBrowser = session.getAttribute(\"browser\");\n          if (sessionBrowser == null) {\n              System.out.println(\"不存在session，设置browser=\" + browser);\n              session.setAttribute(\"browser\", browser);\n          } else {\n              System.out.println(\"存在session，browser=\" + sessionBrowser.toString());\n          }\n          Cookie[] cookies = request.getCookies();\n          if (cookies != null && cookies.length > 0) {\n              for (Cookie cookie : cookies) {\n                  System.out.println(cookie.getName() + \" : \" + cookie.getValue());\n              }\n          }\n          return \"index\";\n      }\n  }\n  ```\n\n启动类省略，下面开始测试。\n\n在浏览器中访问如下端点：`http://localhost:8080/test/cookie?browser=chrome`，下面是连续访问4次的结果\n\n```\n1\t不存在session，设置browser=chrome\n2\t存在session，browser=chrome\n\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159\n3\t存在session，browser=chrome\n\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159\n4\t存在session，browser=chrome\n\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159\n```\n\n如果还记得上一篇文章中运行结果的话，会发现和原生的session管理是有一些差别，原先的信息中我们记得Cookie中记录的Key值是JSESSIONID，而替换成RedisHttpSession之后变成了SESSION。接着观察redis中的变化：\n\n![redis中的session](http://ov0zuistv.bkt.clouddn.com/image/redisSession.png)\n\n解析一下这个redis store，如果不纠结于细节，可以跳过，不影响使用。\n\n​1 spring:session是默认的Redis HttpSession前缀（redis中，我们常用':'作为分割符）。\n\n2 每一个session都会有三个相关的key，第三个key最为重要，它是一个HASH数据结构，将内存中的session信息序列化到了redis中。如上文的browser，就被记录为sessionAttr:browser=chrome,还有一些meta信息，如创建时间，最后访问时间等。\n\n3 另外两个key，expirations:1504446540000和sessions:expires:7079...我发现大多数的文章都没有对其分析，前者是一个SET类型，后者是一个STRING类型，可能会有读者发出这样的疑问，redis自身就有过期时间的设置方式TTL，为什么要额外添加两个key来维持session过期的特性呢？这需要对redis有一定深入的了解才能想到这层设计。当然这不是本节的重点，简单提一下：redis清除过期key的行为是一个异步行为且是一个低优先级的行为，用文档中的原话来说便是，可能会导致session不被清除。于是引入了专门的expiresKey，来专门负责session的清除，包括我们自己在使用redis时也需要关注这一点。在开发层面，我们仅仅需要关注第三个key就行了。\n\n## 总结\n\n本节主要讲解了Spring Boot如何集成Spring Session，下一节将介绍更加复杂的特性。包括自定义Cookie序列化策略，与Spring Security的集成，根据用户名查找session等特性以及使用注意点。\n\n\n\n\n\n\n\n","slug":"Re：从零开始的Spring Session(二)","published":1,"updated":"2017-09-04T11:49:26.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zrx000dtwv7nk2nsdfz","content":"<p>上一篇文章介绍了一些Session和Cookie的基础知识，这篇文章开始正式介绍Spring Session是如何对传统的Session进行改造的。官网这么介绍Spring Session：</p>\n<p>Spring Session provides an API and implementations for managing a user’s session information. It also provides transparent integration with:</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession\" target=\"_blank\" rel=\"external\">HttpSession</a> - allows replacing the HttpSession in an application container (i.e. Tomcat) neutral way. Additional features include:<ul>\n<li><strong>Clustered Sessions</strong> - Spring Session makes it trivial to support <a href=\"https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-redis\" target=\"_blank\" rel=\"external\">clustered sessions</a> without being tied to an application container specific solution.</li>\n<li><strong>Multiple Browser Sessions</strong> - Spring Session supports <a href=\"https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-multi\" target=\"_blank\" rel=\"external\">managing multiple users’ sessions</a> in a single browser instance (i.e. multiple authenticated accounts similar to Google).</li>\n<li><strong>RESTful APIs</strong> - Spring Session allows providing session ids in headers to work with <a href=\"https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-rest\" target=\"_blank\" rel=\"external\">RESTful APIs</a></li>\n</ul>\n</li>\n<li><a href=\"https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#websocket\" target=\"_blank\" rel=\"external\">WebSocket</a> - provides the ability to keep the <code>HttpSession</code> alive when receiving WebSocket messages</li>\n</ul>\n<p>其具体的特性非常之多，具体的内容可以从文档中了解到，笔者做一点自己的总结，Spring Session的特性包括但不限于以下：</p>\n<ul>\n<li>使用GemFire来构建C/S架构的httpSession（不关注）</li>\n<li>使用第三方仓储来实现集群session管理，也就是常说的分布式session容器，替换应用容器（如tomcat的session容器）。仓储的实现，Spring Session提供了三个实现（redis，mongodb，jdbc），其中redis使我们最常用的。程序的实现，使用AOP技术，几乎可以做到透明化地替换。（核心）</li>\n<li>可以非常方便的扩展Cookie和自定义Session相关的Listener，Filter。</li>\n<li>可以很方便的与Spring Security集成，增加诸如findSessionsByUserName，rememberMe，限制同一个账号可以同时在线的Session数（如设置成1，即可达到把前一次登录顶掉的效果）等等</li>\n</ul>\n<p>介绍完特性，下面开始一步步集成Spring Session</p>\n<a id=\"more\"></a>\n<p>##使用Redis集成Spring Session </p>\n<ul>\n<li><p>引入依赖，Spring Boot的版本采用1.5.4</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置</p>\n<p>配置类开启Redis Http Session</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableRedisHttpSession</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpSessionConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>基本是0配置，只需要让主配置扫描到@EnableRedisHttpSession即可</p>\n<p>配置文件application.yml，配置连接的redis信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  redis:</span></div><div class=\"line\"><span class=\"attr\">    host:</span> <span class=\"string\">localhost</span></div><div class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">6379</span></div><div class=\"line\"><span class=\"attr\">    database:</span> <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>编写测试Controller，以便于观察Spring Session的特性，和前一篇文章使用同样的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test/cookie\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">cookie</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"browser\"</span>)</span> String browser, HttpServletRequest request, HttpSession session) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//取出session中的browser</span></div><div class=\"line\">        Object sessionBrowser = session.getAttribute(<span class=\"string\">\"browser\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (sessionBrowser == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"不存在session，设置browser=\"</span> + browser);</div><div class=\"line\">            session.setAttribute(<span class=\"string\">\"browser\"</span>, browser);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"存在session，browser=\"</span> + sessionBrowser.toString());</div><div class=\"line\">        &#125;</div><div class=\"line\">        Cookie[] cookies = request.getCookies();</div><div class=\"line\">        <span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span> &amp;&amp; cookies.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Cookie cookie : cookies) &#123;</div><div class=\"line\">                System.out.println(cookie.getName() + <span class=\"string\">\" : \"</span> + cookie.getValue());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>启动类省略，下面开始测试。</p>\n<p>在浏览器中访问如下端点：<code>http://localhost:8080/test/cookie?browser=chrome</code>，下面是连续访问4次的结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">1\t不存在session，设置browser=chrome</div><div class=\"line\">2\t存在session，browser=chrome</div><div class=\"line\">\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159</div><div class=\"line\">3\t存在session，browser=chrome</div><div class=\"line\">\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159</div><div class=\"line\">4\t存在session，browser=chrome</div><div class=\"line\">\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159</div></pre></td></tr></table></figure>\n<p>如果还记得上一篇文章中运行结果的话，会发现和原生的session管理是有一些差别，原先的信息中我们记得Cookie中记录的Key值是JSESSIONID，而替换成RedisHttpSession之后变成了SESSION。接着观察redis中的变化：</p>\n<p><img src=\"http://ov0zuistv.bkt.clouddn.com/image/redisSession.png\" alt=\"redis中的session\"></p>\n<p>解析一下这个redis store，如果不纠结于细节，可以跳过，不影响使用。</p>\n<p>​1 spring:session是默认的Redis HttpSession前缀（redis中，我们常用’:’作为分割符）。</p>\n<p>2 每一个session都会有三个相关的key，第三个key最为重要，它是一个HASH数据结构，将内存中的session信息序列化到了redis中。如上文的browser，就被记录为sessionAttr:browser=chrome,还有一些meta信息，如创建时间，最后访问时间等。</p>\n<p>3 另外两个key，expirations:1504446540000和sessions:expires:7079…我发现大多数的文章都没有对其分析，前者是一个SET类型，后者是一个STRING类型，可能会有读者发出这样的疑问，redis自身就有过期时间的设置方式TTL，为什么要额外添加两个key来维持session过期的特性呢？这需要对redis有一定深入的了解才能想到这层设计。当然这不是本节的重点，简单提一下：redis清除过期key的行为是一个异步行为且是一个低优先级的行为，用文档中的原话来说便是，可能会导致session不被清除。于是引入了专门的expiresKey，来专门负责session的清除，包括我们自己在使用redis时也需要关注这一点。在开发层面，我们仅仅需要关注第三个key就行了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本节主要讲解了Spring Boot如何集成Spring Session，下一节将介绍更加复杂的特性。包括自定义Cookie序列化策略，与Spring Security的集成，根据用户名查找session等特性以及使用注意点。</p>\n","site":{"data":{}},"excerpt":"<p>上一篇文章介绍了一些Session和Cookie的基础知识，这篇文章开始正式介绍Spring Session是如何对传统的Session进行改造的。官网这么介绍Spring Session：</p>\n<p>Spring Session provides an API and implementations for managing a user’s session information. It also provides transparent integration with:</p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession\" target=\"_blank\" rel=\"external\">HttpSession</a> - allows replacing the HttpSession in an application container (i.e. Tomcat) neutral way. Additional features include:<ul>\n<li><strong>Clustered Sessions</strong> - Spring Session makes it trivial to support <a href=\"https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-redis\" target=\"_blank\" rel=\"external\">clustered sessions</a> without being tied to an application container specific solution.</li>\n<li><strong>Multiple Browser Sessions</strong> - Spring Session supports <a href=\"https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-multi\" target=\"_blank\" rel=\"external\">managing multiple users’ sessions</a> in a single browser instance (i.e. multiple authenticated accounts similar to Google).</li>\n<li><strong>RESTful APIs</strong> - Spring Session allows providing session ids in headers to work with <a href=\"https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#httpsession-rest\" target=\"_blank\" rel=\"external\">RESTful APIs</a></li>\n</ul>\n</li>\n<li><a href=\"https://docs.spring.io/spring-session/docs/1.3.1.RELEASE/reference/html5/#websocket\" target=\"_blank\" rel=\"external\">WebSocket</a> - provides the ability to keep the <code>HttpSession</code> alive when receiving WebSocket messages</li>\n</ul>\n<p>其具体的特性非常之多，具体的内容可以从文档中了解到，笔者做一点自己的总结，Spring Session的特性包括但不限于以下：</p>\n<ul>\n<li>使用GemFire来构建C/S架构的httpSession（不关注）</li>\n<li>使用第三方仓储来实现集群session管理，也就是常说的分布式session容器，替换应用容器（如tomcat的session容器）。仓储的实现，Spring Session提供了三个实现（redis，mongodb，jdbc），其中redis使我们最常用的。程序的实现，使用AOP技术，几乎可以做到透明化地替换。（核心）</li>\n<li>可以非常方便的扩展Cookie和自定义Session相关的Listener，Filter。</li>\n<li>可以很方便的与Spring Security集成，增加诸如findSessionsByUserName，rememberMe，限制同一个账号可以同时在线的Session数（如设置成1，即可达到把前一次登录顶掉的效果）等等</li>\n</ul>\n<p>介绍完特性，下面开始一步步集成Spring Session</p>","more":"<p>##使用Redis集成Spring Session </p>\n<ul>\n<li><p>引入依赖，Spring Boot的版本采用1.5.4</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置</p>\n<p>配置类开启Redis Http Session</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableRedisHttpSession</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpSessionConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>基本是0配置，只需要让主配置扫描到@EnableRedisHttpSession即可</p>\n<p>配置文件application.yml，配置连接的redis信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  redis:</span></div><div class=\"line\"><span class=\"attr\">    host:</span> <span class=\"string\">localhost</span></div><div class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">6379</span></div><div class=\"line\"><span class=\"attr\">    database:</span> <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>编写测试Controller，以便于观察Spring Session的特性，和前一篇文章使用同样的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test/cookie\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">cookie</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"browser\"</span>)</span> String browser, HttpServletRequest request, HttpSession session) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//取出session中的browser</span></div><div class=\"line\">        Object sessionBrowser = session.getAttribute(<span class=\"string\">\"browser\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (sessionBrowser == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"不存在session，设置browser=\"</span> + browser);</div><div class=\"line\">            session.setAttribute(<span class=\"string\">\"browser\"</span>, browser);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"存在session，browser=\"</span> + sessionBrowser.toString());</div><div class=\"line\">        &#125;</div><div class=\"line\">        Cookie[] cookies = request.getCookies();</div><div class=\"line\">        <span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span> &amp;&amp; cookies.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Cookie cookie : cookies) &#123;</div><div class=\"line\">                System.out.println(cookie.getName() + <span class=\"string\">\" : \"</span> + cookie.getValue());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>启动类省略，下面开始测试。</p>\n<p>在浏览器中访问如下端点：<code>http://localhost:8080/test/cookie?browser=chrome</code>，下面是连续访问4次的结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">1\t不存在session，设置browser=chrome</div><div class=\"line\">2\t存在session，browser=chrome</div><div class=\"line\">\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159</div><div class=\"line\">3\t存在session，browser=chrome</div><div class=\"line\">\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159</div><div class=\"line\">4\t存在session，browser=chrome</div><div class=\"line\">\tSESSION : 70791b17-83e1-42db-8894-73fbd2f2a159</div></pre></td></tr></table></figure>\n<p>如果还记得上一篇文章中运行结果的话，会发现和原生的session管理是有一些差别，原先的信息中我们记得Cookie中记录的Key值是JSESSIONID，而替换成RedisHttpSession之后变成了SESSION。接着观察redis中的变化：</p>\n<p><img src=\"http://ov0zuistv.bkt.clouddn.com/image/redisSession.png\" alt=\"redis中的session\"></p>\n<p>解析一下这个redis store，如果不纠结于细节，可以跳过，不影响使用。</p>\n<p>​1 spring:session是默认的Redis HttpSession前缀（redis中，我们常用’:’作为分割符）。</p>\n<p>2 每一个session都会有三个相关的key，第三个key最为重要，它是一个HASH数据结构，将内存中的session信息序列化到了redis中。如上文的browser，就被记录为sessionAttr:browser=chrome,还有一些meta信息，如创建时间，最后访问时间等。</p>\n<p>3 另外两个key，expirations:1504446540000和sessions:expires:7079…我发现大多数的文章都没有对其分析，前者是一个SET类型，后者是一个STRING类型，可能会有读者发出这样的疑问，redis自身就有过期时间的设置方式TTL，为什么要额外添加两个key来维持session过期的特性呢？这需要对redis有一定深入的了解才能想到这层设计。当然这不是本节的重点，简单提一下：redis清除过期key的行为是一个异步行为且是一个低优先级的行为，用文档中的原话来说便是，可能会导致session不被清除。于是引入了专门的expiresKey，来专门负责session的清除，包括我们自己在使用redis时也需要关注这一点。在开发层面，我们仅仅需要关注第三个key就行了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本节主要讲解了Spring Boot如何集成Spring Session，下一节将介绍更加复杂的特性。包括自定义Cookie序列化策略，与Spring Security的集成，根据用户名查找session等特性以及使用注意点。</p>"},{"title":"Re：从零开始的领域驱动设计","date":"2017-07-28T05:15:46.000Z","_content":"\n[TOC]\n## 前言\n领域驱动的火爆程度不用我赘述，但是即便其如此得耳熟能详，但大多数人对其的认识，还只是停留在知道它的缩写是DDD，知道它是一种软件思想，或者知道它和微服务有千丝万缕的关系。Eric Evans对DDD的诠释是那么地惜字如金，而我所认识的领域驱动设计的专家又都是行业中的资深前辈，他们擅长于对软件设计进行高屋建瓴的论述，如果没有丰富的互联网从业经验，是不能从他们的分享中获取太多的营养的，可以用曲高和寡来形容。1000个互联网从业者，100个懂微服务，10个人懂领域驱动设计。\n\n可能有很多和我一样的读者，在得知DDD如此火爆之后，尝试去读了开山之作《领域驱动设计——软件核心复杂性应对之道》，翻看了几张之后，晦涩的语句，不明所以的专业术语，加上翻译导致的语句流畅性，可以说观看体验并不是很好，特别是对于开发经验不是很多的读者。我总结了一下，为何这本书难以理解：\n1.\t没有阅读软件设计丛书的习惯，更多人偏向于阅读偏应用层面的书籍，“talk is cheap，show me the code”往往更符合大多数人的习惯。 \n  2.没有太多的开发经验支撑。没有踩过坑，就不会意识到设计的重要性，无法产生共情。\n  3.年代有些久远，这本书写于2004年，书中很多软件设计的反例，在当时是非常流行的，但是在现在已经基本绝迹了。大师之所以为大师，是因为其能跨越时代的限制，预见未来的问题，这也是为什么DDD在十几年前就被提出，却在微服务逐渐流行的现阶段才被大家重视。\n\n诚然如标题所示，本文是领域驱动设计的一个入门文章，或者更多的是一个个人理解的笔记，笔者也正在学习DDD的路上，可能会有很多的疏漏。如有理解有偏颇的地方，还望各位指摘。\n\n<!-- more -->\n\n## 认识领域驱动设计的意义\n领域驱动设计并不会绝对地提高项目的开发效率。\n<center>\n![领域驱动设计复杂性比较](http://img.blog.csdn.net/20170728033004279?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n<center>图1：复杂性与开发周期关系</center>\n遵循领域驱动设计的规范使得项目初期的开发甚至不如不使用它来的快，原因有很多，程序员的素质，代码的规范，限界上下文的划分...甚至需求修改后导致需要重新建模。但是遵循领域驱动设计的规范，在项目越来越复杂之后，可以不至于让项目僵死。这也是为什么很多系统不断迭代着，最终就黄了。书名的副标题“软件核心复杂性应对之道”正是阐释了这一点\n\n\n## 模式： smart ui是个反模式\n可能很多读者还不知道smart ui是什么，但是在这本书写作期间，这种设计风格是非常流行的。在与一位领域驱动设计方面的资深专家的交谈中，他如下感慨到软件发展的历史：\n>2003年时，正是delphi，vb一类的smart ui程序大行其道，java在那个年代，还在使用jsp来完成大量的业务逻辑操作，4000行的jsp是常见的事；2005年spring hibernate替换了EJB，社区一片欢呼，所有人开始拥护action，service，dao这样的贫血模型（充血模型，贫血模型会在下文论述）；2007年，Rails兴起，有人发现了Rails的activeRecord是涨血模型，引起了一片混战；直到现在的2017年，微服务成为主流系统架构。\n\n在现在这个年代，不懂个MVC分层，都不好意思说自己是搞java的，也不会有人在jsp里面写业务代码了（可以说模板技术freemarker,thymeleaf已经取代jsp了），但是在那个年代，还没有现在这么普遍地强调分层架构的重要性。\n\n这个章节其实并不重要，因为mvc一类的分层架构已经是大多数java初学者的“起点”了，大多数DDD的文章都不会赘述这一点，我这里列出来是为了让大家知晓这篇文章的时代局限性，在后续章节的理解中，也需要抱有这样的逻辑：这本书写于2004年。\n\n## 模式： Entity与Value Object\n我在不了解DDD时，就对这两个术语早有耳闻。entity又被称为`reference object`，我们通常所说的java bean在领域中通常可以分为这两类，（可别把value object和常用于前台展示的view object，vo混为一谈）\nentity的要义在于生命周期和标识，value object的要义在于无标识，通常情况下，entity在通俗意义上可以理解为数据库的实体，（不过不严谨），value object则一般作为一个单独的类，构成entity的一个属性。\n\n举两个例子来加深对entity和value object的理解。\n\n例1：以电商微服务系统中的商品模块，订单模块为例。将整个电商系统划分出商品和订单两个限界上下文（Bound Context）应该是没有争议的。如果是传统的单体应用，我们可以如何设计这两个模块的实体类呢？\n会不会是这样？\n```java\nclass Product{\n\tString id;//主键\n\tString skuId;//唯一识别号\n\tString productName;\n\tBigdecimal price;\n\tCategory category;//分类\n\tList<Specification> specifications;//规格\t\n\t...\t\n}\n\nclass Order{\n\tString id;//主键\n\tString orderNo;//订单号\n\tList<OrderItem> orderItems;//订单明细\n\tBigDecimal orderAmount;//总金额\n\t...\n}\n\nclass OrderItem{\n\tString id;\n\tProduct product;//关联商品\n\tBigDecimal snapshotPrice;//下单时的价格\n}\n```\n看似好像没问题，考虑到了订单要保存下单时候的价格（当然，这是常识）但这么设计却存在诸多的问题。在分布式系统中，商品和订单这两个模块必然不在同一个模块，也就意味着不在同一个网段中。上述的类设计中直接将Product的列表存储到了Order中，也就是一对多的外键关联。这会导致，每次访问订单的商品列表，都需要发起n次远程调用。\n\n反思我们的设计，其实我们发现，订单BC的Product和商品BC的Product其实并不是同一个entity，在商品模块中，我们更关注商品的规格，种类，实时价格，这最直接地反映了我们想要买什么的欲望。而当生成订单后，我们只关心这个商品买的时候价格是多少，不会关心这个商品之后的价格变动，还有他的名称，仅仅是方便我们在订单的商品列表中定位这个商品。\n\n如何改造就变得明了了\n```java\nclass OrderItem{\n\tString id;\n\tString productId;//只记录一个id用于必要的时候发起command操作\n\tString skuId;\n\tString productName;\n\t...\n\tBigDecimal snapshotPrice;//下单时的价格\n}\n```\n是的，我们做了一定的冗余，这使得即使商品模块的商品，名称发生了微调，也不会被订单模块知晓。这么做也有它的业务含义，用户会声称：我买的时候他的确就叫这个名字。记录productId和skuId的用意不是为了查询操作，而是方便申请售后一类的命令操作（command）。\n\n在这个例子中，Order 和 Product都是entity，而OrderItem则是value object（想想之前的定义，OrderItem作为一个类，的确是描述了Order这个entity的一个属性集合）。关于标识，我的理解是有两层含义，第一个是作为数据本身存储于数据库，主键id是一个标识，第二是作为领域对象本身，orderNo是一个标识，对于人而言，身份证是一个标识。而OrderItem中的productId，id不能称之为标识，因为整个OrderItem对象是依托于Order存在的，Order不存在，则OrderItem没有意义。\n\n例子2： 汽车和轮胎的关系是entity和value object吗？\n这个例子其实是一个陷阱题，因为他没有交代限界上下文（BC），场景不足以判断。对于用户领域而言，的确可以成立，汽车报废之后，很少有人会关心轮胎。轮胎和发动机，雨刮器，座椅地位一样，只是构成汽车的一些部件，和用户最紧密相关的，只有汽车这个entity，轮胎只是描述这个汽车的属性（value object）；场景切换到汽修厂，无论是汽车，还是轮胎，都是汽修厂密切关心的，每个轮胎都有自己的编号，一辆车报废了，可以安置到其他车上，这里，他们都是entity。\n\n这个例子是在说明这么一个道理，同样的事物，在不同的领域中，会有不同的地位。\n<center>\n![通过value object优化数据库](http://img.blog.csdn.net/20170728031939418?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n<center>图2：《领域驱动设计》Value Object模式的示例</center>\n\n在单体应用中，可能会有人指出，这直接违背了数据库范式，但是领域驱动设计的思想正如他的名字那样，不是基于数据库的，而是基于领域的。微服务使得数据库发生了隔离，这样的设计思想可以更好的指导我们优化数据库。\n\n## 模式： Repository\n>哲学家分析自然规律得出规范，框架编写者根据规范制定框架。有些框架，可能大家一直在用，但是却不懂其中蕴含的哲学。  \n><p align=\"right\">------来自于笔者的口胡</p>\n\n记得在刚刚接触mvc模式，常常用DAO层表示持久化层，在JPA+springdata中，抽象出了各式各样的xxxRepository，与DDD的Repository模式同名并不是巧合，jpa所表现出的正是一个充血模型（如果你遵循正确的使用方式的话），可以说是领域驱动设计的一个最佳实践。\n\n开宗明义，在Martin Fowler理论中，有四种领域模型：\n1. 失血模型\n2. 贫血模型\n3. 充血模型\n4. 胀血模型\n  详细的概念区别不赘述了，可以参见专门讲解4种模型的博客。他们在数据库开发中分别有不同的实现，用一个修改用户名的例子来分析。\n```java\nclass User{\n\tString id;\n\tString name;\n\tInteger age;\n}\n```\n失血模型：\n跳过，可以理解为所有的操作都是直接操作数据库，在smart ui中可能会出现这样的情况。\n\n贫血模型：\n```java\nclass UserDao {\n\t@Autowired\n\tJdbcTemplate jdbcTemplate;\n\n\tpublic void updateName(String name,String id){\n\t\tjdbcTemplate.excute(\"update user u set u.name = ? where id=?\",name,id);\n\t}\n}\n\nclass UserService{\n\t\n\t@Autowired\n\tUserDao userDao;\n\n\tvoid updateName(String name,String id){\n\t\tuserDao.updateName(name,id);\n\t} \n}\n```\n贫血模型中，dao是一类sql的集合，在项目中的表现就是写了一堆sql脚本，与之对应的service层，则是作为Transaction Script的入口。观察仔细的话，会发现整个过程中user对象都没出现过。\n\n充血模型：\n```java\ninterface UserRepository extends JpaRepository<User,String>{\n\t//springdata-jpa自动扩展出save findOne findAll方法\n}\n\nclass UserService{\n\t@Autowoird\n\tUserRepository userRepository;\n\n\tvoid updateName(String name,String id){\n\t\tUser user = userRepository.findOne(id);\n\t\tuser.setName(name);\n\t\tuserRepository.save(user);\n\t}\n}\n```\n充血模型中，整个修改操作是“隐性”的，对内存中user对象的修改直接影响到了数据库最终的结果，不需要关心数据库操作，只需要关注领域对象user本身。Repository模式就是在于此，屏蔽了数据库的实现。与贫血模型中user对象恰恰相反，整个流程没有出现sql语句。\n\n涨血模型：\n没有具体的实现，可以这么理解：\n```java\nvoid updateName(String name,String id){\n\tUser user = new User(id);\n\tuser.setName(name);\n\tuser.save();\n}\n```\n\n我们在Repository模式中重点关注充血模型。为什么前面说：如果你遵循正确的使用方式的话，springdata才是对DDD的最佳实践呢？因为有的使用者会写出下面的代码：\n```java\ninterface UserRepository extends JpaRepository<User,String>{\n\t\n\t@Query(\"update user set name=? where id=?\")\n\t@Modifying(clearAutomatically = true)\n\t@Transactional\n\tvoid updateName(String name,String id);\n}\n```\n历史的车轮在滚滚倒退。本节只关注模型本身，不讨论使用中的一些并发问题，再来聊聊其他的一些最佳实践。\n```java\ninterface UserRepository extends JpaRepository<User,String>{\n\n\tUser findById();//√  然后已经存在findOne了，只是为了做个对比\n\tUser findBy身份证号();//可以接受\n\tUser findBy名称();//×\n\tList<权限> find权限ByUserId();//×\n}\n```\n理论上，一个Repository需要且仅需要包含三类方法loadBy标识，findAll，save（一般findAll（）就包含了分页，排序等多个方法，算作一类方法）。标识的含义和前文中entity的标识是同一个含义，在我个人的理解中，身份证可以作为一个用户的标识（这取决于你的设计，同样的逻辑还有订单中有业务含义的订单编号，保单中的投保单号等等），在数据库中，id也可以作为标识。findBy名称为什么不值得推崇，因为name并不是User的标识，名字可能会重复，只有在特定的现场场景中，名字才能具体对应到人。那应该如何完成“根据姓名查找可能的用户”这一需求呢？最方便的改造是使用Criteria，Predicate来完成视图的查询，哪怕只有一个非标识条件。在更完善的CQRS架构中，视图的查询则应该交由专门的View层去做，可以是数据库，可以是ES。findByUserId不值得推崇则是因为他违背了聚合根模式（下文会介绍），User的Repository只应该返回User对象。\n\n软件设计初期，你是不是还在犹豫：是应该先设计数据库呢，还是应该设计实体呢？在Domain-Driven的指导下，你应当放弃Data-Driven。\n\n## 模式 聚合和聚合根\n难住我的还有英文单词，初识这个概念时，忍不住发问：Aggregate是个啥。文中使用聚合的概念，来描述对象之间的关联，采用合适的聚合策略，可以避免一个很长，很深的对象引用路径。对划分模块也有很大的指导意义。\n\n在微服务中我们常说划分服务模块，在领域驱动设计中，我们常说划分限界上下文。在面向对象的世界里，用抽象来封装模型中的引用，聚合就是指一组相关对象的集合，我们把它作为数据修改的单元。每个聚合都有一个聚合根(root)和一个边界(boundary)。边界定义了聚合内部有什么，而根则是一个特定的entity，两个聚合之间，只允许维护根引用，只能通过根引用去向深入引用其他引用变量。\n\n例子还是沿用电商系统中的订单和商品模块。在聚合模式中，订单不能够直接关联到商品的规格信息，如果一定要查询，则应该通过订单关联到的商品，由商品去访问商品规格。在这个例子中，订单和商品分别是两个边界，而订单模块中的订单entity和商品模块中的商品entity就是分别是各自模块的root。遵循这个原则，可以使我们模块关系不那么的盘根错节，这也是众多领域驱动文章中不断强调的划分限界上下文是第一要义。\n\n## 模式 包结构\n微服务有诸多的模块，而每个模块并不一定是那么的单一职责，比模块更细的分层，便是包的分层。我在阅读中，隐隐觉得这其中蕴含着一层哲学，但是几乎没有文章尝试解读它。领域驱动设计将其单独作为了一个模式进行了论述，篇幅不小。重点就是论述了一个思想：包结构应当具有高内聚性。\n\n这次以一个真实的案例来介绍一下对高内聚的包结构的理解，项目使用maven多module搭建。我曾经开发过一个短信邮件平台模块，它在整个微服务系统中有两个职责，一：负责为其他模块提供短信邮件发送的远程调用接口，二：有一个后台页面，可以让管理员自定义发送短信，并且可以浏览全部的一，二两种类型发送的短信邮件记录。\n\n在设计包结构之前，先是设计微服务模块。\n| module名 | 说明              | package类型      | 顶级包名                     |\n| ------- | --------------- | -------------- | ------------------------ |\n| api     | api接口定义，用于暴露服务  | jar            | sinosoftgz.message.api   |\n| app     | api实现者，真正的服务提供者 | executable jar | sinosoftgz.message.app   |\n| admin   | 管理端应用           | executable jar | sinosoftgz.message.admin |\n| model   | 实体              | jar            | sinosoftgz.message.model |\napi层定义了一系列的接口和接口依赖的一些java bean，model层也就是我们的领域层。这两个模块都会打成jar包，外部服务依赖api，api则由app模块使用rpc框架实现远程调用。admin和app连接同一个数据源，可以查询出短信邮件记录，admin需要自定义发送短信也是通过rpc调用。简单介绍完了这个项目后，重点来分析下需求，来看看如何构建包结构。\nmvc分层天然将controller，service，model，config层分割开，这符合DDD所推崇的分层架构模式（这个模式在原文中有描述，但我觉得和现在耳熟能详的分层结构没有太大的出入，所以没有放到本文中介绍），而我们的业务需求也将短信和邮件这两个领域拆分开了。那么，到底是mvc应该包含业务包结构呢？还是说业务包结构包含mvc呢？\n\nmvc高于业务分层\n```java\n//不够好的分层\nsinosoftgz.message.admin\n\tconfig\n\t\tCommonConfig.java\n\tservice\n\t\tCommonService.java\n\t\tmail\n\t\t\tMailTemplateService.java\n\t\t\tMailMessageService.java\n\t\tsms\n\t\t\tSmsTemplateService.java\n\t\t\tSmsMessageService.java\n\tweb\n\t\tIndexController.java\n\t\tmail\n\t\t\tMailTemplateController.java\n\t\t\tMailMessageController.java\n\t\tsms\n\t\t\tSmsTemplateController.java\n\t\t\tSmsMessageController.java\n\tMessageAdminApp.java\n```\n\n业务分层包含mvc\n```java\n//高内聚的分层\nsinosoftgz.message.admin\n\tconfig\n\t\tCommonConfig.java\n\tservice\n\t\tCommonService.java\n\tweb\n\t\tIndexController.java\n\tmail\n\t    config\n\t        MailConfig.java\n\t\tservice\n\t\t\tMailTemplateService.java\n\t\t\tMailMessageService.java\n\t\tweb\n\t\t\tMailTemplateController.java\n\t\t\tMailMessageController.java\n\tsms\n\t    config\n\t        Smsconfig.java\n\t\tservice\n\t\t\tSmsTemplateService.java\n\t\t\tSmsMessageService.java\n\t\tweb\n\t\t\tSmsTemplateController.java\n\t\t\tSmsMessageController.java\n\tMessageAdminApp.java\n```\n业务并不是特别复杂，但应该可以发现第二种（业务分层包含mvc）的包结构，才是一种高内聚的包结构。第一种分层会让人有一种将各个业务模块（如mail和sms）的service和controller隔离开了的感觉，当模块更多，每个模块的内容更多，这个“隔得很远”的不适感会逐渐侵蚀你的开发速度。一种更加低内聚的反例是不用包分层，仅仅依赖前缀区分，由于在项目开发中真的发现同事写出了这样的代码，我觉得还是有必要拿出来说一说：\n```java\n//反例\nsinosoftgz.message.admin\n\tconfig\n\t\tCommonConfig.java\n\t\tMailConfig.java\n\t\tSmsconfig.java\n\tservice\n\t\tCommonService.java\n\t\tMailTemplateService.java\n\t\tMailMessageService.java\n\t\tSmsTemplateService.java\n\t\tSmsMessageService.java\n\tweb\n\t\tIndexController.java\n\t\tMailTemplateController.java\n\t\tMailMessageController.java\n\t\tSmsTemplateController.java\n\t\tSmsMessageController.java     \n\tMessageAdminApp.java\n```\n这样的设计会导致web包越来越庞大，逐渐变得臃肿，是什么使项目僵化，项目经理为何一看到代码就头疼，规范的高内聚的包结构，遵循业务>mvc的原则，可以知道我们的项目庞大却有条理。\n\n## 其他模式\n《领域驱动设计》这本书介绍了众多的模式，上面只是介绍了一部分重要的模式，后续我会结合各个模式，尽量采用最佳实践+浅析设计的方式来解读。\n\n## 微服务之于领域驱动设计的一点思考\n技术架构诚然重要，但不可忽视领域拆解和业务架构，《领域驱动设计》中的诸多失败，成功案例的总结，是支撑其理论知识的基础，最终汇聚成众多的模式。在火爆的微服务架构潮流下，我也逐渐意识到微服务不仅仅是技术的堆砌，更是一种设计，一门艺术。我的本科论文本想就微服务架构进行论述，奈何功底不够，最后只能改写成一篇分布式网站设计相关的文章，虽然是一个失败的过程，但让我加深了对微服务的认识。如今结合领域驱动设计，更加让我确定，技术方案始终有代替方案，决定微服务的不是框架的选择，不仅仅是restful或者rpc的接口设计风格的抉择，而更应该关注拆解，领域，限界上下文，聚合根等等一系列事物，这便是我所理解的领域驱动设计对微服务架构的指导意义。\n\n## 参考文章\n[多研究些架构，少谈些框架----曹祖鹏](https://github.com/JoeCao/JoeCao.github.io/issues/1)\n\n[DDD领域驱动设计基本理论知识总结 - netfocus](http://www.cnblogs.com/netfocus/archive/2011/10/10/2204949.html)\n\n","source":"_posts/Re：从零开始的领域驱动设计.md","raw":"---\ntitle: Re：从零开始的领域驱动设计\ndate: 2017-07-28 13:15:46\ntags: \n- 领域驱动设计\ncategories: \n- 领域驱动设计\n---\n\n[TOC]\n## 前言\n领域驱动的火爆程度不用我赘述，但是即便其如此得耳熟能详，但大多数人对其的认识，还只是停留在知道它的缩写是DDD，知道它是一种软件思想，或者知道它和微服务有千丝万缕的关系。Eric Evans对DDD的诠释是那么地惜字如金，而我所认识的领域驱动设计的专家又都是行业中的资深前辈，他们擅长于对软件设计进行高屋建瓴的论述，如果没有丰富的互联网从业经验，是不能从他们的分享中获取太多的营养的，可以用曲高和寡来形容。1000个互联网从业者，100个懂微服务，10个人懂领域驱动设计。\n\n可能有很多和我一样的读者，在得知DDD如此火爆之后，尝试去读了开山之作《领域驱动设计——软件核心复杂性应对之道》，翻看了几张之后，晦涩的语句，不明所以的专业术语，加上翻译导致的语句流畅性，可以说观看体验并不是很好，特别是对于开发经验不是很多的读者。我总结了一下，为何这本书难以理解：\n1.\t没有阅读软件设计丛书的习惯，更多人偏向于阅读偏应用层面的书籍，“talk is cheap，show me the code”往往更符合大多数人的习惯。 \n  2.没有太多的开发经验支撑。没有踩过坑，就不会意识到设计的重要性，无法产生共情。\n  3.年代有些久远，这本书写于2004年，书中很多软件设计的反例，在当时是非常流行的，但是在现在已经基本绝迹了。大师之所以为大师，是因为其能跨越时代的限制，预见未来的问题，这也是为什么DDD在十几年前就被提出，却在微服务逐渐流行的现阶段才被大家重视。\n\n诚然如标题所示，本文是领域驱动设计的一个入门文章，或者更多的是一个个人理解的笔记，笔者也正在学习DDD的路上，可能会有很多的疏漏。如有理解有偏颇的地方，还望各位指摘。\n\n<!-- more -->\n\n## 认识领域驱动设计的意义\n领域驱动设计并不会绝对地提高项目的开发效率。\n<center>\n![领域驱动设计复杂性比较](http://img.blog.csdn.net/20170728033004279?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n<center>图1：复杂性与开发周期关系</center>\n遵循领域驱动设计的规范使得项目初期的开发甚至不如不使用它来的快，原因有很多，程序员的素质，代码的规范，限界上下文的划分...甚至需求修改后导致需要重新建模。但是遵循领域驱动设计的规范，在项目越来越复杂之后，可以不至于让项目僵死。这也是为什么很多系统不断迭代着，最终就黄了。书名的副标题“软件核心复杂性应对之道”正是阐释了这一点\n\n\n## 模式： smart ui是个反模式\n可能很多读者还不知道smart ui是什么，但是在这本书写作期间，这种设计风格是非常流行的。在与一位领域驱动设计方面的资深专家的交谈中，他如下感慨到软件发展的历史：\n>2003年时，正是delphi，vb一类的smart ui程序大行其道，java在那个年代，还在使用jsp来完成大量的业务逻辑操作，4000行的jsp是常见的事；2005年spring hibernate替换了EJB，社区一片欢呼，所有人开始拥护action，service，dao这样的贫血模型（充血模型，贫血模型会在下文论述）；2007年，Rails兴起，有人发现了Rails的activeRecord是涨血模型，引起了一片混战；直到现在的2017年，微服务成为主流系统架构。\n\n在现在这个年代，不懂个MVC分层，都不好意思说自己是搞java的，也不会有人在jsp里面写业务代码了（可以说模板技术freemarker,thymeleaf已经取代jsp了），但是在那个年代，还没有现在这么普遍地强调分层架构的重要性。\n\n这个章节其实并不重要，因为mvc一类的分层架构已经是大多数java初学者的“起点”了，大多数DDD的文章都不会赘述这一点，我这里列出来是为了让大家知晓这篇文章的时代局限性，在后续章节的理解中，也需要抱有这样的逻辑：这本书写于2004年。\n\n## 模式： Entity与Value Object\n我在不了解DDD时，就对这两个术语早有耳闻。entity又被称为`reference object`，我们通常所说的java bean在领域中通常可以分为这两类，（可别把value object和常用于前台展示的view object，vo混为一谈）\nentity的要义在于生命周期和标识，value object的要义在于无标识，通常情况下，entity在通俗意义上可以理解为数据库的实体，（不过不严谨），value object则一般作为一个单独的类，构成entity的一个属性。\n\n举两个例子来加深对entity和value object的理解。\n\n例1：以电商微服务系统中的商品模块，订单模块为例。将整个电商系统划分出商品和订单两个限界上下文（Bound Context）应该是没有争议的。如果是传统的单体应用，我们可以如何设计这两个模块的实体类呢？\n会不会是这样？\n```java\nclass Product{\n\tString id;//主键\n\tString skuId;//唯一识别号\n\tString productName;\n\tBigdecimal price;\n\tCategory category;//分类\n\tList<Specification> specifications;//规格\t\n\t...\t\n}\n\nclass Order{\n\tString id;//主键\n\tString orderNo;//订单号\n\tList<OrderItem> orderItems;//订单明细\n\tBigDecimal orderAmount;//总金额\n\t...\n}\n\nclass OrderItem{\n\tString id;\n\tProduct product;//关联商品\n\tBigDecimal snapshotPrice;//下单时的价格\n}\n```\n看似好像没问题，考虑到了订单要保存下单时候的价格（当然，这是常识）但这么设计却存在诸多的问题。在分布式系统中，商品和订单这两个模块必然不在同一个模块，也就意味着不在同一个网段中。上述的类设计中直接将Product的列表存储到了Order中，也就是一对多的外键关联。这会导致，每次访问订单的商品列表，都需要发起n次远程调用。\n\n反思我们的设计，其实我们发现，订单BC的Product和商品BC的Product其实并不是同一个entity，在商品模块中，我们更关注商品的规格，种类，实时价格，这最直接地反映了我们想要买什么的欲望。而当生成订单后，我们只关心这个商品买的时候价格是多少，不会关心这个商品之后的价格变动，还有他的名称，仅仅是方便我们在订单的商品列表中定位这个商品。\n\n如何改造就变得明了了\n```java\nclass OrderItem{\n\tString id;\n\tString productId;//只记录一个id用于必要的时候发起command操作\n\tString skuId;\n\tString productName;\n\t...\n\tBigDecimal snapshotPrice;//下单时的价格\n}\n```\n是的，我们做了一定的冗余，这使得即使商品模块的商品，名称发生了微调，也不会被订单模块知晓。这么做也有它的业务含义，用户会声称：我买的时候他的确就叫这个名字。记录productId和skuId的用意不是为了查询操作，而是方便申请售后一类的命令操作（command）。\n\n在这个例子中，Order 和 Product都是entity，而OrderItem则是value object（想想之前的定义，OrderItem作为一个类，的确是描述了Order这个entity的一个属性集合）。关于标识，我的理解是有两层含义，第一个是作为数据本身存储于数据库，主键id是一个标识，第二是作为领域对象本身，orderNo是一个标识，对于人而言，身份证是一个标识。而OrderItem中的productId，id不能称之为标识，因为整个OrderItem对象是依托于Order存在的，Order不存在，则OrderItem没有意义。\n\n例子2： 汽车和轮胎的关系是entity和value object吗？\n这个例子其实是一个陷阱题，因为他没有交代限界上下文（BC），场景不足以判断。对于用户领域而言，的确可以成立，汽车报废之后，很少有人会关心轮胎。轮胎和发动机，雨刮器，座椅地位一样，只是构成汽车的一些部件，和用户最紧密相关的，只有汽车这个entity，轮胎只是描述这个汽车的属性（value object）；场景切换到汽修厂，无论是汽车，还是轮胎，都是汽修厂密切关心的，每个轮胎都有自己的编号，一辆车报废了，可以安置到其他车上，这里，他们都是entity。\n\n这个例子是在说明这么一个道理，同样的事物，在不同的领域中，会有不同的地位。\n<center>\n![通过value object优化数据库](http://img.blog.csdn.net/20170728031939418?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)</center>\n<center>图2：《领域驱动设计》Value Object模式的示例</center>\n\n在单体应用中，可能会有人指出，这直接违背了数据库范式，但是领域驱动设计的思想正如他的名字那样，不是基于数据库的，而是基于领域的。微服务使得数据库发生了隔离，这样的设计思想可以更好的指导我们优化数据库。\n\n## 模式： Repository\n>哲学家分析自然规律得出规范，框架编写者根据规范制定框架。有些框架，可能大家一直在用，但是却不懂其中蕴含的哲学。  \n><p align=\"right\">------来自于笔者的口胡</p>\n\n记得在刚刚接触mvc模式，常常用DAO层表示持久化层，在JPA+springdata中，抽象出了各式各样的xxxRepository，与DDD的Repository模式同名并不是巧合，jpa所表现出的正是一个充血模型（如果你遵循正确的使用方式的话），可以说是领域驱动设计的一个最佳实践。\n\n开宗明义，在Martin Fowler理论中，有四种领域模型：\n1. 失血模型\n2. 贫血模型\n3. 充血模型\n4. 胀血模型\n  详细的概念区别不赘述了，可以参见专门讲解4种模型的博客。他们在数据库开发中分别有不同的实现，用一个修改用户名的例子来分析。\n```java\nclass User{\n\tString id;\n\tString name;\n\tInteger age;\n}\n```\n失血模型：\n跳过，可以理解为所有的操作都是直接操作数据库，在smart ui中可能会出现这样的情况。\n\n贫血模型：\n```java\nclass UserDao {\n\t@Autowired\n\tJdbcTemplate jdbcTemplate;\n\n\tpublic void updateName(String name,String id){\n\t\tjdbcTemplate.excute(\"update user u set u.name = ? where id=?\",name,id);\n\t}\n}\n\nclass UserService{\n\t\n\t@Autowired\n\tUserDao userDao;\n\n\tvoid updateName(String name,String id){\n\t\tuserDao.updateName(name,id);\n\t} \n}\n```\n贫血模型中，dao是一类sql的集合，在项目中的表现就是写了一堆sql脚本，与之对应的service层，则是作为Transaction Script的入口。观察仔细的话，会发现整个过程中user对象都没出现过。\n\n充血模型：\n```java\ninterface UserRepository extends JpaRepository<User,String>{\n\t//springdata-jpa自动扩展出save findOne findAll方法\n}\n\nclass UserService{\n\t@Autowoird\n\tUserRepository userRepository;\n\n\tvoid updateName(String name,String id){\n\t\tUser user = userRepository.findOne(id);\n\t\tuser.setName(name);\n\t\tuserRepository.save(user);\n\t}\n}\n```\n充血模型中，整个修改操作是“隐性”的，对内存中user对象的修改直接影响到了数据库最终的结果，不需要关心数据库操作，只需要关注领域对象user本身。Repository模式就是在于此，屏蔽了数据库的实现。与贫血模型中user对象恰恰相反，整个流程没有出现sql语句。\n\n涨血模型：\n没有具体的实现，可以这么理解：\n```java\nvoid updateName(String name,String id){\n\tUser user = new User(id);\n\tuser.setName(name);\n\tuser.save();\n}\n```\n\n我们在Repository模式中重点关注充血模型。为什么前面说：如果你遵循正确的使用方式的话，springdata才是对DDD的最佳实践呢？因为有的使用者会写出下面的代码：\n```java\ninterface UserRepository extends JpaRepository<User,String>{\n\t\n\t@Query(\"update user set name=? where id=?\")\n\t@Modifying(clearAutomatically = true)\n\t@Transactional\n\tvoid updateName(String name,String id);\n}\n```\n历史的车轮在滚滚倒退。本节只关注模型本身，不讨论使用中的一些并发问题，再来聊聊其他的一些最佳实践。\n```java\ninterface UserRepository extends JpaRepository<User,String>{\n\n\tUser findById();//√  然后已经存在findOne了，只是为了做个对比\n\tUser findBy身份证号();//可以接受\n\tUser findBy名称();//×\n\tList<权限> find权限ByUserId();//×\n}\n```\n理论上，一个Repository需要且仅需要包含三类方法loadBy标识，findAll，save（一般findAll（）就包含了分页，排序等多个方法，算作一类方法）。标识的含义和前文中entity的标识是同一个含义，在我个人的理解中，身份证可以作为一个用户的标识（这取决于你的设计，同样的逻辑还有订单中有业务含义的订单编号，保单中的投保单号等等），在数据库中，id也可以作为标识。findBy名称为什么不值得推崇，因为name并不是User的标识，名字可能会重复，只有在特定的现场场景中，名字才能具体对应到人。那应该如何完成“根据姓名查找可能的用户”这一需求呢？最方便的改造是使用Criteria，Predicate来完成视图的查询，哪怕只有一个非标识条件。在更完善的CQRS架构中，视图的查询则应该交由专门的View层去做，可以是数据库，可以是ES。findByUserId不值得推崇则是因为他违背了聚合根模式（下文会介绍），User的Repository只应该返回User对象。\n\n软件设计初期，你是不是还在犹豫：是应该先设计数据库呢，还是应该设计实体呢？在Domain-Driven的指导下，你应当放弃Data-Driven。\n\n## 模式 聚合和聚合根\n难住我的还有英文单词，初识这个概念时，忍不住发问：Aggregate是个啥。文中使用聚合的概念，来描述对象之间的关联，采用合适的聚合策略，可以避免一个很长，很深的对象引用路径。对划分模块也有很大的指导意义。\n\n在微服务中我们常说划分服务模块，在领域驱动设计中，我们常说划分限界上下文。在面向对象的世界里，用抽象来封装模型中的引用，聚合就是指一组相关对象的集合，我们把它作为数据修改的单元。每个聚合都有一个聚合根(root)和一个边界(boundary)。边界定义了聚合内部有什么，而根则是一个特定的entity，两个聚合之间，只允许维护根引用，只能通过根引用去向深入引用其他引用变量。\n\n例子还是沿用电商系统中的订单和商品模块。在聚合模式中，订单不能够直接关联到商品的规格信息，如果一定要查询，则应该通过订单关联到的商品，由商品去访问商品规格。在这个例子中，订单和商品分别是两个边界，而订单模块中的订单entity和商品模块中的商品entity就是分别是各自模块的root。遵循这个原则，可以使我们模块关系不那么的盘根错节，这也是众多领域驱动文章中不断强调的划分限界上下文是第一要义。\n\n## 模式 包结构\n微服务有诸多的模块，而每个模块并不一定是那么的单一职责，比模块更细的分层，便是包的分层。我在阅读中，隐隐觉得这其中蕴含着一层哲学，但是几乎没有文章尝试解读它。领域驱动设计将其单独作为了一个模式进行了论述，篇幅不小。重点就是论述了一个思想：包结构应当具有高内聚性。\n\n这次以一个真实的案例来介绍一下对高内聚的包结构的理解，项目使用maven多module搭建。我曾经开发过一个短信邮件平台模块，它在整个微服务系统中有两个职责，一：负责为其他模块提供短信邮件发送的远程调用接口，二：有一个后台页面，可以让管理员自定义发送短信，并且可以浏览全部的一，二两种类型发送的短信邮件记录。\n\n在设计包结构之前，先是设计微服务模块。\n| module名 | 说明              | package类型      | 顶级包名                     |\n| ------- | --------------- | -------------- | ------------------------ |\n| api     | api接口定义，用于暴露服务  | jar            | sinosoftgz.message.api   |\n| app     | api实现者，真正的服务提供者 | executable jar | sinosoftgz.message.app   |\n| admin   | 管理端应用           | executable jar | sinosoftgz.message.admin |\n| model   | 实体              | jar            | sinosoftgz.message.model |\napi层定义了一系列的接口和接口依赖的一些java bean，model层也就是我们的领域层。这两个模块都会打成jar包，外部服务依赖api，api则由app模块使用rpc框架实现远程调用。admin和app连接同一个数据源，可以查询出短信邮件记录，admin需要自定义发送短信也是通过rpc调用。简单介绍完了这个项目后，重点来分析下需求，来看看如何构建包结构。\nmvc分层天然将controller，service，model，config层分割开，这符合DDD所推崇的分层架构模式（这个模式在原文中有描述，但我觉得和现在耳熟能详的分层结构没有太大的出入，所以没有放到本文中介绍），而我们的业务需求也将短信和邮件这两个领域拆分开了。那么，到底是mvc应该包含业务包结构呢？还是说业务包结构包含mvc呢？\n\nmvc高于业务分层\n```java\n//不够好的分层\nsinosoftgz.message.admin\n\tconfig\n\t\tCommonConfig.java\n\tservice\n\t\tCommonService.java\n\t\tmail\n\t\t\tMailTemplateService.java\n\t\t\tMailMessageService.java\n\t\tsms\n\t\t\tSmsTemplateService.java\n\t\t\tSmsMessageService.java\n\tweb\n\t\tIndexController.java\n\t\tmail\n\t\t\tMailTemplateController.java\n\t\t\tMailMessageController.java\n\t\tsms\n\t\t\tSmsTemplateController.java\n\t\t\tSmsMessageController.java\n\tMessageAdminApp.java\n```\n\n业务分层包含mvc\n```java\n//高内聚的分层\nsinosoftgz.message.admin\n\tconfig\n\t\tCommonConfig.java\n\tservice\n\t\tCommonService.java\n\tweb\n\t\tIndexController.java\n\tmail\n\t    config\n\t        MailConfig.java\n\t\tservice\n\t\t\tMailTemplateService.java\n\t\t\tMailMessageService.java\n\t\tweb\n\t\t\tMailTemplateController.java\n\t\t\tMailMessageController.java\n\tsms\n\t    config\n\t        Smsconfig.java\n\t\tservice\n\t\t\tSmsTemplateService.java\n\t\t\tSmsMessageService.java\n\t\tweb\n\t\t\tSmsTemplateController.java\n\t\t\tSmsMessageController.java\n\tMessageAdminApp.java\n```\n业务并不是特别复杂，但应该可以发现第二种（业务分层包含mvc）的包结构，才是一种高内聚的包结构。第一种分层会让人有一种将各个业务模块（如mail和sms）的service和controller隔离开了的感觉，当模块更多，每个模块的内容更多，这个“隔得很远”的不适感会逐渐侵蚀你的开发速度。一种更加低内聚的反例是不用包分层，仅仅依赖前缀区分，由于在项目开发中真的发现同事写出了这样的代码，我觉得还是有必要拿出来说一说：\n```java\n//反例\nsinosoftgz.message.admin\n\tconfig\n\t\tCommonConfig.java\n\t\tMailConfig.java\n\t\tSmsconfig.java\n\tservice\n\t\tCommonService.java\n\t\tMailTemplateService.java\n\t\tMailMessageService.java\n\t\tSmsTemplateService.java\n\t\tSmsMessageService.java\n\tweb\n\t\tIndexController.java\n\t\tMailTemplateController.java\n\t\tMailMessageController.java\n\t\tSmsTemplateController.java\n\t\tSmsMessageController.java     \n\tMessageAdminApp.java\n```\n这样的设计会导致web包越来越庞大，逐渐变得臃肿，是什么使项目僵化，项目经理为何一看到代码就头疼，规范的高内聚的包结构，遵循业务>mvc的原则，可以知道我们的项目庞大却有条理。\n\n## 其他模式\n《领域驱动设计》这本书介绍了众多的模式，上面只是介绍了一部分重要的模式，后续我会结合各个模式，尽量采用最佳实践+浅析设计的方式来解读。\n\n## 微服务之于领域驱动设计的一点思考\n技术架构诚然重要，但不可忽视领域拆解和业务架构，《领域驱动设计》中的诸多失败，成功案例的总结，是支撑其理论知识的基础，最终汇聚成众多的模式。在火爆的微服务架构潮流下，我也逐渐意识到微服务不仅仅是技术的堆砌，更是一种设计，一门艺术。我的本科论文本想就微服务架构进行论述，奈何功底不够，最后只能改写成一篇分布式网站设计相关的文章，虽然是一个失败的过程，但让我加深了对微服务的认识。如今结合领域驱动设计，更加让我确定，技术方案始终有代替方案，决定微服务的不是框架的选择，不仅仅是restful或者rpc的接口设计风格的抉择，而更应该关注拆解，领域，限界上下文，聚合根等等一系列事物，这便是我所理解的领域驱动设计对微服务架构的指导意义。\n\n## 参考文章\n[多研究些架构，少谈些框架----曹祖鹏](https://github.com/JoeCao/JoeCao.github.io/issues/1)\n\n[DDD领域驱动设计基本理论知识总结 - netfocus](http://www.cnblogs.com/netfocus/archive/2011/10/10/2204949.html)\n\n","slug":"Re：从零开始的领域驱动设计","published":1,"updated":"2017-09-04T11:49:26.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zry000ftwv7uhf3yah4","content":"<p>[TOC]</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>领域驱动的火爆程度不用我赘述，但是即便其如此得耳熟能详，但大多数人对其的认识，还只是停留在知道它的缩写是DDD，知道它是一种软件思想，或者知道它和微服务有千丝万缕的关系。Eric Evans对DDD的诠释是那么地惜字如金，而我所认识的领域驱动设计的专家又都是行业中的资深前辈，他们擅长于对软件设计进行高屋建瓴的论述，如果没有丰富的互联网从业经验，是不能从他们的分享中获取太多的营养的，可以用曲高和寡来形容。1000个互联网从业者，100个懂微服务，10个人懂领域驱动设计。</p>\n<p>可能有很多和我一样的读者，在得知DDD如此火爆之后，尝试去读了开山之作《领域驱动设计——软件核心复杂性应对之道》，翻看了几张之后，晦涩的语句，不明所以的专业术语，加上翻译导致的语句流畅性，可以说观看体验并不是很好，特别是对于开发经验不是很多的读者。我总结了一下，为何这本书难以理解：</p>\n<ol>\n<li>没有阅读软件设计丛书的习惯，更多人偏向于阅读偏应用层面的书籍，“talk is cheap，show me the code”往往更符合大多数人的习惯。<br>2.没有太多的开发经验支撑。没有踩过坑，就不会意识到设计的重要性，无法产生共情。<br>3.年代有些久远，这本书写于2004年，书中很多软件设计的反例，在当时是非常流行的，但是在现在已经基本绝迹了。大师之所以为大师，是因为其能跨越时代的限制，预见未来的问题，这也是为什么DDD在十几年前就被提出，却在微服务逐渐流行的现阶段才被大家重视。</li>\n</ol>\n<p>诚然如标题所示，本文是领域驱动设计的一个入门文章，或者更多的是一个个人理解的笔记，笔者也正在学习DDD的路上，可能会有很多的疏漏。如有理解有偏颇的地方，还望各位指摘。</p>\n<a id=\"more\"></a>\n<h2 id=\"认识领域驱动设计的意义\"><a href=\"#认识领域驱动设计的意义\" class=\"headerlink\" title=\"认识领域驱动设计的意义\"></a>认识领域驱动设计的意义</h2><p>领域驱动设计并不会绝对地提高项目的开发效率。</p>\n<center><br><img src=\"http://img.blog.csdn.net/20170728033004279?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"领域驱动设计复杂性比较\"></center><br><center>图1：复杂性与开发周期关系</center><br>遵循领域驱动设计的规范使得项目初期的开发甚至不如不使用它来的快，原因有很多，程序员的素质，代码的规范，限界上下文的划分…甚至需求修改后导致需要重新建模。但是遵循领域驱动设计的规范，在项目越来越复杂之后，可以不至于让项目僵死。这也是为什么很多系统不断迭代着，最终就黄了。书名的副标题“软件核心复杂性应对之道”正是阐释了这一点<br><br><br>## 模式： smart ui是个反模式<br>可能很多读者还不知道smart ui是什么，但是在这本书写作期间，这种设计风格是非常流行的。在与一位领域驱动设计方面的资深专家的交谈中，他如下感慨到软件发展的历史：<br>&gt;2003年时，正是delphi，vb一类的smart ui程序大行其道，java在那个年代，还在使用jsp来完成大量的业务逻辑操作，4000行的jsp是常见的事；2005年spring hibernate替换了EJB，社区一片欢呼，所有人开始拥护action，service，dao这样的贫血模型（充血模型，贫血模型会在下文论述）；2007年，Rails兴起，有人发现了Rails的activeRecord是涨血模型，引起了一片混战；直到现在的2017年，微服务成为主流系统架构。<br><br>在现在这个年代，不懂个MVC分层，都不好意思说自己是搞java的，也不会有人在jsp里面写业务代码了（可以说模板技术freemarker,thymeleaf已经取代jsp了），但是在那个年代，还没有现在这么普遍地强调分层架构的重要性。<br><br>这个章节其实并不重要，因为mvc一类的分层架构已经是大多数java初学者的“起点”了，大多数DDD的文章都不会赘述这一点，我这里列出来是为了让大家知晓这篇文章的时代局限性，在后续章节的理解中，也需要抱有这样的逻辑：这本书写于2004年。<br><br>## 模式： Entity与Value Object<br>我在不了解DDD时，就对这两个术语早有耳闻。entity又被称为<code>reference object</code>，我们通常所说的java bean在领域中通常可以分为这两类，（可别把value object和常用于前台展示的view object，vo混为一谈）<br>entity的要义在于生命周期和标识，value object的要义在于无标识，通常情况下，entity在通俗意义上可以理解为数据库的实体，（不过不严谨），value object则一般作为一个单独的类，构成entity的一个属性。<br><br>举两个例子来加深对entity和value object的理解。<br><br>例1：以电商微服务系统中的商品模块，订单模块为例。将整个电商系统划分出商品和订单两个限界上下文（Bound Context）应该是没有争议的。如果是传统的单体应用，我们可以如何设计这两个模块的实体类呢？<br>会不会是这样？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span>&#123;</div><div class=\"line\">\tString id;<span class=\"comment\">//主键</span></div><div class=\"line\">\tString skuId;<span class=\"comment\">//唯一识别号</span></div><div class=\"line\">\tString productName;</div><div class=\"line\">\tBigdecimal price;</div><div class=\"line\">\tCategory category;<span class=\"comment\">//分类</span></div><div class=\"line\">\tList&lt;Specification&gt; specifications;<span class=\"comment\">//规格\t</span></div><div class=\"line\">\t...\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span></span>&#123;</div><div class=\"line\">\tString id;<span class=\"comment\">//主键</span></div><div class=\"line\">\tString orderNo;<span class=\"comment\">//订单号</span></div><div class=\"line\">\tList&lt;OrderItem&gt; orderItems;<span class=\"comment\">//订单明细</span></div><div class=\"line\">\tBigDecimal orderAmount;<span class=\"comment\">//总金额</span></div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderItem</span></span>&#123;</div><div class=\"line\">\tString id;</div><div class=\"line\">\tProduct product;<span class=\"comment\">//关联商品</span></div><div class=\"line\">\tBigDecimal snapshotPrice;<span class=\"comment\">//下单时的价格</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>看似好像没问题，考虑到了订单要保存下单时候的价格（当然，这是常识）但这么设计却存在诸多的问题。在分布式系统中，商品和订单这两个模块必然不在同一个模块，也就意味着不在同一个网段中。上述的类设计中直接将Product的列表存储到了Order中，也就是一对多的外键关联。这会导致，每次访问订单的商品列表，都需要发起n次远程调用。<br><br>反思我们的设计，其实我们发现，订单BC的Product和商品BC的Product其实并不是同一个entity，在商品模块中，我们更关注商品的规格，种类，实时价格，这最直接地反映了我们想要买什么的欲望。而当生成订单后，我们只关心这个商品买的时候价格是多少，不会关心这个商品之后的价格变动，还有他的名称，仅仅是方便我们在订单的商品列表中定位这个商品。<br><br>如何改造就变得明了了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderItem</span></span>&#123;</div><div class=\"line\">\tString id;</div><div class=\"line\">\tString productId;<span class=\"comment\">//只记录一个id用于必要的时候发起command操作</span></div><div class=\"line\">\tString skuId;</div><div class=\"line\">\tString productName;</div><div class=\"line\">\t...</div><div class=\"line\">\tBigDecimal snapshotPrice;<span class=\"comment\">//下单时的价格</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>是的，我们做了一定的冗余，这使得即使商品模块的商品，名称发生了微调，也不会被订单模块知晓。这么做也有它的业务含义，用户会声称：我买的时候他的确就叫这个名字。记录productId和skuId的用意不是为了查询操作，而是方便申请售后一类的命令操作（command）。<br><br>在这个例子中，Order 和 Product都是entity，而OrderItem则是value object（想想之前的定义，OrderItem作为一个类，的确是描述了Order这个entity的一个属性集合）。关于标识，我的理解是有两层含义，第一个是作为数据本身存储于数据库，主键id是一个标识，第二是作为领域对象本身，orderNo是一个标识，对于人而言，身份证是一个标识。而OrderItem中的productId，id不能称之为标识，因为整个OrderItem对象是依托于Order存在的，Order不存在，则OrderItem没有意义。<br><br>例子2： 汽车和轮胎的关系是entity和value object吗？<br>这个例子其实是一个陷阱题，因为他没有交代限界上下文（BC），场景不足以判断。对于用户领域而言，的确可以成立，汽车报废之后，很少有人会关心轮胎。轮胎和发动机，雨刮器，座椅地位一样，只是构成汽车的一些部件，和用户最紧密相关的，只有汽车这个entity，轮胎只是描述这个汽车的属性（value object）；场景切换到汽修厂，无论是汽车，还是轮胎，都是汽修厂密切关心的，每个轮胎都有自己的编号，一辆车报废了，可以安置到其他车上，这里，他们都是entity。<br><br>这个例子是在说明这么一个道理，同样的事物，在不同的领域中，会有不同的地位。<br><center><br><img src=\"http://img.blog.csdn.net/20170728031939418?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"通过value object优化数据库\"></center><br><center>图2：《领域驱动设计》Value Object模式的示例</center>\n\n<p>在单体应用中，可能会有人指出，这直接违背了数据库范式，但是领域驱动设计的思想正如他的名字那样，不是基于数据库的，而是基于领域的。微服务使得数据库发生了隔离，这样的设计思想可以更好的指导我们优化数据库。</p>\n<h2 id=\"模式：-Repository\"><a href=\"#模式：-Repository\" class=\"headerlink\" title=\"模式： Repository\"></a>模式： Repository</h2><blockquote>\n<p>哲学家分析自然规律得出规范，框架编写者根据规范制定框架。有些框架，可能大家一直在用，但是却不懂其中蕴含的哲学。  </p>\n<p align=\"right\">——来自于笔者的口胡</p>\n\n</blockquote>\n<p>记得在刚刚接触mvc模式，常常用DAO层表示持久化层，在JPA+springdata中，抽象出了各式各样的xxxRepository，与DDD的Repository模式同名并不是巧合，jpa所表现出的正是一个充血模型（如果你遵循正确的使用方式的话），可以说是领域驱动设计的一个最佳实践。</p>\n<p>开宗明义，在Martin Fowler理论中，有四种领域模型：</p>\n<ol>\n<li>失血模型</li>\n<li>贫血模型</li>\n<li>充血模型</li>\n<li>胀血模型<br>详细的概念区别不赘述了，可以参见专门讲解4种模型的博客。他们在数据库开发中分别有不同的实现，用一个修改用户名的例子来分析。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</div><div class=\"line\">\tString id;</div><div class=\"line\">\tString name;</div><div class=\"line\">\tInteger age;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>失血模型：<br>跳过，可以理解为所有的操作都是直接操作数据库，在smart ui中可能会出现这样的情况。</p>\n<p>贫血模型：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\tJdbcTemplate jdbcTemplate;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateName</span><span class=\"params\">(String name,String id)</span></span>&#123;</div><div class=\"line\">\t\tjdbcTemplate.excute(<span class=\"string\">\"update user u set u.name = ? where id=?\"</span>,name,id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\tUserDao userDao;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateName</span><span class=\"params\">(String name,String id)</span></span>&#123;</div><div class=\"line\">\t\tuserDao.updateName(name,id);</div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>贫血模型中，dao是一类sql的集合，在项目中的表现就是写了一堆sql脚本，与之对应的service层，则是作为Transaction Script的入口。观察仔细的话，会发现整个过程中user对象都没出现过。</p>\n<p>充血模型：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//springdata-jpa自动扩展出save findOne findAll方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span></span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Autowoird</span></div><div class=\"line\">\tUserRepository userRepository;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateName</span><span class=\"params\">(String name,String id)</span></span>&#123;</div><div class=\"line\">\t\tUser user = userRepository.findOne(id);</div><div class=\"line\">\t\tuser.setName(name);</div><div class=\"line\">\t\tuserRepository.save(user);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>充血模型中，整个修改操作是“隐性”的，对内存中user对象的修改直接影响到了数据库最终的结果，不需要关心数据库操作，只需要关注领域对象user本身。Repository模式就是在于此，屏蔽了数据库的实现。与贫血模型中user对象恰恰相反，整个流程没有出现sql语句。</p>\n<p>涨血模型：<br>没有具体的实现，可以这么理解：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateName</span><span class=\"params\">(String name,String id)</span></span>&#123;</div><div class=\"line\">\tUser user = <span class=\"keyword\">new</span> User(id);</div><div class=\"line\">\tuser.setName(name);</div><div class=\"line\">\tuser.save();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们在Repository模式中重点关注充血模型。为什么前面说：如果你遵循正确的使用方式的话，springdata才是对DDD的最佳实践呢？因为有的使用者会写出下面的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Query</span>(<span class=\"string\">\"update user set name=? where id=?\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Modifying</span>(clearAutomatically = <span class=\"keyword\">true</span>)</div><div class=\"line\">\t<span class=\"meta\">@Transactional</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateName</span><span class=\"params\">(String name,String id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>历史的车轮在滚滚倒退。本节只关注模型本身，不讨论使用中的一些并发问题，再来聊聊其他的一些最佳实践。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">User <span class=\"title\">findById</span><span class=\"params\">()</span></span>;<span class=\"comment\">//√  然后已经存在findOne了，只是为了做个对比</span></div><div class=\"line\">\tUser findBy身份证号();<span class=\"comment\">//可以接受</span></div><div class=\"line\">\tUser findBy名称();<span class=\"comment\">//×</span></div><div class=\"line\">\tList&lt;权限&gt; find权限ByUserId();<span class=\"comment\">//×</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>理论上，一个Repository需要且仅需要包含三类方法loadBy标识，findAll，save（一般findAll（）就包含了分页，排序等多个方法，算作一类方法）。标识的含义和前文中entity的标识是同一个含义，在我个人的理解中，身份证可以作为一个用户的标识（这取决于你的设计，同样的逻辑还有订单中有业务含义的订单编号，保单中的投保单号等等），在数据库中，id也可以作为标识。findBy名称为什么不值得推崇，因为name并不是User的标识，名字可能会重复，只有在特定的现场场景中，名字才能具体对应到人。那应该如何完成“根据姓名查找可能的用户”这一需求呢？最方便的改造是使用Criteria，Predicate来完成视图的查询，哪怕只有一个非标识条件。在更完善的CQRS架构中，视图的查询则应该交由专门的View层去做，可以是数据库，可以是ES。findByUserId不值得推崇则是因为他违背了聚合根模式（下文会介绍），User的Repository只应该返回User对象。</p>\n<p>软件设计初期，你是不是还在犹豫：是应该先设计数据库呢，还是应该设计实体呢？在Domain-Driven的指导下，你应当放弃Data-Driven。</p>\n<h2 id=\"模式-聚合和聚合根\"><a href=\"#模式-聚合和聚合根\" class=\"headerlink\" title=\"模式 聚合和聚合根\"></a>模式 聚合和聚合根</h2><p>难住我的还有英文单词，初识这个概念时，忍不住发问：Aggregate是个啥。文中使用聚合的概念，来描述对象之间的关联，采用合适的聚合策略，可以避免一个很长，很深的对象引用路径。对划分模块也有很大的指导意义。</p>\n<p>在微服务中我们常说划分服务模块，在领域驱动设计中，我们常说划分限界上下文。在面向对象的世界里，用抽象来封装模型中的引用，聚合就是指一组相关对象的集合，我们把它作为数据修改的单元。每个聚合都有一个聚合根(root)和一个边界(boundary)。边界定义了聚合内部有什么，而根则是一个特定的entity，两个聚合之间，只允许维护根引用，只能通过根引用去向深入引用其他引用变量。</p>\n<p>例子还是沿用电商系统中的订单和商品模块。在聚合模式中，订单不能够直接关联到商品的规格信息，如果一定要查询，则应该通过订单关联到的商品，由商品去访问商品规格。在这个例子中，订单和商品分别是两个边界，而订单模块中的订单entity和商品模块中的商品entity就是分别是各自模块的root。遵循这个原则，可以使我们模块关系不那么的盘根错节，这也是众多领域驱动文章中不断强调的划分限界上下文是第一要义。</p>\n<h2 id=\"模式-包结构\"><a href=\"#模式-包结构\" class=\"headerlink\" title=\"模式 包结构\"></a>模式 包结构</h2><p>微服务有诸多的模块，而每个模块并不一定是那么的单一职责，比模块更细的分层，便是包的分层。我在阅读中，隐隐觉得这其中蕴含着一层哲学，但是几乎没有文章尝试解读它。领域驱动设计将其单独作为了一个模式进行了论述，篇幅不小。重点就是论述了一个思想：包结构应当具有高内聚性。</p>\n<p>这次以一个真实的案例来介绍一下对高内聚的包结构的理解，项目使用maven多module搭建。我曾经开发过一个短信邮件平台模块，它在整个微服务系统中有两个职责，一：负责为其他模块提供短信邮件发送的远程调用接口，二：有一个后台页面，可以让管理员自定义发送短信，并且可以浏览全部的一，二两种类型发送的短信邮件记录。</p>\n<p>在设计包结构之前，先是设计微服务模块。<br>| module名 | 说明              | package类型      | 顶级包名                     |<br>| ——- | ————— | ————– | ———————— |<br>| api     | api接口定义，用于暴露服务  | jar            | sinosoftgz.message.api   |<br>| app     | api实现者，真正的服务提供者 | executable jar | sinosoftgz.message.app   |<br>| admin   | 管理端应用           | executable jar | sinosoftgz.message.admin |<br>| model   | 实体              | jar            | sinosoftgz.message.model |<br>api层定义了一系列的接口和接口依赖的一些java bean，model层也就是我们的领域层。这两个模块都会打成jar包，外部服务依赖api，api则由app模块使用rpc框架实现远程调用。admin和app连接同一个数据源，可以查询出短信邮件记录，admin需要自定义发送短信也是通过rpc调用。简单介绍完了这个项目后，重点来分析下需求，来看看如何构建包结构。<br>mvc分层天然将controller，service，model，config层分割开，这符合DDD所推崇的分层架构模式（这个模式在原文中有描述，但我觉得和现在耳熟能详的分层结构没有太大的出入，所以没有放到本文中介绍），而我们的业务需求也将短信和邮件这两个领域拆分开了。那么，到底是mvc应该包含业务包结构呢？还是说业务包结构包含mvc呢？</p>\n<p>mvc高于业务分层<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不够好的分层</span></div><div class=\"line\">sinosoftgz.message.admin</div><div class=\"line\">\tconfig</div><div class=\"line\">\t\tCommonConfig.java</div><div class=\"line\">\tservice</div><div class=\"line\">\t\tCommonService.java</div><div class=\"line\">\t\tmail</div><div class=\"line\">\t\t\tMailTemplateService.java</div><div class=\"line\">\t\t\tMailMessageService.java</div><div class=\"line\">\t\tsms</div><div class=\"line\">\t\t\tSmsTemplateService.java</div><div class=\"line\">\t\t\tSmsMessageService.java</div><div class=\"line\">\tweb</div><div class=\"line\">\t\tIndexController.java</div><div class=\"line\">\t\tmail</div><div class=\"line\">\t\t\tMailTemplateController.java</div><div class=\"line\">\t\t\tMailMessageController.java</div><div class=\"line\">\t\tsms</div><div class=\"line\">\t\t\tSmsTemplateController.java</div><div class=\"line\">\t\t\tSmsMessageController.java</div><div class=\"line\">\tMessageAdminApp.java</div></pre></td></tr></table></figure></p>\n<p>业务分层包含mvc<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//高内聚的分层</span></div><div class=\"line\">sinosoftgz.message.admin</div><div class=\"line\">\tconfig</div><div class=\"line\">\t\tCommonConfig.java</div><div class=\"line\">\tservice</div><div class=\"line\">\t\tCommonService.java</div><div class=\"line\">\tweb</div><div class=\"line\">\t\tIndexController.java</div><div class=\"line\">\tmail</div><div class=\"line\">\t    config</div><div class=\"line\">\t        MailConfig.java</div><div class=\"line\">\t\tservice</div><div class=\"line\">\t\t\tMailTemplateService.java</div><div class=\"line\">\t\t\tMailMessageService.java</div><div class=\"line\">\t\tweb</div><div class=\"line\">\t\t\tMailTemplateController.java</div><div class=\"line\">\t\t\tMailMessageController.java</div><div class=\"line\">\tsms</div><div class=\"line\">\t    config</div><div class=\"line\">\t        Smsconfig.java</div><div class=\"line\">\t\tservice</div><div class=\"line\">\t\t\tSmsTemplateService.java</div><div class=\"line\">\t\t\tSmsMessageService.java</div><div class=\"line\">\t\tweb</div><div class=\"line\">\t\t\tSmsTemplateController.java</div><div class=\"line\">\t\t\tSmsMessageController.java</div><div class=\"line\">\tMessageAdminApp.java</div></pre></td></tr></table></figure></p>\n<p>业务并不是特别复杂，但应该可以发现第二种（业务分层包含mvc）的包结构，才是一种高内聚的包结构。第一种分层会让人有一种将各个业务模块（如mail和sms）的service和controller隔离开了的感觉，当模块更多，每个模块的内容更多，这个“隔得很远”的不适感会逐渐侵蚀你的开发速度。一种更加低内聚的反例是不用包分层，仅仅依赖前缀区分，由于在项目开发中真的发现同事写出了这样的代码，我觉得还是有必要拿出来说一说：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//反例</span></div><div class=\"line\">sinosoftgz.message.admin</div><div class=\"line\">\tconfig</div><div class=\"line\">\t\tCommonConfig.java</div><div class=\"line\">\t\tMailConfig.java</div><div class=\"line\">\t\tSmsconfig.java</div><div class=\"line\">\tservice</div><div class=\"line\">\t\tCommonService.java</div><div class=\"line\">\t\tMailTemplateService.java</div><div class=\"line\">\t\tMailMessageService.java</div><div class=\"line\">\t\tSmsTemplateService.java</div><div class=\"line\">\t\tSmsMessageService.java</div><div class=\"line\">\tweb</div><div class=\"line\">\t\tIndexController.java</div><div class=\"line\">\t\tMailTemplateController.java</div><div class=\"line\">\t\tMailMessageController.java</div><div class=\"line\">\t\tSmsTemplateController.java</div><div class=\"line\">\t\tSmsMessageController.java     </div><div class=\"line\">\tMessageAdminApp.java</div></pre></td></tr></table></figure></p>\n<p>这样的设计会导致web包越来越庞大，逐渐变得臃肿，是什么使项目僵化，项目经理为何一看到代码就头疼，规范的高内聚的包结构，遵循业务&gt;mvc的原则，可以知道我们的项目庞大却有条理。</p>\n<h2 id=\"其他模式\"><a href=\"#其他模式\" class=\"headerlink\" title=\"其他模式\"></a>其他模式</h2><p>《领域驱动设计》这本书介绍了众多的模式，上面只是介绍了一部分重要的模式，后续我会结合各个模式，尽量采用最佳实践+浅析设计的方式来解读。</p>\n<h2 id=\"微服务之于领域驱动设计的一点思考\"><a href=\"#微服务之于领域驱动设计的一点思考\" class=\"headerlink\" title=\"微服务之于领域驱动设计的一点思考\"></a>微服务之于领域驱动设计的一点思考</h2><p>技术架构诚然重要，但不可忽视领域拆解和业务架构，《领域驱动设计》中的诸多失败，成功案例的总结，是支撑其理论知识的基础，最终汇聚成众多的模式。在火爆的微服务架构潮流下，我也逐渐意识到微服务不仅仅是技术的堆砌，更是一种设计，一门艺术。我的本科论文本想就微服务架构进行论述，奈何功底不够，最后只能改写成一篇分布式网站设计相关的文章，虽然是一个失败的过程，但让我加深了对微服务的认识。如今结合领域驱动设计，更加让我确定，技术方案始终有代替方案，决定微服务的不是框架的选择，不仅仅是restful或者rpc的接口设计风格的抉择，而更应该关注拆解，领域，限界上下文，聚合根等等一系列事物，这便是我所理解的领域驱动设计对微服务架构的指导意义。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://github.com/JoeCao/JoeCao.github.io/issues/1\" target=\"_blank\" rel=\"external\">多研究些架构，少谈些框架—-曹祖鹏</a></p>\n<p><a href=\"http://www.cnblogs.com/netfocus/archive/2011/10/10/2204949.html\" target=\"_blank\" rel=\"external\">DDD领域驱动设计基本理论知识总结 - netfocus</a></p>\n","site":{"data":{}},"excerpt":"<p>[TOC]</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>领域驱动的火爆程度不用我赘述，但是即便其如此得耳熟能详，但大多数人对其的认识，还只是停留在知道它的缩写是DDD，知道它是一种软件思想，或者知道它和微服务有千丝万缕的关系。Eric Evans对DDD的诠释是那么地惜字如金，而我所认识的领域驱动设计的专家又都是行业中的资深前辈，他们擅长于对软件设计进行高屋建瓴的论述，如果没有丰富的互联网从业经验，是不能从他们的分享中获取太多的营养的，可以用曲高和寡来形容。1000个互联网从业者，100个懂微服务，10个人懂领域驱动设计。</p>\n<p>可能有很多和我一样的读者，在得知DDD如此火爆之后，尝试去读了开山之作《领域驱动设计——软件核心复杂性应对之道》，翻看了几张之后，晦涩的语句，不明所以的专业术语，加上翻译导致的语句流畅性，可以说观看体验并不是很好，特别是对于开发经验不是很多的读者。我总结了一下，为何这本书难以理解：</p>\n<ol>\n<li>没有阅读软件设计丛书的习惯，更多人偏向于阅读偏应用层面的书籍，“talk is cheap，show me the code”往往更符合大多数人的习惯。<br>2.没有太多的开发经验支撑。没有踩过坑，就不会意识到设计的重要性，无法产生共情。<br>3.年代有些久远，这本书写于2004年，书中很多软件设计的反例，在当时是非常流行的，但是在现在已经基本绝迹了。大师之所以为大师，是因为其能跨越时代的限制，预见未来的问题，这也是为什么DDD在十几年前就被提出，却在微服务逐渐流行的现阶段才被大家重视。</li>\n</ol>\n<p>诚然如标题所示，本文是领域驱动设计的一个入门文章，或者更多的是一个个人理解的笔记，笔者也正在学习DDD的路上，可能会有很多的疏漏。如有理解有偏颇的地方，还望各位指摘。</p>","more":"<h2 id=\"认识领域驱动设计的意义\"><a href=\"#认识领域驱动设计的意义\" class=\"headerlink\" title=\"认识领域驱动设计的意义\"></a>认识领域驱动设计的意义</h2><p>领域驱动设计并不会绝对地提高项目的开发效率。</p>\n<center><br><img src=\"http://img.blog.csdn.net/20170728033004279?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"领域驱动设计复杂性比较\"></center><br><center>图1：复杂性与开发周期关系</center><br>遵循领域驱动设计的规范使得项目初期的开发甚至不如不使用它来的快，原因有很多，程序员的素质，代码的规范，限界上下文的划分…甚至需求修改后导致需要重新建模。但是遵循领域驱动设计的规范，在项目越来越复杂之后，可以不至于让项目僵死。这也是为什么很多系统不断迭代着，最终就黄了。书名的副标题“软件核心复杂性应对之道”正是阐释了这一点<br><br><br>## 模式： smart ui是个反模式<br>可能很多读者还不知道smart ui是什么，但是在这本书写作期间，这种设计风格是非常流行的。在与一位领域驱动设计方面的资深专家的交谈中，他如下感慨到软件发展的历史：<br>&gt;2003年时，正是delphi，vb一类的smart ui程序大行其道，java在那个年代，还在使用jsp来完成大量的业务逻辑操作，4000行的jsp是常见的事；2005年spring hibernate替换了EJB，社区一片欢呼，所有人开始拥护action，service，dao这样的贫血模型（充血模型，贫血模型会在下文论述）；2007年，Rails兴起，有人发现了Rails的activeRecord是涨血模型，引起了一片混战；直到现在的2017年，微服务成为主流系统架构。<br><br>在现在这个年代，不懂个MVC分层，都不好意思说自己是搞java的，也不会有人在jsp里面写业务代码了（可以说模板技术freemarker,thymeleaf已经取代jsp了），但是在那个年代，还没有现在这么普遍地强调分层架构的重要性。<br><br>这个章节其实并不重要，因为mvc一类的分层架构已经是大多数java初学者的“起点”了，大多数DDD的文章都不会赘述这一点，我这里列出来是为了让大家知晓这篇文章的时代局限性，在后续章节的理解中，也需要抱有这样的逻辑：这本书写于2004年。<br><br>## 模式： Entity与Value Object<br>我在不了解DDD时，就对这两个术语早有耳闻。entity又被称为<code>reference object</code>，我们通常所说的java bean在领域中通常可以分为这两类，（可别把value object和常用于前台展示的view object，vo混为一谈）<br>entity的要义在于生命周期和标识，value object的要义在于无标识，通常情况下，entity在通俗意义上可以理解为数据库的实体，（不过不严谨），value object则一般作为一个单独的类，构成entity的一个属性。<br><br>举两个例子来加深对entity和value object的理解。<br><br>例1：以电商微服务系统中的商品模块，订单模块为例。将整个电商系统划分出商品和订单两个限界上下文（Bound Context）应该是没有争议的。如果是传统的单体应用，我们可以如何设计这两个模块的实体类呢？<br>会不会是这样？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span>&#123;</div><div class=\"line\">\tString id;<span class=\"comment\">//主键</span></div><div class=\"line\">\tString skuId;<span class=\"comment\">//唯一识别号</span></div><div class=\"line\">\tString productName;</div><div class=\"line\">\tBigdecimal price;</div><div class=\"line\">\tCategory category;<span class=\"comment\">//分类</span></div><div class=\"line\">\tList&lt;Specification&gt; specifications;<span class=\"comment\">//规格\t</span></div><div class=\"line\">\t...\t</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span></span>&#123;</div><div class=\"line\">\tString id;<span class=\"comment\">//主键</span></div><div class=\"line\">\tString orderNo;<span class=\"comment\">//订单号</span></div><div class=\"line\">\tList&lt;OrderItem&gt; orderItems;<span class=\"comment\">//订单明细</span></div><div class=\"line\">\tBigDecimal orderAmount;<span class=\"comment\">//总金额</span></div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderItem</span></span>&#123;</div><div class=\"line\">\tString id;</div><div class=\"line\">\tProduct product;<span class=\"comment\">//关联商品</span></div><div class=\"line\">\tBigDecimal snapshotPrice;<span class=\"comment\">//下单时的价格</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>看似好像没问题，考虑到了订单要保存下单时候的价格（当然，这是常识）但这么设计却存在诸多的问题。在分布式系统中，商品和订单这两个模块必然不在同一个模块，也就意味着不在同一个网段中。上述的类设计中直接将Product的列表存储到了Order中，也就是一对多的外键关联。这会导致，每次访问订单的商品列表，都需要发起n次远程调用。<br><br>反思我们的设计，其实我们发现，订单BC的Product和商品BC的Product其实并不是同一个entity，在商品模块中，我们更关注商品的规格，种类，实时价格，这最直接地反映了我们想要买什么的欲望。而当生成订单后，我们只关心这个商品买的时候价格是多少，不会关心这个商品之后的价格变动，还有他的名称，仅仅是方便我们在订单的商品列表中定位这个商品。<br><br>如何改造就变得明了了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderItem</span></span>&#123;</div><div class=\"line\">\tString id;</div><div class=\"line\">\tString productId;<span class=\"comment\">//只记录一个id用于必要的时候发起command操作</span></div><div class=\"line\">\tString skuId;</div><div class=\"line\">\tString productName;</div><div class=\"line\">\t...</div><div class=\"line\">\tBigDecimal snapshotPrice;<span class=\"comment\">//下单时的价格</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>是的，我们做了一定的冗余，这使得即使商品模块的商品，名称发生了微调，也不会被订单模块知晓。这么做也有它的业务含义，用户会声称：我买的时候他的确就叫这个名字。记录productId和skuId的用意不是为了查询操作，而是方便申请售后一类的命令操作（command）。<br><br>在这个例子中，Order 和 Product都是entity，而OrderItem则是value object（想想之前的定义，OrderItem作为一个类，的确是描述了Order这个entity的一个属性集合）。关于标识，我的理解是有两层含义，第一个是作为数据本身存储于数据库，主键id是一个标识，第二是作为领域对象本身，orderNo是一个标识，对于人而言，身份证是一个标识。而OrderItem中的productId，id不能称之为标识，因为整个OrderItem对象是依托于Order存在的，Order不存在，则OrderItem没有意义。<br><br>例子2： 汽车和轮胎的关系是entity和value object吗？<br>这个例子其实是一个陷阱题，因为他没有交代限界上下文（BC），场景不足以判断。对于用户领域而言，的确可以成立，汽车报废之后，很少有人会关心轮胎。轮胎和发动机，雨刮器，座椅地位一样，只是构成汽车的一些部件，和用户最紧密相关的，只有汽车这个entity，轮胎只是描述这个汽车的属性（value object）；场景切换到汽修厂，无论是汽车，还是轮胎，都是汽修厂密切关心的，每个轮胎都有自己的编号，一辆车报废了，可以安置到其他车上，这里，他们都是entity。<br><br>这个例子是在说明这么一个道理，同样的事物，在不同的领域中，会有不同的地位。<br><center><br><img src=\"http://img.blog.csdn.net/20170728031939418?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"通过value object优化数据库\"></center><br><center>图2：《领域驱动设计》Value Object模式的示例</center>\n\n<p>在单体应用中，可能会有人指出，这直接违背了数据库范式，但是领域驱动设计的思想正如他的名字那样，不是基于数据库的，而是基于领域的。微服务使得数据库发生了隔离，这样的设计思想可以更好的指导我们优化数据库。</p>\n<h2 id=\"模式：-Repository\"><a href=\"#模式：-Repository\" class=\"headerlink\" title=\"模式： Repository\"></a>模式： Repository</h2><blockquote>\n<p>哲学家分析自然规律得出规范，框架编写者根据规范制定框架。有些框架，可能大家一直在用，但是却不懂其中蕴含的哲学。  </p>\n<p align=\"right\">——来自于笔者的口胡</p>\n\n</blockquote>\n<p>记得在刚刚接触mvc模式，常常用DAO层表示持久化层，在JPA+springdata中，抽象出了各式各样的xxxRepository，与DDD的Repository模式同名并不是巧合，jpa所表现出的正是一个充血模型（如果你遵循正确的使用方式的话），可以说是领域驱动设计的一个最佳实践。</p>\n<p>开宗明义，在Martin Fowler理论中，有四种领域模型：</p>\n<ol>\n<li>失血模型</li>\n<li>贫血模型</li>\n<li>充血模型</li>\n<li>胀血模型<br>详细的概念区别不赘述了，可以参见专门讲解4种模型的博客。他们在数据库开发中分别有不同的实现，用一个修改用户名的例子来分析。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>&#123;</div><div class=\"line\">\tString id;</div><div class=\"line\">\tString name;</div><div class=\"line\">\tInteger age;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>失血模型：<br>跳过，可以理解为所有的操作都是直接操作数据库，在smart ui中可能会出现这样的情况。</p>\n<p>贫血模型：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\tJdbcTemplate jdbcTemplate;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateName</span><span class=\"params\">(String name,String id)</span></span>&#123;</div><div class=\"line\">\t\tjdbcTemplate.excute(<span class=\"string\">\"update user u set u.name = ? where id=?\"</span>,name,id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\tUserDao userDao;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateName</span><span class=\"params\">(String name,String id)</span></span>&#123;</div><div class=\"line\">\t\tuserDao.updateName(name,id);</div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>贫血模型中，dao是一类sql的集合，在项目中的表现就是写了一堆sql脚本，与之对应的service层，则是作为Transaction Script的入口。观察仔细的话，会发现整个过程中user对象都没出现过。</p>\n<p>充血模型：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//springdata-jpa自动扩展出save findOne findAll方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span></span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Autowoird</span></div><div class=\"line\">\tUserRepository userRepository;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateName</span><span class=\"params\">(String name,String id)</span></span>&#123;</div><div class=\"line\">\t\tUser user = userRepository.findOne(id);</div><div class=\"line\">\t\tuser.setName(name);</div><div class=\"line\">\t\tuserRepository.save(user);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>充血模型中，整个修改操作是“隐性”的，对内存中user对象的修改直接影响到了数据库最终的结果，不需要关心数据库操作，只需要关注领域对象user本身。Repository模式就是在于此，屏蔽了数据库的实现。与贫血模型中user对象恰恰相反，整个流程没有出现sql语句。</p>\n<p>涨血模型：<br>没有具体的实现，可以这么理解：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateName</span><span class=\"params\">(String name,String id)</span></span>&#123;</div><div class=\"line\">\tUser user = <span class=\"keyword\">new</span> User(id);</div><div class=\"line\">\tuser.setName(name);</div><div class=\"line\">\tuser.save();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们在Repository模式中重点关注充血模型。为什么前面说：如果你遵循正确的使用方式的话，springdata才是对DDD的最佳实践呢？因为有的使用者会写出下面的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Query</span>(<span class=\"string\">\"update user set name=? where id=?\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@Modifying</span>(clearAutomatically = <span class=\"keyword\">true</span>)</div><div class=\"line\">\t<span class=\"meta\">@Transactional</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateName</span><span class=\"params\">(String name,String id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>历史的车轮在滚滚倒退。本节只关注模型本身，不讨论使用中的一些并发问题，再来聊聊其他的一些最佳实践。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>,<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\">User <span class=\"title\">findById</span><span class=\"params\">()</span></span>;<span class=\"comment\">//√  然后已经存在findOne了，只是为了做个对比</span></div><div class=\"line\">\tUser findBy身份证号();<span class=\"comment\">//可以接受</span></div><div class=\"line\">\tUser findBy名称();<span class=\"comment\">//×</span></div><div class=\"line\">\tList&lt;权限&gt; find权限ByUserId();<span class=\"comment\">//×</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>理论上，一个Repository需要且仅需要包含三类方法loadBy标识，findAll，save（一般findAll（）就包含了分页，排序等多个方法，算作一类方法）。标识的含义和前文中entity的标识是同一个含义，在我个人的理解中，身份证可以作为一个用户的标识（这取决于你的设计，同样的逻辑还有订单中有业务含义的订单编号，保单中的投保单号等等），在数据库中，id也可以作为标识。findBy名称为什么不值得推崇，因为name并不是User的标识，名字可能会重复，只有在特定的现场场景中，名字才能具体对应到人。那应该如何完成“根据姓名查找可能的用户”这一需求呢？最方便的改造是使用Criteria，Predicate来完成视图的查询，哪怕只有一个非标识条件。在更完善的CQRS架构中，视图的查询则应该交由专门的View层去做，可以是数据库，可以是ES。findByUserId不值得推崇则是因为他违背了聚合根模式（下文会介绍），User的Repository只应该返回User对象。</p>\n<p>软件设计初期，你是不是还在犹豫：是应该先设计数据库呢，还是应该设计实体呢？在Domain-Driven的指导下，你应当放弃Data-Driven。</p>\n<h2 id=\"模式-聚合和聚合根\"><a href=\"#模式-聚合和聚合根\" class=\"headerlink\" title=\"模式 聚合和聚合根\"></a>模式 聚合和聚合根</h2><p>难住我的还有英文单词，初识这个概念时，忍不住发问：Aggregate是个啥。文中使用聚合的概念，来描述对象之间的关联，采用合适的聚合策略，可以避免一个很长，很深的对象引用路径。对划分模块也有很大的指导意义。</p>\n<p>在微服务中我们常说划分服务模块，在领域驱动设计中，我们常说划分限界上下文。在面向对象的世界里，用抽象来封装模型中的引用，聚合就是指一组相关对象的集合，我们把它作为数据修改的单元。每个聚合都有一个聚合根(root)和一个边界(boundary)。边界定义了聚合内部有什么，而根则是一个特定的entity，两个聚合之间，只允许维护根引用，只能通过根引用去向深入引用其他引用变量。</p>\n<p>例子还是沿用电商系统中的订单和商品模块。在聚合模式中，订单不能够直接关联到商品的规格信息，如果一定要查询，则应该通过订单关联到的商品，由商品去访问商品规格。在这个例子中，订单和商品分别是两个边界，而订单模块中的订单entity和商品模块中的商品entity就是分别是各自模块的root。遵循这个原则，可以使我们模块关系不那么的盘根错节，这也是众多领域驱动文章中不断强调的划分限界上下文是第一要义。</p>\n<h2 id=\"模式-包结构\"><a href=\"#模式-包结构\" class=\"headerlink\" title=\"模式 包结构\"></a>模式 包结构</h2><p>微服务有诸多的模块，而每个模块并不一定是那么的单一职责，比模块更细的分层，便是包的分层。我在阅读中，隐隐觉得这其中蕴含着一层哲学，但是几乎没有文章尝试解读它。领域驱动设计将其单独作为了一个模式进行了论述，篇幅不小。重点就是论述了一个思想：包结构应当具有高内聚性。</p>\n<p>这次以一个真实的案例来介绍一下对高内聚的包结构的理解，项目使用maven多module搭建。我曾经开发过一个短信邮件平台模块，它在整个微服务系统中有两个职责，一：负责为其他模块提供短信邮件发送的远程调用接口，二：有一个后台页面，可以让管理员自定义发送短信，并且可以浏览全部的一，二两种类型发送的短信邮件记录。</p>\n<p>在设计包结构之前，先是设计微服务模块。<br>| module名 | 说明              | package类型      | 顶级包名                     |<br>| ——- | ————— | ————– | ———————— |<br>| api     | api接口定义，用于暴露服务  | jar            | sinosoftgz.message.api   |<br>| app     | api实现者，真正的服务提供者 | executable jar | sinosoftgz.message.app   |<br>| admin   | 管理端应用           | executable jar | sinosoftgz.message.admin |<br>| model   | 实体              | jar            | sinosoftgz.message.model |<br>api层定义了一系列的接口和接口依赖的一些java bean，model层也就是我们的领域层。这两个模块都会打成jar包，外部服务依赖api，api则由app模块使用rpc框架实现远程调用。admin和app连接同一个数据源，可以查询出短信邮件记录，admin需要自定义发送短信也是通过rpc调用。简单介绍完了这个项目后，重点来分析下需求，来看看如何构建包结构。<br>mvc分层天然将controller，service，model，config层分割开，这符合DDD所推崇的分层架构模式（这个模式在原文中有描述，但我觉得和现在耳熟能详的分层结构没有太大的出入，所以没有放到本文中介绍），而我们的业务需求也将短信和邮件这两个领域拆分开了。那么，到底是mvc应该包含业务包结构呢？还是说业务包结构包含mvc呢？</p>\n<p>mvc高于业务分层<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不够好的分层</span></div><div class=\"line\">sinosoftgz.message.admin</div><div class=\"line\">\tconfig</div><div class=\"line\">\t\tCommonConfig.java</div><div class=\"line\">\tservice</div><div class=\"line\">\t\tCommonService.java</div><div class=\"line\">\t\tmail</div><div class=\"line\">\t\t\tMailTemplateService.java</div><div class=\"line\">\t\t\tMailMessageService.java</div><div class=\"line\">\t\tsms</div><div class=\"line\">\t\t\tSmsTemplateService.java</div><div class=\"line\">\t\t\tSmsMessageService.java</div><div class=\"line\">\tweb</div><div class=\"line\">\t\tIndexController.java</div><div class=\"line\">\t\tmail</div><div class=\"line\">\t\t\tMailTemplateController.java</div><div class=\"line\">\t\t\tMailMessageController.java</div><div class=\"line\">\t\tsms</div><div class=\"line\">\t\t\tSmsTemplateController.java</div><div class=\"line\">\t\t\tSmsMessageController.java</div><div class=\"line\">\tMessageAdminApp.java</div></pre></td></tr></table></figure></p>\n<p>业务分层包含mvc<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//高内聚的分层</span></div><div class=\"line\">sinosoftgz.message.admin</div><div class=\"line\">\tconfig</div><div class=\"line\">\t\tCommonConfig.java</div><div class=\"line\">\tservice</div><div class=\"line\">\t\tCommonService.java</div><div class=\"line\">\tweb</div><div class=\"line\">\t\tIndexController.java</div><div class=\"line\">\tmail</div><div class=\"line\">\t    config</div><div class=\"line\">\t        MailConfig.java</div><div class=\"line\">\t\tservice</div><div class=\"line\">\t\t\tMailTemplateService.java</div><div class=\"line\">\t\t\tMailMessageService.java</div><div class=\"line\">\t\tweb</div><div class=\"line\">\t\t\tMailTemplateController.java</div><div class=\"line\">\t\t\tMailMessageController.java</div><div class=\"line\">\tsms</div><div class=\"line\">\t    config</div><div class=\"line\">\t        Smsconfig.java</div><div class=\"line\">\t\tservice</div><div class=\"line\">\t\t\tSmsTemplateService.java</div><div class=\"line\">\t\t\tSmsMessageService.java</div><div class=\"line\">\t\tweb</div><div class=\"line\">\t\t\tSmsTemplateController.java</div><div class=\"line\">\t\t\tSmsMessageController.java</div><div class=\"line\">\tMessageAdminApp.java</div></pre></td></tr></table></figure></p>\n<p>业务并不是特别复杂，但应该可以发现第二种（业务分层包含mvc）的包结构，才是一种高内聚的包结构。第一种分层会让人有一种将各个业务模块（如mail和sms）的service和controller隔离开了的感觉，当模块更多，每个模块的内容更多，这个“隔得很远”的不适感会逐渐侵蚀你的开发速度。一种更加低内聚的反例是不用包分层，仅仅依赖前缀区分，由于在项目开发中真的发现同事写出了这样的代码，我觉得还是有必要拿出来说一说：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//反例</span></div><div class=\"line\">sinosoftgz.message.admin</div><div class=\"line\">\tconfig</div><div class=\"line\">\t\tCommonConfig.java</div><div class=\"line\">\t\tMailConfig.java</div><div class=\"line\">\t\tSmsconfig.java</div><div class=\"line\">\tservice</div><div class=\"line\">\t\tCommonService.java</div><div class=\"line\">\t\tMailTemplateService.java</div><div class=\"line\">\t\tMailMessageService.java</div><div class=\"line\">\t\tSmsTemplateService.java</div><div class=\"line\">\t\tSmsMessageService.java</div><div class=\"line\">\tweb</div><div class=\"line\">\t\tIndexController.java</div><div class=\"line\">\t\tMailTemplateController.java</div><div class=\"line\">\t\tMailMessageController.java</div><div class=\"line\">\t\tSmsTemplateController.java</div><div class=\"line\">\t\tSmsMessageController.java     </div><div class=\"line\">\tMessageAdminApp.java</div></pre></td></tr></table></figure></p>\n<p>这样的设计会导致web包越来越庞大，逐渐变得臃肿，是什么使项目僵化，项目经理为何一看到代码就头疼，规范的高内聚的包结构，遵循业务&gt;mvc的原则，可以知道我们的项目庞大却有条理。</p>\n<h2 id=\"其他模式\"><a href=\"#其他模式\" class=\"headerlink\" title=\"其他模式\"></a>其他模式</h2><p>《领域驱动设计》这本书介绍了众多的模式，上面只是介绍了一部分重要的模式，后续我会结合各个模式，尽量采用最佳实践+浅析设计的方式来解读。</p>\n<h2 id=\"微服务之于领域驱动设计的一点思考\"><a href=\"#微服务之于领域驱动设计的一点思考\" class=\"headerlink\" title=\"微服务之于领域驱动设计的一点思考\"></a>微服务之于领域驱动设计的一点思考</h2><p>技术架构诚然重要，但不可忽视领域拆解和业务架构，《领域驱动设计》中的诸多失败，成功案例的总结，是支撑其理论知识的基础，最终汇聚成众多的模式。在火爆的微服务架构潮流下，我也逐渐意识到微服务不仅仅是技术的堆砌，更是一种设计，一门艺术。我的本科论文本想就微服务架构进行论述，奈何功底不够，最后只能改写成一篇分布式网站设计相关的文章，虽然是一个失败的过程，但让我加深了对微服务的认识。如今结合领域驱动设计，更加让我确定，技术方案始终有代替方案，决定微服务的不是框架的选择，不仅仅是restful或者rpc的接口设计风格的抉择，而更应该关注拆解，领域，限界上下文，聚合根等等一系列事物，这便是我所理解的领域驱动设计对微服务架构的指导意义。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://github.com/JoeCao/JoeCao.github.io/issues/1\" target=\"_blank\" rel=\"external\">多研究些架构，少谈些框架—-曹祖鹏</a></p>\n<p><a href=\"http://www.cnblogs.com/netfocus/archive/2011/10/10/2204949.html\" target=\"_blank\" rel=\"external\">DDD领域驱动设计基本理论知识总结 - netfocus</a></p>"},{"title":"Re:从零开始的Spring Session(一)","date":"2017-09-03T07:27:04.000Z","_content":"\nSession和Cookie这两个概念，在学习java web开发之初，大多数人就已经接触过了。最近在研究跨域单点登录的实现时，发现对于Session和Cookie的了解，并不是很深入，所以打算写两篇文章记录一下自己的理解。在我们的应用集成Spring Session之前，先补充一点Session和Cookie的关键知识。\n\n## Session与Cookie基础\n\n由于http协议是无状态的协议，为了能够记住请求的状态，于是引入了Session和Cookie的机制。我们应该有一个很明确的概念，那就是Session是存在于服务器端的，在单体式应用中，他是由tomcat管理的，存在于tomcat的内存中，当我们为了解决分布式场景中的session共享问题时，引入了redis，其共享内存，以及支持key自动过期的特性，非常契合session的特性，我们在企业开发中最常用的也就是这种模式。但是只要你愿意，也可以选择存储在JDBC，Mongo中，这些，spring都提供了默认的实现，在大多数情况下，我们只需要引入配置即可。而Cookie则是存在于客户端，更方便理解的说法，可以说存在于浏览器。Cookie并不常用，至少在我不长的web开发生涯中，并没有什么场景需要我过多的关注Cookie。http协议允许从服务器返回Response时携带一些Cookie，并且同一个域下对Cookie的数量有所限制，之前说过Session的持久化依赖于服务端的策略，而Cookie的持久化则是依赖于本地文件。虽然说Cookie并不常用，但是有一类特殊的Cookie却是我们需要额外关注的，那便是与Session相关的sessionId，他是真正维系客户端和服务端的桥梁。\n\n<!-- more -->\n\n## 代码示例\n\n用户发起请求，服务器响应请求，并做一些用户信息的处理，随后返回响应给用户；用户再次发起请求，携带sessionId，服务器便能够识别，这个用户就是之前请求的那个。\n\n使用Springboot编写一个非常简单的服务端，来加深对其的理解。需求很简单，当浏览器访问`localhost:8080/test/cookie?browser=xxx`时，如果没有获取到session，则将request中的browser存入session；如果获取到session，便将session中的browser值输出。顺便将request中的所有cookie打印出来。\n\n```java\n@Controller\npublic class CookieController {\n\n    @RequestMapping(\"/test/cookie\")\n    public String cookie(@RequestParam(\"browser\") String browser, HttpServletRequest request, HttpSession session) {\n        //取出session中的browser\n        Object sessionBrowser = session.getAttribute(\"browser\");\n        if (sessionBrowser == null) {\n            System.out.println(\"不存在session，设置browser=\" + browser);\n            session.setAttribute(\"browser\", browser);\n        } else {\n            System.out.println(\"存在session，browser=\" + sessionBrowser.toString());\n        }\n        Cookie[] cookies = request.getCookies();\n        if (cookies != null && cookies.length > 0) {\n            for (Cookie cookie : cookies) {\n                System.out.println(cookie.getName() + \" : \" + cookie.getValue());\n            }\n        }\n        return \"index\";\n    }\n}\n```\n\n我们没有引入其他任何依赖，看看原生的session机制是什么。\n\n1 使用chrome浏览器，访问`localhost:8080/test/cookie?browser=chrome`,控制台输出如下：\n\n```\nSession Info:\t不存在session，设置browser=chrome\n```\n\n既没有session，也没有cookie，我们将browser=chrome设置到session中。\n\n再次访问同样的端点，控制台输出如下：\n\n```\nSession Info:\t存在session，browser=chrome\nCookie Info:\tJSESSIONID : 4CD1D96E04FC390EA6C60E8C40A636AF\n```\n\n多次访问之后，控制台依旧打印出同样的信息。\n\n稍微解读下这个现象，可以验证一些结论。当服务端往session中保存一些数据时，Response中自动添加了一个Cookie：JSESSIONID：xxxx,再后续的请求中，浏览器也是自动的带上了这个Cookie，服务端根据Cookie中的JSESSIONID取到了对应的session。这验证了一开始的说法，客户端服务端是通过JSESSIONID进行交互的，并且，添加和携带key为JSESSIONID的Cookie都是tomcat和浏览器自动帮助我们完成的，这很关键。\n\n2 使用360浏览器，访问`localhost:8080/test/cookie?browser=360`\n\n第一次访问：\n\n```\nSession Info:\t不存在session，设置browser=360\n```\n\n后续访问：\n\n```\nSession Info:\t存在session，browser=360\nCookie Info:\tJSESSIONID : 320C21A645A160C4843D076204DA2F40\n```\n\n为什么要再次使用另一个浏览器访问呢？先卖个关子，我们最起码可以得出结论，不同浏览器，访问是隔离的，甚至重新打开同一个浏览器，JSESSIONID也是不同的。另外可以尝试把保存session的操作注视掉，则可以发现Response中就不会返回JSESSIONID了，即这是一次无状态的请求。\n\n## 安全问题\n\n其实上述的知识点，都是非常浅显的，之所以啰嗦一句，是为了引出这一节的内容，以及方便观察后续我们引入Spring Session之后的发生的变化。\n\n还记得上一节的代码示例中，我们使用了两个浏览器：\n\n- chrome浏览器访问时，JSESSIONID为4CD1D96E04FC390EA6C60E8C40A636AF，后端session记录的值为：browser=chrome。\n- 360浏览器访问时，JSESSIONID为320C21A645A160C4843D076204DA2F40,后端session记录的值为：browser=360。\n\n我们使用chrome插件Edit this Cookie，将chrome浏览器中的JSESSIONID修改为360浏览器中的值\n\n![EditThisCookie](http://ov0zuistv.bkt.clouddn.com/image/EditThisCookie.png)\n\n同样访问原来的端点：localhost:8080/test/cookie?browser=chrome，得到的输出如下：\n\n```\n存在session，browser=360\nJSESSIONID : 320C21A645A160C4843D076204DA2F40\n```\n\n证实了一点，存放在客户端的Cookie的确是存在安全问题的，我们使用360的JSESSIONID“骗”过了服务器。毕竟，服务器只能通过Cookie中的JSESSIONID来辨别身份。（这提示我们不要在公共场合保存Cookie信息，现在的浏览器在保存Cookie时通常会让你确定一次）\n\n下一篇文章，将正式讲解如何在应用中集成Spring Session。","source":"_posts/Re：从零开始的Spring Session(一).md","raw":"---\ntitle: Re:从零开始的Spring Session(一)\ndate: 2017-09-03 15:27:04\ntags: \n- Spring Session\n- Spring\ncategories:\n- Spring Session\n---\n\nSession和Cookie这两个概念，在学习java web开发之初，大多数人就已经接触过了。最近在研究跨域单点登录的实现时，发现对于Session和Cookie的了解，并不是很深入，所以打算写两篇文章记录一下自己的理解。在我们的应用集成Spring Session之前，先补充一点Session和Cookie的关键知识。\n\n## Session与Cookie基础\n\n由于http协议是无状态的协议，为了能够记住请求的状态，于是引入了Session和Cookie的机制。我们应该有一个很明确的概念，那就是Session是存在于服务器端的，在单体式应用中，他是由tomcat管理的，存在于tomcat的内存中，当我们为了解决分布式场景中的session共享问题时，引入了redis，其共享内存，以及支持key自动过期的特性，非常契合session的特性，我们在企业开发中最常用的也就是这种模式。但是只要你愿意，也可以选择存储在JDBC，Mongo中，这些，spring都提供了默认的实现，在大多数情况下，我们只需要引入配置即可。而Cookie则是存在于客户端，更方便理解的说法，可以说存在于浏览器。Cookie并不常用，至少在我不长的web开发生涯中，并没有什么场景需要我过多的关注Cookie。http协议允许从服务器返回Response时携带一些Cookie，并且同一个域下对Cookie的数量有所限制，之前说过Session的持久化依赖于服务端的策略，而Cookie的持久化则是依赖于本地文件。虽然说Cookie并不常用，但是有一类特殊的Cookie却是我们需要额外关注的，那便是与Session相关的sessionId，他是真正维系客户端和服务端的桥梁。\n\n<!-- more -->\n\n## 代码示例\n\n用户发起请求，服务器响应请求，并做一些用户信息的处理，随后返回响应给用户；用户再次发起请求，携带sessionId，服务器便能够识别，这个用户就是之前请求的那个。\n\n使用Springboot编写一个非常简单的服务端，来加深对其的理解。需求很简单，当浏览器访问`localhost:8080/test/cookie?browser=xxx`时，如果没有获取到session，则将request中的browser存入session；如果获取到session，便将session中的browser值输出。顺便将request中的所有cookie打印出来。\n\n```java\n@Controller\npublic class CookieController {\n\n    @RequestMapping(\"/test/cookie\")\n    public String cookie(@RequestParam(\"browser\") String browser, HttpServletRequest request, HttpSession session) {\n        //取出session中的browser\n        Object sessionBrowser = session.getAttribute(\"browser\");\n        if (sessionBrowser == null) {\n            System.out.println(\"不存在session，设置browser=\" + browser);\n            session.setAttribute(\"browser\", browser);\n        } else {\n            System.out.println(\"存在session，browser=\" + sessionBrowser.toString());\n        }\n        Cookie[] cookies = request.getCookies();\n        if (cookies != null && cookies.length > 0) {\n            for (Cookie cookie : cookies) {\n                System.out.println(cookie.getName() + \" : \" + cookie.getValue());\n            }\n        }\n        return \"index\";\n    }\n}\n```\n\n我们没有引入其他任何依赖，看看原生的session机制是什么。\n\n1 使用chrome浏览器，访问`localhost:8080/test/cookie?browser=chrome`,控制台输出如下：\n\n```\nSession Info:\t不存在session，设置browser=chrome\n```\n\n既没有session，也没有cookie，我们将browser=chrome设置到session中。\n\n再次访问同样的端点，控制台输出如下：\n\n```\nSession Info:\t存在session，browser=chrome\nCookie Info:\tJSESSIONID : 4CD1D96E04FC390EA6C60E8C40A636AF\n```\n\n多次访问之后，控制台依旧打印出同样的信息。\n\n稍微解读下这个现象，可以验证一些结论。当服务端往session中保存一些数据时，Response中自动添加了一个Cookie：JSESSIONID：xxxx,再后续的请求中，浏览器也是自动的带上了这个Cookie，服务端根据Cookie中的JSESSIONID取到了对应的session。这验证了一开始的说法，客户端服务端是通过JSESSIONID进行交互的，并且，添加和携带key为JSESSIONID的Cookie都是tomcat和浏览器自动帮助我们完成的，这很关键。\n\n2 使用360浏览器，访问`localhost:8080/test/cookie?browser=360`\n\n第一次访问：\n\n```\nSession Info:\t不存在session，设置browser=360\n```\n\n后续访问：\n\n```\nSession Info:\t存在session，browser=360\nCookie Info:\tJSESSIONID : 320C21A645A160C4843D076204DA2F40\n```\n\n为什么要再次使用另一个浏览器访问呢？先卖个关子，我们最起码可以得出结论，不同浏览器，访问是隔离的，甚至重新打开同一个浏览器，JSESSIONID也是不同的。另外可以尝试把保存session的操作注视掉，则可以发现Response中就不会返回JSESSIONID了，即这是一次无状态的请求。\n\n## 安全问题\n\n其实上述的知识点，都是非常浅显的，之所以啰嗦一句，是为了引出这一节的内容，以及方便观察后续我们引入Spring Session之后的发生的变化。\n\n还记得上一节的代码示例中，我们使用了两个浏览器：\n\n- chrome浏览器访问时，JSESSIONID为4CD1D96E04FC390EA6C60E8C40A636AF，后端session记录的值为：browser=chrome。\n- 360浏览器访问时，JSESSIONID为320C21A645A160C4843D076204DA2F40,后端session记录的值为：browser=360。\n\n我们使用chrome插件Edit this Cookie，将chrome浏览器中的JSESSIONID修改为360浏览器中的值\n\n![EditThisCookie](http://ov0zuistv.bkt.clouddn.com/image/EditThisCookie.png)\n\n同样访问原来的端点：localhost:8080/test/cookie?browser=chrome，得到的输出如下：\n\n```\n存在session，browser=360\nJSESSIONID : 320C21A645A160C4843D076204DA2F40\n```\n\n证实了一点，存放在客户端的Cookie的确是存在安全问题的，我们使用360的JSESSIONID“骗”过了服务器。毕竟，服务器只能通过Cookie中的JSESSIONID来辨别身份。（这提示我们不要在公共场合保存Cookie信息，现在的浏览器在保存Cookie时通常会让你确定一次）\n\n下一篇文章，将正式讲解如何在应用中集成Spring Session。","slug":"Re：从零开始的Spring Session(一)","published":1,"updated":"2017-09-09T09:59:04.500Z","_id":"cj7cy3zs3000jtwv70yddxit5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Session和Cookie这两个概念，在学习java web开发之初，大多数人就已经接触过了。最近在研究跨域单点登录的实现时，发现对于Session和Cookie的了解，并不是很深入，所以打算写两篇文章记录一下自己的理解。在我们的应用集成Spring Session之前，先补充一点Session和Cookie的关键知识。</p>\n<h2 id=\"Session与Cookie基础\"><a href=\"#Session与Cookie基础\" class=\"headerlink\" title=\"Session与Cookie基础\"></a>Session与Cookie基础</h2><p>由于http协议是无状态的协议，为了能够记住请求的状态，于是引入了Session和Cookie的机制。我们应该有一个很明确的概念，那就是Session是存在于服务器端的，在单体式应用中，他是由tomcat管理的，存在于tomcat的内存中，当我们为了解决分布式场景中的session共享问题时，引入了redis，其共享内存，以及支持key自动过期的特性，非常契合session的特性，我们在企业开发中最常用的也就是这种模式。但是只要你愿意，也可以选择存储在JDBC，Mongo中，这些，spring都提供了默认的实现，在大多数情况下，我们只需要引入配置即可。而Cookie则是存在于客户端，更方便理解的说法，可以说存在于浏览器。Cookie并不常用，至少在我不长的web开发生涯中，并没有什么场景需要我过多的关注Cookie。http协议允许从服务器返回Response时携带一些Cookie，并且同一个域下对Cookie的数量有所限制，之前说过Session的持久化依赖于服务端的策略，而Cookie的持久化则是依赖于本地文件。虽然说Cookie并不常用，但是有一类特殊的Cookie却是我们需要额外关注的，那便是与Session相关的sessionId，他是真正维系客户端和服务端的桥梁。</p>\n<a id=\"more\"></a>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>用户发起请求，服务器响应请求，并做一些用户信息的处理，随后返回响应给用户；用户再次发起请求，携带sessionId，服务器便能够识别，这个用户就是之前请求的那个。</p>\n<p>使用Springboot编写一个非常简单的服务端，来加深对其的理解。需求很简单，当浏览器访问<code>localhost:8080/test/cookie?browser=xxx</code>时，如果没有获取到session，则将request中的browser存入session；如果获取到session，便将session中的browser值输出。顺便将request中的所有cookie打印出来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test/cookie\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">cookie</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"browser\"</span>)</span> String browser, HttpServletRequest request, HttpSession session) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//取出session中的browser</span></div><div class=\"line\">        Object sessionBrowser = session.getAttribute(<span class=\"string\">\"browser\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (sessionBrowser == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"不存在session，设置browser=\"</span> + browser);</div><div class=\"line\">            session.setAttribute(<span class=\"string\">\"browser\"</span>, browser);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"存在session，browser=\"</span> + sessionBrowser.toString());</div><div class=\"line\">        &#125;</div><div class=\"line\">        Cookie[] cookies = request.getCookies();</div><div class=\"line\">        <span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span> &amp;&amp; cookies.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Cookie cookie : cookies) &#123;</div><div class=\"line\">                System.out.println(cookie.getName() + <span class=\"string\">\" : \"</span> + cookie.getValue());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们没有引入其他任何依赖，看看原生的session机制是什么。</p>\n<p>1 使用chrome浏览器，访问<code>localhost:8080/test/cookie?browser=chrome</code>,控制台输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Session Info:\t不存在session，设置browser=chrome</div></pre></td></tr></table></figure>\n<p>既没有session，也没有cookie，我们将browser=chrome设置到session中。</p>\n<p>再次访问同样的端点，控制台输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Session Info:\t存在session，browser=chrome</div><div class=\"line\">Cookie Info:\tJSESSIONID : 4CD1D96E04FC390EA6C60E8C40A636AF</div></pre></td></tr></table></figure>\n<p>多次访问之后，控制台依旧打印出同样的信息。</p>\n<p>稍微解读下这个现象，可以验证一些结论。当服务端往session中保存一些数据时，Response中自动添加了一个Cookie：JSESSIONID：xxxx,再后续的请求中，浏览器也是自动的带上了这个Cookie，服务端根据Cookie中的JSESSIONID取到了对应的session。这验证了一开始的说法，客户端服务端是通过JSESSIONID进行交互的，并且，添加和携带key为JSESSIONID的Cookie都是tomcat和浏览器自动帮助我们完成的，这很关键。</p>\n<p>2 使用360浏览器，访问<code>localhost:8080/test/cookie?browser=360</code></p>\n<p>第一次访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Session Info:\t不存在session，设置browser=360</div></pre></td></tr></table></figure>\n<p>后续访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Session Info:\t存在session，browser=360</div><div class=\"line\">Cookie Info:\tJSESSIONID : 320C21A645A160C4843D076204DA2F40</div></pre></td></tr></table></figure>\n<p>为什么要再次使用另一个浏览器访问呢？先卖个关子，我们最起码可以得出结论，不同浏览器，访问是隔离的，甚至重新打开同一个浏览器，JSESSIONID也是不同的。另外可以尝试把保存session的操作注视掉，则可以发现Response中就不会返回JSESSIONID了，即这是一次无状态的请求。</p>\n<h2 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h2><p>其实上述的知识点，都是非常浅显的，之所以啰嗦一句，是为了引出这一节的内容，以及方便观察后续我们引入Spring Session之后的发生的变化。</p>\n<p>还记得上一节的代码示例中，我们使用了两个浏览器：</p>\n<ul>\n<li>chrome浏览器访问时，JSESSIONID为4CD1D96E04FC390EA6C60E8C40A636AF，后端session记录的值为：browser=chrome。</li>\n<li>360浏览器访问时，JSESSIONID为320C21A645A160C4843D076204DA2F40,后端session记录的值为：browser=360。</li>\n</ul>\n<p>我们使用chrome插件Edit this Cookie，将chrome浏览器中的JSESSIONID修改为360浏览器中的值</p>\n<p><img src=\"http://ov0zuistv.bkt.clouddn.com/image/EditThisCookie.png\" alt=\"EditThisCookie\"></p>\n<p>同样访问原来的端点：localhost:8080/test/cookie?browser=chrome，得到的输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">存在session，browser=360</div><div class=\"line\">JSESSIONID : 320C21A645A160C4843D076204DA2F40</div></pre></td></tr></table></figure>\n<p>证实了一点，存放在客户端的Cookie的确是存在安全问题的，我们使用360的JSESSIONID“骗”过了服务器。毕竟，服务器只能通过Cookie中的JSESSIONID来辨别身份。（这提示我们不要在公共场合保存Cookie信息，现在的浏览器在保存Cookie时通常会让你确定一次）</p>\n<p>下一篇文章，将正式讲解如何在应用中集成Spring Session。</p>\n","site":{"data":{}},"excerpt":"<p>Session和Cookie这两个概念，在学习java web开发之初，大多数人就已经接触过了。最近在研究跨域单点登录的实现时，发现对于Session和Cookie的了解，并不是很深入，所以打算写两篇文章记录一下自己的理解。在我们的应用集成Spring Session之前，先补充一点Session和Cookie的关键知识。</p>\n<h2 id=\"Session与Cookie基础\"><a href=\"#Session与Cookie基础\" class=\"headerlink\" title=\"Session与Cookie基础\"></a>Session与Cookie基础</h2><p>由于http协议是无状态的协议，为了能够记住请求的状态，于是引入了Session和Cookie的机制。我们应该有一个很明确的概念，那就是Session是存在于服务器端的，在单体式应用中，他是由tomcat管理的，存在于tomcat的内存中，当我们为了解决分布式场景中的session共享问题时，引入了redis，其共享内存，以及支持key自动过期的特性，非常契合session的特性，我们在企业开发中最常用的也就是这种模式。但是只要你愿意，也可以选择存储在JDBC，Mongo中，这些，spring都提供了默认的实现，在大多数情况下，我们只需要引入配置即可。而Cookie则是存在于客户端，更方便理解的说法，可以说存在于浏览器。Cookie并不常用，至少在我不长的web开发生涯中，并没有什么场景需要我过多的关注Cookie。http协议允许从服务器返回Response时携带一些Cookie，并且同一个域下对Cookie的数量有所限制，之前说过Session的持久化依赖于服务端的策略，而Cookie的持久化则是依赖于本地文件。虽然说Cookie并不常用，但是有一类特殊的Cookie却是我们需要额外关注的，那便是与Session相关的sessionId，他是真正维系客户端和服务端的桥梁。</p>","more":"<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>用户发起请求，服务器响应请求，并做一些用户信息的处理，随后返回响应给用户；用户再次发起请求，携带sessionId，服务器便能够识别，这个用户就是之前请求的那个。</p>\n<p>使用Springboot编写一个非常简单的服务端，来加深对其的理解。需求很简单，当浏览器访问<code>localhost:8080/test/cookie?browser=xxx</code>时，如果没有获取到session，则将request中的browser存入session；如果获取到session，便将session中的browser值输出。顺便将request中的所有cookie打印出来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test/cookie\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">cookie</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"browser\"</span>)</span> String browser, HttpServletRequest request, HttpSession session) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//取出session中的browser</span></div><div class=\"line\">        Object sessionBrowser = session.getAttribute(<span class=\"string\">\"browser\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (sessionBrowser == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"不存在session，设置browser=\"</span> + browser);</div><div class=\"line\">            session.setAttribute(<span class=\"string\">\"browser\"</span>, browser);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"存在session，browser=\"</span> + sessionBrowser.toString());</div><div class=\"line\">        &#125;</div><div class=\"line\">        Cookie[] cookies = request.getCookies();</div><div class=\"line\">        <span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span> &amp;&amp; cookies.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Cookie cookie : cookies) &#123;</div><div class=\"line\">                System.out.println(cookie.getName() + <span class=\"string\">\" : \"</span> + cookie.getValue());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们没有引入其他任何依赖，看看原生的session机制是什么。</p>\n<p>1 使用chrome浏览器，访问<code>localhost:8080/test/cookie?browser=chrome</code>,控制台输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Session Info:\t不存在session，设置browser=chrome</div></pre></td></tr></table></figure>\n<p>既没有session，也没有cookie，我们将browser=chrome设置到session中。</p>\n<p>再次访问同样的端点，控制台输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Session Info:\t存在session，browser=chrome</div><div class=\"line\">Cookie Info:\tJSESSIONID : 4CD1D96E04FC390EA6C60E8C40A636AF</div></pre></td></tr></table></figure>\n<p>多次访问之后，控制台依旧打印出同样的信息。</p>\n<p>稍微解读下这个现象，可以验证一些结论。当服务端往session中保存一些数据时，Response中自动添加了一个Cookie：JSESSIONID：xxxx,再后续的请求中，浏览器也是自动的带上了这个Cookie，服务端根据Cookie中的JSESSIONID取到了对应的session。这验证了一开始的说法，客户端服务端是通过JSESSIONID进行交互的，并且，添加和携带key为JSESSIONID的Cookie都是tomcat和浏览器自动帮助我们完成的，这很关键。</p>\n<p>2 使用360浏览器，访问<code>localhost:8080/test/cookie?browser=360</code></p>\n<p>第一次访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Session Info:\t不存在session，设置browser=360</div></pre></td></tr></table></figure>\n<p>后续访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Session Info:\t存在session，browser=360</div><div class=\"line\">Cookie Info:\tJSESSIONID : 320C21A645A160C4843D076204DA2F40</div></pre></td></tr></table></figure>\n<p>为什么要再次使用另一个浏览器访问呢？先卖个关子，我们最起码可以得出结论，不同浏览器，访问是隔离的，甚至重新打开同一个浏览器，JSESSIONID也是不同的。另外可以尝试把保存session的操作注视掉，则可以发现Response中就不会返回JSESSIONID了，即这是一次无状态的请求。</p>\n<h2 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h2><p>其实上述的知识点，都是非常浅显的，之所以啰嗦一句，是为了引出这一节的内容，以及方便观察后续我们引入Spring Session之后的发生的变化。</p>\n<p>还记得上一节的代码示例中，我们使用了两个浏览器：</p>\n<ul>\n<li>chrome浏览器访问时，JSESSIONID为4CD1D96E04FC390EA6C60E8C40A636AF，后端session记录的值为：browser=chrome。</li>\n<li>360浏览器访问时，JSESSIONID为320C21A645A160C4843D076204DA2F40,后端session记录的值为：browser=360。</li>\n</ul>\n<p>我们使用chrome插件Edit this Cookie，将chrome浏览器中的JSESSIONID修改为360浏览器中的值</p>\n<p><img src=\"http://ov0zuistv.bkt.clouddn.com/image/EditThisCookie.png\" alt=\"EditThisCookie\"></p>\n<p>同样访问原来的端点：localhost:8080/test/cookie?browser=chrome，得到的输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">存在session，browser=360</div><div class=\"line\">JSESSIONID : 320C21A645A160C4843D076204DA2F40</div></pre></td></tr></table></figure>\n<p>证实了一点，存放在客户端的Cookie的确是存在安全问题的，我们使用360的JSESSIONID“骗”过了服务器。毕竟，服务器只能通过Cookie中的JSESSIONID来辨别身份。（这提示我们不要在公共场合保存Cookie信息，现在的浏览器在保存Cookie时通常会让你确定一次）</p>\n<p>下一篇文章，将正式讲解如何在应用中集成Spring Session。</p>"},{"title":"Zuul性能测试","date":"2017-04-08T07:27:52.000Z","_content":"\n\n\n环境准备\n----\n采用三台阿里云服务器作为测试\n10.19.52.8 部署网关应用-gateway\n10.19.52.9, 10.19.52.10 部署用于测试的业务系统\n![这里写图片描述](http://img.blog.csdn.net/20170408122814192?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n压测工具准备\n------\n选用ab作为压力测试的工具，为了方便起见，直接将ab工具安装在10.19.52.8这台机\n测试命令如下：\n```shell\nab -n 10000 -c 100 http://10.19.52.8:8080/hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52\n```\n其中－n表示请求数，－c表示并发数,上面一条命令也就意味着，100个用户并发对`http://10.19.52.8/hello/testOK`累计发送了10000次请求。\n\n服务器,网关配置\n--------\n由于我们使用的tomcat容器，关于tomcat的一点知识总结如下：\n\n<!-- more -->\n\n> Tomcat的最大并发数是可以配置的，实际运用中，最大并发数与硬件性能和CPU数量都有很大关系的。更好的硬件，更多的处理器都会使Tomcat支持更多的并发。\n> ​\t\n> Tomcat 默认的HTTP实现是采用阻塞式的Socket通信，每个请求都需要创建一个线程处理，当一个进程有500个线程在跑的话，那性能已经是很低很低了。Tomcat默认配置的最大请求数是150，也就是说同时支持150个并发。具体能承载多少并发，需要看硬件的配置，CPU越多性能越高，分配给JVM的内存越多性能也就越高，但也会加重GC的负担。当某个应用拥有 250个以上并发的时候，应考虑应用服务器的集群。操作系统对于进程中的线程数有一定的限制：\n>  Windows 每个进程中的线程数不允许超过 2000\n> Linux 每个进程中的线程数不允许超过 1000\n> 在Java中每开启一个线程需要耗用1MB的JVM内存空间用于作为线程栈之用，此处也应考虑。\n\n \n\n所以我们修改配置tomcat的默认配置，如下：\n```yaml\nserver:\n  tomcat:\n    accept-count: 1000 \n    max-threads: 1000\n    max-connections: 2000\n```\n无论是网关应用，还是用于测试的业务系统的tomcat，我们都需要如上配置，否则会引起木桶效应，整个调用流程会受到配置最差的应用的干扰。\nzuul内部路由可以理解为使用一个线程池去发送路由请求，所以我们也需要扩大这个线程池的容量，配置如下：\n```yaml\nzuul:\n  host:\n    max-per-route-connections: 1000\n    max-total-connections: 1000\n```\n\n监控工具\n----\n\n为了确保上述配置真正起作用，我们使用Java VisualVM这个工具监控这几台服务器上部署的tomcat的线程以及内存使用情况。\n启动脚本加上如下参数，之后通过工具连接2099端口即可监控\n```shell\n-Dcom.sun.management.jmxremote.port=2099 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=10.19.52.8\n```\n\n开始测试\n----\n\n - 测试一\n  1.通过访问网关，由网关转发，应用端接口延迟200ms后返回一个字符串，模拟真实接口的业务处理延迟\n  2.300个线程并发请求，共计100000 次\n```shell\nab -n 100000 -c 300 http://10.19.52.8:8080/hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52\n```\n\n```\nDocument Path:          /hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52\nDocument Length:        2 bytes\n\nConcurrency Level:      300\nTime taken for tests:   151.026 seconds\nComplete requests:      100000\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      42200844 bytes\nHTML transferred:       200004 bytes\n**Requests per second:    662.14 [#/sec] (mean)**\nTime per request:       453.078 [ms] (mean)\nTime per request:       1.510 [ms] (mean, across all concurrent requests)\nTransfer rate:          272.88 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    5   7.0      2      98\nProcessing:   206  447 478.7    230    3171\nWaiting:      197  445 478.7    227    3165\nTotal:        206  451 478.8    236    3177\n\nPercentage of the requests served within a certain time (ms)\n  50%    236\n  66%    250\n  75%    273\n  80%    322\n  90%   1408\n  95%   1506\n  98%   1684\n  99%   1764\n 100%   3177 (longest request)\n\n```\n测试二：\n1.直接访问应用，应用端接口延迟200ms后返回一个字符串，模拟真实接口的业务处理延迟\n2.300个线程并发请求，共计100000 次\n\n```\nab -n 100000 -c 300 http://10.19.52.9:9091/testOK\n```\n\n```\nServer Hostname:        10.19.52.9\nServer Port:            9091\n\nDocument Path:          /testOK\nDocument Length:        2 bytes\n\nConcurrency Level:      300\nTime taken for tests:   69.003 seconds\nComplete requests:      100000\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      13400000 bytes\nHTML transferred:       200000 bytes\n**Requests per second:    1449.21 [#/sec] (mean)**\nTime per request:       207.009 [ms] (mean)\nTime per request:       0.690 [ms] (mean, across all concurrent requests)\nTransfer rate:          189.64 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.8      0      10\nProcessing:   200  206   7.7    202     286\nWaiting:      200  205   7.7    202     286\nTotal:        201  206   7.9    203     295\n\nPercentage of the requests served within a certain time (ms)\n  50%    203\n  66%    205\n  75%    207\n  80%    209\n  90%    215\n  95%    220\n  98%    229\n  99%    240\n 100%    295 (longest request)\n```\n经过网关路由之后的性能下降是不可避免的，在测试过程中，查看监控端的线程变化，如下图：\n\n![这里写图片描述](http://img.blog.csdn.net/20170408145703703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n我们的配置的确产生了作用。\n\n我们再来分析一下上面测试结果的一个重要指标：Requests per second，我们的网关经过了鉴权之后，性能仍然可以达到600+每秒的响应，是完全可以接受的，峰值时内存情况，使用top指令，如下所示：![这里写图片描述](http://img.blog.csdn.net/20170408150216769?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nab测试命令也占用了一定的cpu使用率，总应用接近70%的cpu使用率，这估计也是单个tomcat实例的瓶颈了。因为我们的应用服务器会单独部署网关，并且可以在多个服务器上部署多个实例，所以这个结果可以接受。\n\n为了避免单次响应带来的偶然因素，我们重复进行测试一（更改为10000次请求，并发量200），看看Requests per second的变化。\n\n```\n1. 799.45\n2. 818.86\n3. 838.67\n4. 833.90\n5. 973.65\n```\n\n总结\n--\n有一些其他的数据没有整理到博客中，但是也顺便把结论写一下。\n\n这次的测试有几个注意点：\n\n  1. 是在应用服务器端模拟200ms的延时，因为实际请求不可能不伴随着耗时的业务操作，实际发现对ab的测试影响还是较大的，毕竟线程阻塞着，不延迟时request per second能达到2000，加了200ms延迟之后下降到1000+。\n  2. 模拟总请求数和线程数的变化会引起QPS/TPS的抖动，即使是在多核CPU的承受范围之内，也并不是说线程越多，QPS/TPS就越高，因为启动线程的开销，以及线程上下文切换的耗时，开辟线程带来的内存损耗都会影响性能。钱总说单个tomcat实例的并发度理论值200就可以接受了，经过参数调优后的tomcat使用zuul做网关能达到如上的测试结果，完全可以投入生产环境使用了。而tomcat默认的150线程，如果使用200的并发度测试就显然是“不公平的”。\n  3. 测试注意点有几个，例如ab部署在了api-gateway本机会影响性能，tomcat参数以及zuul参数应当尽可能放开，不让其默认配置影响测试。\n\n本文还有些遗漏的数据，后续会补上...\n\n\n\n\n","source":"_posts/Zuul性能测试.md","raw":"---\ntitle: Zuul性能测试\ndate: 2017-04-08 15:27:52\ntags: \n- Spring Cloud Zuul\ncategories: \n- Spring Cloud\n---\n\n\n\n环境准备\n----\n采用三台阿里云服务器作为测试\n10.19.52.8 部署网关应用-gateway\n10.19.52.9, 10.19.52.10 部署用于测试的业务系统\n![这里写图片描述](http://img.blog.csdn.net/20170408122814192?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n压测工具准备\n------\n选用ab作为压力测试的工具，为了方便起见，直接将ab工具安装在10.19.52.8这台机\n测试命令如下：\n```shell\nab -n 10000 -c 100 http://10.19.52.8:8080/hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52\n```\n其中－n表示请求数，－c表示并发数,上面一条命令也就意味着，100个用户并发对`http://10.19.52.8/hello/testOK`累计发送了10000次请求。\n\n服务器,网关配置\n--------\n由于我们使用的tomcat容器，关于tomcat的一点知识总结如下：\n\n<!-- more -->\n\n> Tomcat的最大并发数是可以配置的，实际运用中，最大并发数与硬件性能和CPU数量都有很大关系的。更好的硬件，更多的处理器都会使Tomcat支持更多的并发。\n> ​\t\n> Tomcat 默认的HTTP实现是采用阻塞式的Socket通信，每个请求都需要创建一个线程处理，当一个进程有500个线程在跑的话，那性能已经是很低很低了。Tomcat默认配置的最大请求数是150，也就是说同时支持150个并发。具体能承载多少并发，需要看硬件的配置，CPU越多性能越高，分配给JVM的内存越多性能也就越高，但也会加重GC的负担。当某个应用拥有 250个以上并发的时候，应考虑应用服务器的集群。操作系统对于进程中的线程数有一定的限制：\n>  Windows 每个进程中的线程数不允许超过 2000\n> Linux 每个进程中的线程数不允许超过 1000\n> 在Java中每开启一个线程需要耗用1MB的JVM内存空间用于作为线程栈之用，此处也应考虑。\n\n \n\n所以我们修改配置tomcat的默认配置，如下：\n```yaml\nserver:\n  tomcat:\n    accept-count: 1000 \n    max-threads: 1000\n    max-connections: 2000\n```\n无论是网关应用，还是用于测试的业务系统的tomcat，我们都需要如上配置，否则会引起木桶效应，整个调用流程会受到配置最差的应用的干扰。\nzuul内部路由可以理解为使用一个线程池去发送路由请求，所以我们也需要扩大这个线程池的容量，配置如下：\n```yaml\nzuul:\n  host:\n    max-per-route-connections: 1000\n    max-total-connections: 1000\n```\n\n监控工具\n----\n\n为了确保上述配置真正起作用，我们使用Java VisualVM这个工具监控这几台服务器上部署的tomcat的线程以及内存使用情况。\n启动脚本加上如下参数，之后通过工具连接2099端口即可监控\n```shell\n-Dcom.sun.management.jmxremote.port=2099 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=10.19.52.8\n```\n\n开始测试\n----\n\n - 测试一\n  1.通过访问网关，由网关转发，应用端接口延迟200ms后返回一个字符串，模拟真实接口的业务处理延迟\n  2.300个线程并发请求，共计100000 次\n```shell\nab -n 100000 -c 300 http://10.19.52.8:8080/hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52\n```\n\n```\nDocument Path:          /hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52\nDocument Length:        2 bytes\n\nConcurrency Level:      300\nTime taken for tests:   151.026 seconds\nComplete requests:      100000\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      42200844 bytes\nHTML transferred:       200004 bytes\n**Requests per second:    662.14 [#/sec] (mean)**\nTime per request:       453.078 [ms] (mean)\nTime per request:       1.510 [ms] (mean, across all concurrent requests)\nTransfer rate:          272.88 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    5   7.0      2      98\nProcessing:   206  447 478.7    230    3171\nWaiting:      197  445 478.7    227    3165\nTotal:        206  451 478.8    236    3177\n\nPercentage of the requests served within a certain time (ms)\n  50%    236\n  66%    250\n  75%    273\n  80%    322\n  90%   1408\n  95%   1506\n  98%   1684\n  99%   1764\n 100%   3177 (longest request)\n\n```\n测试二：\n1.直接访问应用，应用端接口延迟200ms后返回一个字符串，模拟真实接口的业务处理延迟\n2.300个线程并发请求，共计100000 次\n\n```\nab -n 100000 -c 300 http://10.19.52.9:9091/testOK\n```\n\n```\nServer Hostname:        10.19.52.9\nServer Port:            9091\n\nDocument Path:          /testOK\nDocument Length:        2 bytes\n\nConcurrency Level:      300\nTime taken for tests:   69.003 seconds\nComplete requests:      100000\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      13400000 bytes\nHTML transferred:       200000 bytes\n**Requests per second:    1449.21 [#/sec] (mean)**\nTime per request:       207.009 [ms] (mean)\nTime per request:       0.690 [ms] (mean, across all concurrent requests)\nTransfer rate:          189.64 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.8      0      10\nProcessing:   200  206   7.7    202     286\nWaiting:      200  205   7.7    202     286\nTotal:        201  206   7.9    203     295\n\nPercentage of the requests served within a certain time (ms)\n  50%    203\n  66%    205\n  75%    207\n  80%    209\n  90%    215\n  95%    220\n  98%    229\n  99%    240\n 100%    295 (longest request)\n```\n经过网关路由之后的性能下降是不可避免的，在测试过程中，查看监控端的线程变化，如下图：\n\n![这里写图片描述](http://img.blog.csdn.net/20170408145703703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n我们的配置的确产生了作用。\n\n我们再来分析一下上面测试结果的一个重要指标：Requests per second，我们的网关经过了鉴权之后，性能仍然可以达到600+每秒的响应，是完全可以接受的，峰值时内存情况，使用top指令，如下所示：![这里写图片描述](http://img.blog.csdn.net/20170408150216769?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nab测试命令也占用了一定的cpu使用率，总应用接近70%的cpu使用率，这估计也是单个tomcat实例的瓶颈了。因为我们的应用服务器会单独部署网关，并且可以在多个服务器上部署多个实例，所以这个结果可以接受。\n\n为了避免单次响应带来的偶然因素，我们重复进行测试一（更改为10000次请求，并发量200），看看Requests per second的变化。\n\n```\n1. 799.45\n2. 818.86\n3. 838.67\n4. 833.90\n5. 973.65\n```\n\n总结\n--\n有一些其他的数据没有整理到博客中，但是也顺便把结论写一下。\n\n这次的测试有几个注意点：\n\n  1. 是在应用服务器端模拟200ms的延时，因为实际请求不可能不伴随着耗时的业务操作，实际发现对ab的测试影响还是较大的，毕竟线程阻塞着，不延迟时request per second能达到2000，加了200ms延迟之后下降到1000+。\n  2. 模拟总请求数和线程数的变化会引起QPS/TPS的抖动，即使是在多核CPU的承受范围之内，也并不是说线程越多，QPS/TPS就越高，因为启动线程的开销，以及线程上下文切换的耗时，开辟线程带来的内存损耗都会影响性能。钱总说单个tomcat实例的并发度理论值200就可以接受了，经过参数调优后的tomcat使用zuul做网关能达到如上的测试结果，完全可以投入生产环境使用了。而tomcat默认的150线程，如果使用200的并发度测试就显然是“不公平的”。\n  3. 测试注意点有几个，例如ab部署在了api-gateway本机会影响性能，tomcat参数以及zuul参数应当尽可能放开，不让其默认配置影响测试。\n\n本文还有些遗漏的数据，后续会补上...\n\n\n\n\n","slug":"Zuul性能测试","published":1,"updated":"2017-09-04T11:49:26.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zs5000ltwv70925rypw","content":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>采用三台阿里云服务器作为测试<br>10.19.52.8 部署网关应用-gateway<br>10.19.52.9, 10.19.52.10 部署用于测试的业务系统<br><img src=\"http://img.blog.csdn.net/20170408122814192?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"压测工具准备\"><a href=\"#压测工具准备\" class=\"headerlink\" title=\"压测工具准备\"></a>压测工具准备</h2><p>选用ab作为压力测试的工具，为了方便起见，直接将ab工具安装在10.19.52.8这台机<br>测试命令如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ab -n 10000 -c 100 http://10.19.52.8:8080/hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52</div></pre></td></tr></table></figure></p>\n<p>其中－n表示请求数，－c表示并发数,上面一条命令也就意味着，100个用户并发对<code>http://10.19.52.8/hello/testOK</code>累计发送了10000次请求。</p>\n<h2 id=\"服务器-网关配置\"><a href=\"#服务器-网关配置\" class=\"headerlink\" title=\"服务器,网关配置\"></a>服务器,网关配置</h2><p>由于我们使用的tomcat容器，关于tomcat的一点知识总结如下：</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>Tomcat的最大并发数是可以配置的，实际运用中，最大并发数与硬件性能和CPU数量都有很大关系的。更好的硬件，更多的处理器都会使Tomcat支持更多的并发。<br>​<br>Tomcat 默认的HTTP实现是采用阻塞式的Socket通信，每个请求都需要创建一个线程处理，当一个进程有500个线程在跑的话，那性能已经是很低很低了。Tomcat默认配置的最大请求数是150，也就是说同时支持150个并发。具体能承载多少并发，需要看硬件的配置，CPU越多性能越高，分配给JVM的内存越多性能也就越高，但也会加重GC的负担。当某个应用拥有 250个以上并发的时候，应考虑应用服务器的集群。操作系统对于进程中的线程数有一定的限制：<br> Windows 每个进程中的线程数不允许超过 2000<br>Linux 每个进程中的线程数不允许超过 1000<br>在Java中每开启一个线程需要耗用1MB的JVM内存空间用于作为线程栈之用，此处也应考虑。</p>\n</blockquote>\n<p>所以我们修改配置tomcat的默认配置，如下：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  tomcat:</span></div><div class=\"line\"><span class=\"attr\">    accept-count:</span> <span class=\"number\">1000</span> </div><div class=\"line\"><span class=\"attr\">    max-threads:</span> <span class=\"number\">1000</span></div><div class=\"line\"><span class=\"attr\">    max-connections:</span> <span class=\"number\">2000</span></div></pre></td></tr></table></figure></p>\n<p>无论是网关应用，还是用于测试的业务系统的tomcat，我们都需要如上配置，否则会引起木桶效应，整个调用流程会受到配置最差的应用的干扰。<br>zuul内部路由可以理解为使用一个线程池去发送路由请求，所以我们也需要扩大这个线程池的容量，配置如下：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">zuul:</span></div><div class=\"line\"><span class=\"attr\">  host:</span></div><div class=\"line\"><span class=\"attr\">    max-per-route-connections:</span> <span class=\"number\">1000</span></div><div class=\"line\"><span class=\"attr\">    max-total-connections:</span> <span class=\"number\">1000</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"监控工具\"><a href=\"#监控工具\" class=\"headerlink\" title=\"监控工具\"></a>监控工具</h2><p>为了确保上述配置真正起作用，我们使用Java VisualVM这个工具监控这几台服务器上部署的tomcat的线程以及内存使用情况。<br>启动脚本加上如下参数，之后通过工具连接2099端口即可监控<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Dcom.sun.management.jmxremote.port=2099 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=10.19.52.8</div></pre></td></tr></table></figure></p>\n<h2 id=\"开始测试\"><a href=\"#开始测试\" class=\"headerlink\" title=\"开始测试\"></a>开始测试</h2><ul>\n<li>测试一<br>1.通过访问网关，由网关转发，应用端接口延迟200ms后返回一个字符串，模拟真实接口的业务处理延迟<br>2.300个线程并发请求，共计100000 次<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ab -n 100000 -c 300 http://10.19.52.8:8080/hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">Document Path:          /hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52</div><div class=\"line\">Document Length:        2 bytes</div><div class=\"line\"></div><div class=\"line\">Concurrency Level:      300</div><div class=\"line\">Time taken for tests:   151.026 seconds</div><div class=\"line\">Complete requests:      100000</div><div class=\"line\">Failed requests:        0</div><div class=\"line\">Write errors:           0</div><div class=\"line\">Total transferred:      42200844 bytes</div><div class=\"line\">HTML transferred:       200004 bytes</div><div class=\"line\">**Requests per second:    662.14 [#/sec] (mean)**</div><div class=\"line\">Time per request:       453.078 [ms] (mean)</div><div class=\"line\">Time per request:       1.510 [ms] (mean, across all concurrent requests)</div><div class=\"line\">Transfer rate:          272.88 [Kbytes/sec] received</div><div class=\"line\"></div><div class=\"line\">Connection Times (ms)</div><div class=\"line\">              min  mean[+/-sd] median   max</div><div class=\"line\">Connect:        0    5   7.0      2      98</div><div class=\"line\">Processing:   206  447 478.7    230    3171</div><div class=\"line\">Waiting:      197  445 478.7    227    3165</div><div class=\"line\">Total:        206  451 478.8    236    3177</div><div class=\"line\"></div><div class=\"line\">Percentage of the requests served within a certain time (ms)</div><div class=\"line\">  50%    236</div><div class=\"line\">  66%    250</div><div class=\"line\">  75%    273</div><div class=\"line\">  80%    322</div><div class=\"line\">  90%   1408</div><div class=\"line\">  95%   1506</div><div class=\"line\">  98%   1684</div><div class=\"line\">  99%   1764</div><div class=\"line\"> 100%   3177 (longest request)</div></pre></td></tr></table></figure>\n<p>测试二：<br>1.直接访问应用，应用端接口延迟200ms后返回一个字符串，模拟真实接口的业务处理延迟<br>2.300个线程并发请求，共计100000 次</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ab -n 100000 -c 300 http://10.19.52.9:9091/testOK</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">Server Hostname:        10.19.52.9</div><div class=\"line\">Server Port:            9091</div><div class=\"line\"></div><div class=\"line\">Document Path:          /testOK</div><div class=\"line\">Document Length:        2 bytes</div><div class=\"line\"></div><div class=\"line\">Concurrency Level:      300</div><div class=\"line\">Time taken for tests:   69.003 seconds</div><div class=\"line\">Complete requests:      100000</div><div class=\"line\">Failed requests:        0</div><div class=\"line\">Write errors:           0</div><div class=\"line\">Total transferred:      13400000 bytes</div><div class=\"line\">HTML transferred:       200000 bytes</div><div class=\"line\">**Requests per second:    1449.21 [#/sec] (mean)**</div><div class=\"line\">Time per request:       207.009 [ms] (mean)</div><div class=\"line\">Time per request:       0.690 [ms] (mean, across all concurrent requests)</div><div class=\"line\">Transfer rate:          189.64 [Kbytes/sec] received</div><div class=\"line\"></div><div class=\"line\">Connection Times (ms)</div><div class=\"line\">              min  mean[+/-sd] median   max</div><div class=\"line\">Connect:        0    0   0.8      0      10</div><div class=\"line\">Processing:   200  206   7.7    202     286</div><div class=\"line\">Waiting:      200  205   7.7    202     286</div><div class=\"line\">Total:        201  206   7.9    203     295</div><div class=\"line\"></div><div class=\"line\">Percentage of the requests served within a certain time (ms)</div><div class=\"line\">  50%    203</div><div class=\"line\">  66%    205</div><div class=\"line\">  75%    207</div><div class=\"line\">  80%    209</div><div class=\"line\">  90%    215</div><div class=\"line\">  95%    220</div><div class=\"line\">  98%    229</div><div class=\"line\">  99%    240</div><div class=\"line\"> 100%    295 (longest request)</div></pre></td></tr></table></figure>\n<p>经过网关路由之后的性能下降是不可避免的，在测试过程中，查看监控端的线程变化，如下图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170408145703703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>我们的配置的确产生了作用。</p>\n<p>我们再来分析一下上面测试结果的一个重要指标：Requests per second，我们的网关经过了鉴权之后，性能仍然可以达到600+每秒的响应，是完全可以接受的，峰值时内存情况，使用top指令，如下所示：<img src=\"http://img.blog.csdn.net/20170408150216769?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>ab测试命令也占用了一定的cpu使用率，总应用接近70%的cpu使用率，这估计也是单个tomcat实例的瓶颈了。因为我们的应用服务器会单独部署网关，并且可以在多个服务器上部署多个实例，所以这个结果可以接受。</p>\n<p>为了避免单次响应带来的偶然因素，我们重复进行测试一（更改为10000次请求，并发量200），看看Requests per second的变化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 799.45</div><div class=\"line\">2. 818.86</div><div class=\"line\">3. 838.67</div><div class=\"line\">4. 833.90</div><div class=\"line\">5. 973.65</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>有一些其他的数据没有整理到博客中，但是也顺便把结论写一下。</p>\n<p>这次的测试有几个注意点：</p>\n<ol>\n<li>是在应用服务器端模拟200ms的延时，因为实际请求不可能不伴随着耗时的业务操作，实际发现对ab的测试影响还是较大的，毕竟线程阻塞着，不延迟时request per second能达到2000，加了200ms延迟之后下降到1000+。</li>\n<li>模拟总请求数和线程数的变化会引起QPS/TPS的抖动，即使是在多核CPU的承受范围之内，也并不是说线程越多，QPS/TPS就越高，因为启动线程的开销，以及线程上下文切换的耗时，开辟线程带来的内存损耗都会影响性能。钱总说单个tomcat实例的并发度理论值200就可以接受了，经过参数调优后的tomcat使用zuul做网关能达到如上的测试结果，完全可以投入生产环境使用了。而tomcat默认的150线程，如果使用200的并发度测试就显然是“不公平的”。</li>\n<li>测试注意点有几个，例如ab部署在了api-gateway本机会影响性能，tomcat参数以及zuul参数应当尽可能放开，不让其默认配置影响测试。</li>\n</ol>\n<p>本文还有些遗漏的数据，后续会补上…</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>采用三台阿里云服务器作为测试<br>10.19.52.8 部署网关应用-gateway<br>10.19.52.9, 10.19.52.10 部署用于测试的业务系统<br><img src=\"http://img.blog.csdn.net/20170408122814192?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"压测工具准备\"><a href=\"#压测工具准备\" class=\"headerlink\" title=\"压测工具准备\"></a>压测工具准备</h2><p>选用ab作为压力测试的工具，为了方便起见，直接将ab工具安装在10.19.52.8这台机<br>测试命令如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ab -n 10000 -c 100 http://10.19.52.8:8080/hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52</div></pre></td></tr></table></figure></p>\n<p>其中－n表示请求数，－c表示并发数,上面一条命令也就意味着，100个用户并发对<code>http://10.19.52.8/hello/testOK</code>累计发送了10000次请求。</p>\n<h2 id=\"服务器-网关配置\"><a href=\"#服务器-网关配置\" class=\"headerlink\" title=\"服务器,网关配置\"></a>服务器,网关配置</h2><p>由于我们使用的tomcat容器，关于tomcat的一点知识总结如下：</p>","more":"<blockquote>\n<p>Tomcat的最大并发数是可以配置的，实际运用中，最大并发数与硬件性能和CPU数量都有很大关系的。更好的硬件，更多的处理器都会使Tomcat支持更多的并发。<br>​<br>Tomcat 默认的HTTP实现是采用阻塞式的Socket通信，每个请求都需要创建一个线程处理，当一个进程有500个线程在跑的话，那性能已经是很低很低了。Tomcat默认配置的最大请求数是150，也就是说同时支持150个并发。具体能承载多少并发，需要看硬件的配置，CPU越多性能越高，分配给JVM的内存越多性能也就越高，但也会加重GC的负担。当某个应用拥有 250个以上并发的时候，应考虑应用服务器的集群。操作系统对于进程中的线程数有一定的限制：<br> Windows 每个进程中的线程数不允许超过 2000<br>Linux 每个进程中的线程数不允许超过 1000<br>在Java中每开启一个线程需要耗用1MB的JVM内存空间用于作为线程栈之用，此处也应考虑。</p>\n</blockquote>\n<p>所以我们修改配置tomcat的默认配置，如下：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  tomcat:</span></div><div class=\"line\"><span class=\"attr\">    accept-count:</span> <span class=\"number\">1000</span> </div><div class=\"line\"><span class=\"attr\">    max-threads:</span> <span class=\"number\">1000</span></div><div class=\"line\"><span class=\"attr\">    max-connections:</span> <span class=\"number\">2000</span></div></pre></td></tr></table></figure></p>\n<p>无论是网关应用，还是用于测试的业务系统的tomcat，我们都需要如上配置，否则会引起木桶效应，整个调用流程会受到配置最差的应用的干扰。<br>zuul内部路由可以理解为使用一个线程池去发送路由请求，所以我们也需要扩大这个线程池的容量，配置如下：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">zuul:</span></div><div class=\"line\"><span class=\"attr\">  host:</span></div><div class=\"line\"><span class=\"attr\">    max-per-route-connections:</span> <span class=\"number\">1000</span></div><div class=\"line\"><span class=\"attr\">    max-total-connections:</span> <span class=\"number\">1000</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"监控工具\"><a href=\"#监控工具\" class=\"headerlink\" title=\"监控工具\"></a>监控工具</h2><p>为了确保上述配置真正起作用，我们使用Java VisualVM这个工具监控这几台服务器上部署的tomcat的线程以及内存使用情况。<br>启动脚本加上如下参数，之后通过工具连接2099端口即可监控<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-Dcom.sun.management.jmxremote.port=2099 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=10.19.52.8</div></pre></td></tr></table></figure></p>\n<h2 id=\"开始测试\"><a href=\"#开始测试\" class=\"headerlink\" title=\"开始测试\"></a>开始测试</h2><ul>\n<li>测试一<br>1.通过访问网关，由网关转发，应用端接口延迟200ms后返回一个字符串，模拟真实接口的业务处理延迟<br>2.300个线程并发请求，共计100000 次<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ab -n 100000 -c 300 http://10.19.52.8:8080/hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">Document Path:          /hello/testOK?access_token=e0345712-c30d-4bf8-ae61-8cae1ec38c52</div><div class=\"line\">Document Length:        2 bytes</div><div class=\"line\"></div><div class=\"line\">Concurrency Level:      300</div><div class=\"line\">Time taken for tests:   151.026 seconds</div><div class=\"line\">Complete requests:      100000</div><div class=\"line\">Failed requests:        0</div><div class=\"line\">Write errors:           0</div><div class=\"line\">Total transferred:      42200844 bytes</div><div class=\"line\">HTML transferred:       200004 bytes</div><div class=\"line\">**Requests per second:    662.14 [#/sec] (mean)**</div><div class=\"line\">Time per request:       453.078 [ms] (mean)</div><div class=\"line\">Time per request:       1.510 [ms] (mean, across all concurrent requests)</div><div class=\"line\">Transfer rate:          272.88 [Kbytes/sec] received</div><div class=\"line\"></div><div class=\"line\">Connection Times (ms)</div><div class=\"line\">              min  mean[+/-sd] median   max</div><div class=\"line\">Connect:        0    5   7.0      2      98</div><div class=\"line\">Processing:   206  447 478.7    230    3171</div><div class=\"line\">Waiting:      197  445 478.7    227    3165</div><div class=\"line\">Total:        206  451 478.8    236    3177</div><div class=\"line\"></div><div class=\"line\">Percentage of the requests served within a certain time (ms)</div><div class=\"line\">  50%    236</div><div class=\"line\">  66%    250</div><div class=\"line\">  75%    273</div><div class=\"line\">  80%    322</div><div class=\"line\">  90%   1408</div><div class=\"line\">  95%   1506</div><div class=\"line\">  98%   1684</div><div class=\"line\">  99%   1764</div><div class=\"line\"> 100%   3177 (longest request)</div></pre></td></tr></table></figure>\n<p>测试二：<br>1.直接访问应用，应用端接口延迟200ms后返回一个字符串，模拟真实接口的业务处理延迟<br>2.300个线程并发请求，共计100000 次</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ab -n 100000 -c 300 http://10.19.52.9:9091/testOK</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">Server Hostname:        10.19.52.9</div><div class=\"line\">Server Port:            9091</div><div class=\"line\"></div><div class=\"line\">Document Path:          /testOK</div><div class=\"line\">Document Length:        2 bytes</div><div class=\"line\"></div><div class=\"line\">Concurrency Level:      300</div><div class=\"line\">Time taken for tests:   69.003 seconds</div><div class=\"line\">Complete requests:      100000</div><div class=\"line\">Failed requests:        0</div><div class=\"line\">Write errors:           0</div><div class=\"line\">Total transferred:      13400000 bytes</div><div class=\"line\">HTML transferred:       200000 bytes</div><div class=\"line\">**Requests per second:    1449.21 [#/sec] (mean)**</div><div class=\"line\">Time per request:       207.009 [ms] (mean)</div><div class=\"line\">Time per request:       0.690 [ms] (mean, across all concurrent requests)</div><div class=\"line\">Transfer rate:          189.64 [Kbytes/sec] received</div><div class=\"line\"></div><div class=\"line\">Connection Times (ms)</div><div class=\"line\">              min  mean[+/-sd] median   max</div><div class=\"line\">Connect:        0    0   0.8      0      10</div><div class=\"line\">Processing:   200  206   7.7    202     286</div><div class=\"line\">Waiting:      200  205   7.7    202     286</div><div class=\"line\">Total:        201  206   7.9    203     295</div><div class=\"line\"></div><div class=\"line\">Percentage of the requests served within a certain time (ms)</div><div class=\"line\">  50%    203</div><div class=\"line\">  66%    205</div><div class=\"line\">  75%    207</div><div class=\"line\">  80%    209</div><div class=\"line\">  90%    215</div><div class=\"line\">  95%    220</div><div class=\"line\">  98%    229</div><div class=\"line\">  99%    240</div><div class=\"line\"> 100%    295 (longest request)</div></pre></td></tr></table></figure>\n<p>经过网关路由之后的性能下降是不可避免的，在测试过程中，查看监控端的线程变化，如下图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170408145703703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>我们的配置的确产生了作用。</p>\n<p>我们再来分析一下上面测试结果的一个重要指标：Requests per second，我们的网关经过了鉴权之后，性能仍然可以达到600+每秒的响应，是完全可以接受的，峰值时内存情况，使用top指令，如下所示：<img src=\"http://img.blog.csdn.net/20170408150216769?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>ab测试命令也占用了一定的cpu使用率，总应用接近70%的cpu使用率，这估计也是单个tomcat实例的瓶颈了。因为我们的应用服务器会单独部署网关，并且可以在多个服务器上部署多个实例，所以这个结果可以接受。</p>\n<p>为了避免单次响应带来的偶然因素，我们重复进行测试一（更改为10000次请求，并发量200），看看Requests per second的变化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 799.45</div><div class=\"line\">2. 818.86</div><div class=\"line\">3. 838.67</div><div class=\"line\">4. 833.90</div><div class=\"line\">5. 973.65</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>有一些其他的数据没有整理到博客中，但是也顺便把结论写一下。</p>\n<p>这次的测试有几个注意点：</p>\n<ol>\n<li>是在应用服务器端模拟200ms的延时，因为实际请求不可能不伴随着耗时的业务操作，实际发现对ab的测试影响还是较大的，毕竟线程阻塞着，不延迟时request per second能达到2000，加了200ms延迟之后下降到1000+。</li>\n<li>模拟总请求数和线程数的变化会引起QPS/TPS的抖动，即使是在多核CPU的承受范围之内，也并不是说线程越多，QPS/TPS就越高，因为启动线程的开销，以及线程上下文切换的耗时，开辟线程带来的内存损耗都会影响性能。钱总说单个tomcat实例的并发度理论值200就可以接受了，经过参数调优后的tomcat使用zuul做网关能达到如上的测试结果，完全可以投入生产环境使用了。而tomcat默认的150线程，如果使用200的并发度测试就显然是“不公平的”。</li>\n<li>测试注意点有几个，例如ab部署在了api-gateway本机会影响性能，tomcat参数以及zuul参数应当尽可能放开，不让其默认配置影响测试。</li>\n</ol>\n<p>本文还有些遗漏的数据，后续会补上…</p>"},{"title":"ThreadLocal的最佳实践","date":"2017-02-14T09:38:52.000Z","_content":"\n`SimpleDateFormat`众所周知是线程不安全的，多线程中如何保证线程安全又同时兼顾性能问题呢？那就是使用`ThreadLocal`维护`SimpleDateFormat`\n\n```java\npublic class SimpleDateFormatThreadTest {\n\n    static volatile AtomicInteger n = new AtomicInteger(-1);\n\n    static ThreadLocal<DateFormat> sdf ;\n\n    static {\n        sdf =new ThreadLocal<DateFormat>() {\n            @Override\n            protected DateFormat initialValue() {\n                return new SimpleDateFormat(\"yyyy-MM-dd\");\n            }\n        };\n    }\n\n    public static void main(String[] args) throws ParseException, InterruptedException {\n\n        Set<String> dateSet = new ConcurrentHashSet<>();\n        Set<Integer> numberSet = new ConcurrentHashSet<>();\n\n        Date[] dates = new Date[1000];\n        for (int i = 0; i < 1000; i++) {\n            dates[i] = sdf.get().parse(i + 1000 + \"-11-22\");\n        }\n\n        ExecutorService executorService = Executors.newFixedThreadPool(10);\n        for(int i=0;i<1000;i++){\n            executorService.execute(new Runnable() {\n                @Override\n                public void run() {\n                    int number = n.incrementAndGet();\n                    String date = sdf.get().format(dates[number]);\n                    numberSet.add(number);\n                    dateSet.add(date);\n                    System.out.println(number+\" \"+date);\n                }\n            });\n        }\n        executorService.shutdown();\n        Thread.sleep(5000);\n        System.out.println(dateSet.size());\n        System.out.println(numberSet.size());\n    }\n\n}\n```\n\n实践证明sdf的parse（String to Date）有严重的线程安全问题，format（Date to String）有轻微的线程安全问题，虽然不太明显，但还是会出现问题，这和内部的实现有关。\n\n简单分析下使用ThreadLocal的好处，1000次转换操作，10个线程争抢执行，如果每次都去new 一个sdf，可见其效率之低，而使用ThreadLocal，是对每个线程维护一个sdf，所以最多就只会出现10个sdf，真正项目中，由于操作系统线程分片执行，所以线程不会非常的多，使用ThreadLocal的好处也就立竿见影了。","source":"_posts/ThreadLocal的最佳实践.md","raw":"---\ntitle:  ThreadLocal的最佳实践\ndate: 2017-02-14 17:38:52\ntags: \n- JAVA\n- 多线程\ncategories: \n- JAVA\n---\n\n`SimpleDateFormat`众所周知是线程不安全的，多线程中如何保证线程安全又同时兼顾性能问题呢？那就是使用`ThreadLocal`维护`SimpleDateFormat`\n\n```java\npublic class SimpleDateFormatThreadTest {\n\n    static volatile AtomicInteger n = new AtomicInteger(-1);\n\n    static ThreadLocal<DateFormat> sdf ;\n\n    static {\n        sdf =new ThreadLocal<DateFormat>() {\n            @Override\n            protected DateFormat initialValue() {\n                return new SimpleDateFormat(\"yyyy-MM-dd\");\n            }\n        };\n    }\n\n    public static void main(String[] args) throws ParseException, InterruptedException {\n\n        Set<String> dateSet = new ConcurrentHashSet<>();\n        Set<Integer> numberSet = new ConcurrentHashSet<>();\n\n        Date[] dates = new Date[1000];\n        for (int i = 0; i < 1000; i++) {\n            dates[i] = sdf.get().parse(i + 1000 + \"-11-22\");\n        }\n\n        ExecutorService executorService = Executors.newFixedThreadPool(10);\n        for(int i=0;i<1000;i++){\n            executorService.execute(new Runnable() {\n                @Override\n                public void run() {\n                    int number = n.incrementAndGet();\n                    String date = sdf.get().format(dates[number]);\n                    numberSet.add(number);\n                    dateSet.add(date);\n                    System.out.println(number+\" \"+date);\n                }\n            });\n        }\n        executorService.shutdown();\n        Thread.sleep(5000);\n        System.out.println(dateSet.size());\n        System.out.println(numberSet.size());\n    }\n\n}\n```\n\n实践证明sdf的parse（String to Date）有严重的线程安全问题，format（Date to String）有轻微的线程安全问题，虽然不太明显，但还是会出现问题，这和内部的实现有关。\n\n简单分析下使用ThreadLocal的好处，1000次转换操作，10个线程争抢执行，如果每次都去new 一个sdf，可见其效率之低，而使用ThreadLocal，是对每个线程维护一个sdf，所以最多就只会出现10个sdf，真正项目中，由于操作系统线程分片执行，所以线程不会非常的多，使用ThreadLocal的好处也就立竿见影了。","slug":"ThreadLocal的最佳实践","published":1,"updated":"2017-09-04T11:49:26.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zsx001ktwv7uaw631gh","content":"<p><code>SimpleDateFormat</code>众所周知是线程不安全的，多线程中如何保证线程安全又同时兼顾性能问题呢？那就是使用<code>ThreadLocal</code>维护<code>SimpleDateFormat</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDateFormatThreadTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> AtomicInteger n = <span class=\"keyword\">new</span> AtomicInteger(-<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> ThreadLocal&lt;DateFormat&gt; sdf ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        sdf =<span class=\"keyword\">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> DateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ParseException, InterruptedException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Set&lt;String&gt; dateSet = <span class=\"keyword\">new</span> ConcurrentHashSet&lt;&gt;();</div><div class=\"line\">        Set&lt;Integer&gt; numberSet = <span class=\"keyword\">new</span> ConcurrentHashSet&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">        Date[] dates = <span class=\"keyword\">new</span> Date[<span class=\"number\">1000</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</div><div class=\"line\">            dates[i] = sdf.get().parse(i + <span class=\"number\">1000</span> + <span class=\"string\">\"-11-22\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</div><div class=\"line\">            executorService.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> number = n.incrementAndGet();</div><div class=\"line\">                    String date = sdf.get().format(dates[number]);</div><div class=\"line\">                    numberSet.add(number);</div><div class=\"line\">                    dateSet.add(date);</div><div class=\"line\">                    System.out.println(number+<span class=\"string\">\" \"</span>+date);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        executorService.shutdown();</div><div class=\"line\">        Thread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">        System.out.println(dateSet.size());</div><div class=\"line\">        System.out.println(numberSet.size());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实践证明sdf的parse（String to Date）有严重的线程安全问题，format（Date to String）有轻微的线程安全问题，虽然不太明显，但还是会出现问题，这和内部的实现有关。</p>\n<p>简单分析下使用ThreadLocal的好处，1000次转换操作，10个线程争抢执行，如果每次都去new 一个sdf，可见其效率之低，而使用ThreadLocal，是对每个线程维护一个sdf，所以最多就只会出现10个sdf，真正项目中，由于操作系统线程分片执行，所以线程不会非常的多，使用ThreadLocal的好处也就立竿见影了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>SimpleDateFormat</code>众所周知是线程不安全的，多线程中如何保证线程安全又同时兼顾性能问题呢？那就是使用<code>ThreadLocal</code>维护<code>SimpleDateFormat</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDateFormatThreadTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> AtomicInteger n = <span class=\"keyword\">new</span> AtomicInteger(-<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> ThreadLocal&lt;DateFormat&gt; sdf ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        sdf =<span class=\"keyword\">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> DateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ParseException, InterruptedException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Set&lt;String&gt; dateSet = <span class=\"keyword\">new</span> ConcurrentHashSet&lt;&gt;();</div><div class=\"line\">        Set&lt;Integer&gt; numberSet = <span class=\"keyword\">new</span> ConcurrentHashSet&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">        Date[] dates = <span class=\"keyword\">new</span> Date[<span class=\"number\">1000</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</div><div class=\"line\">            dates[i] = sdf.get().parse(i + <span class=\"number\">1000</span> + <span class=\"string\">\"-11-22\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</div><div class=\"line\">            executorService.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> number = n.incrementAndGet();</div><div class=\"line\">                    String date = sdf.get().format(dates[number]);</div><div class=\"line\">                    numberSet.add(number);</div><div class=\"line\">                    dateSet.add(date);</div><div class=\"line\">                    System.out.println(number+<span class=\"string\">\" \"</span>+date);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        executorService.shutdown();</div><div class=\"line\">        Thread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">        System.out.println(dateSet.size());</div><div class=\"line\">        System.out.println(numberSet.size());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实践证明sdf的parse（String to Date）有严重的线程安全问题，format（Date to String）有轻微的线程安全问题，虽然不太明显，但还是会出现问题，这和内部的实现有关。</p>\n<p>简单分析下使用ThreadLocal的好处，1000次转换操作，10个线程争抢执行，如果每次都去new 一个sdf，可见其效率之低，而使用ThreadLocal，是对每个线程维护一个sdf，所以最多就只会出现10个sdf，真正项目中，由于操作系统线程分片执行，所以线程不会非常的多，使用ThreadLocal的好处也就立竿见影了。</p>\n"},{"title":"drools用户指南----stateful session（有状态会话）的使用","date":"2017-04-11T04:37:22.000Z","_content":"\n\n\n## stateful session 有状态会话 ##\n\n有状态会话长期存在，并允许随着时间的推移进行迭代更改。 有状态会话的一些常见用例包括但不限于：\n1. 监测\n  半自动买入股票市场监控与分析。\n2. 诊断\n  故障查找，医疗诊断\n3. 物流\n  包裹跟踪和送货配置\n4. 合规\n  验证市场交易的合法性。\n\n与无状态会话相反，必须先调用dispose()方法，以确保没有内存泄漏，因为KieBase包含创建状态知识会话时的引用。 由于状态知识会话是最常用的会话类型，所以它只是在KIE API中命名为KieSession。 KieSession还支持BatchExecutor接口，如StatelessKieSession，唯一的区别是FireAllRules命令在有状态会话结束时不被自动调用。\n\n我们举例说明了用于提高火灾报警器的监控用例。 只使用四个类，我们假设`Room`代表房子里的房间，每个`Room`都有一个喷头`Sprinkler`。 如果在房间里发生火灾，我们用一个`Fire`实例来表示,用`Alarm`代表警报 。\n\n```java\npublic class Room {\n    private String name\n    // getter and setter methods here\n}\n\npublic class Sprinkler {\n    private Room room;\n    private boolean on;\n    // getter and setter methods here\n}\n\npublic class Fire {\n    private Room room;\n    // getter and setter methods here\n}\n\npublic class Alarm {\n}\n```\n\n在上一节无状态会话中介绍了插入和匹配数据的概念。 这个例子假设每个对象类型的都是单个实例被插入的，因此只使用了字面约束。 然而，房子有许多房间，因此`rules`必须表达实体类之间的关系，例如在某个房间内的喷洒器。 这最好通过使用绑定变量作为模式中的约束来完成。 这种“加入”过程产生了所谓的“cross products”，这在下一节中将会介绍。\n\n<!-- more -->\n\n当发生火灾时，会为该类别创建Fire类的实例，并将其插入到会话中。 该规则使用Fire对象的房间字段上的绑定来约束与当前关闭的房间的喷水灭火器的匹配。 当此规则触发并且执行结果时，喷头被打开。\n\n\n```java\nrule \"When there is a fire turn on the sprinkler\"\nwhen\n    Fire($room : room)\n    $sprinkler : Sprinkler( room == $room, on == false )\nthen\n    modify( $sprinkler ) { setOn( true ) };\n    System.out.println( \"Turn on the sprinkler for room \" + $room.getName() );\nend\n```\n\n而无状态会话使用标准Java语法来修改字段，在上述规则中，我们使用modify语句，它作为一种“with”语句。 它可以包含一系列逗号分隔的Java表达式，即对由modify语句的控制表达式选择的对象的setter的调用。 这将修改数据，并使引擎意识到这些更改，以便它可以再次对其进行推理。 这个过程被称为推理，对于有状态会话的工作至关重要。 无状态会话通常不使用推理，因此引擎不需要意识到数据的更改。 也可以通过使用顺序模式显式地关闭推理。\n\n到目前为止，我们有规则告诉我们匹配数据是否存在，但是当它不存在时呢？ 我们如何确定火已经熄灭了，即没有Fire对象呢？ 以前的约束是根据命题逻辑的句子，其中引擎限制个别的实例。 Drools还支持First Order Logic，允许您查看数据集。 当某个不存在时，关键字下的模式不匹配。 一旦这个房间的火灾消失，下面给出的规则会使喷水灭火。\n\n```java\nrule \"When the fire is gone turn off the sprinkler\"\nwhen\n    $room : Room( )\n    $sprinkler : Sprinkler( room == $room, on == true )\n    not Fire( room == $room )\nthen\n    modify( $sprinkler ) { setOn( false ) };\n    System.out.println( \"Turn off the sprinkler for room \" + $room.getName() );\nend\n```\n\n每个`room`有一个喷水灭火器，`house`只有一个警报。 当发生火灾时，会创建一个`alrm`对象，而不管发生多少火灾，整个建筑物都只需要一个警报`alrm`。 \n\n```java\nrule \"Raise the alarm when we have one or more fires\"\nwhen\n    exists Fire()\nthen\n    insert( new Alarm() );\n    System.out.println( \"Raise the alarm\" );\nend\n```\n\n同样，当没有火灾时，我们想要删除警报，所以可以再次使用not关键字。\n\n```java\nrule \"Cancel the alarm when all the fires have gone\"\nwhen\n    not Fire()\n    $alarm : Alarm()\nthen\n    delete( $alarm );\n    System.out.println( \"Cancel the alarm\" );\nend\n```\n\n最后，当应用程序首次启动并且在报警消除并且所有喷头已关闭后，都会打印Everything is ok。\n\n```java\nrule \"Status output when things are ok\"\nwhen\n    not Alarm()\n    not Sprinkler( on == true ) \nthen\n    System.out.println( \"Everything is ok\" );\nend\n```\n\n正如我们在无状态会话示例中所做的那样，上述规则应放在单个DRL文件中，并保存到Maven项目或其任何子文件夹的资源文件夹中。 如前所述，我们可以从KieContainer获得KieSession。 唯一的区别是，这次我们创建一个有状态会话，而之前我们创建的是一个无状态会话。\n\n```java\nKieServices kieServices = KieServices.Factory.get();\nKieContainer kContainer = kieServices.getKieClasspathContainer();\nKieSession ksession = kContainer.newKieSession();\n```\n\n创建会话后，现在可以随着时间的推移迭代地使用它。 创建和插入四个房间对象，每个房间的对应一个Sprinkler对象。 此时，规则引擎已经完成了所有的匹配，但并没有触发。 调用ksession.fireAllRules（）使得匹配的规则触发，但因为没有火灾，所以输出结果是Everything is ok。\n\n```java\nString[] names = new String[]{\"kitchen\", \"bedroom\", \"office\", \"livingroom\"};\nMap<String,Room> name2room = new HashMap<String,Room>();\nfor( String name: names ){\n    Room room = new Room( name );\n    name2room.put( name, room );\n    ksession.insert( room );\n    Sprinkler sprinkler = new Sprinkler( room );\n    ksession.insert( sprinkler );\n}\n\nksession.fireAllRules();\n```\n\n> Everything is ok\n\n我们现在创造两个Fire并插入它们， 随着发动机内部的火灾，一旦调用了fireAllRules（），报警器就会升高，并且相应的喷水灭火器打开。\n\n```java\nFire kitchenFire = new Fire( name2room.get( \"kitchen\" ) );\nFire officeFire = new Fire( name2room.get( \"office\" ) );\nFactHandle kitchenFireHandle = ksession.insert( kitchenFire );\nFactHandle officeFireHandle = ksession.insert( officeFire );\n\nksession.fireAllRules();\n```\n\n\n> Raise the alarm\n> Turn on the sprinkler for room kitchen\n> Turn on the sprinkler for room office\n\n一段时间之后，火灾将熄灭，并且Fire实例被撤回。 这导致喷头关闭，报警被取消，最后再次打印Everything is ok。\n\n```java\nksession.delete( kitchenFireHandle );\nksession.delete( officeFireHandle );\n\nksession.fireAllRules();\n```\n\n> Cancel the alarm\n> Turn off the sprinkler for room office\n> Turn off the sprinkler for room kitchen\n> Everything is ok\n","source":"_posts/drools用户指南----stateful session（有状态会话）的使用.md","raw":"---\ntitle:  drools用户指南----stateful session（有状态会话）的使用\ndate: 2017-04-11 12:37:22\ntags: \n- 规则引擎\n- drools\ncategories: \n- 规则引擎\n---\n\n\n\n## stateful session 有状态会话 ##\n\n有状态会话长期存在，并允许随着时间的推移进行迭代更改。 有状态会话的一些常见用例包括但不限于：\n1. 监测\n  半自动买入股票市场监控与分析。\n2. 诊断\n  故障查找，医疗诊断\n3. 物流\n  包裹跟踪和送货配置\n4. 合规\n  验证市场交易的合法性。\n\n与无状态会话相反，必须先调用dispose()方法，以确保没有内存泄漏，因为KieBase包含创建状态知识会话时的引用。 由于状态知识会话是最常用的会话类型，所以它只是在KIE API中命名为KieSession。 KieSession还支持BatchExecutor接口，如StatelessKieSession，唯一的区别是FireAllRules命令在有状态会话结束时不被自动调用。\n\n我们举例说明了用于提高火灾报警器的监控用例。 只使用四个类，我们假设`Room`代表房子里的房间，每个`Room`都有一个喷头`Sprinkler`。 如果在房间里发生火灾，我们用一个`Fire`实例来表示,用`Alarm`代表警报 。\n\n```java\npublic class Room {\n    private String name\n    // getter and setter methods here\n}\n\npublic class Sprinkler {\n    private Room room;\n    private boolean on;\n    // getter and setter methods here\n}\n\npublic class Fire {\n    private Room room;\n    // getter and setter methods here\n}\n\npublic class Alarm {\n}\n```\n\n在上一节无状态会话中介绍了插入和匹配数据的概念。 这个例子假设每个对象类型的都是单个实例被插入的，因此只使用了字面约束。 然而，房子有许多房间，因此`rules`必须表达实体类之间的关系，例如在某个房间内的喷洒器。 这最好通过使用绑定变量作为模式中的约束来完成。 这种“加入”过程产生了所谓的“cross products”，这在下一节中将会介绍。\n\n<!-- more -->\n\n当发生火灾时，会为该类别创建Fire类的实例，并将其插入到会话中。 该规则使用Fire对象的房间字段上的绑定来约束与当前关闭的房间的喷水灭火器的匹配。 当此规则触发并且执行结果时，喷头被打开。\n\n\n```java\nrule \"When there is a fire turn on the sprinkler\"\nwhen\n    Fire($room : room)\n    $sprinkler : Sprinkler( room == $room, on == false )\nthen\n    modify( $sprinkler ) { setOn( true ) };\n    System.out.println( \"Turn on the sprinkler for room \" + $room.getName() );\nend\n```\n\n而无状态会话使用标准Java语法来修改字段，在上述规则中，我们使用modify语句，它作为一种“with”语句。 它可以包含一系列逗号分隔的Java表达式，即对由modify语句的控制表达式选择的对象的setter的调用。 这将修改数据，并使引擎意识到这些更改，以便它可以再次对其进行推理。 这个过程被称为推理，对于有状态会话的工作至关重要。 无状态会话通常不使用推理，因此引擎不需要意识到数据的更改。 也可以通过使用顺序模式显式地关闭推理。\n\n到目前为止，我们有规则告诉我们匹配数据是否存在，但是当它不存在时呢？ 我们如何确定火已经熄灭了，即没有Fire对象呢？ 以前的约束是根据命题逻辑的句子，其中引擎限制个别的实例。 Drools还支持First Order Logic，允许您查看数据集。 当某个不存在时，关键字下的模式不匹配。 一旦这个房间的火灾消失，下面给出的规则会使喷水灭火。\n\n```java\nrule \"When the fire is gone turn off the sprinkler\"\nwhen\n    $room : Room( )\n    $sprinkler : Sprinkler( room == $room, on == true )\n    not Fire( room == $room )\nthen\n    modify( $sprinkler ) { setOn( false ) };\n    System.out.println( \"Turn off the sprinkler for room \" + $room.getName() );\nend\n```\n\n每个`room`有一个喷水灭火器，`house`只有一个警报。 当发生火灾时，会创建一个`alrm`对象，而不管发生多少火灾，整个建筑物都只需要一个警报`alrm`。 \n\n```java\nrule \"Raise the alarm when we have one or more fires\"\nwhen\n    exists Fire()\nthen\n    insert( new Alarm() );\n    System.out.println( \"Raise the alarm\" );\nend\n```\n\n同样，当没有火灾时，我们想要删除警报，所以可以再次使用not关键字。\n\n```java\nrule \"Cancel the alarm when all the fires have gone\"\nwhen\n    not Fire()\n    $alarm : Alarm()\nthen\n    delete( $alarm );\n    System.out.println( \"Cancel the alarm\" );\nend\n```\n\n最后，当应用程序首次启动并且在报警消除并且所有喷头已关闭后，都会打印Everything is ok。\n\n```java\nrule \"Status output when things are ok\"\nwhen\n    not Alarm()\n    not Sprinkler( on == true ) \nthen\n    System.out.println( \"Everything is ok\" );\nend\n```\n\n正如我们在无状态会话示例中所做的那样，上述规则应放在单个DRL文件中，并保存到Maven项目或其任何子文件夹的资源文件夹中。 如前所述，我们可以从KieContainer获得KieSession。 唯一的区别是，这次我们创建一个有状态会话，而之前我们创建的是一个无状态会话。\n\n```java\nKieServices kieServices = KieServices.Factory.get();\nKieContainer kContainer = kieServices.getKieClasspathContainer();\nKieSession ksession = kContainer.newKieSession();\n```\n\n创建会话后，现在可以随着时间的推移迭代地使用它。 创建和插入四个房间对象，每个房间的对应一个Sprinkler对象。 此时，规则引擎已经完成了所有的匹配，但并没有触发。 调用ksession.fireAllRules（）使得匹配的规则触发，但因为没有火灾，所以输出结果是Everything is ok。\n\n```java\nString[] names = new String[]{\"kitchen\", \"bedroom\", \"office\", \"livingroom\"};\nMap<String,Room> name2room = new HashMap<String,Room>();\nfor( String name: names ){\n    Room room = new Room( name );\n    name2room.put( name, room );\n    ksession.insert( room );\n    Sprinkler sprinkler = new Sprinkler( room );\n    ksession.insert( sprinkler );\n}\n\nksession.fireAllRules();\n```\n\n> Everything is ok\n\n我们现在创造两个Fire并插入它们， 随着发动机内部的火灾，一旦调用了fireAllRules（），报警器就会升高，并且相应的喷水灭火器打开。\n\n```java\nFire kitchenFire = new Fire( name2room.get( \"kitchen\" ) );\nFire officeFire = new Fire( name2room.get( \"office\" ) );\nFactHandle kitchenFireHandle = ksession.insert( kitchenFire );\nFactHandle officeFireHandle = ksession.insert( officeFire );\n\nksession.fireAllRules();\n```\n\n\n> Raise the alarm\n> Turn on the sprinkler for room kitchen\n> Turn on the sprinkler for room office\n\n一段时间之后，火灾将熄灭，并且Fire实例被撤回。 这导致喷头关闭，报警被取消，最后再次打印Everything is ok。\n\n```java\nksession.delete( kitchenFireHandle );\nksession.delete( officeFireHandle );\n\nksession.fireAllRules();\n```\n\n> Cancel the alarm\n> Turn off the sprinkler for room office\n> Turn off the sprinkler for room kitchen\n> Everything is ok\n","slug":"drools用户指南----stateful session（有状态会话）的使用","published":1,"updated":"2017-09-04T11:49:26.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zsy001ltwv7hlmgpj15","content":"<h2 id=\"stateful-session-有状态会话\"><a href=\"#stateful-session-有状态会话\" class=\"headerlink\" title=\"stateful session 有状态会话\"></a>stateful session 有状态会话</h2><p>有状态会话长期存在，并允许随着时间的推移进行迭代更改。 有状态会话的一些常见用例包括但不限于：</p>\n<ol>\n<li>监测<br>半自动买入股票市场监控与分析。</li>\n<li>诊断<br>故障查找，医疗诊断</li>\n<li>物流<br>包裹跟踪和送货配置</li>\n<li>合规<br>验证市场交易的合法性。</li>\n</ol>\n<p>与无状态会话相反，必须先调用dispose()方法，以确保没有内存泄漏，因为KieBase包含创建状态知识会话时的引用。 由于状态知识会话是最常用的会话类型，所以它只是在KIE API中命名为KieSession。 KieSession还支持BatchExecutor接口，如StatelessKieSession，唯一的区别是FireAllRules命令在有状态会话结束时不被自动调用。</p>\n<p>我们举例说明了用于提高火灾报警器的监控用例。 只使用四个类，我们假设<code>Room</code>代表房子里的房间，每个<code>Room</code>都有一个喷头<code>Sprinkler</code>。 如果在房间里发生火灾，我们用一个<code>Fire</code>实例来表示,用<code>Alarm</code>代表警报 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Room</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sprinkler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Room room;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> on;</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fire</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Room room;</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alarm</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上一节无状态会话中介绍了插入和匹配数据的概念。 这个例子假设每个对象类型的都是单个实例被插入的，因此只使用了字面约束。 然而，房子有许多房间，因此<code>rules</code>必须表达实体类之间的关系，例如在某个房间内的喷洒器。 这最好通过使用绑定变量作为模式中的约束来完成。 这种“加入”过程产生了所谓的“cross products”，这在下一节中将会介绍。</p>\n<a id=\"more\"></a>\n<p>当发生火灾时，会为该类别创建Fire类的实例，并将其插入到会话中。 该规则使用Fire对象的房间字段上的绑定来约束与当前关闭的房间的喷水灭火器的匹配。 当此规则触发并且执行结果时，喷头被打开。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"When there is a fire turn on the sprinkler\"</span></div><div class=\"line\">when</div><div class=\"line\">    Fire($room : room)</div><div class=\"line\">    $sprinkler : Sprinkler( room == $room, on == <span class=\"keyword\">false</span> )</div><div class=\"line\">then</div><div class=\"line\">    modify( $sprinkler ) &#123; setOn( <span class=\"keyword\">true</span> ) &#125;;</div><div class=\"line\">    System.out.println( <span class=\"string\">\"Turn on the sprinkler for room \"</span> + $room.getName() );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>而无状态会话使用标准Java语法来修改字段，在上述规则中，我们使用modify语句，它作为一种“with”语句。 它可以包含一系列逗号分隔的Java表达式，即对由modify语句的控制表达式选择的对象的setter的调用。 这将修改数据，并使引擎意识到这些更改，以便它可以再次对其进行推理。 这个过程被称为推理，对于有状态会话的工作至关重要。 无状态会话通常不使用推理，因此引擎不需要意识到数据的更改。 也可以通过使用顺序模式显式地关闭推理。</p>\n<p>到目前为止，我们有规则告诉我们匹配数据是否存在，但是当它不存在时呢？ 我们如何确定火已经熄灭了，即没有Fire对象呢？ 以前的约束是根据命题逻辑的句子，其中引擎限制个别的实例。 Drools还支持First Order Logic，允许您查看数据集。 当某个不存在时，关键字下的模式不匹配。 一旦这个房间的火灾消失，下面给出的规则会使喷水灭火。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"When the fire is gone turn off the sprinkler\"</span></div><div class=\"line\">when</div><div class=\"line\">    $room : Room( )</div><div class=\"line\">    $sprinkler : Sprinkler( room == $room, on == <span class=\"keyword\">true</span> )</div><div class=\"line\">    <span class=\"function\">not <span class=\"title\">Fire</span><span class=\"params\">( room == $room )</span></span></div><div class=\"line\"><span class=\"function\">then</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">modify</span><span class=\"params\">( $sprinkler )</span> </span>&#123; setOn( <span class=\"keyword\">false</span> ) &#125;;</div><div class=\"line\">    System.out.println( <span class=\"string\">\"Turn off the sprinkler for room \"</span> + $room.getName() );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>每个<code>room</code>有一个喷水灭火器，<code>house</code>只有一个警报。 当发生火灾时，会创建一个<code>alrm</code>对象，而不管发生多少火灾，整个建筑物都只需要一个警报<code>alrm</code>。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"Raise the alarm when we have one or more fires\"</span></div><div class=\"line\">when</div><div class=\"line\">    <span class=\"function\">exists <span class=\"title\">Fire</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">then</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">insert</span><span class=\"params\">( new Alarm()</span> )</span>;</div><div class=\"line\">    System.out.println( <span class=\"string\">\"Raise the alarm\"</span> );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>同样，当没有火灾时，我们想要删除警报，所以可以再次使用not关键字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"Cancel the alarm when all the fires have gone\"</span></div><div class=\"line\">when</div><div class=\"line\">    <span class=\"function\">not <span class=\"title\">Fire</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    $alarm : <span class=\"title\">Alarm</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">then</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">delete</span><span class=\"params\">( $alarm )</span></span>;</div><div class=\"line\">    System.out.println( <span class=\"string\">\"Cancel the alarm\"</span> );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>最后，当应用程序首次启动并且在报警消除并且所有喷头已关闭后，都会打印Everything is ok。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"Status output when things are ok\"</span></div><div class=\"line\">when</div><div class=\"line\">    <span class=\"function\">not <span class=\"title\">Alarm</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    not <span class=\"title\">Sprinkler</span><span class=\"params\">( on == <span class=\"keyword\">true</span> )</span> </span></div><div class=\"line\"><span class=\"function\">then</span></div><div class=\"line\"><span class=\"function\">    System.out.<span class=\"title\">println</span><span class=\"params\">( <span class=\"string\">\"Everything is ok\"</span> )</span></span>;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>正如我们在无状态会话示例中所做的那样，上述规则应放在单个DRL文件中，并保存到Maven项目或其任何子文件夹的资源文件夹中。 如前所述，我们可以从KieContainer获得KieSession。 唯一的区别是，这次我们创建一个有状态会话，而之前我们创建的是一个无状态会话。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">KieServices kieServices = KieServices.Factory.get();</div><div class=\"line\">KieContainer kContainer = kieServices.getKieClasspathContainer();</div><div class=\"line\">KieSession ksession = kContainer.newKieSession();</div></pre></td></tr></table></figure>\n<p>创建会话后，现在可以随着时间的推移迭代地使用它。 创建和插入四个房间对象，每个房间的对应一个Sprinkler对象。 此时，规则引擎已经完成了所有的匹配，但并没有触发。 调用ksession.fireAllRules（）使得匹配的规则触发，但因为没有火灾，所以输出结果是Everything is ok。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] names = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"kitchen\"</span>, <span class=\"string\">\"bedroom\"</span>, <span class=\"string\">\"office\"</span>, <span class=\"string\">\"livingroom\"</span>&#125;;</div><div class=\"line\">Map&lt;String,Room&gt; name2room = <span class=\"keyword\">new</span> HashMap&lt;String,Room&gt;();</div><div class=\"line\"><span class=\"keyword\">for</span>( String name: names )&#123;</div><div class=\"line\">    Room room = <span class=\"keyword\">new</span> Room( name );</div><div class=\"line\">    name2room.put( name, room );</div><div class=\"line\">    ksession.insert( room );</div><div class=\"line\">    Sprinkler sprinkler = <span class=\"keyword\">new</span> Sprinkler( room );</div><div class=\"line\">    ksession.insert( sprinkler );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ksession.fireAllRules();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Everything is ok</p>\n</blockquote>\n<p>我们现在创造两个Fire并插入它们， 随着发动机内部的火灾，一旦调用了fireAllRules（），报警器就会升高，并且相应的喷水灭火器打开。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Fire kitchenFire = <span class=\"keyword\">new</span> Fire( name2room.get( <span class=\"string\">\"kitchen\"</span> ) );</div><div class=\"line\">Fire officeFire = <span class=\"keyword\">new</span> Fire( name2room.get( <span class=\"string\">\"office\"</span> ) );</div><div class=\"line\">FactHandle kitchenFireHandle = ksession.insert( kitchenFire );</div><div class=\"line\">FactHandle officeFireHandle = ksession.insert( officeFire );</div><div class=\"line\"></div><div class=\"line\">ksession.fireAllRules();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Raise the alarm<br>Turn on the sprinkler for room kitchen<br>Turn on the sprinkler for room office</p>\n</blockquote>\n<p>一段时间之后，火灾将熄灭，并且Fire实例被撤回。 这导致喷头关闭，报警被取消，最后再次打印Everything is ok。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ksession.delete( kitchenFireHandle );</div><div class=\"line\">ksession.delete( officeFireHandle );</div><div class=\"line\"></div><div class=\"line\">ksession.fireAllRules();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Cancel the alarm<br>Turn off the sprinkler for room office<br>Turn off the sprinkler for room kitchen<br>Everything is ok</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"stateful-session-有状态会话\"><a href=\"#stateful-session-有状态会话\" class=\"headerlink\" title=\"stateful session 有状态会话\"></a>stateful session 有状态会话</h2><p>有状态会话长期存在，并允许随着时间的推移进行迭代更改。 有状态会话的一些常见用例包括但不限于：</p>\n<ol>\n<li>监测<br>半自动买入股票市场监控与分析。</li>\n<li>诊断<br>故障查找，医疗诊断</li>\n<li>物流<br>包裹跟踪和送货配置</li>\n<li>合规<br>验证市场交易的合法性。</li>\n</ol>\n<p>与无状态会话相反，必须先调用dispose()方法，以确保没有内存泄漏，因为KieBase包含创建状态知识会话时的引用。 由于状态知识会话是最常用的会话类型，所以它只是在KIE API中命名为KieSession。 KieSession还支持BatchExecutor接口，如StatelessKieSession，唯一的区别是FireAllRules命令在有状态会话结束时不被自动调用。</p>\n<p>我们举例说明了用于提高火灾报警器的监控用例。 只使用四个类，我们假设<code>Room</code>代表房子里的房间，每个<code>Room</code>都有一个喷头<code>Sprinkler</code>。 如果在房间里发生火灾，我们用一个<code>Fire</code>实例来表示,用<code>Alarm</code>代表警报 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Room</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sprinkler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Room room;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> on;</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fire</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Room room;</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alarm</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在上一节无状态会话中介绍了插入和匹配数据的概念。 这个例子假设每个对象类型的都是单个实例被插入的，因此只使用了字面约束。 然而，房子有许多房间，因此<code>rules</code>必须表达实体类之间的关系，例如在某个房间内的喷洒器。 这最好通过使用绑定变量作为模式中的约束来完成。 这种“加入”过程产生了所谓的“cross products”，这在下一节中将会介绍。</p>","more":"<p>当发生火灾时，会为该类别创建Fire类的实例，并将其插入到会话中。 该规则使用Fire对象的房间字段上的绑定来约束与当前关闭的房间的喷水灭火器的匹配。 当此规则触发并且执行结果时，喷头被打开。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"When there is a fire turn on the sprinkler\"</span></div><div class=\"line\">when</div><div class=\"line\">    Fire($room : room)</div><div class=\"line\">    $sprinkler : Sprinkler( room == $room, on == <span class=\"keyword\">false</span> )</div><div class=\"line\">then</div><div class=\"line\">    modify( $sprinkler ) &#123; setOn( <span class=\"keyword\">true</span> ) &#125;;</div><div class=\"line\">    System.out.println( <span class=\"string\">\"Turn on the sprinkler for room \"</span> + $room.getName() );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>而无状态会话使用标准Java语法来修改字段，在上述规则中，我们使用modify语句，它作为一种“with”语句。 它可以包含一系列逗号分隔的Java表达式，即对由modify语句的控制表达式选择的对象的setter的调用。 这将修改数据，并使引擎意识到这些更改，以便它可以再次对其进行推理。 这个过程被称为推理，对于有状态会话的工作至关重要。 无状态会话通常不使用推理，因此引擎不需要意识到数据的更改。 也可以通过使用顺序模式显式地关闭推理。</p>\n<p>到目前为止，我们有规则告诉我们匹配数据是否存在，但是当它不存在时呢？ 我们如何确定火已经熄灭了，即没有Fire对象呢？ 以前的约束是根据命题逻辑的句子，其中引擎限制个别的实例。 Drools还支持First Order Logic，允许您查看数据集。 当某个不存在时，关键字下的模式不匹配。 一旦这个房间的火灾消失，下面给出的规则会使喷水灭火。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"When the fire is gone turn off the sprinkler\"</span></div><div class=\"line\">when</div><div class=\"line\">    $room : Room( )</div><div class=\"line\">    $sprinkler : Sprinkler( room == $room, on == <span class=\"keyword\">true</span> )</div><div class=\"line\">    <span class=\"function\">not <span class=\"title\">Fire</span><span class=\"params\">( room == $room )</span></span></div><div class=\"line\"><span class=\"function\">then</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">modify</span><span class=\"params\">( $sprinkler )</span> </span>&#123; setOn( <span class=\"keyword\">false</span> ) &#125;;</div><div class=\"line\">    System.out.println( <span class=\"string\">\"Turn off the sprinkler for room \"</span> + $room.getName() );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>每个<code>room</code>有一个喷水灭火器，<code>house</code>只有一个警报。 当发生火灾时，会创建一个<code>alrm</code>对象，而不管发生多少火灾，整个建筑物都只需要一个警报<code>alrm</code>。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"Raise the alarm when we have one or more fires\"</span></div><div class=\"line\">when</div><div class=\"line\">    <span class=\"function\">exists <span class=\"title\">Fire</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">then</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">insert</span><span class=\"params\">( new Alarm()</span> )</span>;</div><div class=\"line\">    System.out.println( <span class=\"string\">\"Raise the alarm\"</span> );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>同样，当没有火灾时，我们想要删除警报，所以可以再次使用not关键字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"Cancel the alarm when all the fires have gone\"</span></div><div class=\"line\">when</div><div class=\"line\">    <span class=\"function\">not <span class=\"title\">Fire</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    $alarm : <span class=\"title\">Alarm</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">then</span></div><div class=\"line\"><span class=\"function\">    <span class=\"title\">delete</span><span class=\"params\">( $alarm )</span></span>;</div><div class=\"line\">    System.out.println( <span class=\"string\">\"Cancel the alarm\"</span> );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>最后，当应用程序首次启动并且在报警消除并且所有喷头已关闭后，都会打印Everything is ok。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"Status output when things are ok\"</span></div><div class=\"line\">when</div><div class=\"line\">    <span class=\"function\">not <span class=\"title\">Alarm</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    not <span class=\"title\">Sprinkler</span><span class=\"params\">( on == <span class=\"keyword\">true</span> )</span> </span></div><div class=\"line\"><span class=\"function\">then</span></div><div class=\"line\"><span class=\"function\">    System.out.<span class=\"title\">println</span><span class=\"params\">( <span class=\"string\">\"Everything is ok\"</span> )</span></span>;</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>正如我们在无状态会话示例中所做的那样，上述规则应放在单个DRL文件中，并保存到Maven项目或其任何子文件夹的资源文件夹中。 如前所述，我们可以从KieContainer获得KieSession。 唯一的区别是，这次我们创建一个有状态会话，而之前我们创建的是一个无状态会话。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">KieServices kieServices = KieServices.Factory.get();</div><div class=\"line\">KieContainer kContainer = kieServices.getKieClasspathContainer();</div><div class=\"line\">KieSession ksession = kContainer.newKieSession();</div></pre></td></tr></table></figure>\n<p>创建会话后，现在可以随着时间的推移迭代地使用它。 创建和插入四个房间对象，每个房间的对应一个Sprinkler对象。 此时，规则引擎已经完成了所有的匹配，但并没有触发。 调用ksession.fireAllRules（）使得匹配的规则触发，但因为没有火灾，所以输出结果是Everything is ok。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">String[] names = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"kitchen\"</span>, <span class=\"string\">\"bedroom\"</span>, <span class=\"string\">\"office\"</span>, <span class=\"string\">\"livingroom\"</span>&#125;;</div><div class=\"line\">Map&lt;String,Room&gt; name2room = <span class=\"keyword\">new</span> HashMap&lt;String,Room&gt;();</div><div class=\"line\"><span class=\"keyword\">for</span>( String name: names )&#123;</div><div class=\"line\">    Room room = <span class=\"keyword\">new</span> Room( name );</div><div class=\"line\">    name2room.put( name, room );</div><div class=\"line\">    ksession.insert( room );</div><div class=\"line\">    Sprinkler sprinkler = <span class=\"keyword\">new</span> Sprinkler( room );</div><div class=\"line\">    ksession.insert( sprinkler );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ksession.fireAllRules();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Everything is ok</p>\n</blockquote>\n<p>我们现在创造两个Fire并插入它们， 随着发动机内部的火灾，一旦调用了fireAllRules（），报警器就会升高，并且相应的喷水灭火器打开。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Fire kitchenFire = <span class=\"keyword\">new</span> Fire( name2room.get( <span class=\"string\">\"kitchen\"</span> ) );</div><div class=\"line\">Fire officeFire = <span class=\"keyword\">new</span> Fire( name2room.get( <span class=\"string\">\"office\"</span> ) );</div><div class=\"line\">FactHandle kitchenFireHandle = ksession.insert( kitchenFire );</div><div class=\"line\">FactHandle officeFireHandle = ksession.insert( officeFire );</div><div class=\"line\"></div><div class=\"line\">ksession.fireAllRules();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Raise the alarm<br>Turn on the sprinkler for room kitchen<br>Turn on the sprinkler for room office</p>\n</blockquote>\n<p>一段时间之后，火灾将熄灭，并且Fire实例被撤回。 这导致喷头关闭，报警被取消，最后再次打印Everything is ok。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ksession.delete( kitchenFireHandle );</div><div class=\"line\">ksession.delete( officeFireHandle );</div><div class=\"line\"></div><div class=\"line\">ksession.fireAllRules();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Cancel the alarm<br>Turn off the sprinkler for room office<br>Turn off the sprinkler for room kitchen<br>Everything is ok</p>\n</blockquote>"},{"title":"从Feign使用注意点到RESUFUL接口设计规范","date":"2017-09-09T06:43:28.000Z","_content":"\n最近项目中大量使用了Spring Cloud Feign来对接http接口，踩了不少坑，也产生了一些对RESTFUL接口设计的想法，特此一篇记录下。\n\n[TOC]\n\n## SpringMVC的请求参数绑定机制\n\n了解Feign历史的朋友会知道，Feign本身是Netflix的产品，Spring Cloud Feign是在原生Feign的基础上进行了封装，引入了大量的SpringMVC注解支持，这一方面使得其更容易被广大的Spring使用者开箱即用，但也产生了不小的混淆作用。所以在使用Spring Cloud Feign之前，笔者先介绍一下SpringMVC的一个入参机制。预设一个RestController，在本地的8080端口启动一个应用，用于接收http请求。\n\n```java\n@RestController\npublic class BookController {\n\n    @RequestMapping(value = \"/hello\") // <1>\n    public String hello(String name) { // <2>\n        return \"hello \" + name;\n    }\n\n}\n```\n\n这个接口写起来非常简单，但实际springmvc做了非常多的兼容，使得这个接口可以接受多种请求方式。\n\n<1> RequestMapping代表映射的路径，使用GET,POST,PUT,DELETE方式都可以映射到该端点。\n\n<2> SpringMVC中常用的请求参数注解有（@RequestParam,@RequestBody,@PathVariable）等。name被默认当做@RequestParam。形参`String name`由框架使用字节码技术获取name这个名称，自动检测请求参数中key值为name的参数，也可以使用@RequestParam(\"name\")覆盖变量本身的名称。当我们在url中携带name参数或者form表单中携带name参数时，会被获取到。\n\n```http\nPOST /hello HTTP/1.1\nHost: localhost:8080\nContent-Type: application/x-www-form-urlencoded\n\nname=formParam\n```\n\n或\n\n```http\nGET /hello?name=queryString HTTP/1.1\nHost: localhost:8080\n```\n\n## Feign的请求参数绑定机制\n\n上述的SpringMVC参数绑定机制，大家应该都是非常熟悉的，但这一切在Feign中有些许的不同。\n\n我们来看一个非常简单的，但是实际上错误的接口写法：\n\n```java\n//注意：错误的接口写法\n@FeignClient(\"book\")\npublic interface BookApi {\n\n    @RequestMapping(value = \"/hello\",method = RequestMethod.GET)\n    String hello(String name);\n\n}\n```\n\n配置请求地址：\n\n```yaml\nribbon:\n  eureka:\n   enabled: false\n\nbook:\n  ribbon:\n    listOfServers: http://localhost:8080\n```\n\n我们按照写SpringMVC的RestController的习惯写了一个FeignClient，按照我们的一开始的想法，由于指定了请求方式是GET，那么name应该会作为QueryString拼接到Url中吧？发出一个这样的GET请求：\n\n```http\nGET /hello?name=xxx HTTP/1.1\nHost: localhost:8080\n```\n\n而实际上，RestController并没有接收到，我们在RestController一侧的应用中获得了一些提示：\n\n![服务端DEBUG信息](http://ov0zuistv.bkt.clouddn.com/feignlog.png)\n\n- 并没有按照期望使用GET方式发送请求，而是POST方式\n- name参数没有被封装，获得了一个null值\n\n查看文档发现，如果不加默认的注解，Feign则会对参数默认加上@RequestBody注解，而RequestBody一定是包含在请求体中的，GET方式无法包含。所以上述两个现象得到了解释。Feign在GET请求包含RequestBody时强制转成了POST请求，而不是报错。\n\n理解清楚了这个机制我们就可以在开发Feign接口避免很多坑。而解决上述这个问题也很简单\n\n- 在Feign接口中为name添加@RequestParam(\"name\")注解，name必须指定，Feign的请求参数不会利用SpringMVC字节码的机制自动给定一个默认的名称。\n- 由于Feign默认使用@RequestBody，也可以改造RestController，使用@RequestBody接收。但是，请求参数通常是多个，推荐使用上述的@RequestParam，而@RequestBody一般只用于传递对象。\n\n## Feign绑定复合参数\n\n指定请求参数的类型与请求方式，上述问题的出现实际上是由于在没有理清楚Feign内部机制的前提下想当然的和SpringMVC进行了类比。同样，在使用对象作为参数时，也需要注意这样的问题。\n\n对于这样的接口\n\n```java\n@FeignClient(\"book\")\npublic interface BookApi {\n\n    @RequestMapping(value = \"/book\",method = RequestMethod.POST)\n    Book book(@RequestBody Book book); // <1>\n  \n    @RequestMapping(value = \"/book\",method = RequestMethod.POST)\n    Book book(@RequestParam(\"id\") String id,@RequestParam(\"name\") String name); // <2>\n  \n    @RequestMapping(value = \"/book\",method = RequestMethod.POST)\n    Book book(@RequestParam Map map); // <3>\n  \n    //错误的写法\n  \t@RequestMapping(value = \"/book\",method = RequestMethod.POST)\n    Book book(@RequestParam Book book); // <4>\n\n}\n```\n\n<1> 使用@RequestBody传递对象是最常用的方式。\n\n<2> 如果参数并不是很多，可以平铺开使用@RequestParam\n\n<3> 使用Map，这也是完全可以的，但不太符合面向对象的思想，不能从代码立刻看出该接口需要什么样的参数。\n\n<4> 错误的用法，Feign没有提供这样的机制自动转换实体为Map。\n\n## Feign中使用@PathVariable与RESTFUL规范\n\n这涉及到一个如何设计RESTFUL接口的话题，我们知道在自从RESTFUL在2000年初被提出来之后，就不乏文章提到资源，契约规范，CRUD对应增删改查操作等等。下面笔者从两个实际的接口来聊聊自己的看法。\n\n根据id查找用户接口：\n\n```java\n@FeignClient(\"user\")\npublic interface UserApi {\n\n    @RequestMapping(value = \"/user/{userId}\",method = RequestMethod.GET)\n    String findById(@PathVariable(\"id\") String userId);\n\n}\n```\n\n这应该是没有争议的，注意前面强调的，@PathVariable(\"id\")括号中的id不可以忘记。那如果是“根据邮箱查找用户呢”?很有可能下意识的写出这样的接口：\n\n```java\n@FeignClient(\"user\")\npublic interface UserApi {\n\n    @RequestMapping(value = \"/user/{userId}\",method = RequestMethod.GET)\n    String findById(@PathVariable(\"userId\") String userId);\n  \n    @RequestMapping(value = \"/user/{email}\",method = RequestMethod.GET)\n    String findByEmail(@PathVariable(\"email\") String email);\n\n}\n```\n\n- 首先看看Feign的问题。email中通常包含’.‘这个特殊字符，如果在路径中包含，会出现意想不到的结果。我不想探讨如何去解决它（实际上可以使用{email:.+}的方式),因为我觉得这不符合设计。\n- 再谈谈规范的问题。这两个接口是否是相似的，email是否应该被放到path中？这就要聊到RESTFUL的初衷，为什么userId这个属性被普遍认为适合出现在RESTFUL路径中，因为id本身起到了资源定位的作用，他是资源的标记。而email不同，它可能是唯一的，但更多的，它是资源的属性，所以，笔者认为不应该在路径中出现非定位性的动态参数。而是把email作为@RequestParam参数。\n\n## RESUFTL结构化查询\n\n笔者成功的从Feign的话题过度到了RESTFUL接口的设计问题，也导致了本文的篇幅变长了，不过也不打算再开一片文章谈了。\n\n再考虑一个接口设计，查询某一个月某个用户的订单，可能还会携带分页参数，这时候参数变得很多，按照传统的设计，这应该是一个查询操作，也就是与GET请求对应，那是不是意味着应当将这些参数拼接到url后呢？再思考Feign，正如本文的第二段所述，是不支持GET请求携带实体类的，这让我们设计陷入了两难的境地。而实际上参考一些DSL语言的设计如elasticSearch，也是使用POST JSON的方式来进行查询的，所以在实际项目中，笔者并不是特别青睐CRUD与四种请求方式对应的这种所谓的RESTFUL规范，如果说设计RESTFUL应该遵循什么规范，那大概是另一些名词，如契约规范和领域驱动设计。\n\n```java\n@FeignClient(\"order\")\npublic interface BookApi {\n\n    @RequestMapping(value = \"/order/history\",method = RequestMethod.POST)\n    Page<List<Orders>> queryOrderHistory(@RequestParam QueryVO queryVO);\n\n}\n```\n\n## RESTFUL行为限定\n\n在实际接口设计中，我遇到了这样的需求，用户模块的接口需要支持修改用户密码，修改用户邮箱，修改用户姓名，而笔者之前阅读过一篇文章，也是讲舍弃CRUD而是用领域驱动设计来规范RESTFUL接口的定义，与项目中我的想法不谋而合。看似这三个属性是同一个实体类的三个属性，完全可以如下设计：\n\n```\n@FeignClient(\"user\")\npublic interface UserApi {\n\n    @RequestMapping(value = \"/user\",method = RequestMethod.POST)\n    User update(@RequestBody User user);\n\n}\n```\n\n但实际上，如果再考虑多一层，就应该产生这样的思考：这三个功能所需要的权限一致吗？真的应该将他们放到一个接口中吗？实际上，笔者并不希望接口调用方传递一个实体，因为这样的行为是不可控的，完全不知道它到底是修改了什么属性，如果真的要限制行为，还需要在User中添加一个操作类型的字段，然后在接口实现方加以校验，这太麻烦了。而实际上，笔者觉得规范的设计应当如下：\n\n```java\n@FeignClient(\"user\")\npublic interface UserApi {\n\n    @RequestMapping(value = \"/user/{userId}/password/update\",method = RequestMethod.POST)\n    ResultBean<Boolean> updatePassword(@PathVariable(\"userId) String userId,@RequestParam(\"password\") password);\n    \n    @RequestMapping(value = \"/user/{userId}/email/update\",method = RequestMethod.POST)\n    ResultBean<Boolean> updateEmail(@PathVariable(\"userId) String userId,@RequestParam(\"email\") String email);\n    \n    @RequestMapping(value = \"/user/{userId}/username/update\",method = RequestMethod.POST)\n    ResultBean<Boolean> updateUsername(@PathVariable(\"userId) String userId,@RequestParam(\"username\") String username);\n\n}\n```\n\n- 一般意义上RESTFUL接口不应该出现动词，这里的update并不是一个动作，而是标记着操作的类型，因为针对某个属性可能出现的操作类型可能会有很多，所以我习惯加上一个update后缀，明确表达想要进行的操作，而不是仅仅依赖于GET，POST，PUT，DELETE。实际上，修改操作推荐使用的请求方式应当是PUT，这点笔者的理解是，已经使用update标记了行为，实际开发中不习惯使用PUT。\n- password，email，username都是user的属性，而userId是user的识别符号，所以userId以PathVariable的形式出现在url中，而三个属性出现在ReqeustParam中。\n\n顺带谈谈逻辑删除，如果一个需求是删除用户的常用地址，这个api的操作类型，我通常也不会设计为DELETE请求，而是同样使用delete来标记操作行为\n\n```java\n@RequestMapping(value = \"/user/{userId}/address/{addressId}/delete\",method = RequestMethod.POST)\n    ResultBean<Boolean> updateEmail(@PathVariable(\"userId\") String userId,@PathVariable(\"userId\") String email);\n```\n\n## 总结\n\n本文从Feign的使用注意点，聊到了RESTFUL接口的设计问题，其实是一个互相补充的行为。接口设计需要载体，所以我以Feign的接口风格谈了谈自己对RESTFUL设计的理解，而Feign中一些坑点，也正是我想要规范RESTFUL设计的出发点。如有对RESTFUL设计不同的理解，欢迎与我沟通。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/feign-1.md","raw":"---\ntitle: 从Feign使用注意点到RESUFUL接口设计规范\ndate: 2017-09-09 14:43:28\ntags: Spring Cloud\ncategories: Spring Cloud\n---\n\n最近项目中大量使用了Spring Cloud Feign来对接http接口，踩了不少坑，也产生了一些对RESTFUL接口设计的想法，特此一篇记录下。\n\n[TOC]\n\n## SpringMVC的请求参数绑定机制\n\n了解Feign历史的朋友会知道，Feign本身是Netflix的产品，Spring Cloud Feign是在原生Feign的基础上进行了封装，引入了大量的SpringMVC注解支持，这一方面使得其更容易被广大的Spring使用者开箱即用，但也产生了不小的混淆作用。所以在使用Spring Cloud Feign之前，笔者先介绍一下SpringMVC的一个入参机制。预设一个RestController，在本地的8080端口启动一个应用，用于接收http请求。\n\n```java\n@RestController\npublic class BookController {\n\n    @RequestMapping(value = \"/hello\") // <1>\n    public String hello(String name) { // <2>\n        return \"hello \" + name;\n    }\n\n}\n```\n\n这个接口写起来非常简单，但实际springmvc做了非常多的兼容，使得这个接口可以接受多种请求方式。\n\n<1> RequestMapping代表映射的路径，使用GET,POST,PUT,DELETE方式都可以映射到该端点。\n\n<2> SpringMVC中常用的请求参数注解有（@RequestParam,@RequestBody,@PathVariable）等。name被默认当做@RequestParam。形参`String name`由框架使用字节码技术获取name这个名称，自动检测请求参数中key值为name的参数，也可以使用@RequestParam(\"name\")覆盖变量本身的名称。当我们在url中携带name参数或者form表单中携带name参数时，会被获取到。\n\n```http\nPOST /hello HTTP/1.1\nHost: localhost:8080\nContent-Type: application/x-www-form-urlencoded\n\nname=formParam\n```\n\n或\n\n```http\nGET /hello?name=queryString HTTP/1.1\nHost: localhost:8080\n```\n\n## Feign的请求参数绑定机制\n\n上述的SpringMVC参数绑定机制，大家应该都是非常熟悉的，但这一切在Feign中有些许的不同。\n\n我们来看一个非常简单的，但是实际上错误的接口写法：\n\n```java\n//注意：错误的接口写法\n@FeignClient(\"book\")\npublic interface BookApi {\n\n    @RequestMapping(value = \"/hello\",method = RequestMethod.GET)\n    String hello(String name);\n\n}\n```\n\n配置请求地址：\n\n```yaml\nribbon:\n  eureka:\n   enabled: false\n\nbook:\n  ribbon:\n    listOfServers: http://localhost:8080\n```\n\n我们按照写SpringMVC的RestController的习惯写了一个FeignClient，按照我们的一开始的想法，由于指定了请求方式是GET，那么name应该会作为QueryString拼接到Url中吧？发出一个这样的GET请求：\n\n```http\nGET /hello?name=xxx HTTP/1.1\nHost: localhost:8080\n```\n\n而实际上，RestController并没有接收到，我们在RestController一侧的应用中获得了一些提示：\n\n![服务端DEBUG信息](http://ov0zuistv.bkt.clouddn.com/feignlog.png)\n\n- 并没有按照期望使用GET方式发送请求，而是POST方式\n- name参数没有被封装，获得了一个null值\n\n查看文档发现，如果不加默认的注解，Feign则会对参数默认加上@RequestBody注解，而RequestBody一定是包含在请求体中的，GET方式无法包含。所以上述两个现象得到了解释。Feign在GET请求包含RequestBody时强制转成了POST请求，而不是报错。\n\n理解清楚了这个机制我们就可以在开发Feign接口避免很多坑。而解决上述这个问题也很简单\n\n- 在Feign接口中为name添加@RequestParam(\"name\")注解，name必须指定，Feign的请求参数不会利用SpringMVC字节码的机制自动给定一个默认的名称。\n- 由于Feign默认使用@RequestBody，也可以改造RestController，使用@RequestBody接收。但是，请求参数通常是多个，推荐使用上述的@RequestParam，而@RequestBody一般只用于传递对象。\n\n## Feign绑定复合参数\n\n指定请求参数的类型与请求方式，上述问题的出现实际上是由于在没有理清楚Feign内部机制的前提下想当然的和SpringMVC进行了类比。同样，在使用对象作为参数时，也需要注意这样的问题。\n\n对于这样的接口\n\n```java\n@FeignClient(\"book\")\npublic interface BookApi {\n\n    @RequestMapping(value = \"/book\",method = RequestMethod.POST)\n    Book book(@RequestBody Book book); // <1>\n  \n    @RequestMapping(value = \"/book\",method = RequestMethod.POST)\n    Book book(@RequestParam(\"id\") String id,@RequestParam(\"name\") String name); // <2>\n  \n    @RequestMapping(value = \"/book\",method = RequestMethod.POST)\n    Book book(@RequestParam Map map); // <3>\n  \n    //错误的写法\n  \t@RequestMapping(value = \"/book\",method = RequestMethod.POST)\n    Book book(@RequestParam Book book); // <4>\n\n}\n```\n\n<1> 使用@RequestBody传递对象是最常用的方式。\n\n<2> 如果参数并不是很多，可以平铺开使用@RequestParam\n\n<3> 使用Map，这也是完全可以的，但不太符合面向对象的思想，不能从代码立刻看出该接口需要什么样的参数。\n\n<4> 错误的用法，Feign没有提供这样的机制自动转换实体为Map。\n\n## Feign中使用@PathVariable与RESTFUL规范\n\n这涉及到一个如何设计RESTFUL接口的话题，我们知道在自从RESTFUL在2000年初被提出来之后，就不乏文章提到资源，契约规范，CRUD对应增删改查操作等等。下面笔者从两个实际的接口来聊聊自己的看法。\n\n根据id查找用户接口：\n\n```java\n@FeignClient(\"user\")\npublic interface UserApi {\n\n    @RequestMapping(value = \"/user/{userId}\",method = RequestMethod.GET)\n    String findById(@PathVariable(\"id\") String userId);\n\n}\n```\n\n这应该是没有争议的，注意前面强调的，@PathVariable(\"id\")括号中的id不可以忘记。那如果是“根据邮箱查找用户呢”?很有可能下意识的写出这样的接口：\n\n```java\n@FeignClient(\"user\")\npublic interface UserApi {\n\n    @RequestMapping(value = \"/user/{userId}\",method = RequestMethod.GET)\n    String findById(@PathVariable(\"userId\") String userId);\n  \n    @RequestMapping(value = \"/user/{email}\",method = RequestMethod.GET)\n    String findByEmail(@PathVariable(\"email\") String email);\n\n}\n```\n\n- 首先看看Feign的问题。email中通常包含’.‘这个特殊字符，如果在路径中包含，会出现意想不到的结果。我不想探讨如何去解决它（实际上可以使用{email:.+}的方式),因为我觉得这不符合设计。\n- 再谈谈规范的问题。这两个接口是否是相似的，email是否应该被放到path中？这就要聊到RESTFUL的初衷，为什么userId这个属性被普遍认为适合出现在RESTFUL路径中，因为id本身起到了资源定位的作用，他是资源的标记。而email不同，它可能是唯一的，但更多的，它是资源的属性，所以，笔者认为不应该在路径中出现非定位性的动态参数。而是把email作为@RequestParam参数。\n\n## RESUFTL结构化查询\n\n笔者成功的从Feign的话题过度到了RESTFUL接口的设计问题，也导致了本文的篇幅变长了，不过也不打算再开一片文章谈了。\n\n再考虑一个接口设计，查询某一个月某个用户的订单，可能还会携带分页参数，这时候参数变得很多，按照传统的设计，这应该是一个查询操作，也就是与GET请求对应，那是不是意味着应当将这些参数拼接到url后呢？再思考Feign，正如本文的第二段所述，是不支持GET请求携带实体类的，这让我们设计陷入了两难的境地。而实际上参考一些DSL语言的设计如elasticSearch，也是使用POST JSON的方式来进行查询的，所以在实际项目中，笔者并不是特别青睐CRUD与四种请求方式对应的这种所谓的RESTFUL规范，如果说设计RESTFUL应该遵循什么规范，那大概是另一些名词，如契约规范和领域驱动设计。\n\n```java\n@FeignClient(\"order\")\npublic interface BookApi {\n\n    @RequestMapping(value = \"/order/history\",method = RequestMethod.POST)\n    Page<List<Orders>> queryOrderHistory(@RequestParam QueryVO queryVO);\n\n}\n```\n\n## RESTFUL行为限定\n\n在实际接口设计中，我遇到了这样的需求，用户模块的接口需要支持修改用户密码，修改用户邮箱，修改用户姓名，而笔者之前阅读过一篇文章，也是讲舍弃CRUD而是用领域驱动设计来规范RESTFUL接口的定义，与项目中我的想法不谋而合。看似这三个属性是同一个实体类的三个属性，完全可以如下设计：\n\n```\n@FeignClient(\"user\")\npublic interface UserApi {\n\n    @RequestMapping(value = \"/user\",method = RequestMethod.POST)\n    User update(@RequestBody User user);\n\n}\n```\n\n但实际上，如果再考虑多一层，就应该产生这样的思考：这三个功能所需要的权限一致吗？真的应该将他们放到一个接口中吗？实际上，笔者并不希望接口调用方传递一个实体，因为这样的行为是不可控的，完全不知道它到底是修改了什么属性，如果真的要限制行为，还需要在User中添加一个操作类型的字段，然后在接口实现方加以校验，这太麻烦了。而实际上，笔者觉得规范的设计应当如下：\n\n```java\n@FeignClient(\"user\")\npublic interface UserApi {\n\n    @RequestMapping(value = \"/user/{userId}/password/update\",method = RequestMethod.POST)\n    ResultBean<Boolean> updatePassword(@PathVariable(\"userId) String userId,@RequestParam(\"password\") password);\n    \n    @RequestMapping(value = \"/user/{userId}/email/update\",method = RequestMethod.POST)\n    ResultBean<Boolean> updateEmail(@PathVariable(\"userId) String userId,@RequestParam(\"email\") String email);\n    \n    @RequestMapping(value = \"/user/{userId}/username/update\",method = RequestMethod.POST)\n    ResultBean<Boolean> updateUsername(@PathVariable(\"userId) String userId,@RequestParam(\"username\") String username);\n\n}\n```\n\n- 一般意义上RESTFUL接口不应该出现动词，这里的update并不是一个动作，而是标记着操作的类型，因为针对某个属性可能出现的操作类型可能会有很多，所以我习惯加上一个update后缀，明确表达想要进行的操作，而不是仅仅依赖于GET，POST，PUT，DELETE。实际上，修改操作推荐使用的请求方式应当是PUT，这点笔者的理解是，已经使用update标记了行为，实际开发中不习惯使用PUT。\n- password，email，username都是user的属性，而userId是user的识别符号，所以userId以PathVariable的形式出现在url中，而三个属性出现在ReqeustParam中。\n\n顺带谈谈逻辑删除，如果一个需求是删除用户的常用地址，这个api的操作类型，我通常也不会设计为DELETE请求，而是同样使用delete来标记操作行为\n\n```java\n@RequestMapping(value = \"/user/{userId}/address/{addressId}/delete\",method = RequestMethod.POST)\n    ResultBean<Boolean> updateEmail(@PathVariable(\"userId\") String userId,@PathVariable(\"userId\") String email);\n```\n\n## 总结\n\n本文从Feign的使用注意点，聊到了RESTFUL接口的设计问题，其实是一个互相补充的行为。接口设计需要载体，所以我以Feign的接口风格谈了谈自己对RESTFUL设计的理解，而Feign中一些坑点，也正是我想要规范RESTFUL设计的出发点。如有对RESTFUL设计不同的理解，欢迎与我沟通。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"feign-1","published":1,"updated":"2017-09-09T10:22:55.582Z","_id":"cj7cy3zt3001otwv7c635z211","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近项目中大量使用了Spring Cloud Feign来对接http接口，踩了不少坑，也产生了一些对RESTFUL接口设计的想法，特此一篇记录下。</p>\n<p>[TOC]</p>\n<h2 id=\"SpringMVC的请求参数绑定机制\"><a href=\"#SpringMVC的请求参数绑定机制\" class=\"headerlink\" title=\"SpringMVC的请求参数绑定机制\"></a>SpringMVC的请求参数绑定机制</h2><p>了解Feign历史的朋友会知道，Feign本身是Netflix的产品，Spring Cloud Feign是在原生Feign的基础上进行了封装，引入了大量的SpringMVC注解支持，这一方面使得其更容易被广大的Spring使用者开箱即用，但也产生了不小的混淆作用。所以在使用Spring Cloud Feign之前，笔者先介绍一下SpringMVC的一个入参机制。预设一个RestController，在本地的8080端口启动一个应用，用于接收http请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>) <span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span> </span>&#123; <span class=\"comment\">// &lt;2&gt;</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span> + name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个接口写起来非常简单，但实际springmvc做了非常多的兼容，使得这个接口可以接受多种请求方式。</p>\n<p><1> RequestMapping代表映射的路径，使用GET,POST,PUT,DELETE方式都可以映射到该端点。</1></p>\n<p><2> SpringMVC中常用的请求参数注解有（@RequestParam,@RequestBody,@PathVariable）等。name被默认当做@RequestParam。形参<code>String name</code>由框架使用字节码技术获取name这个名称，自动检测请求参数中key值为name的参数，也可以使用@RequestParam(“name”)覆盖变量本身的名称。当我们在url中携带name参数或者form表单中携带name参数时，会被获取到。</2></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">POST</span> <span class=\"string\">/hello</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: localhost:8080</div><div class=\"line\"><span class=\"attribute\">Content-Type</span>: application/x-www-form-urlencoded</div><div class=\"line\"></div><div class=\"line\">name=formParam</div></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/hello?name=queryString</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: localhost:8080</div></pre></td></tr></table></figure>\n<h2 id=\"Feign的请求参数绑定机制\"><a href=\"#Feign的请求参数绑定机制\" class=\"headerlink\" title=\"Feign的请求参数绑定机制\"></a>Feign的请求参数绑定机制</h2><p>上述的SpringMVC参数绑定机制，大家应该都是非常熟悉的，但这一切在Feign中有些许的不同。</p>\n<p>我们来看一个非常简单的，但是实际上错误的接口写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//注意：错误的接口写法</span></div><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"book\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>,method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">hello</span><span class=\"params\">(String name)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>配置请求地址：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">ribbon:</span></div><div class=\"line\"><span class=\"attr\">  eureka:</span></div><div class=\"line\"><span class=\"attr\">   enabled:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">book:</span></div><div class=\"line\"><span class=\"attr\">  ribbon:</span></div><div class=\"line\"><span class=\"attr\">    listOfServers:</span> <span class=\"attr\">http://localhost:8080</span></div></pre></td></tr></table></figure>\n<p>我们按照写SpringMVC的RestController的习惯写了一个FeignClient，按照我们的一开始的想法，由于指定了请求方式是GET，那么name应该会作为QueryString拼接到Url中吧？发出一个这样的GET请求：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/hello?name=xxx</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: localhost:8080</div></pre></td></tr></table></figure>\n<p>而实际上，RestController并没有接收到，我们在RestController一侧的应用中获得了一些提示：</p>\n<p><img src=\"http://ov0zuistv.bkt.clouddn.com/feignlog.png\" alt=\"服务端DEBUG信息\"></p>\n<ul>\n<li>并没有按照期望使用GET方式发送请求，而是POST方式</li>\n<li>name参数没有被封装，获得了一个null值</li>\n</ul>\n<p>查看文档发现，如果不加默认的注解，Feign则会对参数默认加上@RequestBody注解，而RequestBody一定是包含在请求体中的，GET方式无法包含。所以上述两个现象得到了解释。Feign在GET请求包含RequestBody时强制转成了POST请求，而不是报错。</p>\n<p>理解清楚了这个机制我们就可以在开发Feign接口避免很多坑。而解决上述这个问题也很简单</p>\n<ul>\n<li>在Feign接口中为name添加@RequestParam(“name”)注解，name必须指定，Feign的请求参数不会利用SpringMVC字节码的机制自动给定一个默认的名称。</li>\n<li>由于Feign默认使用@RequestBody，也可以改造RestController，使用@RequestBody接收。但是，请求参数通常是多个，推荐使用上述的@RequestParam，而@RequestBody一般只用于传递对象。</li>\n</ul>\n<h2 id=\"Feign绑定复合参数\"><a href=\"#Feign绑定复合参数\" class=\"headerlink\" title=\"Feign绑定复合参数\"></a>Feign绑定复合参数</h2><p>指定请求参数的类型与请求方式，上述问题的出现实际上是由于在没有理清楚Feign内部机制的前提下想当然的和SpringMVC进行了类比。同样，在使用对象作为参数时，也需要注意这样的问题。</p>\n<p>对于这样的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"book\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/book\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">Book <span class=\"title\">book</span><span class=\"params\">(@RequestBody Book book)</span></span>; <span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/book\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">Book <span class=\"title\">book</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"id\"</span>)</span> String id,@<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"name\"</span>)</span> String name)</span>; <span class=\"comment\">// &lt;2&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/book\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">Book <span class=\"title\">book</span><span class=\"params\">(@RequestParam Map map)</span></span>; <span class=\"comment\">// &lt;3&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//错误的写法</span></div><div class=\"line\">  \t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/book\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">Book <span class=\"title\">book</span><span class=\"params\">(@RequestParam Book book)</span></span>; <span class=\"comment\">// &lt;4&gt;</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> 使用@RequestBody传递对象是最常用的方式。</1></p>\n<p><2> 如果参数并不是很多，可以平铺开使用@RequestParam</2></p>\n<p><3> 使用Map，这也是完全可以的，但不太符合面向对象的思想，不能从代码立刻看出该接口需要什么样的参数。</3></p>\n<p><4> 错误的用法，Feign没有提供这样的机制自动转换实体为Map。</4></p>\n<h2 id=\"Feign中使用-PathVariable与RESTFUL规范\"><a href=\"#Feign中使用-PathVariable与RESTFUL规范\" class=\"headerlink\" title=\"Feign中使用@PathVariable与RESTFUL规范\"></a>Feign中使用@PathVariable与RESTFUL规范</h2><p>这涉及到一个如何设计RESTFUL接口的话题，我们知道在自从RESTFUL在2000年初被提出来之后，就不乏文章提到资源，契约规范，CRUD对应增删改查操作等等。下面笔者从两个实际的接口来聊聊自己的看法。</p>\n<p>根据id查找用户接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;userId&#125;\"</span>,method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">findById</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> String userId)</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这应该是没有争议的，注意前面强调的，@PathVariable(“id”)括号中的id不可以忘记。那如果是“根据邮箱查找用户呢”?很有可能下意识的写出这样的接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;userId&#125;\"</span>,method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">findById</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"userId\"</span>)</span> String userId)</span>;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;email&#125;\"</span>,method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">findByEmail</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"email\"</span>)</span> String email)</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>首先看看Feign的问题。email中通常包含’.‘这个特殊字符，如果在路径中包含，会出现意想不到的结果。我不想探讨如何去解决它（实际上可以使用{email:.+}的方式),因为我觉得这不符合设计。</li>\n<li>再谈谈规范的问题。这两个接口是否是相似的，email是否应该被放到path中？这就要聊到RESTFUL的初衷，为什么userId这个属性被普遍认为适合出现在RESTFUL路径中，因为id本身起到了资源定位的作用，他是资源的标记。而email不同，它可能是唯一的，但更多的，它是资源的属性，所以，笔者认为不应该在路径中出现非定位性的动态参数。而是把email作为@RequestParam参数。</li>\n</ul>\n<h2 id=\"RESUFTL结构化查询\"><a href=\"#RESUFTL结构化查询\" class=\"headerlink\" title=\"RESUFTL结构化查询\"></a>RESUFTL结构化查询</h2><p>笔者成功的从Feign的话题过度到了RESTFUL接口的设计问题，也导致了本文的篇幅变长了，不过也不打算再开一片文章谈了。</p>\n<p>再考虑一个接口设计，查询某一个月某个用户的订单，可能还会携带分页参数，这时候参数变得很多，按照传统的设计，这应该是一个查询操作，也就是与GET请求对应，那是不是意味着应当将这些参数拼接到url后呢？再思考Feign，正如本文的第二段所述，是不支持GET请求携带实体类的，这让我们设计陷入了两难的境地。而实际上参考一些DSL语言的设计如elasticSearch，也是使用POST JSON的方式来进行查询的，所以在实际项目中，笔者并不是特别青睐CRUD与四种请求方式对应的这种所谓的RESTFUL规范，如果说设计RESTFUL应该遵循什么规范，那大概是另一些名词，如契约规范和领域驱动设计。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"order\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/order/history\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    Page&lt;List&lt;Orders&gt;&gt; queryOrderHistory(<span class=\"meta\">@RequestParam</span> QueryVO queryVO);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"RESTFUL行为限定\"><a href=\"#RESTFUL行为限定\" class=\"headerlink\" title=\"RESTFUL行为限定\"></a>RESTFUL行为限定</h2><p>在实际接口设计中，我遇到了这样的需求，用户模块的接口需要支持修改用户密码，修改用户邮箱，修改用户姓名，而笔者之前阅读过一篇文章，也是讲舍弃CRUD而是用领域驱动设计来规范RESTFUL接口的定义，与项目中我的想法不谋而合。看似这三个属性是同一个实体类的三个属性，完全可以如下设计：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@FeignClient(&quot;user&quot;)</div><div class=\"line\">public interface UserApi &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</div><div class=\"line\">    User update(@RequestBody User user);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但实际上，如果再考虑多一层，就应该产生这样的思考：这三个功能所需要的权限一致吗？真的应该将他们放到一个接口中吗？实际上，笔者并不希望接口调用方传递一个实体，因为这样的行为是不可控的，完全不知道它到底是修改了什么属性，如果真的要限制行为，还需要在User中添加一个操作类型的字段，然后在接口实现方加以校验，这太麻烦了。而实际上，笔者觉得规范的设计应当如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;userId&#125;/password/update\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">ResultBean&lt;Boolean&gt; <span class=\"title\">updatePassword</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"userId) String userId,@RequestParam(\"</span>password<span class=\"string\">\") password);</span></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\">    </span></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\">    @RequestMapping(value = \"</span>/user/&#123;userId&#125;/email/update<span class=\"string\">\",method = RequestMethod.POST)</span></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\">    ResultBean&lt;Boolean&gt; updateEmail(@PathVariable(\"</span>userId)</span> String userId,@<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"email\"</span>)</span> String email)</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;userId&#125;/username/update\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">ResultBean&lt;Boolean&gt; <span class=\"title\">updateUsername</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"userId) String userId,@RequestParam(\"</span>username<span class=\"string\">\") String username);</span></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\"></span></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\">&#125;</span></span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>一般意义上RESTFUL接口不应该出现动词，这里的update并不是一个动作，而是标记着操作的类型，因为针对某个属性可能出现的操作类型可能会有很多，所以我习惯加上一个update后缀，明确表达想要进行的操作，而不是仅仅依赖于GET，POST，PUT，DELETE。实际上，修改操作推荐使用的请求方式应当是PUT，这点笔者的理解是，已经使用update标记了行为，实际开发中不习惯使用PUT。</li>\n<li>password，email，username都是user的属性，而userId是user的识别符号，所以userId以PathVariable的形式出现在url中，而三个属性出现在ReqeustParam中。</li>\n</ul>\n<p>顺带谈谈逻辑删除，如果一个需求是删除用户的常用地址，这个api的操作类型，我通常也不会设计为DELETE请求，而是同样使用delete来标记操作行为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;userId&#125;/address/&#123;addressId&#125;/delete\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">ResultBean&lt;Boolean&gt; <span class=\"title\">updateEmail</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"userId\"</span>)</span> String userId,@<span class=\"title\">PathVariable</span><span class=\"params\">(<span class=\"string\">\"userId\"</span>)</span> String email)</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文从Feign的使用注意点，聊到了RESTFUL接口的设计问题，其实是一个互相补充的行为。接口设计需要载体，所以我以Feign的接口风格谈了谈自己对RESTFUL设计的理解，而Feign中一些坑点，也正是我想要规范RESTFUL设计的出发点。如有对RESTFUL设计不同的理解，欢迎与我沟通。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近项目中大量使用了Spring Cloud Feign来对接http接口，踩了不少坑，也产生了一些对RESTFUL接口设计的想法，特此一篇记录下。</p>\n<p>[TOC]</p>\n<h2 id=\"SpringMVC的请求参数绑定机制\"><a href=\"#SpringMVC的请求参数绑定机制\" class=\"headerlink\" title=\"SpringMVC的请求参数绑定机制\"></a>SpringMVC的请求参数绑定机制</h2><p>了解Feign历史的朋友会知道，Feign本身是Netflix的产品，Spring Cloud Feign是在原生Feign的基础上进行了封装，引入了大量的SpringMVC注解支持，这一方面使得其更容易被广大的Spring使用者开箱即用，但也产生了不小的混淆作用。所以在使用Spring Cloud Feign之前，笔者先介绍一下SpringMVC的一个入参机制。预设一个RestController，在本地的8080端口启动一个应用，用于接收http请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>) <span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span> </span>&#123; <span class=\"comment\">// &lt;2&gt;</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"hello \"</span> + name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个接口写起来非常简单，但实际springmvc做了非常多的兼容，使得这个接口可以接受多种请求方式。</p>\n<p><1> RequestMapping代表映射的路径，使用GET,POST,PUT,DELETE方式都可以映射到该端点。</1></p>\n<p><2> SpringMVC中常用的请求参数注解有（@RequestParam,@RequestBody,@PathVariable）等。name被默认当做@RequestParam。形参<code>String name</code>由框架使用字节码技术获取name这个名称，自动检测请求参数中key值为name的参数，也可以使用@RequestParam(“name”)覆盖变量本身的名称。当我们在url中携带name参数或者form表单中携带name参数时，会被获取到。</2></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">POST</span> <span class=\"string\">/hello</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: localhost:8080</div><div class=\"line\"><span class=\"attribute\">Content-Type</span>: application/x-www-form-urlencoded</div><div class=\"line\"></div><div class=\"line\">name=formParam</div></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/hello?name=queryString</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: localhost:8080</div></pre></td></tr></table></figure>\n<h2 id=\"Feign的请求参数绑定机制\"><a href=\"#Feign的请求参数绑定机制\" class=\"headerlink\" title=\"Feign的请求参数绑定机制\"></a>Feign的请求参数绑定机制</h2><p>上述的SpringMVC参数绑定机制，大家应该都是非常熟悉的，但这一切在Feign中有些许的不同。</p>\n<p>我们来看一个非常简单的，但是实际上错误的接口写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//注意：错误的接口写法</span></div><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"book\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/hello\"</span>,method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">hello</span><span class=\"params\">(String name)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>配置请求地址：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">ribbon:</span></div><div class=\"line\"><span class=\"attr\">  eureka:</span></div><div class=\"line\"><span class=\"attr\">   enabled:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">book:</span></div><div class=\"line\"><span class=\"attr\">  ribbon:</span></div><div class=\"line\"><span class=\"attr\">    listOfServers:</span> <span class=\"attr\">http://localhost:8080</span></div></pre></td></tr></table></figure>\n<p>我们按照写SpringMVC的RestController的习惯写了一个FeignClient，按照我们的一开始的想法，由于指定了请求方式是GET，那么name应该会作为QueryString拼接到Url中吧？发出一个这样的GET请求：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/hello?name=xxx</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: localhost:8080</div></pre></td></tr></table></figure>\n<p>而实际上，RestController并没有接收到，我们在RestController一侧的应用中获得了一些提示：</p>\n<p><img src=\"http://ov0zuistv.bkt.clouddn.com/feignlog.png\" alt=\"服务端DEBUG信息\"></p>\n<ul>\n<li>并没有按照期望使用GET方式发送请求，而是POST方式</li>\n<li>name参数没有被封装，获得了一个null值</li>\n</ul>\n<p>查看文档发现，如果不加默认的注解，Feign则会对参数默认加上@RequestBody注解，而RequestBody一定是包含在请求体中的，GET方式无法包含。所以上述两个现象得到了解释。Feign在GET请求包含RequestBody时强制转成了POST请求，而不是报错。</p>\n<p>理解清楚了这个机制我们就可以在开发Feign接口避免很多坑。而解决上述这个问题也很简单</p>\n<ul>\n<li>在Feign接口中为name添加@RequestParam(“name”)注解，name必须指定，Feign的请求参数不会利用SpringMVC字节码的机制自动给定一个默认的名称。</li>\n<li>由于Feign默认使用@RequestBody，也可以改造RestController，使用@RequestBody接收。但是，请求参数通常是多个，推荐使用上述的@RequestParam，而@RequestBody一般只用于传递对象。</li>\n</ul>\n<h2 id=\"Feign绑定复合参数\"><a href=\"#Feign绑定复合参数\" class=\"headerlink\" title=\"Feign绑定复合参数\"></a>Feign绑定复合参数</h2><p>指定请求参数的类型与请求方式，上述问题的出现实际上是由于在没有理清楚Feign内部机制的前提下想当然的和SpringMVC进行了类比。同样，在使用对象作为参数时，也需要注意这样的问题。</p>\n<p>对于这样的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"book\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/book\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">Book <span class=\"title\">book</span><span class=\"params\">(@RequestBody Book book)</span></span>; <span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/book\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">Book <span class=\"title\">book</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"id\"</span>)</span> String id,@<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"name\"</span>)</span> String name)</span>; <span class=\"comment\">// &lt;2&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/book\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">Book <span class=\"title\">book</span><span class=\"params\">(@RequestParam Map map)</span></span>; <span class=\"comment\">// &lt;3&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//错误的写法</span></div><div class=\"line\">  \t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/book\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">Book <span class=\"title\">book</span><span class=\"params\">(@RequestParam Book book)</span></span>; <span class=\"comment\">// &lt;4&gt;</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> 使用@RequestBody传递对象是最常用的方式。</1></p>\n<p><2> 如果参数并不是很多，可以平铺开使用@RequestParam</2></p>\n<p><3> 使用Map，这也是完全可以的，但不太符合面向对象的思想，不能从代码立刻看出该接口需要什么样的参数。</3></p>\n<p><4> 错误的用法，Feign没有提供这样的机制自动转换实体为Map。</4></p>\n<h2 id=\"Feign中使用-PathVariable与RESTFUL规范\"><a href=\"#Feign中使用-PathVariable与RESTFUL规范\" class=\"headerlink\" title=\"Feign中使用@PathVariable与RESTFUL规范\"></a>Feign中使用@PathVariable与RESTFUL规范</h2><p>这涉及到一个如何设计RESTFUL接口的话题，我们知道在自从RESTFUL在2000年初被提出来之后，就不乏文章提到资源，契约规范，CRUD对应增删改查操作等等。下面笔者从两个实际的接口来聊聊自己的看法。</p>\n<p>根据id查找用户接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;userId&#125;\"</span>,method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">findById</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> String userId)</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这应该是没有争议的，注意前面强调的，@PathVariable(“id”)括号中的id不可以忘记。那如果是“根据邮箱查找用户呢”?很有可能下意识的写出这样的接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;userId&#125;\"</span>,method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">findById</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"userId\"</span>)</span> String userId)</span>;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;email&#125;\"</span>,method = RequestMethod.GET)</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">findByEmail</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"email\"</span>)</span> String email)</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>首先看看Feign的问题。email中通常包含’.‘这个特殊字符，如果在路径中包含，会出现意想不到的结果。我不想探讨如何去解决它（实际上可以使用{email:.+}的方式),因为我觉得这不符合设计。</li>\n<li>再谈谈规范的问题。这两个接口是否是相似的，email是否应该被放到path中？这就要聊到RESTFUL的初衷，为什么userId这个属性被普遍认为适合出现在RESTFUL路径中，因为id本身起到了资源定位的作用，他是资源的标记。而email不同，它可能是唯一的，但更多的，它是资源的属性，所以，笔者认为不应该在路径中出现非定位性的动态参数。而是把email作为@RequestParam参数。</li>\n</ul>\n<h2 id=\"RESUFTL结构化查询\"><a href=\"#RESUFTL结构化查询\" class=\"headerlink\" title=\"RESUFTL结构化查询\"></a>RESUFTL结构化查询</h2><p>笔者成功的从Feign的话题过度到了RESTFUL接口的设计问题，也导致了本文的篇幅变长了，不过也不打算再开一片文章谈了。</p>\n<p>再考虑一个接口设计，查询某一个月某个用户的订单，可能还会携带分页参数，这时候参数变得很多，按照传统的设计，这应该是一个查询操作，也就是与GET请求对应，那是不是意味着应当将这些参数拼接到url后呢？再思考Feign，正如本文的第二段所述，是不支持GET请求携带实体类的，这让我们设计陷入了两难的境地。而实际上参考一些DSL语言的设计如elasticSearch，也是使用POST JSON的方式来进行查询的，所以在实际项目中，笔者并不是特别青睐CRUD与四种请求方式对应的这种所谓的RESTFUL规范，如果说设计RESTFUL应该遵循什么规范，那大概是另一些名词，如契约规范和领域驱动设计。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"order\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/order/history\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    Page&lt;List&lt;Orders&gt;&gt; queryOrderHistory(<span class=\"meta\">@RequestParam</span> QueryVO queryVO);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"RESTFUL行为限定\"><a href=\"#RESTFUL行为限定\" class=\"headerlink\" title=\"RESTFUL行为限定\"></a>RESTFUL行为限定</h2><p>在实际接口设计中，我遇到了这样的需求，用户模块的接口需要支持修改用户密码，修改用户邮箱，修改用户姓名，而笔者之前阅读过一篇文章，也是讲舍弃CRUD而是用领域驱动设计来规范RESTFUL接口的定义，与项目中我的想法不谋而合。看似这三个属性是同一个实体类的三个属性，完全可以如下设计：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@FeignClient(&quot;user&quot;)</div><div class=\"line\">public interface UserApi &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</div><div class=\"line\">    User update(@RequestBody User user);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但实际上，如果再考虑多一层，就应该产生这样的思考：这三个功能所需要的权限一致吗？真的应该将他们放到一个接口中吗？实际上，笔者并不希望接口调用方传递一个实体，因为这样的行为是不可控的，完全不知道它到底是修改了什么属性，如果真的要限制行为，还需要在User中添加一个操作类型的字段，然后在接口实现方加以校验，这太麻烦了。而实际上，笔者觉得规范的设计应当如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"user\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserApi</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;userId&#125;/password/update\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">ResultBean&lt;Boolean&gt; <span class=\"title\">updatePassword</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"userId) String userId,@RequestParam(\"</span>password<span class=\"string\">\") password);</span></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\">    </span></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\">    @RequestMapping(value = \"</span>/user/&#123;userId&#125;/email/update<span class=\"string\">\",method = RequestMethod.POST)</span></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\">    ResultBean&lt;Boolean&gt; updateEmail(@PathVariable(\"</span>userId)</span> String userId,@<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"email\"</span>)</span> String email)</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;userId&#125;/username/update\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">ResultBean&lt;Boolean&gt; <span class=\"title\">updateUsername</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"userId) String userId,@RequestParam(\"</span>username<span class=\"string\">\") String username);</span></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\"></span></span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\"><span class=\"string\">&#125;</span></span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>一般意义上RESTFUL接口不应该出现动词，这里的update并不是一个动作，而是标记着操作的类型，因为针对某个属性可能出现的操作类型可能会有很多，所以我习惯加上一个update后缀，明确表达想要进行的操作，而不是仅仅依赖于GET，POST，PUT，DELETE。实际上，修改操作推荐使用的请求方式应当是PUT，这点笔者的理解是，已经使用update标记了行为，实际开发中不习惯使用PUT。</li>\n<li>password，email，username都是user的属性，而userId是user的识别符号，所以userId以PathVariable的形式出现在url中，而三个属性出现在ReqeustParam中。</li>\n</ul>\n<p>顺带谈谈逻辑删除，如果一个需求是删除用户的常用地址，这个api的操作类型，我通常也不会设计为DELETE请求，而是同样使用delete来标记操作行为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user/&#123;userId&#125;/address/&#123;addressId&#125;/delete\"</span>,method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"function\">ResultBean&lt;Boolean&gt; <span class=\"title\">updateEmail</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"userId\"</span>)</span> String userId,@<span class=\"title\">PathVariable</span><span class=\"params\">(<span class=\"string\">\"userId\"</span>)</span> String email)</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文从Feign的使用注意点，聊到了RESTFUL接口的设计问题，其实是一个互相补充的行为。接口设计需要载体，所以我以Feign的接口风格谈了谈自己对RESTFUL设计的理解，而Feign中一些坑点，也正是我想要规范RESTFUL设计的出发点。如有对RESTFUL设计不同的理解，欢迎与我沟通。</p>\n"},{"title":"drools用户指南----Cross Products","date":"2017-04-11T05:44:54.000Z","_content":"\n\n\n## Cross Products ##\n之前提到“Cross Products”一词，其实就是一个join操作（译者注：可以理解为笛卡尔积）。想象一下，火灾报警示例的数据与以下规则结合使用，其中没有字段约束：\n\n```java\nrule \"Show Sprinklers\" when\n    $room : Room()\n    $sprinkler : Sprinkler()\nthen\n    System.out.println( \"room:\" + $room.getName() +\n                        \" sprinkler:\" + $sprinkler.getRoom().getName() );\nend\n```\n在SQL术语中，这就像是执行了select * from Room, Sprinkler，Sprinkler 表中的每一行将与Room表中的每一行相连接，从而产生以下输出：\n\n```java\nroom:office sprinkler:office\nroom:office sprinkler:kitchen\nroom:office sprinkler:livingroom\nroom:office sprinkler:bedroom\nroom:kitchen sprinkler:office\nroom:kitchen sprinkler:kitchen\nroom:kitchen sprinkler:livingroom\nroom:kitchen sprinkler:bedroom\nroom:livingroom sprinkler:office\nroom:livingroom sprinkler:kitchen\nroom:livingroom sprinkler:livingroom\nroom:livingroom sprinkler:bedroom\nroom:bedroom sprinkler:office\nroom:bedroom sprinkler:kitchen\nroom:bedroom sprinkler:livingroom\nroom:bedroom sprinkler:bedroom\n```\n这些连接结果显然会变得巨大，它们必然包含冗余数据。 cross products的大小通常是新规则引擎产品性能问题的根源。 从这可以看出，我们希望约束cross products，这便是用可变约束（the variable constraint）完成的。\n\n```java\nrule\nwhen\n    $room : Room()\n    $sprinkler : Sprinkler( room == $room )\nthen\n    System.out.println( \"room:\" + $room.getName() +\n                        \" sprinkler:\" + $sprinkler.getRoom().getName() );\nend\n```\n这就使得筛选结果只有寥寥几行, 这就为每一个Room筛选出了正确的Sprinkler. 在sql中(实际上是HQL) 这样的查询约等于`select * from Room, Sprinkler where Room == Sprinkler.room`.\n\n","source":"_posts/drools用户指南----Cross Products.md","raw":"---\ntitle:  drools用户指南----Cross Products\ndate: 2017-04-11 13:44:54\ntags: \n- 规则引擎\n- drools\ncategories: \n- 规则引擎\n---\n\n\n\n## Cross Products ##\n之前提到“Cross Products”一词，其实就是一个join操作（译者注：可以理解为笛卡尔积）。想象一下，火灾报警示例的数据与以下规则结合使用，其中没有字段约束：\n\n```java\nrule \"Show Sprinklers\" when\n    $room : Room()\n    $sprinkler : Sprinkler()\nthen\n    System.out.println( \"room:\" + $room.getName() +\n                        \" sprinkler:\" + $sprinkler.getRoom().getName() );\nend\n```\n在SQL术语中，这就像是执行了select * from Room, Sprinkler，Sprinkler 表中的每一行将与Room表中的每一行相连接，从而产生以下输出：\n\n```java\nroom:office sprinkler:office\nroom:office sprinkler:kitchen\nroom:office sprinkler:livingroom\nroom:office sprinkler:bedroom\nroom:kitchen sprinkler:office\nroom:kitchen sprinkler:kitchen\nroom:kitchen sprinkler:livingroom\nroom:kitchen sprinkler:bedroom\nroom:livingroom sprinkler:office\nroom:livingroom sprinkler:kitchen\nroom:livingroom sprinkler:livingroom\nroom:livingroom sprinkler:bedroom\nroom:bedroom sprinkler:office\nroom:bedroom sprinkler:kitchen\nroom:bedroom sprinkler:livingroom\nroom:bedroom sprinkler:bedroom\n```\n这些连接结果显然会变得巨大，它们必然包含冗余数据。 cross products的大小通常是新规则引擎产品性能问题的根源。 从这可以看出，我们希望约束cross products，这便是用可变约束（the variable constraint）完成的。\n\n```java\nrule\nwhen\n    $room : Room()\n    $sprinkler : Sprinkler( room == $room )\nthen\n    System.out.println( \"room:\" + $room.getName() +\n                        \" sprinkler:\" + $sprinkler.getRoom().getName() );\nend\n```\n这就使得筛选结果只有寥寥几行, 这就为每一个Room筛选出了正确的Sprinkler. 在sql中(实际上是HQL) 这样的查询约等于`select * from Room, Sprinkler where Room == Sprinkler.room`.\n\n","slug":"drools用户指南----Cross Products","published":1,"updated":"2017-09-04T11:49:26.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zt5001ptwv71s7p36qa","content":"<h2 id=\"Cross-Products\"><a href=\"#Cross-Products\" class=\"headerlink\" title=\"Cross Products\"></a>Cross Products</h2><p>之前提到“Cross Products”一词，其实就是一个join操作（译者注：可以理解为笛卡尔积）。想象一下，火灾报警示例的数据与以下规则结合使用，其中没有字段约束：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"Show Sprinklers\"</span> when</div><div class=\"line\">    $room : Room()</div><div class=\"line\">    $sprinkler : Sprinkler()</div><div class=\"line\">then</div><div class=\"line\">    System.out.println( <span class=\"string\">\"room:\"</span> + $room.getName() +</div><div class=\"line\">                        <span class=\"string\">\" sprinkler:\"</span> + $sprinkler.getRoom().getName() );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>在SQL术语中，这就像是执行了select * from Room, Sprinkler，Sprinkler 表中的每一行将与Room表中的每一行相连接，从而产生以下输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">room:office sprinkler:office</div><div class=\"line\">room:office sprinkler:kitchen</div><div class=\"line\">room:office sprinkler:livingroom</div><div class=\"line\">room:office sprinkler:bedroom</div><div class=\"line\">room:kitchen sprinkler:office</div><div class=\"line\">room:kitchen sprinkler:kitchen</div><div class=\"line\">room:kitchen sprinkler:livingroom</div><div class=\"line\">room:kitchen sprinkler:bedroom</div><div class=\"line\">room:livingroom sprinkler:office</div><div class=\"line\">room:livingroom sprinkler:kitchen</div><div class=\"line\">room:livingroom sprinkler:livingroom</div><div class=\"line\">room:livingroom sprinkler:bedroom</div><div class=\"line\">room:bedroom sprinkler:office</div><div class=\"line\">room:bedroom sprinkler:kitchen</div><div class=\"line\">room:bedroom sprinkler:livingroom</div><div class=\"line\">room:bedroom sprinkler:bedroom</div></pre></td></tr></table></figure>\n<p>这些连接结果显然会变得巨大，它们必然包含冗余数据。 cross products的大小通常是新规则引擎产品性能问题的根源。 从这可以看出，我们希望约束cross products，这便是用可变约束（the variable constraint）完成的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule</div><div class=\"line\">when</div><div class=\"line\">    $room : Room()</div><div class=\"line\">    $sprinkler : Sprinkler( room == $room )</div><div class=\"line\">then</div><div class=\"line\">    System.out.println( <span class=\"string\">\"room:\"</span> + $room.getName() +</div><div class=\"line\">                        <span class=\"string\">\" sprinkler:\"</span> + $sprinkler.getRoom().getName() );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>这就使得筛选结果只有寥寥几行, 这就为每一个Room筛选出了正确的Sprinkler. 在sql中(实际上是HQL) 这样的查询约等于<code>select * from Room, Sprinkler where Room == Sprinkler.room</code>.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Cross-Products\"><a href=\"#Cross-Products\" class=\"headerlink\" title=\"Cross Products\"></a>Cross Products</h2><p>之前提到“Cross Products”一词，其实就是一个join操作（译者注：可以理解为笛卡尔积）。想象一下，火灾报警示例的数据与以下规则结合使用，其中没有字段约束：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"Show Sprinklers\"</span> when</div><div class=\"line\">    $room : Room()</div><div class=\"line\">    $sprinkler : Sprinkler()</div><div class=\"line\">then</div><div class=\"line\">    System.out.println( <span class=\"string\">\"room:\"</span> + $room.getName() +</div><div class=\"line\">                        <span class=\"string\">\" sprinkler:\"</span> + $sprinkler.getRoom().getName() );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>在SQL术语中，这就像是执行了select * from Room, Sprinkler，Sprinkler 表中的每一行将与Room表中的每一行相连接，从而产生以下输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">room:office sprinkler:office</div><div class=\"line\">room:office sprinkler:kitchen</div><div class=\"line\">room:office sprinkler:livingroom</div><div class=\"line\">room:office sprinkler:bedroom</div><div class=\"line\">room:kitchen sprinkler:office</div><div class=\"line\">room:kitchen sprinkler:kitchen</div><div class=\"line\">room:kitchen sprinkler:livingroom</div><div class=\"line\">room:kitchen sprinkler:bedroom</div><div class=\"line\">room:livingroom sprinkler:office</div><div class=\"line\">room:livingroom sprinkler:kitchen</div><div class=\"line\">room:livingroom sprinkler:livingroom</div><div class=\"line\">room:livingroom sprinkler:bedroom</div><div class=\"line\">room:bedroom sprinkler:office</div><div class=\"line\">room:bedroom sprinkler:kitchen</div><div class=\"line\">room:bedroom sprinkler:livingroom</div><div class=\"line\">room:bedroom sprinkler:bedroom</div></pre></td></tr></table></figure>\n<p>这些连接结果显然会变得巨大，它们必然包含冗余数据。 cross products的大小通常是新规则引擎产品性能问题的根源。 从这可以看出，我们希望约束cross products，这便是用可变约束（the variable constraint）完成的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule</div><div class=\"line\">when</div><div class=\"line\">    $room : Room()</div><div class=\"line\">    $sprinkler : Sprinkler( room == $room )</div><div class=\"line\">then</div><div class=\"line\">    System.out.println( <span class=\"string\">\"room:\"</span> + $room.getName() +</div><div class=\"line\">                        <span class=\"string\">\" sprinkler:\"</span> + $sprinkler.getRoom().getName() );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>这就使得筛选结果只有寥寥几行, 这就为每一个Room筛选出了正确的Sprinkler. 在sql中(实际上是HQL) 这样的查询约等于<code>select * from Room, Sprinkler where Room == Sprinkler.room</code>.</p>\n"},{"title":"java trick--String.intern()","date":"2016-11-07T15:16:52.000Z","_content":"\n\n\n《深入理解java虚拟机》第二版中对`String.intern()`方法的讲解中所举的例子非常有意思\n\n不了解String.intern()的朋友要理解他其实也很容易，它返回的是一个字符串在字符串常亮池中的引用。直接看下面的demo\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        String str1 = new StringBuilder(\"计算机\").append(\"软件\").toString();\n        System.out.println(str1.intern() == str1);\n\n        String str2 = new StringBuilder(\"ja\").append(\"va\").toString();\n        System.out.println(str2.intern() == str2);\n    }\n}\n```\n两者输出的结果如下：\n\n```\ntrue\nfalse\n```\n我用的jdk版本为`Oracle JDK7u45`。简单来说，就是一个很奇怪的现象，为什么`java`这个字符串在类加载之前就已经加载到常量池了？\n\n我在知乎找到了具体的说明，如下：\n\n```java\npackage sun.misc;\n\nimport java.io.PrintStream;\n\npublic class Version {\n    private static final String launcher_name = \"java\";\n    private static final String java_version = \"1.7.0_79\";\n    private static final String java_runtime_name = \"Java(TM) SE Runtime Environment\";\n    private static final String java_runtime_version = \"1.7.0_79-b15\";\n    ...\n}\n```\n\n而HotSpot JVM的实现会在类加载时先调用：\n\n```java\npublic final class System{\n\t\t...\n private static void initializeSystemClass() {\n\t\t...\n        sun.misc.Version.init();\n        ...\n    }\n\t    ...\n}\n```\n原来是sun.misc.Version这个类在起作用。\n\n","source":"_posts/java trick--String.intern().md","raw":"---\ntitle: java trick--String.intern()\ndate: 2016-11-07 23:16:52\ntags: \n- JAVA\ncategories: \n- JAVA\n---\n\n\n\n《深入理解java虚拟机》第二版中对`String.intern()`方法的讲解中所举的例子非常有意思\n\n不了解String.intern()的朋友要理解他其实也很容易，它返回的是一个字符串在字符串常亮池中的引用。直接看下面的demo\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        String str1 = new StringBuilder(\"计算机\").append(\"软件\").toString();\n        System.out.println(str1.intern() == str1);\n\n        String str2 = new StringBuilder(\"ja\").append(\"va\").toString();\n        System.out.println(str2.intern() == str2);\n    }\n}\n```\n两者输出的结果如下：\n\n```\ntrue\nfalse\n```\n我用的jdk版本为`Oracle JDK7u45`。简单来说，就是一个很奇怪的现象，为什么`java`这个字符串在类加载之前就已经加载到常量池了？\n\n我在知乎找到了具体的说明，如下：\n\n```java\npackage sun.misc;\n\nimport java.io.PrintStream;\n\npublic class Version {\n    private static final String launcher_name = \"java\";\n    private static final String java_version = \"1.7.0_79\";\n    private static final String java_runtime_name = \"Java(TM) SE Runtime Environment\";\n    private static final String java_runtime_version = \"1.7.0_79-b15\";\n    ...\n}\n```\n\n而HotSpot JVM的实现会在类加载时先调用：\n\n```java\npublic final class System{\n\t\t...\n private static void initializeSystemClass() {\n\t\t...\n        sun.misc.Version.init();\n        ...\n    }\n\t    ...\n}\n```\n原来是sun.misc.Version这个类在起作用。\n\n","slug":"java trick--String.intern()","published":1,"updated":"2017-09-04T11:49:26.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zt6001qtwv73vwlo1tt","content":"<p>《深入理解java虚拟机》第二版中对<code>String.intern()</code>方法的讲解中所举的例子非常有意思</p>\n<p>不了解String.intern()的朋友要理解他其实也很容易，它返回的是一个字符串在字符串常亮池中的引用。直接看下面的demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        String str1 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"计算机\"</span>).append(<span class=\"string\">\"软件\"</span>).toString();</div><div class=\"line\">        System.out.println(str1.intern() == str1);</div><div class=\"line\"></div><div class=\"line\">        String str2 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"ja\"</span>).append(<span class=\"string\">\"va\"</span>).toString();</div><div class=\"line\">        System.out.println(str2.intern() == str2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>两者输出的结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">true</div><div class=\"line\">false</div></pre></td></tr></table></figure>\n<p>我用的jdk版本为<code>Oracle JDK7u45</code>。简单来说，就是一个很奇怪的现象，为什么<code>java</code>这个字符串在类加载之前就已经加载到常量池了？</p>\n<p>我在知乎找到了具体的说明，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> sun.misc;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.PrintStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Version</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String launcher_name = <span class=\"string\">\"java\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String java_version = <span class=\"string\">\"1.7.0_79\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String java_runtime_name = <span class=\"string\">\"Java(TM) SE Runtime Environment\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String java_runtime_version = <span class=\"string\">\"1.7.0_79-b15\"</span>;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而HotSpot JVM的实现会在类加载时先调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">System</span></span>&#123;</div><div class=\"line\">\t\t...</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeSystemClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">        sun.misc.Version.init();</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">\t    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>原来是sun.misc.Version这个类在起作用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>《深入理解java虚拟机》第二版中对<code>String.intern()</code>方法的讲解中所举的例子非常有意思</p>\n<p>不了解String.intern()的朋友要理解他其实也很容易，它返回的是一个字符串在字符串常亮池中的引用。直接看下面的demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        String str1 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"计算机\"</span>).append(<span class=\"string\">\"软件\"</span>).toString();</div><div class=\"line\">        System.out.println(str1.intern() == str1);</div><div class=\"line\"></div><div class=\"line\">        String str2 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">\"ja\"</span>).append(<span class=\"string\">\"va\"</span>).toString();</div><div class=\"line\">        System.out.println(str2.intern() == str2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>两者输出的结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">true</div><div class=\"line\">false</div></pre></td></tr></table></figure>\n<p>我用的jdk版本为<code>Oracle JDK7u45</code>。简单来说，就是一个很奇怪的现象，为什么<code>java</code>这个字符串在类加载之前就已经加载到常量池了？</p>\n<p>我在知乎找到了具体的说明，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> sun.misc;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.PrintStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Version</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String launcher_name = <span class=\"string\">\"java\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String java_version = <span class=\"string\">\"1.7.0_79\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String java_runtime_name = <span class=\"string\">\"Java(TM) SE Runtime Environment\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String java_runtime_version = <span class=\"string\">\"1.7.0_79-b15\"</span>;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>而HotSpot JVM的实现会在类加载时先调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">System</span></span>&#123;</div><div class=\"line\">\t\t...</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initializeSystemClass</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t...</div><div class=\"line\">        sun.misc.Version.init();</div><div class=\"line\">        ...</div><div class=\"line\">    &#125;</div><div class=\"line\">\t    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>原来是sun.misc.Version这个类在起作用。</p>\n"},{"title":"Hello World","date":"2016-08-16T07:52:52.000Z","_content":"\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-08-16 15:52:52\ntags: \n- Spring\n- Validation\ncategories: \n- Spring\n---\n\n","slug":"hello-world","published":1,"updated":"2017-09-04T11:49:26.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zt8001utwv7769qhwkn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"java trick--String.intern()","date":"2016-11-07T15:00:52.000Z","_content":"\n看一段代码：\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Integer a=100,b=100,c=150,d=150;\n        System.out.println(a==b);\n        System.out.println(c==d);\n    }\n}\n```\n这段代码会输出什么？\n\n不加留意的人可能会理所当然的认为两个答案会是一致的，但结果却是：\n\n```\ntrue\nfalse\n```\n下面一个很好解释，因为自动拆装箱机制，比较的是两者的引用，而不是值，所以为false，那么为什么前者是同一个引用呢？\n\n来看看Integer这个类，首先是自动拆装箱会调用`valueOf()`方法\n\n```java\npublic static Integer valueOf(int i) {\n        assert IntegerCache.high >= 127;\n        if (i >= IntegerCache.low && i <= IntegerCache.high)\n            return IntegerCache.cache[i + (-IntegerCache.low)];\n        return new Integer(i);\n    }\n```\n这里并不是简单的返回`new Integer(i)` 而是判断了一下int的数值，Integer的存在一个缓存机制，默认用一个IntegerCache缓存了`[IntegerCache.low,IntegerCache.high]`的引用,其中IntegerCache这个内部类真正在做缓存\n\n```java\nprivate static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n\n        static {\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =\n                sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n            if (integerCacheHighPropValue != null) {\n                int i = parseInt(integerCacheHighPropValue);\n                i = Math.max(i, 127);\n                // Maximum array size is Integer.MAX_VALUE\n                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n            }\n            high = h;\n\n            cache = new Integer[(high - low) + 1];\n            int j = low;\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n        }\n\n        private IntegerCache() {}\n    }\n```\n所以就出现了最开始的一个小trick\n\n\n\n","source":"_posts/java trick--intergerCache.md","raw":"---\ntitle: java trick--String.intern()\ndate: 2016-11-07 23:00:52\ntags: \n- JAVA\ncategories: \n- JAVA\n---\n\n看一段代码：\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Integer a=100,b=100,c=150,d=150;\n        System.out.println(a==b);\n        System.out.println(c==d);\n    }\n}\n```\n这段代码会输出什么？\n\n不加留意的人可能会理所当然的认为两个答案会是一致的，但结果却是：\n\n```\ntrue\nfalse\n```\n下面一个很好解释，因为自动拆装箱机制，比较的是两者的引用，而不是值，所以为false，那么为什么前者是同一个引用呢？\n\n来看看Integer这个类，首先是自动拆装箱会调用`valueOf()`方法\n\n```java\npublic static Integer valueOf(int i) {\n        assert IntegerCache.high >= 127;\n        if (i >= IntegerCache.low && i <= IntegerCache.high)\n            return IntegerCache.cache[i + (-IntegerCache.low)];\n        return new Integer(i);\n    }\n```\n这里并不是简单的返回`new Integer(i)` 而是判断了一下int的数值，Integer的存在一个缓存机制，默认用一个IntegerCache缓存了`[IntegerCache.low,IntegerCache.high]`的引用,其中IntegerCache这个内部类真正在做缓存\n\n```java\nprivate static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n\n        static {\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =\n                sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n            if (integerCacheHighPropValue != null) {\n                int i = parseInt(integerCacheHighPropValue);\n                i = Math.max(i, 127);\n                // Maximum array size is Integer.MAX_VALUE\n                h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n            }\n            high = h;\n\n            cache = new Integer[(high - low) + 1];\n            int j = low;\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n        }\n\n        private IntegerCache() {}\n    }\n```\n所以就出现了最开始的一个小trick\n\n\n\n","slug":"java trick--intergerCache","published":1,"updated":"2017-09-04T11:49:26.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3ztb001xtwv75gzorz65","content":"<p>看一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Integer a=<span class=\"number\">100</span>,b=<span class=\"number\">100</span>,c=<span class=\"number\">150</span>,d=<span class=\"number\">150</span>;</div><div class=\"line\">        System.out.println(a==b);</div><div class=\"line\">        System.out.println(c==d);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段代码会输出什么？</p>\n<p>不加留意的人可能会理所当然的认为两个答案会是一致的，但结果却是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">true</div><div class=\"line\">false</div></pre></td></tr></table></figure>\n<p>下面一个很好解释，因为自动拆装箱机制，比较的是两者的引用，而不是值，所以为false，那么为什么前者是同一个引用呢？</p>\n<p>来看看Integer这个类，首先是自动拆装箱会调用<code>valueOf()</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class=\"line\">            <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这里并不是简单的返回<code>new Integer(i)</code> 而是判断了一下int的数值，Integer的存在一个缓存机制，默认用一个IntegerCache缓存了<code>[IntegerCache.low,IntegerCache.high]</code>的引用,其中IntegerCache这个内部类真正在做缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerCache</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> low = -<span class=\"number\">128</span>;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> high;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer cache[];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// high value may be configured by property</span></div><div class=\"line\">            <span class=\"keyword\">int</span> h = <span class=\"number\">127</span>;</div><div class=\"line\">            String integerCacheHighPropValue =</div><div class=\"line\">                sun.misc.VM.getSavedProperty(<span class=\"string\">\"java.lang.Integer.IntegerCache.high\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (integerCacheHighPropValue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> i = parseInt(integerCacheHighPropValue);</div><div class=\"line\">                i = Math.max(i, <span class=\"number\">127</span>);</div><div class=\"line\">                <span class=\"comment\">// Maximum array size is Integer.MAX_VALUE</span></div><div class=\"line\">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            high = h;</div><div class=\"line\"></div><div class=\"line\">            cache = <span class=\"keyword\">new</span> Integer[(high - low) + <span class=\"number\">1</span>];</div><div class=\"line\">            <span class=\"keyword\">int</span> j = low;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; cache.length; k++)</div><div class=\"line\">                cache[k] = <span class=\"keyword\">new</span> Integer(j++);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">IntegerCache</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>所以就出现了最开始的一个小trick</p>\n","site":{"data":{}},"excerpt":"","more":"<p>看一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Integer a=<span class=\"number\">100</span>,b=<span class=\"number\">100</span>,c=<span class=\"number\">150</span>,d=<span class=\"number\">150</span>;</div><div class=\"line\">        System.out.println(a==b);</div><div class=\"line\">        System.out.println(c==d);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段代码会输出什么？</p>\n<p>不加留意的人可能会理所当然的认为两个答案会是一致的，但结果却是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">true</div><div class=\"line\">false</div></pre></td></tr></table></figure>\n<p>下面一个很好解释，因为自动拆装箱机制，比较的是两者的引用，而不是值，所以为false，那么为什么前者是同一个引用呢？</p>\n<p>来看看Integer这个类，首先是自动拆装箱会调用<code>valueOf()</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class=\"line\">            <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这里并不是简单的返回<code>new Integer(i)</code> 而是判断了一下int的数值，Integer的存在一个缓存机制，默认用一个IntegerCache缓存了<code>[IntegerCache.low,IntegerCache.high]</code>的引用,其中IntegerCache这个内部类真正在做缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerCache</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> low = -<span class=\"number\">128</span>;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> high;</div><div class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer cache[];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// high value may be configured by property</span></div><div class=\"line\">            <span class=\"keyword\">int</span> h = <span class=\"number\">127</span>;</div><div class=\"line\">            String integerCacheHighPropValue =</div><div class=\"line\">                sun.misc.VM.getSavedProperty(<span class=\"string\">\"java.lang.Integer.IntegerCache.high\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (integerCacheHighPropValue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> i = parseInt(integerCacheHighPropValue);</div><div class=\"line\">                i = Math.max(i, <span class=\"number\">127</span>);</div><div class=\"line\">                <span class=\"comment\">// Maximum array size is Integer.MAX_VALUE</span></div><div class=\"line\">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            high = h;</div><div class=\"line\"></div><div class=\"line\">            cache = <span class=\"keyword\">new</span> Integer[(high - low) + <span class=\"number\">1</span>];</div><div class=\"line\">            <span class=\"keyword\">int</span> j = low;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; cache.length; k++)</div><div class=\"line\">                cache[k] = <span class=\"keyword\">new</span> Integer(j++);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">IntegerCache</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>所以就出现了最开始的一个小trick</p>\n"},{"title":"java trick--String.intern()","date":"2016-11-07T14:03:52.000Z","_content":"\n\n\n多线程在使用`system.out.println`时要留一个有意思的地方\n\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        Thread thread = new MyThread();\n        thread.start();\n        System.out.println(\"end\");\n    }\n}\n\nclass MyThread extends Thread {\n\n    private int i = 0;\n\n    @Override\n    public void run() {\n        while (true) {\n            i++;\n            System.out.println(i);\n        }\n    }\n}\n```\n主线程另起一个线程，然后在主线程最后打印一个`end`，猜猜看结果是什么？`end`会不会打印？\n![这里写图片描述](http://img.blog.csdn.net/20161107224558403)\n主线程一直被Mythread占用\n原因就在于`system.out.println`是一个同步方法\n\n```java\n/**\n     * Prints an integer and then terminate the line.  This method behaves as\n     * though it invokes <code>{@link #print(int)}</code> and then\n     * <code>{@link #println()}</code>.\n     *\n     * @param x  The <code>int</code> to be printed.\n     */\n    public void println(int x) {\n        synchronized (this) {\n            print(x);\n            newLine();\n        }\n    }\n```\n\n\n\n\n\n","source":"_posts/java trick--system.out.println.md","raw":"---\ntitle: java trick--String.intern()\ndate: 2016-11-07 22:03:52\ntags: \n- JAVA\ncategories: \n- JAVA\n---\n\n\n\n多线程在使用`system.out.println`时要留一个有意思的地方\n\n```java\npublic class Main {\n\n    public static void main(String[] args) {\n        Thread thread = new MyThread();\n        thread.start();\n        System.out.println(\"end\");\n    }\n}\n\nclass MyThread extends Thread {\n\n    private int i = 0;\n\n    @Override\n    public void run() {\n        while (true) {\n            i++;\n            System.out.println(i);\n        }\n    }\n}\n```\n主线程另起一个线程，然后在主线程最后打印一个`end`，猜猜看结果是什么？`end`会不会打印？\n![这里写图片描述](http://img.blog.csdn.net/20161107224558403)\n主线程一直被Mythread占用\n原因就在于`system.out.println`是一个同步方法\n\n```java\n/**\n     * Prints an integer and then terminate the line.  This method behaves as\n     * though it invokes <code>{@link #print(int)}</code> and then\n     * <code>{@link #println()}</code>.\n     *\n     * @param x  The <code>int</code> to be printed.\n     */\n    public void println(int x) {\n        synchronized (this) {\n            print(x);\n            newLine();\n        }\n    }\n```\n\n\n\n\n\n","slug":"java trick--system.out.println","published":1,"updated":"2017-09-04T11:49:26.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3ztg0022twv7kbc4w5m8","content":"<p>多线程在使用<code>system.out.println</code>时要留一个有意思的地方</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Thread thread = <span class=\"keyword\">new</span> MyThread();</div><div class=\"line\">        thread.start();</div><div class=\"line\">        System.out.println(<span class=\"string\">\"end\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">            System.out.println(i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主线程另起一个线程，然后在主线程最后打印一个<code>end</code>，猜猜看结果是什么？<code>end</code>会不会打印？<br><img src=\"http://img.blog.csdn.net/20161107224558403\" alt=\"这里写图片描述\"><br>主线程一直被Mythread占用<br>原因就在于<code>system.out.println</code>是一个同步方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Prints an integer and then terminate the line.  This method behaves as</span></div><div class=\"line\"><span class=\"comment\">     * though it invokes &lt;code&gt;&#123;<span class=\"doctag\">@link</span> #print(int)&#125;&lt;/code&gt; and then</span></div><div class=\"line\"><span class=\"comment\">     * &lt;code&gt;&#123;<span class=\"doctag\">@link</span> #println()&#125;&lt;/code&gt;.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> x  The &lt;code&gt;int&lt;/code&gt; to be printed.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            print(x);</div><div class=\"line\">            newLine();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>多线程在使用<code>system.out.println</code>时要留一个有意思的地方</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Thread thread = <span class=\"keyword\">new</span> MyThread();</div><div class=\"line\">        thread.start();</div><div class=\"line\">        System.out.println(<span class=\"string\">\"end\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">            System.out.println(i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主线程另起一个线程，然后在主线程最后打印一个<code>end</code>，猜猜看结果是什么？<code>end</code>会不会打印？<br><img src=\"http://img.blog.csdn.net/20161107224558403\" alt=\"这里写图片描述\"><br>主线程一直被Mythread占用<br>原因就在于<code>system.out.println</code>是一个同步方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Prints an integer and then terminate the line.  This method behaves as</span></div><div class=\"line\"><span class=\"comment\">     * though it invokes &lt;code&gt;&#123;<span class=\"doctag\">@link</span> #print(int)&#125;&lt;/code&gt; and then</span></div><div class=\"line\"><span class=\"comment\">     * &lt;code&gt;&#123;<span class=\"doctag\">@link</span> #println()&#125;&lt;/code&gt;.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> x  The &lt;code&gt;int&lt;/code&gt; to be printed.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            print(x);</div><div class=\"line\">            newLine();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n"},{"title":"drools用户指南----stateless session（无状态会话）的使用","date":"2017-04-11T04:51:59.000Z","_content":"\n\n\n## stateless session 无状态会话 ##\n\nDrools规则引擎中有如此多的用例和诸多功能，它变得令人难以置信。不过不用担心，复杂性是分层的，你可以用简单的用例来逐步了解drools。\n\n无状态会话，不使用推理，形成最简单的用例。无状态会话可以被称为函数传递一些数据，然后再接收一些结果。无状态会话的一些常见用例有以下但不限于：\n\n1. 验证\n  这个人有资格获得抵押吗？\n2. 计算\n  计算抵押保费。\n3. 路由和过滤\n  将传入的邮件（如电子邮件）过滤到文件夹中。\n  将传入的邮件发送到目的地。\n\n所以让我们从使用驾驶执照应用程序的一个非常简单的例子开始吧。\n\n```java\npublic class Applicant {\n    private String name;\n    private int age;\n    private boolean valid;\n    // getter and setter methods here\n}\n```\n\n现在我们有了我们的数据模型，我们可以写出我们的第一个规则。我们假设应用程序使用规则来拒绝不符合规则的申请。由于这是一个简单的验证用例，我们将添加一条规则来取消任何18岁以下的申请人的资格。\n\n```java\npackage com.company.license\n\nrule \"Is of valid age\"\nwhen\n    $a : Applicant( age < 18 )\nthen\n    $a.setValid( false );\nend\n```\n\n<!-- more -->\n\n为了使引擎了解数据，所以可以根据规则进行处理，我们必须插入数据，就像数据库一样。当申请人实例插入到引擎中时，将根据规则的约束进行评估，在这种情况下，这只是一个规则的两个约束条件。我们说两个，因为申请人类型是第一个对象类型约束，而age <18是第二个字段约束。对象类型约束及其零个或多个字段约束被称为模式。当插入的实例同时满足对象类型约束和所有字段约束时，它被称为匹配。`$a`是一个绑定变量，它允许我们引用匹配的对象。其属性可以更新。美元字符（'$'）是可选的，但它有助于区分变量名称和字段名称。匹配模式与插入数据的过程并不奇怪，通常被称为模式匹配。\n\n要使用这个规则，有必要把它放在一个Drools文件中，只是一个带有.drl扩展名的纯文本文件，简称为“Drools Rule Language”。我们来调用`licenseApplication.drl`这个文件，并将其存储在Kie Project中。 Kie项目具有正常的Maven项目的结构，并附加一个可以创建的`KieBase`和`KieSession`文件（kmodule.xml）。该文件必须放在Maven项目的`resources/META-INF`文件夹中，而所有其他Drools工件（如包含前一规则的`licenseApplication.drl`）必须存储在资源文件夹或其下的任何其他子文件夹中。\n\n由于为所有配置方面提供了有意义的默认值，所以最简单的kmodule.xml文件只能包含一个空的kmodule标签，如下所示：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<kmodule xmlns=\"http://www.drools.org/xsd/kmodule\"/>\n```\n\n此时，可以从类路径创建一个KieContainer来读取要构建的文件。\n\n```java\nKieServices kieServices = KieServices.Factory.get();\nKieContainer kContainer = kieServices.getKieClasspathContainer();\n```\n\n上面的代码段编译了类路径中找到的所有DRL文件，并将该编译结果`KieModule`放在`KieContainer`中。如果没有错误，我们现在可以从`KieContainer`创建我们的会话并执行一些数据：\n\n```java\nStatelessKieSession kSession = kContainer.newStatelessKieSession();\nApplicant applicant = new Applicant( \"Mr John Smith\", 16 );\nassertTrue( applicant.isValid() );\nksession.execute( applicant );\nassertFalse( applicant.isValid() );\n```\n\n上述代码根据规则执行数据。由于申请人年龄未满18岁，申请被标记为无效。\n\n到目前为止，我们只使用了一个实例，但是如果我们想要使用多个实例呢？我们可以执行任何实现Iterable的对象，如集合。我们再添加一个名为Application的类，它有应用程序的日期，我们还将布尔有效字段移到Application类。\n\n```java\npublic class Applicant {\n    private String name;\n    private int age;\n    // getter and setter methods here\n}\n\npublic class Application {\n    private Date dateApplied;\n    private boolean valid;\n    // getter and setter methods here\n}\n```\n\n我们还将添加另一条规则来验证申请是否在一段时间内进行。\n\n```java\npackage com.company.license\n\nrule \"Is of valid age\"\nwhen\n    Applicant( age < 18 )\n    $a : Application()     \nthen\n    $a.setValid( false );\nend\n\nrule \"Application was made this year\"\nwhen\n    $a : Application( dateApplied > \"01-jan-2009\" )     \nthen\n    $a.setValid( false );\nend\n```\n\n不幸的是，Java数组不实现Iterable接口，所以我们必须使用JDK转换器方法Arrays.asList（...）。下面显示的代码针对一个可迭代列表执行，其中在触发任何匹配的规则之前插入所有集合元素。\n\n```java\nStatelessKieSession kSession = kContainer.newStatelessKieSession();\nApplicant applicant = new Applicant( \"Mr John Smith\", 16 );\nApplication application = new Application();\nassertTrue( application.isValid() );\nksession.execute( Arrays.asList( new Object[] { application, applicant } ) );\nassertFalse( application.isValid() );\n```\n\n执行的两个执行方法（Object object）和execute（Iterable对象）实际上是接口BatchExecutor的方法execute（Command命令）的便利方法。\n\nKieCommands命令工厂可以像KIE A​​PI的所有其他工厂一样从KieServices获取，用于创建命令，以便以下操作相当于执行（Iterable it）：\n\n```java\nksession.execute( kieServices.getCommands().newInsertElements( Arrays.asList( new Object[] { application, applicant } ) );\n```\n\n批处理执行器和命令工厂在使用多个命令和输出标识符以获取结果时特别有用。\n```java\nKieCommands kieCommands = kieServices.getCommands();\nList<Command> cmds = new ArrayList<Command>();\ncmds.add( kieCommands.newInsert( new Person( \"Mr John Smith\" ), \"mrSmith\", true, null ) );\ncmds.add( kieCommands.newInsert( new Person( \"Mr John Doe\" ), \"mrDoe\", true, null ) );\nBatchExecutionResults results = ksession.execute( kieCommands.newBatchExecution( cmds ) );\nassertEquals( new Person( \"Mr John Smith\" ), results.getValue( \"mrSmith\" ) );\n```\n\n","source":"_posts/drools用户指南----stateless session（无状态会话）的使用.md","raw":"---\ntitle: drools用户指南----stateless session（无状态会话）的使用\ndate: 2017-04-11 12:51:59\ntags: \n- 规则引擎\n- drools\ncategories: \n- 规则引擎\n---\n\n\n\n## stateless session 无状态会话 ##\n\nDrools规则引擎中有如此多的用例和诸多功能，它变得令人难以置信。不过不用担心，复杂性是分层的，你可以用简单的用例来逐步了解drools。\n\n无状态会话，不使用推理，形成最简单的用例。无状态会话可以被称为函数传递一些数据，然后再接收一些结果。无状态会话的一些常见用例有以下但不限于：\n\n1. 验证\n  这个人有资格获得抵押吗？\n2. 计算\n  计算抵押保费。\n3. 路由和过滤\n  将传入的邮件（如电子邮件）过滤到文件夹中。\n  将传入的邮件发送到目的地。\n\n所以让我们从使用驾驶执照应用程序的一个非常简单的例子开始吧。\n\n```java\npublic class Applicant {\n    private String name;\n    private int age;\n    private boolean valid;\n    // getter and setter methods here\n}\n```\n\n现在我们有了我们的数据模型，我们可以写出我们的第一个规则。我们假设应用程序使用规则来拒绝不符合规则的申请。由于这是一个简单的验证用例，我们将添加一条规则来取消任何18岁以下的申请人的资格。\n\n```java\npackage com.company.license\n\nrule \"Is of valid age\"\nwhen\n    $a : Applicant( age < 18 )\nthen\n    $a.setValid( false );\nend\n```\n\n<!-- more -->\n\n为了使引擎了解数据，所以可以根据规则进行处理，我们必须插入数据，就像数据库一样。当申请人实例插入到引擎中时，将根据规则的约束进行评估，在这种情况下，这只是一个规则的两个约束条件。我们说两个，因为申请人类型是第一个对象类型约束，而age <18是第二个字段约束。对象类型约束及其零个或多个字段约束被称为模式。当插入的实例同时满足对象类型约束和所有字段约束时，它被称为匹配。`$a`是一个绑定变量，它允许我们引用匹配的对象。其属性可以更新。美元字符（'$'）是可选的，但它有助于区分变量名称和字段名称。匹配模式与插入数据的过程并不奇怪，通常被称为模式匹配。\n\n要使用这个规则，有必要把它放在一个Drools文件中，只是一个带有.drl扩展名的纯文本文件，简称为“Drools Rule Language”。我们来调用`licenseApplication.drl`这个文件，并将其存储在Kie Project中。 Kie项目具有正常的Maven项目的结构，并附加一个可以创建的`KieBase`和`KieSession`文件（kmodule.xml）。该文件必须放在Maven项目的`resources/META-INF`文件夹中，而所有其他Drools工件（如包含前一规则的`licenseApplication.drl`）必须存储在资源文件夹或其下的任何其他子文件夹中。\n\n由于为所有配置方面提供了有意义的默认值，所以最简单的kmodule.xml文件只能包含一个空的kmodule标签，如下所示：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<kmodule xmlns=\"http://www.drools.org/xsd/kmodule\"/>\n```\n\n此时，可以从类路径创建一个KieContainer来读取要构建的文件。\n\n```java\nKieServices kieServices = KieServices.Factory.get();\nKieContainer kContainer = kieServices.getKieClasspathContainer();\n```\n\n上面的代码段编译了类路径中找到的所有DRL文件，并将该编译结果`KieModule`放在`KieContainer`中。如果没有错误，我们现在可以从`KieContainer`创建我们的会话并执行一些数据：\n\n```java\nStatelessKieSession kSession = kContainer.newStatelessKieSession();\nApplicant applicant = new Applicant( \"Mr John Smith\", 16 );\nassertTrue( applicant.isValid() );\nksession.execute( applicant );\nassertFalse( applicant.isValid() );\n```\n\n上述代码根据规则执行数据。由于申请人年龄未满18岁，申请被标记为无效。\n\n到目前为止，我们只使用了一个实例，但是如果我们想要使用多个实例呢？我们可以执行任何实现Iterable的对象，如集合。我们再添加一个名为Application的类，它有应用程序的日期，我们还将布尔有效字段移到Application类。\n\n```java\npublic class Applicant {\n    private String name;\n    private int age;\n    // getter and setter methods here\n}\n\npublic class Application {\n    private Date dateApplied;\n    private boolean valid;\n    // getter and setter methods here\n}\n```\n\n我们还将添加另一条规则来验证申请是否在一段时间内进行。\n\n```java\npackage com.company.license\n\nrule \"Is of valid age\"\nwhen\n    Applicant( age < 18 )\n    $a : Application()     \nthen\n    $a.setValid( false );\nend\n\nrule \"Application was made this year\"\nwhen\n    $a : Application( dateApplied > \"01-jan-2009\" )     \nthen\n    $a.setValid( false );\nend\n```\n\n不幸的是，Java数组不实现Iterable接口，所以我们必须使用JDK转换器方法Arrays.asList（...）。下面显示的代码针对一个可迭代列表执行，其中在触发任何匹配的规则之前插入所有集合元素。\n\n```java\nStatelessKieSession kSession = kContainer.newStatelessKieSession();\nApplicant applicant = new Applicant( \"Mr John Smith\", 16 );\nApplication application = new Application();\nassertTrue( application.isValid() );\nksession.execute( Arrays.asList( new Object[] { application, applicant } ) );\nassertFalse( application.isValid() );\n```\n\n执行的两个执行方法（Object object）和execute（Iterable对象）实际上是接口BatchExecutor的方法execute（Command命令）的便利方法。\n\nKieCommands命令工厂可以像KIE A​​PI的所有其他工厂一样从KieServices获取，用于创建命令，以便以下操作相当于执行（Iterable it）：\n\n```java\nksession.execute( kieServices.getCommands().newInsertElements( Arrays.asList( new Object[] { application, applicant } ) );\n```\n\n批处理执行器和命令工厂在使用多个命令和输出标识符以获取结果时特别有用。\n```java\nKieCommands kieCommands = kieServices.getCommands();\nList<Command> cmds = new ArrayList<Command>();\ncmds.add( kieCommands.newInsert( new Person( \"Mr John Smith\" ), \"mrSmith\", true, null ) );\ncmds.add( kieCommands.newInsert( new Person( \"Mr John Doe\" ), \"mrDoe\", true, null ) );\nBatchExecutionResults results = ksession.execute( kieCommands.newBatchExecution( cmds ) );\nassertEquals( new Person( \"Mr John Smith\" ), results.getValue( \"mrSmith\" ) );\n```\n\n","slug":"drools用户指南----stateless session（无状态会话）的使用","published":1,"updated":"2017-09-04T11:49:26.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zti0024twv78carn62p","content":"<h2 id=\"stateless-session-无状态会话\"><a href=\"#stateless-session-无状态会话\" class=\"headerlink\" title=\"stateless session 无状态会话\"></a>stateless session 无状态会话</h2><p>Drools规则引擎中有如此多的用例和诸多功能，它变得令人难以置信。不过不用担心，复杂性是分层的，你可以用简单的用例来逐步了解drools。</p>\n<p>无状态会话，不使用推理，形成最简单的用例。无状态会话可以被称为函数传递一些数据，然后再接收一些结果。无状态会话的一些常见用例有以下但不限于：</p>\n<ol>\n<li>验证<br>这个人有资格获得抵押吗？</li>\n<li>计算<br>计算抵押保费。</li>\n<li>路由和过滤<br>将传入的邮件（如电子邮件）过滤到文件夹中。<br>将传入的邮件发送到目的地。</li>\n</ol>\n<p>所以让我们从使用驾驶执照应用程序的一个非常简单的例子开始吧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Applicant</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> valid;</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在我们有了我们的数据模型，我们可以写出我们的第一个规则。我们假设应用程序使用规则来拒绝不符合规则的申请。由于这是一个简单的验证用例，我们将添加一条规则来取消任何18岁以下的申请人的资格。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.company.license</div><div class=\"line\"></div><div class=\"line\">rule <span class=\"string\">\"Is of valid age\"</span></div><div class=\"line\">when</div><div class=\"line\">    $a : Applicant( age &lt; <span class=\"number\">18</span> )</div><div class=\"line\">then</div><div class=\"line\">    $a.setValid( <span class=\"keyword\">false</span> );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>为了使引擎了解数据，所以可以根据规则进行处理，我们必须插入数据，就像数据库一样。当申请人实例插入到引擎中时，将根据规则的约束进行评估，在这种情况下，这只是一个规则的两个约束条件。我们说两个，因为申请人类型是第一个对象类型约束，而age &lt;18是第二个字段约束。对象类型约束及其零个或多个字段约束被称为模式。当插入的实例同时满足对象类型约束和所有字段约束时，它被称为匹配。<code>$a</code>是一个绑定变量，它允许我们引用匹配的对象。其属性可以更新。美元字符（’$’）是可选的，但它有助于区分变量名称和字段名称。匹配模式与插入数据的过程并不奇怪，通常被称为模式匹配。</p>\n<p>要使用这个规则，有必要把它放在一个Drools文件中，只是一个带有.drl扩展名的纯文本文件，简称为“Drools Rule Language”。我们来调用<code>licenseApplication.drl</code>这个文件，并将其存储在Kie Project中。 Kie项目具有正常的Maven项目的结构，并附加一个可以创建的<code>KieBase</code>和<code>KieSession</code>文件（kmodule.xml）。该文件必须放在Maven项目的<code>resources/META-INF</code>文件夹中，而所有其他Drools工件（如包含前一规则的<code>licenseApplication.drl</code>）必须存储在资源文件夹或其下的任何其他子文件夹中。</p>\n<p>由于为所有配置方面提供了有意义的默认值，所以最简单的kmodule.xml文件只能包含一个空的kmodule标签，如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">kmodule</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.drools.org/xsd/kmodule\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>此时，可以从类路径创建一个KieContainer来读取要构建的文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">KieServices kieServices = KieServices.Factory.get();</div><div class=\"line\">KieContainer kContainer = kieServices.getKieClasspathContainer();</div></pre></td></tr></table></figure>\n<p>上面的代码段编译了类路径中找到的所有DRL文件，并将该编译结果<code>KieModule</code>放在<code>KieContainer</code>中。如果没有错误，我们现在可以从<code>KieContainer</code>创建我们的会话并执行一些数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">StatelessKieSession kSession = kContainer.newStatelessKieSession();</div><div class=\"line\">Applicant applicant = <span class=\"keyword\">new</span> Applicant( <span class=\"string\">\"Mr John Smith\"</span>, <span class=\"number\">16</span> );</div><div class=\"line\">assertTrue( applicant.isValid() );</div><div class=\"line\">ksession.execute( applicant );</div><div class=\"line\">assertFalse( applicant.isValid() );</div></pre></td></tr></table></figure>\n<p>上述代码根据规则执行数据。由于申请人年龄未满18岁，申请被标记为无效。</p>\n<p>到目前为止，我们只使用了一个实例，但是如果我们想要使用多个实例呢？我们可以执行任何实现Iterable的对象，如集合。我们再添加一个名为Application的类，它有应用程序的日期，我们还将布尔有效字段移到Application类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Applicant</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Date dateApplied;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> valid;</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们还将添加另一条规则来验证申请是否在一段时间内进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.company.license</div><div class=\"line\"></div><div class=\"line\">rule <span class=\"string\">\"Is of valid age\"</span></div><div class=\"line\">when</div><div class=\"line\">    Applicant( age &lt; <span class=\"number\">18</span> )</div><div class=\"line\">    $a : Application()     </div><div class=\"line\">then</div><div class=\"line\">    $a.setValid( <span class=\"keyword\">false</span> );</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">rule <span class=\"string\">\"Application was made this year\"</span></div><div class=\"line\">when</div><div class=\"line\">    $a : Application( dateApplied &gt; <span class=\"string\">\"01-jan-2009\"</span> )     </div><div class=\"line\">then</div><div class=\"line\">    $a.setValid( <span class=\"keyword\">false</span> );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>不幸的是，Java数组不实现Iterable接口，所以我们必须使用JDK转换器方法Arrays.asList（…）。下面显示的代码针对一个可迭代列表执行，其中在触发任何匹配的规则之前插入所有集合元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">StatelessKieSession kSession = kContainer.newStatelessKieSession();</div><div class=\"line\">Applicant applicant = <span class=\"keyword\">new</span> Applicant( <span class=\"string\">\"Mr John Smith\"</span>, <span class=\"number\">16</span> );</div><div class=\"line\">Application application = <span class=\"keyword\">new</span> Application();</div><div class=\"line\">assertTrue( application.isValid() );</div><div class=\"line\">ksession.execute( Arrays.asList( <span class=\"keyword\">new</span> Object[] &#123; application, applicant &#125; ) );</div><div class=\"line\">assertFalse( application.isValid() );</div></pre></td></tr></table></figure>\n<p>执行的两个执行方法（Object object）和execute（Iterable对象）实际上是接口BatchExecutor的方法execute（Command命令）的便利方法。</p>\n<p>KieCommands命令工厂可以像KIE A​​PI的所有其他工厂一样从KieServices获取，用于创建命令，以便以下操作相当于执行（Iterable it）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ksession.execute( kieServices.getCommands().newInsertElements( Arrays.asList( <span class=\"keyword\">new</span> Object[] &#123; application, applicant &#125; ) );</div></pre></td></tr></table></figure>\n<p>批处理执行器和命令工厂在使用多个命令和输出标识符以获取结果时特别有用。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">KieCommands kieCommands = kieServices.getCommands();</div><div class=\"line\">List&lt;Command&gt; cmds = <span class=\"keyword\">new</span> ArrayList&lt;Command&gt;();</div><div class=\"line\">cmds.add( kieCommands.newInsert( <span class=\"keyword\">new</span> Person( <span class=\"string\">\"Mr John Smith\"</span> ), <span class=\"string\">\"mrSmith\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">null</span> ) );</div><div class=\"line\">cmds.add( kieCommands.newInsert( <span class=\"keyword\">new</span> Person( <span class=\"string\">\"Mr John Doe\"</span> ), <span class=\"string\">\"mrDoe\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">null</span> ) );</div><div class=\"line\">BatchExecutionResults results = ksession.execute( kieCommands.newBatchExecution( cmds ) );</div><div class=\"line\">assertEquals( <span class=\"keyword\">new</span> Person( <span class=\"string\">\"Mr John Smith\"</span> ), results.getValue( <span class=\"string\">\"mrSmith\"</span> ) );</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"stateless-session-无状态会话\"><a href=\"#stateless-session-无状态会话\" class=\"headerlink\" title=\"stateless session 无状态会话\"></a>stateless session 无状态会话</h2><p>Drools规则引擎中有如此多的用例和诸多功能，它变得令人难以置信。不过不用担心，复杂性是分层的，你可以用简单的用例来逐步了解drools。</p>\n<p>无状态会话，不使用推理，形成最简单的用例。无状态会话可以被称为函数传递一些数据，然后再接收一些结果。无状态会话的一些常见用例有以下但不限于：</p>\n<ol>\n<li>验证<br>这个人有资格获得抵押吗？</li>\n<li>计算<br>计算抵押保费。</li>\n<li>路由和过滤<br>将传入的邮件（如电子邮件）过滤到文件夹中。<br>将传入的邮件发送到目的地。</li>\n</ol>\n<p>所以让我们从使用驾驶执照应用程序的一个非常简单的例子开始吧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Applicant</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> valid;</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在我们有了我们的数据模型，我们可以写出我们的第一个规则。我们假设应用程序使用规则来拒绝不符合规则的申请。由于这是一个简单的验证用例，我们将添加一条规则来取消任何18岁以下的申请人的资格。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.company.license</div><div class=\"line\"></div><div class=\"line\">rule <span class=\"string\">\"Is of valid age\"</span></div><div class=\"line\">when</div><div class=\"line\">    $a : Applicant( age &lt; <span class=\"number\">18</span> )</div><div class=\"line\">then</div><div class=\"line\">    $a.setValid( <span class=\"keyword\">false</span> );</div><div class=\"line\">end</div></pre></td></tr></table></figure>","more":"<p>为了使引擎了解数据，所以可以根据规则进行处理，我们必须插入数据，就像数据库一样。当申请人实例插入到引擎中时，将根据规则的约束进行评估，在这种情况下，这只是一个规则的两个约束条件。我们说两个，因为申请人类型是第一个对象类型约束，而age &lt;18是第二个字段约束。对象类型约束及其零个或多个字段约束被称为模式。当插入的实例同时满足对象类型约束和所有字段约束时，它被称为匹配。<code>$a</code>是一个绑定变量，它允许我们引用匹配的对象。其属性可以更新。美元字符（’$’）是可选的，但它有助于区分变量名称和字段名称。匹配模式与插入数据的过程并不奇怪，通常被称为模式匹配。</p>\n<p>要使用这个规则，有必要把它放在一个Drools文件中，只是一个带有.drl扩展名的纯文本文件，简称为“Drools Rule Language”。我们来调用<code>licenseApplication.drl</code>这个文件，并将其存储在Kie Project中。 Kie项目具有正常的Maven项目的结构，并附加一个可以创建的<code>KieBase</code>和<code>KieSession</code>文件（kmodule.xml）。该文件必须放在Maven项目的<code>resources/META-INF</code>文件夹中，而所有其他Drools工件（如包含前一规则的<code>licenseApplication.drl</code>）必须存储在资源文件夹或其下的任何其他子文件夹中。</p>\n<p>由于为所有配置方面提供了有意义的默认值，所以最简单的kmodule.xml文件只能包含一个空的kmodule标签，如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">kmodule</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.drools.org/xsd/kmodule\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>此时，可以从类路径创建一个KieContainer来读取要构建的文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">KieServices kieServices = KieServices.Factory.get();</div><div class=\"line\">KieContainer kContainer = kieServices.getKieClasspathContainer();</div></pre></td></tr></table></figure>\n<p>上面的代码段编译了类路径中找到的所有DRL文件，并将该编译结果<code>KieModule</code>放在<code>KieContainer</code>中。如果没有错误，我们现在可以从<code>KieContainer</code>创建我们的会话并执行一些数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">StatelessKieSession kSession = kContainer.newStatelessKieSession();</div><div class=\"line\">Applicant applicant = <span class=\"keyword\">new</span> Applicant( <span class=\"string\">\"Mr John Smith\"</span>, <span class=\"number\">16</span> );</div><div class=\"line\">assertTrue( applicant.isValid() );</div><div class=\"line\">ksession.execute( applicant );</div><div class=\"line\">assertFalse( applicant.isValid() );</div></pre></td></tr></table></figure>\n<p>上述代码根据规则执行数据。由于申请人年龄未满18岁，申请被标记为无效。</p>\n<p>到目前为止，我们只使用了一个实例，但是如果我们想要使用多个实例呢？我们可以执行任何实现Iterable的对象，如集合。我们再添加一个名为Application的类，它有应用程序的日期，我们还将布尔有效字段移到Application类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Applicant</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Date dateApplied;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> valid;</div><div class=\"line\">    <span class=\"comment\">// getter and setter methods here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们还将添加另一条规则来验证申请是否在一段时间内进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.company.license</div><div class=\"line\"></div><div class=\"line\">rule <span class=\"string\">\"Is of valid age\"</span></div><div class=\"line\">when</div><div class=\"line\">    Applicant( age &lt; <span class=\"number\">18</span> )</div><div class=\"line\">    $a : Application()     </div><div class=\"line\">then</div><div class=\"line\">    $a.setValid( <span class=\"keyword\">false</span> );</div><div class=\"line\">end</div><div class=\"line\"></div><div class=\"line\">rule <span class=\"string\">\"Application was made this year\"</span></div><div class=\"line\">when</div><div class=\"line\">    $a : Application( dateApplied &gt; <span class=\"string\">\"01-jan-2009\"</span> )     </div><div class=\"line\">then</div><div class=\"line\">    $a.setValid( <span class=\"keyword\">false</span> );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>不幸的是，Java数组不实现Iterable接口，所以我们必须使用JDK转换器方法Arrays.asList（…）。下面显示的代码针对一个可迭代列表执行，其中在触发任何匹配的规则之前插入所有集合元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">StatelessKieSession kSession = kContainer.newStatelessKieSession();</div><div class=\"line\">Applicant applicant = <span class=\"keyword\">new</span> Applicant( <span class=\"string\">\"Mr John Smith\"</span>, <span class=\"number\">16</span> );</div><div class=\"line\">Application application = <span class=\"keyword\">new</span> Application();</div><div class=\"line\">assertTrue( application.isValid() );</div><div class=\"line\">ksession.execute( Arrays.asList( <span class=\"keyword\">new</span> Object[] &#123; application, applicant &#125; ) );</div><div class=\"line\">assertFalse( application.isValid() );</div></pre></td></tr></table></figure>\n<p>执行的两个执行方法（Object object）和execute（Iterable对象）实际上是接口BatchExecutor的方法execute（Command命令）的便利方法。</p>\n<p>KieCommands命令工厂可以像KIE A​​PI的所有其他工厂一样从KieServices获取，用于创建命令，以便以下操作相当于执行（Iterable it）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ksession.execute( kieServices.getCommands().newInsertElements( Arrays.asList( <span class=\"keyword\">new</span> Object[] &#123; application, applicant &#125; ) );</div></pre></td></tr></table></figure>\n<p>批处理执行器和命令工厂在使用多个命令和输出标识符以获取结果时特别有用。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">KieCommands kieCommands = kieServices.getCommands();</div><div class=\"line\">List&lt;Command&gt; cmds = <span class=\"keyword\">new</span> ArrayList&lt;Command&gt;();</div><div class=\"line\">cmds.add( kieCommands.newInsert( <span class=\"keyword\">new</span> Person( <span class=\"string\">\"Mr John Smith\"</span> ), <span class=\"string\">\"mrSmith\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">null</span> ) );</div><div class=\"line\">cmds.add( kieCommands.newInsert( <span class=\"keyword\">new</span> Person( <span class=\"string\">\"Mr John Doe\"</span> ), <span class=\"string\">\"mrDoe\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">null</span> ) );</div><div class=\"line\">BatchExecutionResults results = ksession.execute( kieCommands.newBatchExecution( cmds ) );</div><div class=\"line\">assertEquals( <span class=\"keyword\">new</span> Person( <span class=\"string\">\"Mr John Smith\"</span> ), results.getValue( <span class=\"string\">\"mrSmith\"</span> ) );</div></pre></td></tr></table></figure></p>"},{"title":"drools用户指南----Methods vs Rules","date":"2017-04-11T05:28:44.000Z","_content":"\n\n\n## Methods vs Rules ##\n\n人们经常混淆方法和规则，初学者经常会问：“我如何理解规则的含义？“ 在最后一节之后，你会对规则的使用得心应手，答案也变得显而易见的，但在这之前，先让我们总结一下方法判断和规则的差异。\n\n```java\npublic void helloWorld(Person person) {\n    if ( person.getName().equals( \"Chuck\" ) ) {\n        System.out.println( \"Hello Chuck\" );\n    }\n}\n```\n\n1. 方法是被直接调用的\n2. 需要传递具体的实例\n3. 一个调用导致一次执行（One call results in a single execution）。\n\n```java\nrule \"Hello World\" when\n    Person( name == \"Chuck\" )\nthen\n    System.out.println( \"Hello Chuck\" );\nend\n```\n\n1. 只要将其插入引擎，就可以通过匹配任何数据执行规则。\n2. 规则永远无法被直接调用，而只能触发\n3. 无法将特定的实例传递给规则\n4. 根据匹配，一个规则可能会触发一次或多次，或根本不被触发。\n\n","source":"_posts/drools用户指南----Methods vs Rules.md","raw":"---\ntitle:  drools用户指南----Methods vs Rules\ndate: 2017-04-11 13:28:44\ntags: \n- 规则引擎\n- drools\ncategories: \n- 规则引擎\n---\n\n\n\n## Methods vs Rules ##\n\n人们经常混淆方法和规则，初学者经常会问：“我如何理解规则的含义？“ 在最后一节之后，你会对规则的使用得心应手，答案也变得显而易见的，但在这之前，先让我们总结一下方法判断和规则的差异。\n\n```java\npublic void helloWorld(Person person) {\n    if ( person.getName().equals( \"Chuck\" ) ) {\n        System.out.println( \"Hello Chuck\" );\n    }\n}\n```\n\n1. 方法是被直接调用的\n2. 需要传递具体的实例\n3. 一个调用导致一次执行（One call results in a single execution）。\n\n```java\nrule \"Hello World\" when\n    Person( name == \"Chuck\" )\nthen\n    System.out.println( \"Hello Chuck\" );\nend\n```\n\n1. 只要将其插入引擎，就可以通过匹配任何数据执行规则。\n2. 规则永远无法被直接调用，而只能触发\n3. 无法将特定的实例传递给规则\n4. 根据匹配，一个规则可能会触发一次或多次，或根本不被触发。\n\n","slug":"drools用户指南----Methods vs Rules","published":1,"updated":"2017-09-04T11:49:26.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3ztk0029twv7tnn3fh0i","content":"<h2 id=\"Methods-vs-Rules\"><a href=\"#Methods-vs-Rules\" class=\"headerlink\" title=\"Methods vs Rules\"></a>Methods vs Rules</h2><p>人们经常混淆方法和规则，初学者经常会问：“我如何理解规则的含义？“ 在最后一节之后，你会对规则的使用得心应手，答案也变得显而易见的，但在这之前，先让我们总结一下方法判断和规则的差异。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">helloWorld</span><span class=\"params\">(Person person)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( person.getName().equals( <span class=\"string\">\"Chuck\"</span> ) ) &#123;</div><div class=\"line\">        System.out.println( <span class=\"string\">\"Hello Chuck\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>方法是被直接调用的</li>\n<li>需要传递具体的实例</li>\n<li>一个调用导致一次执行（One call results in a single execution）。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"Hello World\"</span> when</div><div class=\"line\">    Person( name == <span class=\"string\">\"Chuck\"</span> )</div><div class=\"line\">then</div><div class=\"line\">    System.out.println( <span class=\"string\">\"Hello Chuck\"</span> );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<ol>\n<li>只要将其插入引擎，就可以通过匹配任何数据执行规则。</li>\n<li>规则永远无法被直接调用，而只能触发</li>\n<li>无法将特定的实例传递给规则</li>\n<li>根据匹配，一个规则可能会触发一次或多次，或根本不被触发。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Methods-vs-Rules\"><a href=\"#Methods-vs-Rules\" class=\"headerlink\" title=\"Methods vs Rules\"></a>Methods vs Rules</h2><p>人们经常混淆方法和规则，初学者经常会问：“我如何理解规则的含义？“ 在最后一节之后，你会对规则的使用得心应手，答案也变得显而易见的，但在这之前，先让我们总结一下方法判断和规则的差异。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">helloWorld</span><span class=\"params\">(Person person)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( person.getName().equals( <span class=\"string\">\"Chuck\"</span> ) ) &#123;</div><div class=\"line\">        System.out.println( <span class=\"string\">\"Hello Chuck\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>方法是被直接调用的</li>\n<li>需要传递具体的实例</li>\n<li>一个调用导致一次执行（One call results in a single execution）。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">rule <span class=\"string\">\"Hello World\"</span> when</div><div class=\"line\">    Person( name == <span class=\"string\">\"Chuck\"</span> )</div><div class=\"line\">then</div><div class=\"line\">    System.out.println( <span class=\"string\">\"Hello Chuck\"</span> );</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<ol>\n<li>只要将其插入引擎，就可以通过匹配任何数据执行规则。</li>\n<li>规则永远无法被直接调用，而只能触发</li>\n<li>无法将特定的实例传递给规则</li>\n<li>根据匹配，一个规则可能会触发一次或多次，或根本不被触发。</li>\n</ol>\n"},{"title":"java并发实践--ConcurrentHashMap与CAS","date":"2017-03-11T16:02:00.000Z","_content":"\n## 前言\n\n最近在做接口限流时涉及到了一个有意思问题，牵扯出了关于concurrentHashMap的一些用法，以及CAS的一些概念。限流算法很多，我主要就以最简单的计数器法来做引。先抽象化一下需求：统计每个接口访问的次数。一个接口对应一个url，也就是一个字符串，每调用一次对其进行加一处理。可能出现的问题主要有三个：\n\n  1. 多线程访问，需要选择合适的并发容器\n  2. 分布式下多个实例统计接口流量需要共享内存\n  3. 流量统计应该尽可能不损耗服务器性能\n\n但这次的博客并不是想描述怎么去实现接口限流，而是主要想描述一下遇到的问题，所以，第二点暂时不考虑，即不使用redis。\n\n说到并发的字符串统计，立即让人联想到的数据结构便是`ConcurrentHashpMap<String,Long> urlCounter;`\n\n<!-- more -->\n\n如果你刚刚接触并发可能会写出如代码清单1的代码\n\n## 代码清单1\n\n```JAVA\npublic class CounterDemo1 {\n\n    private final Map<String, Long> urlCounter = new ConcurrentHashMap<>();\n\n\t//接口调用次数+1\n    public long increase(String url) {\n        Long oldValue = urlCounter.get(url);\n        Long newValue = (oldValue == null) ? 1L : oldValue + 1;\n        urlCounter.put(url, newValue);\n        return newValue;\n    }\n\n\t//获取调用次数\n    public Long getCount(String url){\n        return urlCounter.get(url);\n    }\n\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newFixedThreadPool(10);\n        final CounterDemo1 counterDemo = new CounterDemo1();\n        int callTime = 100000;\n        final String url = \"http://localhost:8080/hello\";\n        CountDownLatch countDownLatch = new CountDownLatch(callTime);\n        //模拟并发情况下的接口调用统计\n        for(int i=0;i<callTime;i++){\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    counterDemo.increase(url);\n                    countDownLatch.countDown();\n                }\n            });\n        }\n        try {\n            countDownLatch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        executor.shutdown();\n        //等待所有线程统计完成后输出调用次数\n        System.out.println(\"调用次数：\"+counterDemo.getCount(url));\n    }\n}\n\nconsole output：\n调用次数：96526\n```\n都说concurrentHashMap是个线程安全的并发容器，所以没有显示加同步，实际效果呢并不如所愿。\n\n问题就出在increase方法，concurrentHashMap能保证的是每一个操作（put，get,delete...）本身是线程安全的，但是我们的increase方法，对concurrentHashMap的操作是一个组合，先get再put，所以多个线程的操作出现了覆盖。如果对整个increase方法加锁，那么又违背了我们使用并发容器的初衷，因为锁的开销很大。我们有没有方法改善统计方法呢？\n代码清单2罗列了concurrentHashMap父接口concurrentMap的一个非常有用但是又常常被忽略的方法。\n\n## 代码清单2\n\n```JAVA\n\t/**\n     * Replaces the entry for a key only if currently mapped to a given value.\n     * This is equivalent to\n     *  <pre> {@code\n     * if (map.containsKey(key) && Objects.equals(map.get(key), oldValue)) {\n     *   map.put(key, newValue);\n     *   return true;\n     * } else\n     *   return false;\n     * }</pre>\n     *\n     * except that the action is performed atomically.\n     */\n    boolean replace(K key, V oldValue, V newValue);\n```\n这其实就是一个最典型的CAS操作，`except that the action is performed atomically.`这句话真是帮了大忙，我们可以保证比较和设置是一个原子操作，当A线程尝试在increase时，旧值被修改的话就回导致replace失效，而我们只需要用一个循环，不断获取最新值，直到成功replace一次，即可完成统计。\n\n改进后的increase方法如下\n\n## 代码清单3\n\n```java\npublic long increase2(String url) {\n    Long oldValue, newValue;\n    while (true) {\n      oldValue = urlCounter.get(url);\n      if (oldValue == null) {\n        newValue = 1l;\n        //初始化成功，退出循环\n        if (urlCounter.putIfAbsent(url, 1l) == null)\n          break;\n        //如果初始化失败，说明其他线程已经初始化过了\n      } else {\n        newValue = oldValue + 1;\n        //+1成功，退出循环\n        if (urlCounter.replace(url, oldValue, newValue))\n          break;\n        //如果+1失败，说明其他线程已经修改过了旧值\n      }\n    }\n    return newValue;\n}\n\nconsole output：\n调用次数：100000\n```\n再次调用后获得了正确的结果，上述方案看上去比较繁琐，因为第一次调用时需要进行一次初始化，所以多了一个判断，也用到了另一个CAS操作putIfAbsent，他的源代码描述如下：\n\n## 代码清单4\n\n```java\n/**\n     * If the specified key is not already associated\n     * with a value, associate it with the given value.\n     * This is equivalent to\n     *  <pre> {@code\n     * if (!map.containsKey(key))\n     *   return map.put(key, value);\n     * else\n     *   return map.get(key);\n     * }</pre>\n     *\n     * except that the action is performed atomically.\n     *\n     * @implNote This implementation intentionally re-abstracts the\n     * inappropriate default provided in {@code Map}.\n     *\n     * @param key key with which the specified value is to be associated\n     * @param value value to be associated with the specified key\n     * @return the previous value associated with the specified key, or\n     *         {@code null} if there was no mapping for the key.\n     *         (A {@code null} return can also indicate that the map\n     *         previously associated {@code null} with the key,\n     *         if the implementation supports null values.)\n     */\n     V putIfAbsent(K key, V value);\n```\n简单翻译如下：“如果（调用该方法时）key-value 已经存在，则返回那个 value 值。如果调用时 map 里没有找到 key 的 mapping，返回一个 null 值”。值得注意点的一点就是concurrentHashMap的value是不能存在null值的。实际上呢，上述的方案也可以把Long替换成AtomicLong，可以简化实现， ConcurrentHashMap<String,AtomicLong>。\n\njuc包下的各类Atomic类也提供了大量的CAS操作，可以不用加锁，也可以实现原子操作，以后看到其他类库有类似比较后设值，不存在即设值，加一并获取返回值等等一系列的组合操作合并成了一个接口的，都应该意识到很有可能是CAS操作。如redis的IncreamtAndGet，setIfAbsent，Atomic类的一系列api，以及上述描述的concurrentHashMap中相关的api（不同api的CAS组合接口可能名称类似，但是返回值含义不大相同，我们使用CAS的api很大程度需要获取其返回值来进行分支处理，所以一定要搞清楚每个接口的特性。如redistemplate提供的setIfAbsent，当设置成功时返回的是true，而与之名称类似的ConcurrentHashMap的putIfAbsent在设置成功后返回的是null，要足够小心，加以区分）。凡事没有绝对，但是一个大体上正确的编程建议便是**能使用编程类库并发容器（线程安全的类）完成的操作，尽量不要显示加锁同步**。\n\n再扯一句关于CAS的知识点，CAS不能代替同步，由它引出了一个经典的ABA问题，即修改过一次之后，第二次修改又变为了原值，可能会在一些逻辑中出现问题。不过对于计数这个逻辑而言，只是单调的增，不会受到影响。\n\n最后介绍一个和主题非常贴切的并发容器：Guava包中AtomicLongMap，使用他来做计数器非常容易。\n\n## 代码清单5\n\n```java\nprivate AtomicLongMap<String> urlCounter3 = AtomicLongMap.create();\n\npublic long increase3(String url) {\n  long newValue = urlCounter3.incrementAndGet(url);\n  return newValue;\n}\n\n\npublic Long getCount3(String url) {\n  return urlCounter3.get(url);\n}\n```\n看一下他的源码就会发现，其实和代码清单3思路差不多，只不过功能更完善了一点。\n\n和CAS很像的操作，我之前的博客中提到过数据库的乐观锁，用version字段来进行并发控制，其实也是一种compare and swap的思想。\n\n杂谈：网上很多对ConcurrentHashMap的介绍，众所周知，这是一个用分段锁实现的一个线程安全的map容器，但是真正对他的使用场景有介绍的少之又少。面试中能知道这个容器的人也确实不少，问出去，也就回答一个分段锁就没有下文了，但我觉得吧，有时候一知半解反而会比不知道更可怕。\n\n## 参考\n\n1. https://my.oschina.net/mononite/blog/144329\n2. http://www.tuicool.com/articles/zuui6z\n\n\n\n","source":"_posts/java并发实践--ConcurrentHashMap与CAS.md","raw":"---\ntitle:  java并发实践--ConcurrentHashMap与CAS\ndate: 2017-03-12 00:02:00\ntags: \n- JAVA\n- 多线程\ncategories: \n- JAVA\n---\n\n## 前言\n\n最近在做接口限流时涉及到了一个有意思问题，牵扯出了关于concurrentHashMap的一些用法，以及CAS的一些概念。限流算法很多，我主要就以最简单的计数器法来做引。先抽象化一下需求：统计每个接口访问的次数。一个接口对应一个url，也就是一个字符串，每调用一次对其进行加一处理。可能出现的问题主要有三个：\n\n  1. 多线程访问，需要选择合适的并发容器\n  2. 分布式下多个实例统计接口流量需要共享内存\n  3. 流量统计应该尽可能不损耗服务器性能\n\n但这次的博客并不是想描述怎么去实现接口限流，而是主要想描述一下遇到的问题，所以，第二点暂时不考虑，即不使用redis。\n\n说到并发的字符串统计，立即让人联想到的数据结构便是`ConcurrentHashpMap<String,Long> urlCounter;`\n\n<!-- more -->\n\n如果你刚刚接触并发可能会写出如代码清单1的代码\n\n## 代码清单1\n\n```JAVA\npublic class CounterDemo1 {\n\n    private final Map<String, Long> urlCounter = new ConcurrentHashMap<>();\n\n\t//接口调用次数+1\n    public long increase(String url) {\n        Long oldValue = urlCounter.get(url);\n        Long newValue = (oldValue == null) ? 1L : oldValue + 1;\n        urlCounter.put(url, newValue);\n        return newValue;\n    }\n\n\t//获取调用次数\n    public Long getCount(String url){\n        return urlCounter.get(url);\n    }\n\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newFixedThreadPool(10);\n        final CounterDemo1 counterDemo = new CounterDemo1();\n        int callTime = 100000;\n        final String url = \"http://localhost:8080/hello\";\n        CountDownLatch countDownLatch = new CountDownLatch(callTime);\n        //模拟并发情况下的接口调用统计\n        for(int i=0;i<callTime;i++){\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    counterDemo.increase(url);\n                    countDownLatch.countDown();\n                }\n            });\n        }\n        try {\n            countDownLatch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        executor.shutdown();\n        //等待所有线程统计完成后输出调用次数\n        System.out.println(\"调用次数：\"+counterDemo.getCount(url));\n    }\n}\n\nconsole output：\n调用次数：96526\n```\n都说concurrentHashMap是个线程安全的并发容器，所以没有显示加同步，实际效果呢并不如所愿。\n\n问题就出在increase方法，concurrentHashMap能保证的是每一个操作（put，get,delete...）本身是线程安全的，但是我们的increase方法，对concurrentHashMap的操作是一个组合，先get再put，所以多个线程的操作出现了覆盖。如果对整个increase方法加锁，那么又违背了我们使用并发容器的初衷，因为锁的开销很大。我们有没有方法改善统计方法呢？\n代码清单2罗列了concurrentHashMap父接口concurrentMap的一个非常有用但是又常常被忽略的方法。\n\n## 代码清单2\n\n```JAVA\n\t/**\n     * Replaces the entry for a key only if currently mapped to a given value.\n     * This is equivalent to\n     *  <pre> {@code\n     * if (map.containsKey(key) && Objects.equals(map.get(key), oldValue)) {\n     *   map.put(key, newValue);\n     *   return true;\n     * } else\n     *   return false;\n     * }</pre>\n     *\n     * except that the action is performed atomically.\n     */\n    boolean replace(K key, V oldValue, V newValue);\n```\n这其实就是一个最典型的CAS操作，`except that the action is performed atomically.`这句话真是帮了大忙，我们可以保证比较和设置是一个原子操作，当A线程尝试在increase时，旧值被修改的话就回导致replace失效，而我们只需要用一个循环，不断获取最新值，直到成功replace一次，即可完成统计。\n\n改进后的increase方法如下\n\n## 代码清单3\n\n```java\npublic long increase2(String url) {\n    Long oldValue, newValue;\n    while (true) {\n      oldValue = urlCounter.get(url);\n      if (oldValue == null) {\n        newValue = 1l;\n        //初始化成功，退出循环\n        if (urlCounter.putIfAbsent(url, 1l) == null)\n          break;\n        //如果初始化失败，说明其他线程已经初始化过了\n      } else {\n        newValue = oldValue + 1;\n        //+1成功，退出循环\n        if (urlCounter.replace(url, oldValue, newValue))\n          break;\n        //如果+1失败，说明其他线程已经修改过了旧值\n      }\n    }\n    return newValue;\n}\n\nconsole output：\n调用次数：100000\n```\n再次调用后获得了正确的结果，上述方案看上去比较繁琐，因为第一次调用时需要进行一次初始化，所以多了一个判断，也用到了另一个CAS操作putIfAbsent，他的源代码描述如下：\n\n## 代码清单4\n\n```java\n/**\n     * If the specified key is not already associated\n     * with a value, associate it with the given value.\n     * This is equivalent to\n     *  <pre> {@code\n     * if (!map.containsKey(key))\n     *   return map.put(key, value);\n     * else\n     *   return map.get(key);\n     * }</pre>\n     *\n     * except that the action is performed atomically.\n     *\n     * @implNote This implementation intentionally re-abstracts the\n     * inappropriate default provided in {@code Map}.\n     *\n     * @param key key with which the specified value is to be associated\n     * @param value value to be associated with the specified key\n     * @return the previous value associated with the specified key, or\n     *         {@code null} if there was no mapping for the key.\n     *         (A {@code null} return can also indicate that the map\n     *         previously associated {@code null} with the key,\n     *         if the implementation supports null values.)\n     */\n     V putIfAbsent(K key, V value);\n```\n简单翻译如下：“如果（调用该方法时）key-value 已经存在，则返回那个 value 值。如果调用时 map 里没有找到 key 的 mapping，返回一个 null 值”。值得注意点的一点就是concurrentHashMap的value是不能存在null值的。实际上呢，上述的方案也可以把Long替换成AtomicLong，可以简化实现， ConcurrentHashMap<String,AtomicLong>。\n\njuc包下的各类Atomic类也提供了大量的CAS操作，可以不用加锁，也可以实现原子操作，以后看到其他类库有类似比较后设值，不存在即设值，加一并获取返回值等等一系列的组合操作合并成了一个接口的，都应该意识到很有可能是CAS操作。如redis的IncreamtAndGet，setIfAbsent，Atomic类的一系列api，以及上述描述的concurrentHashMap中相关的api（不同api的CAS组合接口可能名称类似，但是返回值含义不大相同，我们使用CAS的api很大程度需要获取其返回值来进行分支处理，所以一定要搞清楚每个接口的特性。如redistemplate提供的setIfAbsent，当设置成功时返回的是true，而与之名称类似的ConcurrentHashMap的putIfAbsent在设置成功后返回的是null，要足够小心，加以区分）。凡事没有绝对，但是一个大体上正确的编程建议便是**能使用编程类库并发容器（线程安全的类）完成的操作，尽量不要显示加锁同步**。\n\n再扯一句关于CAS的知识点，CAS不能代替同步，由它引出了一个经典的ABA问题，即修改过一次之后，第二次修改又变为了原值，可能会在一些逻辑中出现问题。不过对于计数这个逻辑而言，只是单调的增，不会受到影响。\n\n最后介绍一个和主题非常贴切的并发容器：Guava包中AtomicLongMap，使用他来做计数器非常容易。\n\n## 代码清单5\n\n```java\nprivate AtomicLongMap<String> urlCounter3 = AtomicLongMap.create();\n\npublic long increase3(String url) {\n  long newValue = urlCounter3.incrementAndGet(url);\n  return newValue;\n}\n\n\npublic Long getCount3(String url) {\n  return urlCounter3.get(url);\n}\n```\n看一下他的源码就会发现，其实和代码清单3思路差不多，只不过功能更完善了一点。\n\n和CAS很像的操作，我之前的博客中提到过数据库的乐观锁，用version字段来进行并发控制，其实也是一种compare and swap的思想。\n\n杂谈：网上很多对ConcurrentHashMap的介绍，众所周知，这是一个用分段锁实现的一个线程安全的map容器，但是真正对他的使用场景有介绍的少之又少。面试中能知道这个容器的人也确实不少，问出去，也就回答一个分段锁就没有下文了，但我觉得吧，有时候一知半解反而会比不知道更可怕。\n\n## 参考\n\n1. https://my.oschina.net/mononite/blog/144329\n2. http://www.tuicool.com/articles/zuui6z\n\n\n\n","slug":"java并发实践--ConcurrentHashMap与CAS","published":1,"updated":"2017-09-04T11:49:26.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3ztn002ctwv7xo1ara8b","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在做接口限流时涉及到了一个有意思问题，牵扯出了关于concurrentHashMap的一些用法，以及CAS的一些概念。限流算法很多，我主要就以最简单的计数器法来做引。先抽象化一下需求：统计每个接口访问的次数。一个接口对应一个url，也就是一个字符串，每调用一次对其进行加一处理。可能出现的问题主要有三个：</p>\n<ol>\n<li>多线程访问，需要选择合适的并发容器</li>\n<li>分布式下多个实例统计接口流量需要共享内存</li>\n<li>流量统计应该尽可能不损耗服务器性能</li>\n</ol>\n<p>但这次的博客并不是想描述怎么去实现接口限流，而是主要想描述一下遇到的问题，所以，第二点暂时不考虑，即不使用redis。</p>\n<p>说到并发的字符串统计，立即让人联想到的数据结构便是<code>ConcurrentHashpMap&lt;String,Long&gt; urlCounter;</code></p>\n<a id=\"more\"></a>\n<p>如果你刚刚接触并发可能会写出如代码清单1的代码</p>\n<h2 id=\"代码清单1\"><a href=\"#代码清单1\" class=\"headerlink\" title=\"代码清单1\"></a>代码清单1</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CounterDemo1</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Long&gt; urlCounter = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//接口调用次数+1</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">increase</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">        Long oldValue = urlCounter.get(url);</div><div class=\"line\">        Long newValue = (oldValue == <span class=\"keyword\">null</span>) ? <span class=\"number\">1L</span> : oldValue + <span class=\"number\">1</span>;</div><div class=\"line\">        urlCounter.put(url, newValue);</div><div class=\"line\">        <span class=\"keyword\">return</span> newValue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//获取调用次数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getCount</span><span class=\"params\">(String url)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> urlCounter.get(url);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        ExecutorService executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        <span class=\"keyword\">final</span> CounterDemo1 counterDemo = <span class=\"keyword\">new</span> CounterDemo1();</div><div class=\"line\">        <span class=\"keyword\">int</span> callTime = <span class=\"number\">100000</span>;</div><div class=\"line\">        <span class=\"keyword\">final</span> String url = <span class=\"string\">\"http://localhost:8080/hello\"</span>;</div><div class=\"line\">        CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(callTime);</div><div class=\"line\">        <span class=\"comment\">//模拟并发情况下的接口调用统计</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;callTime;i++)&#123;</div><div class=\"line\">            executor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    counterDemo.increase(url);</div><div class=\"line\">                    countDownLatch.countDown();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            countDownLatch.await();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        executor.shutdown();</div><div class=\"line\">        <span class=\"comment\">//等待所有线程统计完成后输出调用次数</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"调用次数：\"</span>+counterDemo.getCount(url));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console output：</div><div class=\"line\">调用次数：<span class=\"number\">96526</span></div></pre></td></tr></table></figure>\n<p>都说concurrentHashMap是个线程安全的并发容器，所以没有显示加同步，实际效果呢并不如所愿。</p>\n<p>问题就出在increase方法，concurrentHashMap能保证的是每一个操作（put，get,delete…）本身是线程安全的，但是我们的increase方法，对concurrentHashMap的操作是一个组合，先get再put，所以多个线程的操作出现了覆盖。如果对整个increase方法加锁，那么又违背了我们使用并发容器的初衷，因为锁的开销很大。我们有没有方法改善统计方法呢？<br>代码清单2罗列了concurrentHashMap父接口concurrentMap的一个非常有用但是又常常被忽略的方法。</p>\n<h2 id=\"代码清单2\"><a href=\"#代码清单2\" class=\"headerlink\" title=\"代码清单2\"></a>代码清单2</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">    * Replaces the entry for a key only if currently mapped to a given value.</span></div><div class=\"line\"><span class=\"comment\">    * This is equivalent to</span></div><div class=\"line\"><span class=\"comment\">    *  &lt;pre&gt; &#123;<span class=\"doctag\">@code</span></span></div><div class=\"line\"><span class=\"comment\">    * if (map.containsKey(key) &amp;&amp; Objects.equals(map.get(key), oldValue)) &#123;</span></div><div class=\"line\"><span class=\"comment\">    *   map.put(key, newValue);</span></div><div class=\"line\"><span class=\"comment\">    *   return true;</span></div><div class=\"line\"><span class=\"comment\">    * &#125; else</span></div><div class=\"line\"><span class=\"comment\">    *   return false;</span></div><div class=\"line\"><span class=\"comment\">    * &#125;&lt;/pre&gt;</span></div><div class=\"line\"><span class=\"comment\">    *</span></div><div class=\"line\"><span class=\"comment\">    * except that the action is performed atomically.</span></div><div class=\"line\"><span class=\"comment\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">replace</span><span class=\"params\">(K key, V oldValue, V newValue)</span></span>;</div></pre></td></tr></table></figure>\n<p>这其实就是一个最典型的CAS操作，<code>except that the action is performed atomically.</code>这句话真是帮了大忙，我们可以保证比较和设置是一个原子操作，当A线程尝试在increase时，旧值被修改的话就回导致replace失效，而我们只需要用一个循环，不断获取最新值，直到成功replace一次，即可完成统计。</p>\n<p>改进后的increase方法如下</p>\n<h2 id=\"代码清单3\"><a href=\"#代码清单3\" class=\"headerlink\" title=\"代码清单3\"></a>代码清单3</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">increase2</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">    Long oldValue, newValue;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">      oldValue = urlCounter.get(url);</div><div class=\"line\">      <span class=\"keyword\">if</span> (oldValue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        newValue = <span class=\"number\">1l</span>;</div><div class=\"line\">        <span class=\"comment\">//初始化成功，退出循环</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (urlCounter.putIfAbsent(url, <span class=\"number\">1l</span>) == <span class=\"keyword\">null</span>)</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"comment\">//如果初始化失败，说明其他线程已经初始化过了</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        newValue = oldValue + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"comment\">//+1成功，退出循环</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (urlCounter.replace(url, oldValue, newValue))</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"comment\">//如果+1失败，说明其他线程已经修改过了旧值</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> newValue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console output：</div><div class=\"line\">调用次数：<span class=\"number\">100000</span></div></pre></td></tr></table></figure>\n<p>再次调用后获得了正确的结果，上述方案看上去比较繁琐，因为第一次调用时需要进行一次初始化，所以多了一个判断，也用到了另一个CAS操作putIfAbsent，他的源代码描述如下：</p>\n<h2 id=\"代码清单4\"><a href=\"#代码清单4\" class=\"headerlink\" title=\"代码清单4\"></a>代码清单4</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * If the specified key is not already associated</span></div><div class=\"line\"><span class=\"comment\">     * with a value, associate it with the given value.</span></div><div class=\"line\"><span class=\"comment\">     * This is equivalent to</span></div><div class=\"line\"><span class=\"comment\">     *  &lt;pre&gt; &#123;<span class=\"doctag\">@code</span></span></div><div class=\"line\"><span class=\"comment\">     * if (!map.containsKey(key))</span></div><div class=\"line\"><span class=\"comment\">     *   return map.put(key, value);</span></div><div class=\"line\"><span class=\"comment\">     * else</span></div><div class=\"line\"><span class=\"comment\">     *   return map.get(key);</span></div><div class=\"line\"><span class=\"comment\">     * &#125;&lt;/pre&gt;</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * except that the action is performed atomically.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@implNote</span> This implementation intentionally re-abstracts the</span></div><div class=\"line\"><span class=\"comment\">     * inappropriate default provided in &#123;<span class=\"doctag\">@code</span> Map&#125;.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key key with which the specified value is to be associated</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value value to be associated with the specified key</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value associated with the specified key, or</span></div><div class=\"line\"><span class=\"comment\">     *         &#123;<span class=\"doctag\">@code</span> null&#125; if there was no mapping for the key.</span></div><div class=\"line\"><span class=\"comment\">     *         (A &#123;<span class=\"doctag\">@code</span> null&#125; return can also indicate that the map</span></div><div class=\"line\"><span class=\"comment\">     *         previously associated &#123;<span class=\"doctag\">@code</span> null&#125; with the key,</span></div><div class=\"line\"><span class=\"comment\">     *         if the implementation supports null values.)</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">     <span class=\"function\">V <span class=\"title\">putIfAbsent</span><span class=\"params\">(K key, V value)</span></span>;</div></pre></td></tr></table></figure>\n<p>简单翻译如下：“如果（调用该方法时）key-value 已经存在，则返回那个 value 值。如果调用时 map 里没有找到 key 的 mapping，返回一个 null 值”。值得注意点的一点就是concurrentHashMap的value是不能存在null值的。实际上呢，上述的方案也可以把Long替换成AtomicLong，可以简化实现， ConcurrentHashMap<string,atomiclong>。</string,atomiclong></p>\n<p>juc包下的各类Atomic类也提供了大量的CAS操作，可以不用加锁，也可以实现原子操作，以后看到其他类库有类似比较后设值，不存在即设值，加一并获取返回值等等一系列的组合操作合并成了一个接口的，都应该意识到很有可能是CAS操作。如redis的IncreamtAndGet，setIfAbsent，Atomic类的一系列api，以及上述描述的concurrentHashMap中相关的api（不同api的CAS组合接口可能名称类似，但是返回值含义不大相同，我们使用CAS的api很大程度需要获取其返回值来进行分支处理，所以一定要搞清楚每个接口的特性。如redistemplate提供的setIfAbsent，当设置成功时返回的是true，而与之名称类似的ConcurrentHashMap的putIfAbsent在设置成功后返回的是null，要足够小心，加以区分）。凡事没有绝对，但是一个大体上正确的编程建议便是<strong>能使用编程类库并发容器（线程安全的类）完成的操作，尽量不要显示加锁同步</strong>。</p>\n<p>再扯一句关于CAS的知识点，CAS不能代替同步，由它引出了一个经典的ABA问题，即修改过一次之后，第二次修改又变为了原值，可能会在一些逻辑中出现问题。不过对于计数这个逻辑而言，只是单调的增，不会受到影响。</p>\n<p>最后介绍一个和主题非常贴切的并发容器：Guava包中AtomicLongMap，使用他来做计数器非常容易。</p>\n<h2 id=\"代码清单5\"><a href=\"#代码清单5\" class=\"headerlink\" title=\"代码清单5\"></a>代码清单5</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> AtomicLongMap&lt;String&gt; urlCounter3 = AtomicLongMap.create();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">increase3</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">long</span> newValue = urlCounter3.incrementAndGet(url);</div><div class=\"line\">  <span class=\"keyword\">return</span> newValue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getCount3</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> urlCounter3.get(url);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看一下他的源码就会发现，其实和代码清单3思路差不多，只不过功能更完善了一点。</p>\n<p>和CAS很像的操作，我之前的博客中提到过数据库的乐观锁，用version字段来进行并发控制，其实也是一种compare and swap的思想。</p>\n<p>杂谈：网上很多对ConcurrentHashMap的介绍，众所周知，这是一个用分段锁实现的一个线程安全的map容器，但是真正对他的使用场景有介绍的少之又少。面试中能知道这个容器的人也确实不少，问出去，也就回答一个分段锁就没有下文了，但我觉得吧，有时候一知半解反而会比不知道更可怕。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://my.oschina.net/mononite/blog/144329\" target=\"_blank\" rel=\"external\">https://my.oschina.net/mononite/blog/144329</a></li>\n<li><a href=\"http://www.tuicool.com/articles/zuui6z\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/zuui6z</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在做接口限流时涉及到了一个有意思问题，牵扯出了关于concurrentHashMap的一些用法，以及CAS的一些概念。限流算法很多，我主要就以最简单的计数器法来做引。先抽象化一下需求：统计每个接口访问的次数。一个接口对应一个url，也就是一个字符串，每调用一次对其进行加一处理。可能出现的问题主要有三个：</p>\n<ol>\n<li>多线程访问，需要选择合适的并发容器</li>\n<li>分布式下多个实例统计接口流量需要共享内存</li>\n<li>流量统计应该尽可能不损耗服务器性能</li>\n</ol>\n<p>但这次的博客并不是想描述怎么去实现接口限流，而是主要想描述一下遇到的问题，所以，第二点暂时不考虑，即不使用redis。</p>\n<p>说到并发的字符串统计，立即让人联想到的数据结构便是<code>ConcurrentHashpMap&lt;String,Long&gt; urlCounter;</code></p>","more":"<p>如果你刚刚接触并发可能会写出如代码清单1的代码</p>\n<h2 id=\"代码清单1\"><a href=\"#代码清单1\" class=\"headerlink\" title=\"代码清单1\"></a>代码清单1</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CounterDemo1</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Long&gt; urlCounter = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//接口调用次数+1</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">increase</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">        Long oldValue = urlCounter.get(url);</div><div class=\"line\">        Long newValue = (oldValue == <span class=\"keyword\">null</span>) ? <span class=\"number\">1L</span> : oldValue + <span class=\"number\">1</span>;</div><div class=\"line\">        urlCounter.put(url, newValue);</div><div class=\"line\">        <span class=\"keyword\">return</span> newValue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//获取调用次数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getCount</span><span class=\"params\">(String url)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> urlCounter.get(url);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        ExecutorService executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        <span class=\"keyword\">final</span> CounterDemo1 counterDemo = <span class=\"keyword\">new</span> CounterDemo1();</div><div class=\"line\">        <span class=\"keyword\">int</span> callTime = <span class=\"number\">100000</span>;</div><div class=\"line\">        <span class=\"keyword\">final</span> String url = <span class=\"string\">\"http://localhost:8080/hello\"</span>;</div><div class=\"line\">        CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(callTime);</div><div class=\"line\">        <span class=\"comment\">//模拟并发情况下的接口调用统计</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;callTime;i++)&#123;</div><div class=\"line\">            executor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    counterDemo.increase(url);</div><div class=\"line\">                    countDownLatch.countDown();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            countDownLatch.await();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        executor.shutdown();</div><div class=\"line\">        <span class=\"comment\">//等待所有线程统计完成后输出调用次数</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"调用次数：\"</span>+counterDemo.getCount(url));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console output：</div><div class=\"line\">调用次数：<span class=\"number\">96526</span></div></pre></td></tr></table></figure>\n<p>都说concurrentHashMap是个线程安全的并发容器，所以没有显示加同步，实际效果呢并不如所愿。</p>\n<p>问题就出在increase方法，concurrentHashMap能保证的是每一个操作（put，get,delete…）本身是线程安全的，但是我们的increase方法，对concurrentHashMap的操作是一个组合，先get再put，所以多个线程的操作出现了覆盖。如果对整个increase方法加锁，那么又违背了我们使用并发容器的初衷，因为锁的开销很大。我们有没有方法改善统计方法呢？<br>代码清单2罗列了concurrentHashMap父接口concurrentMap的一个非常有用但是又常常被忽略的方法。</p>\n<h2 id=\"代码清单2\"><a href=\"#代码清单2\" class=\"headerlink\" title=\"代码清单2\"></a>代码清单2</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">    * Replaces the entry for a key only if currently mapped to a given value.</span></div><div class=\"line\"><span class=\"comment\">    * This is equivalent to</span></div><div class=\"line\"><span class=\"comment\">    *  &lt;pre&gt; &#123;<span class=\"doctag\">@code</span></span></div><div class=\"line\"><span class=\"comment\">    * if (map.containsKey(key) &amp;&amp; Objects.equals(map.get(key), oldValue)) &#123;</span></div><div class=\"line\"><span class=\"comment\">    *   map.put(key, newValue);</span></div><div class=\"line\"><span class=\"comment\">    *   return true;</span></div><div class=\"line\"><span class=\"comment\">    * &#125; else</span></div><div class=\"line\"><span class=\"comment\">    *   return false;</span></div><div class=\"line\"><span class=\"comment\">    * &#125;&lt;/pre&gt;</span></div><div class=\"line\"><span class=\"comment\">    *</span></div><div class=\"line\"><span class=\"comment\">    * except that the action is performed atomically.</span></div><div class=\"line\"><span class=\"comment\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">replace</span><span class=\"params\">(K key, V oldValue, V newValue)</span></span>;</div></pre></td></tr></table></figure>\n<p>这其实就是一个最典型的CAS操作，<code>except that the action is performed atomically.</code>这句话真是帮了大忙，我们可以保证比较和设置是一个原子操作，当A线程尝试在increase时，旧值被修改的话就回导致replace失效，而我们只需要用一个循环，不断获取最新值，直到成功replace一次，即可完成统计。</p>\n<p>改进后的increase方法如下</p>\n<h2 id=\"代码清单3\"><a href=\"#代码清单3\" class=\"headerlink\" title=\"代码清单3\"></a>代码清单3</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">increase2</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">    Long oldValue, newValue;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">      oldValue = urlCounter.get(url);</div><div class=\"line\">      <span class=\"keyword\">if</span> (oldValue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        newValue = <span class=\"number\">1l</span>;</div><div class=\"line\">        <span class=\"comment\">//初始化成功，退出循环</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (urlCounter.putIfAbsent(url, <span class=\"number\">1l</span>) == <span class=\"keyword\">null</span>)</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"comment\">//如果初始化失败，说明其他线程已经初始化过了</span></div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        newValue = oldValue + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"comment\">//+1成功，退出循环</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (urlCounter.replace(url, oldValue, newValue))</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"comment\">//如果+1失败，说明其他线程已经修改过了旧值</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> newValue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console output：</div><div class=\"line\">调用次数：<span class=\"number\">100000</span></div></pre></td></tr></table></figure>\n<p>再次调用后获得了正确的结果，上述方案看上去比较繁琐，因为第一次调用时需要进行一次初始化，所以多了一个判断，也用到了另一个CAS操作putIfAbsent，他的源代码描述如下：</p>\n<h2 id=\"代码清单4\"><a href=\"#代码清单4\" class=\"headerlink\" title=\"代码清单4\"></a>代码清单4</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * If the specified key is not already associated</span></div><div class=\"line\"><span class=\"comment\">     * with a value, associate it with the given value.</span></div><div class=\"line\"><span class=\"comment\">     * This is equivalent to</span></div><div class=\"line\"><span class=\"comment\">     *  &lt;pre&gt; &#123;<span class=\"doctag\">@code</span></span></div><div class=\"line\"><span class=\"comment\">     * if (!map.containsKey(key))</span></div><div class=\"line\"><span class=\"comment\">     *   return map.put(key, value);</span></div><div class=\"line\"><span class=\"comment\">     * else</span></div><div class=\"line\"><span class=\"comment\">     *   return map.get(key);</span></div><div class=\"line\"><span class=\"comment\">     * &#125;&lt;/pre&gt;</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * except that the action is performed atomically.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@implNote</span> This implementation intentionally re-abstracts the</span></div><div class=\"line\"><span class=\"comment\">     * inappropriate default provided in &#123;<span class=\"doctag\">@code</span> Map&#125;.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key key with which the specified value is to be associated</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value value to be associated with the specified key</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the previous value associated with the specified key, or</span></div><div class=\"line\"><span class=\"comment\">     *         &#123;<span class=\"doctag\">@code</span> null&#125; if there was no mapping for the key.</span></div><div class=\"line\"><span class=\"comment\">     *         (A &#123;<span class=\"doctag\">@code</span> null&#125; return can also indicate that the map</span></div><div class=\"line\"><span class=\"comment\">     *         previously associated &#123;<span class=\"doctag\">@code</span> null&#125; with the key,</span></div><div class=\"line\"><span class=\"comment\">     *         if the implementation supports null values.)</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">     <span class=\"function\">V <span class=\"title\">putIfAbsent</span><span class=\"params\">(K key, V value)</span></span>;</div></pre></td></tr></table></figure>\n<p>简单翻译如下：“如果（调用该方法时）key-value 已经存在，则返回那个 value 值。如果调用时 map 里没有找到 key 的 mapping，返回一个 null 值”。值得注意点的一点就是concurrentHashMap的value是不能存在null值的。实际上呢，上述的方案也可以把Long替换成AtomicLong，可以简化实现， ConcurrentHashMap<string,atomiclong>。</string,atomiclong></p>\n<p>juc包下的各类Atomic类也提供了大量的CAS操作，可以不用加锁，也可以实现原子操作，以后看到其他类库有类似比较后设值，不存在即设值，加一并获取返回值等等一系列的组合操作合并成了一个接口的，都应该意识到很有可能是CAS操作。如redis的IncreamtAndGet，setIfAbsent，Atomic类的一系列api，以及上述描述的concurrentHashMap中相关的api（不同api的CAS组合接口可能名称类似，但是返回值含义不大相同，我们使用CAS的api很大程度需要获取其返回值来进行分支处理，所以一定要搞清楚每个接口的特性。如redistemplate提供的setIfAbsent，当设置成功时返回的是true，而与之名称类似的ConcurrentHashMap的putIfAbsent在设置成功后返回的是null，要足够小心，加以区分）。凡事没有绝对，但是一个大体上正确的编程建议便是<strong>能使用编程类库并发容器（线程安全的类）完成的操作，尽量不要显示加锁同步</strong>。</p>\n<p>再扯一句关于CAS的知识点，CAS不能代替同步，由它引出了一个经典的ABA问题，即修改过一次之后，第二次修改又变为了原值，可能会在一些逻辑中出现问题。不过对于计数这个逻辑而言，只是单调的增，不会受到影响。</p>\n<p>最后介绍一个和主题非常贴切的并发容器：Guava包中AtomicLongMap，使用他来做计数器非常容易。</p>\n<h2 id=\"代码清单5\"><a href=\"#代码清单5\" class=\"headerlink\" title=\"代码清单5\"></a>代码清单5</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> AtomicLongMap&lt;String&gt; urlCounter3 = AtomicLongMap.create();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">increase3</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">long</span> newValue = urlCounter3.incrementAndGet(url);</div><div class=\"line\">  <span class=\"keyword\">return</span> newValue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getCount3</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> urlCounter3.get(url);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看一下他的源码就会发现，其实和代码清单3思路差不多，只不过功能更完善了一点。</p>\n<p>和CAS很像的操作，我之前的博客中提到过数据库的乐观锁，用version字段来进行并发控制，其实也是一种compare and swap的思想。</p>\n<p>杂谈：网上很多对ConcurrentHashMap的介绍，众所周知，这是一个用分段锁实现的一个线程安全的map容器，但是真正对他的使用场景有介绍的少之又少。面试中能知道这个容器的人也确实不少，问出去，也就回答一个分段锁就没有下文了，但我觉得吧，有时候一知半解反而会比不知道更可怕。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://my.oschina.net/mononite/blog/144329\" target=\"_blank\" rel=\"external\">https://my.oschina.net/mononite/blog/144329</a></li>\n<li><a href=\"http://www.tuicool.com/articles/zuui6z\" target=\"_blank\" rel=\"external\">http://www.tuicool.com/articles/zuui6z</a></li>\n</ol>"},{"title":"volatile疑问记录","date":"2017-03-07T11:26:52.000Z","_content":"\n\n\n对java中volatile关键字的描述，主要是**可见性**和**有序性**两方面。\n\n一个很广泛的应用就是使得多个线程对共享资源的改动变得互相可见，如下：\n\n```java\npublic class TestVolatile extends Thread {\n    /*A*/\n//    public volatile boolean runFlag = true;\n    public boolean runFlag = true;\n\n    public boolean isRunFlag() {\n        return runFlag;\n    }\n\n    public void setRunFlag(boolean runFlag) {\n        this.runFlag = runFlag;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"进入run\");\n        while (isRunFlag()) {\n            /*B*/\n//            System.out.println(\"running\");\n        }\n        System.out.println(\"退出run\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        TestVolatile testVolatile = new TestVolatile();\n        testVolatile.start();\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        testVolatile.setRunFlag(false);\n        System.out.println(\"main already set runflag to false\");\n        new CountDownLatch(1).await();\n    }\n}\n```\n在A处如果不将运行标记（runflag）设置成volatile，那么main线程对runflag的修改对于testVolatile线程将不可见。导致其一直不打印“退出run”这句。\n\n但是如果在testVolatile线程的while()增加一句：B处打印语句，程序却达到了不使用volatile，修改也变得可见，不知道到底是什么原理。\n\n只能大概估计是while()的执行过程中线程上下文进行了切换，使得重新去主存获取了runflag的最新值，从而退出了循环，暂时记录...\n\n2017/3/8日更新\n和群里面的朋友讨论了一下，发现同一份代码，不同的机器运行出了不一样的效果。又仔细翻阅了一下《effective java》，依稀记得当时好像遇到过这个问题，果然，在并发的第一张就对这个现象做出了解释。\n关键就在于HotSpot Server VM对编译进行了优化，这种优化称之为*提升*(hoisting)，结果导致了*活性失败*（liveness failure）\n\n```java\nwhile (isRunFlag()) {}\n```\n会被优化成\n\n```java\nif(isRunFlag()){\n\twhile(true)...\n}\n```\n引用effective java这一节的原话：\n> 简而言之，当多个线程共享可变数据的时候，每个读或者写数据的线程都必须执行同步\n> 如果没有同步，就无法保证一个线程所做的修改可以被另一个线程获知。未能同步共享可变数据会造成程序的活性失败和安全性失败。这样的失败是难以调式的。他们可能是间歇性的，且与时间相关，程序的行为在不同的VM上可能根本不同，如果只需要线程之间的交互通信，而不需要互斥，volatile修饰符就是一种可以接受的同步形式，但是正确的使用它可能需要一些技巧。\n\n\n\n\n","source":"_posts/volatile疑问记录.md","raw":"---\ntitle:\tvolatile疑问记录\ndate: 2017-03-07 19:26:52\ntags: \n- 多线程\n- JAVA\ncategories: \n- JAVA\n---\n\n\n\n对java中volatile关键字的描述，主要是**可见性**和**有序性**两方面。\n\n一个很广泛的应用就是使得多个线程对共享资源的改动变得互相可见，如下：\n\n```java\npublic class TestVolatile extends Thread {\n    /*A*/\n//    public volatile boolean runFlag = true;\n    public boolean runFlag = true;\n\n    public boolean isRunFlag() {\n        return runFlag;\n    }\n\n    public void setRunFlag(boolean runFlag) {\n        this.runFlag = runFlag;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"进入run\");\n        while (isRunFlag()) {\n            /*B*/\n//            System.out.println(\"running\");\n        }\n        System.out.println(\"退出run\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        TestVolatile testVolatile = new TestVolatile();\n        testVolatile.start();\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        testVolatile.setRunFlag(false);\n        System.out.println(\"main already set runflag to false\");\n        new CountDownLatch(1).await();\n    }\n}\n```\n在A处如果不将运行标记（runflag）设置成volatile，那么main线程对runflag的修改对于testVolatile线程将不可见。导致其一直不打印“退出run”这句。\n\n但是如果在testVolatile线程的while()增加一句：B处打印语句，程序却达到了不使用volatile，修改也变得可见，不知道到底是什么原理。\n\n只能大概估计是while()的执行过程中线程上下文进行了切换，使得重新去主存获取了runflag的最新值，从而退出了循环，暂时记录...\n\n2017/3/8日更新\n和群里面的朋友讨论了一下，发现同一份代码，不同的机器运行出了不一样的效果。又仔细翻阅了一下《effective java》，依稀记得当时好像遇到过这个问题，果然，在并发的第一张就对这个现象做出了解释。\n关键就在于HotSpot Server VM对编译进行了优化，这种优化称之为*提升*(hoisting)，结果导致了*活性失败*（liveness failure）\n\n```java\nwhile (isRunFlag()) {}\n```\n会被优化成\n\n```java\nif(isRunFlag()){\n\twhile(true)...\n}\n```\n引用effective java这一节的原话：\n> 简而言之，当多个线程共享可变数据的时候，每个读或者写数据的线程都必须执行同步\n> 如果没有同步，就无法保证一个线程所做的修改可以被另一个线程获知。未能同步共享可变数据会造成程序的活性失败和安全性失败。这样的失败是难以调式的。他们可能是间歇性的，且与时间相关，程序的行为在不同的VM上可能根本不同，如果只需要线程之间的交互通信，而不需要互斥，volatile修饰符就是一种可以接受的同步形式，但是正确的使用它可能需要一些技巧。\n\n\n\n\n","slug":"volatile疑问记录","published":1,"updated":"2017-09-04T11:49:26.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3ztq002gtwv724ctzp6s","content":"<p>对java中volatile关键字的描述，主要是<strong>可见性</strong>和<strong>有序性</strong>两方面。</p>\n<p>一个很广泛的应用就是使得多个线程对共享资源的改动变得互相可见，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVolatile</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/*A*/</span></div><div class=\"line\"><span class=\"comment\">//    public volatile boolean runFlag = true;</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> runFlag = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRunFlag</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> runFlag;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRunFlag</span><span class=\"params\">(<span class=\"keyword\">boolean</span> runFlag)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.runFlag = runFlag;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"进入run\"</span>);</div><div class=\"line\">        <span class=\"keyword\">while</span> (isRunFlag()) &#123;</div><div class=\"line\">            <span class=\"comment\">/*B*/</span></div><div class=\"line\"><span class=\"comment\">//            System.out.println(\"running\");</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"退出run\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">        TestVolatile testVolatile = <span class=\"keyword\">new</span> TestVolatile();</div><div class=\"line\">        testVolatile.start();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Thread.sleep(<span class=\"number\">500</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        testVolatile.setRunFlag(<span class=\"keyword\">false</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"main already set runflag to false\"</span>);</div><div class=\"line\">        <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>).await();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在A处如果不将运行标记（runflag）设置成volatile，那么main线程对runflag的修改对于testVolatile线程将不可见。导致其一直不打印“退出run”这句。</p>\n<p>但是如果在testVolatile线程的while()增加一句：B处打印语句，程序却达到了不使用volatile，修改也变得可见，不知道到底是什么原理。</p>\n<p>只能大概估计是while()的执行过程中线程上下文进行了切换，使得重新去主存获取了runflag的最新值，从而退出了循环，暂时记录…</p>\n<p>2017/3/8日更新<br>和群里面的朋友讨论了一下，发现同一份代码，不同的机器运行出了不一样的效果。又仔细翻阅了一下《effective java》，依稀记得当时好像遇到过这个问题，果然，在并发的第一张就对这个现象做出了解释。<br>关键就在于HotSpot Server VM对编译进行了优化，这种优化称之为<em>提升</em>(hoisting)，结果导致了<em>活性失败</em>（liveness failure）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> (isRunFlag()) &#123;&#125;</div></pre></td></tr></table></figure>\n<p>会被优化成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(isRunFlag())&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>引用effective java这一节的原话：</p>\n<blockquote>\n<p>简而言之，当多个线程共享可变数据的时候，每个读或者写数据的线程都必须执行同步<br>如果没有同步，就无法保证一个线程所做的修改可以被另一个线程获知。未能同步共享可变数据会造成程序的活性失败和安全性失败。这样的失败是难以调式的。他们可能是间歇性的，且与时间相关，程序的行为在不同的VM上可能根本不同，如果只需要线程之间的交互通信，而不需要互斥，volatile修饰符就是一种可以接受的同步形式，但是正确的使用它可能需要一些技巧。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>对java中volatile关键字的描述，主要是<strong>可见性</strong>和<strong>有序性</strong>两方面。</p>\n<p>一个很广泛的应用就是使得多个线程对共享资源的改动变得互相可见，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVolatile</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/*A*/</span></div><div class=\"line\"><span class=\"comment\">//    public volatile boolean runFlag = true;</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> runFlag = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRunFlag</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> runFlag;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRunFlag</span><span class=\"params\">(<span class=\"keyword\">boolean</span> runFlag)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.runFlag = runFlag;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"进入run\"</span>);</div><div class=\"line\">        <span class=\"keyword\">while</span> (isRunFlag()) &#123;</div><div class=\"line\">            <span class=\"comment\">/*B*/</span></div><div class=\"line\"><span class=\"comment\">//            System.out.println(\"running\");</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"退出run\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">        TestVolatile testVolatile = <span class=\"keyword\">new</span> TestVolatile();</div><div class=\"line\">        testVolatile.start();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Thread.sleep(<span class=\"number\">500</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        testVolatile.setRunFlag(<span class=\"keyword\">false</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"main already set runflag to false\"</span>);</div><div class=\"line\">        <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>).await();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在A处如果不将运行标记（runflag）设置成volatile，那么main线程对runflag的修改对于testVolatile线程将不可见。导致其一直不打印“退出run”这句。</p>\n<p>但是如果在testVolatile线程的while()增加一句：B处打印语句，程序却达到了不使用volatile，修改也变得可见，不知道到底是什么原理。</p>\n<p>只能大概估计是while()的执行过程中线程上下文进行了切换，使得重新去主存获取了runflag的最新值，从而退出了循环，暂时记录…</p>\n<p>2017/3/8日更新<br>和群里面的朋友讨论了一下，发现同一份代码，不同的机器运行出了不一样的效果。又仔细翻阅了一下《effective java》，依稀记得当时好像遇到过这个问题，果然，在并发的第一张就对这个现象做出了解释。<br>关键就在于HotSpot Server VM对编译进行了优化，这种优化称之为<em>提升</em>(hoisting)，结果导致了<em>活性失败</em>（liveness failure）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> (isRunFlag()) &#123;&#125;</div></pre></td></tr></table></figure>\n<p>会被优化成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(isRunFlag())&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>引用effective java这一节的原话：</p>\n<blockquote>\n<p>简而言之，当多个线程共享可变数据的时候，每个读或者写数据的线程都必须执行同步<br>如果没有同步，就无法保证一个线程所做的修改可以被另一个线程获知。未能同步共享可变数据会造成程序的活性失败和安全性失败。这样的失败是难以调式的。他们可能是间歇性的，且与时间相关，程序的行为在不同的VM上可能根本不同，如果只需要线程之间的交互通信，而不需要互斥，volatile修饰符就是一种可以接受的同步形式，但是正确的使用它可能需要一些技巧。</p>\n</blockquote>\n"},{"title":"springcloud----Zuul动态路由","date":"2017-04-01T06:11:52.000Z","_content":"\n\n\n前言\n--\n\nZuul 是Netflix 提供的一个开源组件,致力于在云平台上提供动态路由，监控，弹性，安全等边缘服务的框架。也有很多公司使用它来作为网关的重要组成部分，碰巧今年公司的架构组决定自研一个网关产品，集动态路由，动态权限，限流配额等功能为一体，为其他部门的项目提供统一的外网调用管理，最终形成产品(这方面阿里其实已经有成熟的网关产品了，但是不太适用于个性化的配置，也没有集成权限和限流降级)。\n\n不过这里并不想介绍整个网关的架构，而是想着重于讨论其中的一个关键点，并且也是经常在交流群中听人说起的：动态路由怎么做？\n\n再阐释什么是动态路由之前，需要介绍一下架构的设计。\n\n传统互联网架构图\n---------\n\n![这里写图片描述](http://img.blog.csdn.net/20170401101904656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上图是没有网关参与的一个最典型的互联网架构(本文中统一使用book代表应用实例，即真正提供服务的一个业务系统)\n\n加入eureka的架构图\n-------------\n\n![这里写图片描述](http://img.blog.csdn.net/20170401103146894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nbook注册到eureka注册中心中，zuul本身也连接着同一个eureka，可以拉取book众多实例的列表。服务中心的注册发现一直是值得推崇的一种方式，但是不适用与网关产品。因为我们的网关是面向众多的**其他部门**的**已有**或是**异构架构**的系统，不应该强求其他系统都使用eureka，这样是有侵入性的设计。\n\n最终架构图\n-----\n\n![这里写图片描述](http://img.blog.csdn.net/20170401111650676?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n要强调的一点是，gateway最终也会部署多个实例，达到分布式的效果，在架构图中没有画出，请大家自行脑补。\n\n本博客的示例使用最后一章架构图为例，带来动态路由的实现方式，会有具体的代码。\n\n<!-- more -->\n\n动态路由\n----\n动态路由需要达到可持久化配置，动态刷新的效果。如架构图所示，不仅要能满足从spring的配置文件properties加载路由信息，还需要从数据库加载我们的配置。另外一点是，路由信息在容器启动时就已经加载进入了内存，我们希望配置完成后，实施发布，动态刷新内存中的路由信息，达到不停机维护路由信息的效果。\n\nzuul--HelloWorldDemo\n--------------------\n\n项目结构\n```xml\n\t<groupId>com.sinosoft</groupId>\n    <artifactId>zuul-gateway-demo</artifactId>\n    <packaging>pom</packaging>\n    <version>1.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.2.RELEASE</version>\n    </parent>\n\n    <modules>\n        <module>gateway</module>\n        <module>book</module>\n    </modules>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>Camden.SR6</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```\ntip：springboot-1.5.2对应的springcloud的版本需要使用Camden.SR6，一开始想专门写这个demo时，只替换了springboot的版本1.4.0->1.5.2，结果启动就报错了，最后发现是版本不兼容的锅。\n\ngateway项目：\n启动类：`GatewayApplication.java`\n```java\n@EnableZuulProxy\n@SpringBootApplication\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n```\n配置：`application.properties`\n\n```properties\n#配置在配置文件中的路由信息\nzuul.routes.books.url=http://localhost:8090\nzuul.routes.books.path=/books/**\n#不使用注册中心,会带来侵入性\nribbon.eureka.enabled=false\n#网关端口\nserver.port=8080\n```\n\nbook项目：\n启动类：`BookApplication.java`\n\n```java\n@RestController\n@SpringBootApplication\npublic class BookApplication {\n\n    @RequestMapping(value = \"/available\")\n    public String available() {\n        System.out.println(\"Spring in Action\");\n        return \"Spring in Action\";\n    }\n\n    @RequestMapping(value = \"/checked-out\")\n    public String checkedOut() {\n        return \"Spring Boot in Action\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(BookApplication.class, args);\n    }\n}\n```\n配置类：`application.properties`\n\n```properties\nserver.port=8090\n```\n测试访问：http://localhost:8080/books/available\n\n上述demo是一个简单的**静态路由**，简单看下源码，zuul是怎么做到转发，路由的。\n\n```java\n@Configuration\n@EnableConfigurationProperties({ ZuulProperties.class })\n@ConditionalOnClass(ZuulServlet.class)\n@Import(ServerPropertiesAutoConfiguration.class)\npublic class ZuulConfiguration {\n\n\t@Autowired\n\t//zuul的配置文件,对应了application.properties中的配置信息\n\tprotected ZuulProperties zuulProperties;\n\n\t@Autowired\n\tprotected ServerProperties server;\n\n\t@Autowired(required = false)\n\tprivate ErrorController errorController;\n\n\t@Bean\n\tpublic HasFeatures zuulFeature() {\n\t\treturn HasFeatures.namedFeature(\"Zuul (Simple)\", ZuulConfiguration.class);\n\t}\n\n\t//核心类，路由定位器，最最重要\n\t@Bean\n\t@ConditionalOnMissingBean(RouteLocator.class)\n\tpublic RouteLocator routeLocator() {\n\t\t//默认配置的实现是SimpleRouteLocator.class\n\t\treturn new SimpleRouteLocator(this.server.getServletPrefix(),\n\t\t\t\tthis.zuulProperties);\n\t}\n\n\t//zuul的控制器，负责处理链路调用\n\t@Bean\n\tpublic ZuulController zuulController() {\n\t\treturn new ZuulController();\n\t}\n\n\t//MVC HandlerMapping that maps incoming request paths to remote services.\n\t@Bean\n\tpublic ZuulHandlerMapping zuulHandlerMapping(RouteLocator routes) {\n\t\tZuulHandlerMapping mapping = new ZuulHandlerMapping(routes, zuulController());\n\t\tmapping.setErrorController(this.errorController);\n\t\treturn mapping;\n\t}\n\n\t//注册了一个路由刷新监听器，默认实现是ZuulRefreshListener.class，这个是我们动态路由的关键\n\t@Bean\n\tpublic ApplicationListener<ApplicationEvent> zuulRefreshRoutesListener() {\n\t\treturn new ZuulRefreshListener();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = \"zuulServlet\")\n\tpublic ServletRegistrationBean zuulServlet() {\n\t\tServletRegistrationBean servlet = new ServletRegistrationBean(new ZuulServlet(),\n\t\t\t\tthis.zuulProperties.getServletPattern());\n\t\t// The whole point of exposing this servlet is to provide a route that doesn't\n\t\t// buffer requests.\n\t\tservlet.addInitParameter(\"buffer-requests\", \"false\");\n\t\treturn servlet;\n\t}\n\n\t// pre filters\n\n\t@Bean\n\tpublic ServletDetectionFilter servletDetectionFilter() {\n\t\treturn new ServletDetectionFilter();\n\t}\n\n\t@Bean\n\tpublic FormBodyWrapperFilter formBodyWrapperFilter() {\n\t\treturn new FormBodyWrapperFilter();\n\t}\n\n\t@Bean\n\tpublic DebugFilter debugFilter() {\n\t\treturn new DebugFilter();\n\t}\n\n\t@Bean\n\tpublic Servlet30WrapperFilter servlet30WrapperFilter() {\n\t\treturn new Servlet30WrapperFilter();\n\t}\n\n\t// post filters\n\n\t@Bean\n\tpublic SendResponseFilter sendResponseFilter() {\n\t\treturn new SendResponseFilter();\n\t}\n\n\t@Bean\n\tpublic SendErrorFilter sendErrorFilter() {\n\t\treturn new SendErrorFilter();\n\t}\n\n\t@Bean\n\tpublic SendForwardFilter sendForwardFilter() {\n\t\treturn new SendForwardFilter();\n\t}\n\n\t@Configuration\n\tprotected static class ZuulFilterConfiguration {\n\n\t\t@Autowired\n\t\tprivate Map<String, ZuulFilter> filters;\n\n\t\t@Bean\n\t\tpublic ZuulFilterInitializer zuulFilterInitializer() {\n\t\t\treturn new ZuulFilterInitializer(this.filters);\n\t\t}\n\n\t}\n\n\t//上面提到的路由刷新监听器\n\tprivate static class ZuulRefreshListener\n\t\t\timplements ApplicationListener<ApplicationEvent> {\n\n\t\t@Autowired\n\t\tprivate ZuulHandlerMapping zuulHandlerMapping;\n\n\t\tprivate HeartbeatMonitor heartbeatMonitor = new HeartbeatMonitor();\n\n\t\t@Override\n\t\tpublic void onApplicationEvent(ApplicationEvent event) {\n\t\t\tif (event instanceof ContextRefreshedEvent\n\t\t\t\t\t|| event instanceof RefreshScopeRefreshedEvent\n\t\t\t\t\t|| event instanceof RoutesRefreshedEvent) {\n\t\t\t\t//设置为脏,下一次匹配到路径时，如果发现为脏，则会去刷新路由信息\n\t\t\t\tthis.zuulHandlerMapping.setDirty(true);\n\t\t\t}\n\t\t\telse if (event instanceof HeartbeatEvent) {\n\t\t\t\tif (this.heartbeatMonitor.update(((HeartbeatEvent) event).getValue())) {\n\t\t\t\t\tthis.zuulHandlerMapping.setDirty(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n```\n我们要解决动态路由的难题，第一步就得理解路由定位器的作用。\n![这里写图片描述](http://img.blog.csdn.net/20170401115214231?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n很失望，因为从接口关系来看，spring考虑到了路由刷新的需求，但是默认实现的SimpleRouteLocator没有实现RefreshableRouteLocator接口，看来我们只能借鉴DiscoveryClientRouteLocator去改造SimpleRouteLocator使其具备刷新能力。\n```java\npublic interface RefreshableRouteLocator extends RouteLocator {\n\tvoid refresh();\n}\n```\nDiscoveryClientRouteLocator比SimpleRouteLocator多了两个功能，第一是从DiscoveryClient（如Eureka）发现路由信息，之前的架构图已经给大家解释清楚了，我们不想使用eureka这种侵入式的网关模块，所以忽略它，第二是实现了RefreshableRouteLocator接口，能够实现动态刷新。\n对SimpleRouteLocator.class的源码加一些注释，方便大家阅读：\n\n```java\npublic class SimpleRouteLocator implements RouteLocator {\n\n\t//配置文件中的路由信息配置\n\tprivate ZuulProperties properties;\n\t//路径正则配置器,即作用于path:/books/**\n\tprivate PathMatcher pathMatcher = new AntPathMatcher();\n\n\tprivate String dispatcherServletPath = \"/\";\n\tprivate String zuulServletPath;\n\n\tprivate AtomicReference<Map<String, ZuulRoute>> routes = new AtomicReference<>();\n\n\tpublic SimpleRouteLocator(String servletPath, ZuulProperties properties) {\n\t\tthis.properties = properties;\n\t\tif (servletPath != null && StringUtils.hasText(servletPath)) {\n\t\t\tthis.dispatcherServletPath = servletPath;\n\t\t}\n\n\t\tthis.zuulServletPath = properties.getServletPath();\n\t}\n\n\t//路由定位器和其他组件的交互，是最终把定位的Routes以list的方式提供出去,核心实现\n\t@Override\n\tpublic List<Route> getRoutes() {\n\t\tif (this.routes.get() == null) {\n\t\t\tthis.routes.set(locateRoutes());\n\t\t}\n\t\tList<Route> values = new ArrayList<>();\n\t\tfor (String url : this.routes.get().keySet()) {\n\t\t\tZuulRoute route = this.routes.get().get(url);\n\t\t\tString path = route.getPath();\n\t\t\tvalues.add(getRoute(route, path));\n\t\t}\n\t\treturn values;\n\t}\n\n\t@Override\n\tpublic Collection<String> getIgnoredPaths() {\n\t\treturn this.properties.getIgnoredPatterns();\n\t}\n\n\t//这个方法在网关产品中也很重要，可以根据实际路径匹配到Route来进行业务逻辑的操作，进行一些加工\n\t@Override\n\tpublic Route getMatchingRoute(final String path) {\n\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"Finding route for path: \" + path);\n\t\t}\n\n\t\tif (this.routes.get() == null) {\n\t\t\tthis.routes.set(locateRoutes());\n\t\t}\n\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"servletPath=\" + this.dispatcherServletPath);\n\t\t\tlog.debug(\"zuulServletPath=\" + this.zuulServletPath);\n\t\t\tlog.debug(\"RequestUtils.isDispatcherServletRequest()=\"\n\t\t\t\t\t+ RequestUtils.isDispatcherServletRequest());\n\t\t\tlog.debug(\"RequestUtils.isZuulServletRequest()=\"\n\t\t\t\t\t+ RequestUtils.isZuulServletRequest());\n\t\t}\n\n\t\tString adjustedPath = adjustPath(path);\n\n\t\tZuulRoute route = null;\n\t\tif (!matchesIgnoredPatterns(adjustedPath)) {\n\t\t\tfor (Entry<String, ZuulRoute> entry : this.routes.get().entrySet()) {\n\t\t\t\tString pattern = entry.getKey();\n\t\t\t\tlog.debug(\"Matching pattern:\" + pattern);\n\t\t\t\tif (this.pathMatcher.match(pattern, adjustedPath)) {\n\t\t\t\t\troute = entry.getValue();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"route matched=\" + route);\n\t\t}\n\n\t\treturn getRoute(route, adjustedPath);\n\n\t}\n\n\tprivate Route getRoute(ZuulRoute route, String path) {\n\t\tif (route == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString targetPath = path;\n\t\tString prefix = this.properties.getPrefix();\n\t\tif (path.startsWith(prefix) && this.properties.isStripPrefix()) {\n\t\t\ttargetPath = path.substring(prefix.length());\n\t\t}\n\t\tif (route.isStripPrefix()) {\n\t\t\tint index = route.getPath().indexOf(\"*\") - 1;\n\t\t\tif (index > 0) {\n\t\t\t\tString routePrefix = route.getPath().substring(0, index);\n\t\t\t\ttargetPath = targetPath.replaceFirst(routePrefix, \"\");\n\t\t\t\tprefix = prefix + routePrefix;\n\t\t\t}\n\t\t}\n\t\tBoolean retryable = this.properties.getRetryable();\n\t\tif (route.getRetryable() != null) {\n\t\t\tretryable = route.getRetryable();\n\t\t}\n\t\treturn new Route(route.getId(), targetPath, route.getLocation(), prefix,\n\t\t\t\tretryable,\n\t\t\t\troute.isCustomSensitiveHeaders() ? route.getSensitiveHeaders() : null);\n\t}\n\n\t//注意这个类并没有实现refresh接口，但是却提供了一个protected级别的方法,旨在让子类不需要重复维护一个private AtomicReference<Map<String, ZuulRoute>> routes = new AtomicReference<>();也可以达到刷新的效果\n\tprotected void doRefresh() {\n\t\tthis.routes.set(locateRoutes());\n\t}\n\n\n\t//具体就是在这儿定位路由信息的，我们之后从数据库加载路由信息，主要也是从这儿改写\n\t/**\n\t * Compute a map of path pattern to route. The default is just a static map from the\n\t * {@link ZuulProperties}, but subclasses can add dynamic calculations.\n\t */\n\tprotected Map<String, ZuulRoute> locateRoutes() {\n\t\tLinkedHashMap<String, ZuulRoute> routesMap = new LinkedHashMap<String, ZuulRoute>();\n\t\tfor (ZuulRoute route : this.properties.getRoutes().values()) {\n\t\t\troutesMap.put(route.getPath(), route);\n\t\t}\n\t\treturn routesMap;\n\t}\n\n\tprotected boolean matchesIgnoredPatterns(String path) {\n\t\tfor (String pattern : this.properties.getIgnoredPatterns()) {\n\t\t\tlog.debug(\"Matching ignored pattern:\" + pattern);\n\t\t\tif (this.pathMatcher.match(pattern, path)) {\n\t\t\t\tlog.debug(\"Path \" + path + \" matches ignored pattern \" + pattern);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate String adjustPath(final String path) {\n\t\tString adjustedPath = path;\n\n\t\tif (RequestUtils.isDispatcherServletRequest()\n\t\t\t\t&& StringUtils.hasText(this.dispatcherServletPath)) {\n\t\t\tif (!this.dispatcherServletPath.equals(\"/\")) {\n\t\t\t\tadjustedPath = path.substring(this.dispatcherServletPath.length());\n\t\t\t\tlog.debug(\"Stripped dispatcherServletPath\");\n\t\t\t}\n\t\t}\n\t\telse if (RequestUtils.isZuulServletRequest()) {\n\t\t\tif (StringUtils.hasText(this.zuulServletPath)\n\t\t\t\t\t&& !this.zuulServletPath.equals(\"/\")) {\n\t\t\t\tadjustedPath = path.substring(this.zuulServletPath.length());\n\t\t\t\tlog.debug(\"Stripped zuulServletPath\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// do nothing\n\t\t}\n\n\t\tlog.debug(\"adjustedPath=\" + path);\n\t\treturn adjustedPath;\n\t}\n\n}\n```\n重写过后的自定义路由定位器如下：\n\n```java\npublic class CustomRouteLocator extends SimpleRouteLocator implements RefreshableRouteLocator{\n\n    public final static Logger logger = LoggerFactory.getLogger(CustomRouteLocator.class);\n\n    private JdbcTemplate jdbcTemplate;\n\n    private ZuulProperties properties;\n\n    public void setJdbcTemplate(JdbcTemplate jdbcTemplate){\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    public CustomRouteLocator(String servletPath, ZuulProperties properties) {\n        super(servletPath, properties);\n        this.properties = properties;\n        logger.info(\"servletPath:{}\",servletPath);\n    }\n\n    //父类已经提供了这个方法，这里写出来只是为了说明这一个方法很重要！！！\n//    @Override\n//    protected void doRefresh() {\n//        super.doRefresh();\n//    }\n\n\n    @Override\n    public void refresh() {\n        doRefresh();\n    }\n\n    @Override\n    protected Map<String, ZuulRoute> locateRoutes() {\n        LinkedHashMap<String, ZuulRoute> routesMap = new LinkedHashMap<String, ZuulRoute>();\n        //从application.properties中加载路由信息\n        routesMap.putAll(super.locateRoutes());\n        //从db中加载路由信息\n        routesMap.putAll(locateRoutesFromDB());\n        //优化一下配置\n        LinkedHashMap<String, ZuulRoute> values = new LinkedHashMap<>();\n        for (Map.Entry<String, ZuulRoute> entry : routesMap.entrySet()) {\n            String path = entry.getKey();\n            // Prepend with slash if not already present.\n            if (!path.startsWith(\"/\")) {\n                path = \"/\" + path;\n            }\n            if (StringUtils.hasText(this.properties.getPrefix())) {\n                path = this.properties.getPrefix() + path;\n                if (!path.startsWith(\"/\")) {\n                    path = \"/\" + path;\n                }\n            }\n            values.put(path, entry.getValue());\n        }\n        return values;\n    }\n\n    private Map<String, ZuulRoute> locateRoutesFromDB(){\n        Map<String, ZuulRoute> routes = new LinkedHashMap<>();\n        List<ZuulRouteVO> results = jdbcTemplate.query(\"select * from gateway_api_define where enabled = true \",new BeanPropertyRowMapper<>(ZuulRouteVO.class));\n        for (ZuulRouteVO result : results) {\n            if(org.apache.commons.lang3.StringUtils.isBlank(result.getPath()) || org.apache.commons.lang3.StringUtils.isBlank(result.getUrl()) ){\n                continue;\n            }\n            ZuulRoute zuulRoute = new ZuulRoute();\n            try {\n                org.springframework.beans.BeanUtils.copyProperties(result,zuulRoute);\n            } catch (Exception e) {\n                logger.error(\"=============load zuul route info from db with error==============\",e);\n            }\n            routes.put(zuulRoute.getPath(),zuulRoute);\n        }\n        return routes;\n    }\n\n    public static class ZuulRouteVO {\n\n        /**\n         * The ID of the route (the same as its map key by default).\n         */\n        private String id;\n\n        /**\n         * The path (pattern) for the route, e.g. /foo/**.\n         */\n        private String path;\n\n        /**\n         * The service ID (if any) to map to this route. You can specify a physical URL or\n         * a service, but not both.\n         */\n        private String serviceId;\n\n        /**\n         * A full physical URL to map to the route. An alternative is to use a service ID\n         * and service discovery to find the physical address.\n         */\n        private String url;\n\n        /**\n         * Flag to determine whether the prefix for this route (the path, minus pattern\n         * patcher) should be stripped before forwarding.\n         */\n        private boolean stripPrefix = true;\n\n        /**\n         * Flag to indicate that this route should be retryable (if supported). Generally\n         * retry requires a service ID and ribbon.\n         */\n        private Boolean retryable;\n\n        private Boolean enabled;\n\n        public String getId() {\n            return id;\n        }\n\n        public void setId(String id) {\n            this.id = id;\n        }\n\n        public String getPath() {\n            return path;\n        }\n\n        public void setPath(String path) {\n            this.path = path;\n        }\n\n        public String getServiceId() {\n            return serviceId;\n        }\n\n        public void setServiceId(String serviceId) {\n            this.serviceId = serviceId;\n        }\n\n        public String getUrl() {\n            return url;\n        }\n\n        public void setUrl(String url) {\n            this.url = url;\n        }\n\n        public boolean isStripPrefix() {\n            return stripPrefix;\n        }\n\n        public void setStripPrefix(boolean stripPrefix) {\n            this.stripPrefix = stripPrefix;\n        }\n\n        public Boolean getRetryable() {\n            return retryable;\n        }\n\n        public void setRetryable(Boolean retryable) {\n            this.retryable = retryable;\n        }\n\n        public Boolean getEnabled() {\n            return enabled;\n        }\n\n        public void setEnabled(Boolean enabled) {\n            this.enabled = enabled;\n        }\n    }\n}\n```\n配置这个自定义的路由定位器：\n\n```java\n@Configuration\npublic class CustomZuulConfig {\n\n    @Autowired\n    ZuulProperties zuulProperties;\n    @Autowired\n    ServerProperties server;\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n    @Bean\n    public CustomRouteLocator routeLocator() {\n        CustomRouteLocator routeLocator = new CustomRouteLocator(this.server.getServletPrefix(), this.zuulProperties);\n        routeLocator.setJdbcTemplate(jdbcTemplate);\n        return routeLocator;\n    }\n\n}\n```\n现在容器启动时，就可以从数据库和配置文件中一起加载路由信息了，离动态路由还差最后一步，就是实时刷新，前面已经说过了，默认的ZuulConfigure已经配置了事件监听器，我们只需要发送一个事件就可以实现刷新了。\n\n```java\npublic class RefreshRouteService {\n\n    @Autowired\n    ApplicationEventPublisher publisher;\n\n    @Autowired\n    RouteLocator routeLocator;\n\n    public void refreshRoute() {\n        RoutesRefreshedEvent routesRefreshedEvent = new RoutesRefreshedEvent(routeLocator);\n        publisher.publishEvent(routesRefreshedEvent);\n    }\n\n}\n```\n具体的刷新流程其实就是从数据库重新加载了一遍，有人可能会问，为什么不自己是手动重新加载Locator.dorefresh？非要用事件去刷新。这牵扯到内部的zuul内部组件的工作流程，不仅仅是Locator本身的一个变量，具体想要了解的还得去看源码。\n\n到这儿我们就实现了动态路由了，所以的实例代码和建表语句我会放到github上，下载的时候记得给我star   QAQ \n\n[github地址](https://github.com/lexburner/zuul-gateway-demo)\n\n","source":"_posts/springcloud----Zuul动态路由.md","raw":"---\ntitle: springcloud----Zuul动态路由\ndate: 2017-04-01 14:11:52\ntags: \n- Spring Cloud Zuul\ncategories: \n- Spring Cloud\n---\n\n\n\n前言\n--\n\nZuul 是Netflix 提供的一个开源组件,致力于在云平台上提供动态路由，监控，弹性，安全等边缘服务的框架。也有很多公司使用它来作为网关的重要组成部分，碰巧今年公司的架构组决定自研一个网关产品，集动态路由，动态权限，限流配额等功能为一体，为其他部门的项目提供统一的外网调用管理，最终形成产品(这方面阿里其实已经有成熟的网关产品了，但是不太适用于个性化的配置，也没有集成权限和限流降级)。\n\n不过这里并不想介绍整个网关的架构，而是想着重于讨论其中的一个关键点，并且也是经常在交流群中听人说起的：动态路由怎么做？\n\n再阐释什么是动态路由之前，需要介绍一下架构的设计。\n\n传统互联网架构图\n---------\n\n![这里写图片描述](http://img.blog.csdn.net/20170401101904656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上图是没有网关参与的一个最典型的互联网架构(本文中统一使用book代表应用实例，即真正提供服务的一个业务系统)\n\n加入eureka的架构图\n-------------\n\n![这里写图片描述](http://img.blog.csdn.net/20170401103146894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nbook注册到eureka注册中心中，zuul本身也连接着同一个eureka，可以拉取book众多实例的列表。服务中心的注册发现一直是值得推崇的一种方式，但是不适用与网关产品。因为我们的网关是面向众多的**其他部门**的**已有**或是**异构架构**的系统，不应该强求其他系统都使用eureka，这样是有侵入性的设计。\n\n最终架构图\n-----\n\n![这里写图片描述](http://img.blog.csdn.net/20170401111650676?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n要强调的一点是，gateway最终也会部署多个实例，达到分布式的效果，在架构图中没有画出，请大家自行脑补。\n\n本博客的示例使用最后一章架构图为例，带来动态路由的实现方式，会有具体的代码。\n\n<!-- more -->\n\n动态路由\n----\n动态路由需要达到可持久化配置，动态刷新的效果。如架构图所示，不仅要能满足从spring的配置文件properties加载路由信息，还需要从数据库加载我们的配置。另外一点是，路由信息在容器启动时就已经加载进入了内存，我们希望配置完成后，实施发布，动态刷新内存中的路由信息，达到不停机维护路由信息的效果。\n\nzuul--HelloWorldDemo\n--------------------\n\n项目结构\n```xml\n\t<groupId>com.sinosoft</groupId>\n    <artifactId>zuul-gateway-demo</artifactId>\n    <packaging>pom</packaging>\n    <version>1.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.2.RELEASE</version>\n    </parent>\n\n    <modules>\n        <module>gateway</module>\n        <module>book</module>\n    </modules>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>Camden.SR6</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```\ntip：springboot-1.5.2对应的springcloud的版本需要使用Camden.SR6，一开始想专门写这个demo时，只替换了springboot的版本1.4.0->1.5.2，结果启动就报错了，最后发现是版本不兼容的锅。\n\ngateway项目：\n启动类：`GatewayApplication.java`\n```java\n@EnableZuulProxy\n@SpringBootApplication\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n```\n配置：`application.properties`\n\n```properties\n#配置在配置文件中的路由信息\nzuul.routes.books.url=http://localhost:8090\nzuul.routes.books.path=/books/**\n#不使用注册中心,会带来侵入性\nribbon.eureka.enabled=false\n#网关端口\nserver.port=8080\n```\n\nbook项目：\n启动类：`BookApplication.java`\n\n```java\n@RestController\n@SpringBootApplication\npublic class BookApplication {\n\n    @RequestMapping(value = \"/available\")\n    public String available() {\n        System.out.println(\"Spring in Action\");\n        return \"Spring in Action\";\n    }\n\n    @RequestMapping(value = \"/checked-out\")\n    public String checkedOut() {\n        return \"Spring Boot in Action\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(BookApplication.class, args);\n    }\n}\n```\n配置类：`application.properties`\n\n```properties\nserver.port=8090\n```\n测试访问：http://localhost:8080/books/available\n\n上述demo是一个简单的**静态路由**，简单看下源码，zuul是怎么做到转发，路由的。\n\n```java\n@Configuration\n@EnableConfigurationProperties({ ZuulProperties.class })\n@ConditionalOnClass(ZuulServlet.class)\n@Import(ServerPropertiesAutoConfiguration.class)\npublic class ZuulConfiguration {\n\n\t@Autowired\n\t//zuul的配置文件,对应了application.properties中的配置信息\n\tprotected ZuulProperties zuulProperties;\n\n\t@Autowired\n\tprotected ServerProperties server;\n\n\t@Autowired(required = false)\n\tprivate ErrorController errorController;\n\n\t@Bean\n\tpublic HasFeatures zuulFeature() {\n\t\treturn HasFeatures.namedFeature(\"Zuul (Simple)\", ZuulConfiguration.class);\n\t}\n\n\t//核心类，路由定位器，最最重要\n\t@Bean\n\t@ConditionalOnMissingBean(RouteLocator.class)\n\tpublic RouteLocator routeLocator() {\n\t\t//默认配置的实现是SimpleRouteLocator.class\n\t\treturn new SimpleRouteLocator(this.server.getServletPrefix(),\n\t\t\t\tthis.zuulProperties);\n\t}\n\n\t//zuul的控制器，负责处理链路调用\n\t@Bean\n\tpublic ZuulController zuulController() {\n\t\treturn new ZuulController();\n\t}\n\n\t//MVC HandlerMapping that maps incoming request paths to remote services.\n\t@Bean\n\tpublic ZuulHandlerMapping zuulHandlerMapping(RouteLocator routes) {\n\t\tZuulHandlerMapping mapping = new ZuulHandlerMapping(routes, zuulController());\n\t\tmapping.setErrorController(this.errorController);\n\t\treturn mapping;\n\t}\n\n\t//注册了一个路由刷新监听器，默认实现是ZuulRefreshListener.class，这个是我们动态路由的关键\n\t@Bean\n\tpublic ApplicationListener<ApplicationEvent> zuulRefreshRoutesListener() {\n\t\treturn new ZuulRefreshListener();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(name = \"zuulServlet\")\n\tpublic ServletRegistrationBean zuulServlet() {\n\t\tServletRegistrationBean servlet = new ServletRegistrationBean(new ZuulServlet(),\n\t\t\t\tthis.zuulProperties.getServletPattern());\n\t\t// The whole point of exposing this servlet is to provide a route that doesn't\n\t\t// buffer requests.\n\t\tservlet.addInitParameter(\"buffer-requests\", \"false\");\n\t\treturn servlet;\n\t}\n\n\t// pre filters\n\n\t@Bean\n\tpublic ServletDetectionFilter servletDetectionFilter() {\n\t\treturn new ServletDetectionFilter();\n\t}\n\n\t@Bean\n\tpublic FormBodyWrapperFilter formBodyWrapperFilter() {\n\t\treturn new FormBodyWrapperFilter();\n\t}\n\n\t@Bean\n\tpublic DebugFilter debugFilter() {\n\t\treturn new DebugFilter();\n\t}\n\n\t@Bean\n\tpublic Servlet30WrapperFilter servlet30WrapperFilter() {\n\t\treturn new Servlet30WrapperFilter();\n\t}\n\n\t// post filters\n\n\t@Bean\n\tpublic SendResponseFilter sendResponseFilter() {\n\t\treturn new SendResponseFilter();\n\t}\n\n\t@Bean\n\tpublic SendErrorFilter sendErrorFilter() {\n\t\treturn new SendErrorFilter();\n\t}\n\n\t@Bean\n\tpublic SendForwardFilter sendForwardFilter() {\n\t\treturn new SendForwardFilter();\n\t}\n\n\t@Configuration\n\tprotected static class ZuulFilterConfiguration {\n\n\t\t@Autowired\n\t\tprivate Map<String, ZuulFilter> filters;\n\n\t\t@Bean\n\t\tpublic ZuulFilterInitializer zuulFilterInitializer() {\n\t\t\treturn new ZuulFilterInitializer(this.filters);\n\t\t}\n\n\t}\n\n\t//上面提到的路由刷新监听器\n\tprivate static class ZuulRefreshListener\n\t\t\timplements ApplicationListener<ApplicationEvent> {\n\n\t\t@Autowired\n\t\tprivate ZuulHandlerMapping zuulHandlerMapping;\n\n\t\tprivate HeartbeatMonitor heartbeatMonitor = new HeartbeatMonitor();\n\n\t\t@Override\n\t\tpublic void onApplicationEvent(ApplicationEvent event) {\n\t\t\tif (event instanceof ContextRefreshedEvent\n\t\t\t\t\t|| event instanceof RefreshScopeRefreshedEvent\n\t\t\t\t\t|| event instanceof RoutesRefreshedEvent) {\n\t\t\t\t//设置为脏,下一次匹配到路径时，如果发现为脏，则会去刷新路由信息\n\t\t\t\tthis.zuulHandlerMapping.setDirty(true);\n\t\t\t}\n\t\t\telse if (event instanceof HeartbeatEvent) {\n\t\t\t\tif (this.heartbeatMonitor.update(((HeartbeatEvent) event).getValue())) {\n\t\t\t\t\tthis.zuulHandlerMapping.setDirty(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n```\n我们要解决动态路由的难题，第一步就得理解路由定位器的作用。\n![这里写图片描述](http://img.blog.csdn.net/20170401115214231?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n很失望，因为从接口关系来看，spring考虑到了路由刷新的需求，但是默认实现的SimpleRouteLocator没有实现RefreshableRouteLocator接口，看来我们只能借鉴DiscoveryClientRouteLocator去改造SimpleRouteLocator使其具备刷新能力。\n```java\npublic interface RefreshableRouteLocator extends RouteLocator {\n\tvoid refresh();\n}\n```\nDiscoveryClientRouteLocator比SimpleRouteLocator多了两个功能，第一是从DiscoveryClient（如Eureka）发现路由信息，之前的架构图已经给大家解释清楚了，我们不想使用eureka这种侵入式的网关模块，所以忽略它，第二是实现了RefreshableRouteLocator接口，能够实现动态刷新。\n对SimpleRouteLocator.class的源码加一些注释，方便大家阅读：\n\n```java\npublic class SimpleRouteLocator implements RouteLocator {\n\n\t//配置文件中的路由信息配置\n\tprivate ZuulProperties properties;\n\t//路径正则配置器,即作用于path:/books/**\n\tprivate PathMatcher pathMatcher = new AntPathMatcher();\n\n\tprivate String dispatcherServletPath = \"/\";\n\tprivate String zuulServletPath;\n\n\tprivate AtomicReference<Map<String, ZuulRoute>> routes = new AtomicReference<>();\n\n\tpublic SimpleRouteLocator(String servletPath, ZuulProperties properties) {\n\t\tthis.properties = properties;\n\t\tif (servletPath != null && StringUtils.hasText(servletPath)) {\n\t\t\tthis.dispatcherServletPath = servletPath;\n\t\t}\n\n\t\tthis.zuulServletPath = properties.getServletPath();\n\t}\n\n\t//路由定位器和其他组件的交互，是最终把定位的Routes以list的方式提供出去,核心实现\n\t@Override\n\tpublic List<Route> getRoutes() {\n\t\tif (this.routes.get() == null) {\n\t\t\tthis.routes.set(locateRoutes());\n\t\t}\n\t\tList<Route> values = new ArrayList<>();\n\t\tfor (String url : this.routes.get().keySet()) {\n\t\t\tZuulRoute route = this.routes.get().get(url);\n\t\t\tString path = route.getPath();\n\t\t\tvalues.add(getRoute(route, path));\n\t\t}\n\t\treturn values;\n\t}\n\n\t@Override\n\tpublic Collection<String> getIgnoredPaths() {\n\t\treturn this.properties.getIgnoredPatterns();\n\t}\n\n\t//这个方法在网关产品中也很重要，可以根据实际路径匹配到Route来进行业务逻辑的操作，进行一些加工\n\t@Override\n\tpublic Route getMatchingRoute(final String path) {\n\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"Finding route for path: \" + path);\n\t\t}\n\n\t\tif (this.routes.get() == null) {\n\t\t\tthis.routes.set(locateRoutes());\n\t\t}\n\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"servletPath=\" + this.dispatcherServletPath);\n\t\t\tlog.debug(\"zuulServletPath=\" + this.zuulServletPath);\n\t\t\tlog.debug(\"RequestUtils.isDispatcherServletRequest()=\"\n\t\t\t\t\t+ RequestUtils.isDispatcherServletRequest());\n\t\t\tlog.debug(\"RequestUtils.isZuulServletRequest()=\"\n\t\t\t\t\t+ RequestUtils.isZuulServletRequest());\n\t\t}\n\n\t\tString adjustedPath = adjustPath(path);\n\n\t\tZuulRoute route = null;\n\t\tif (!matchesIgnoredPatterns(adjustedPath)) {\n\t\t\tfor (Entry<String, ZuulRoute> entry : this.routes.get().entrySet()) {\n\t\t\t\tString pattern = entry.getKey();\n\t\t\t\tlog.debug(\"Matching pattern:\" + pattern);\n\t\t\t\tif (this.pathMatcher.match(pattern, adjustedPath)) {\n\t\t\t\t\troute = entry.getValue();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"route matched=\" + route);\n\t\t}\n\n\t\treturn getRoute(route, adjustedPath);\n\n\t}\n\n\tprivate Route getRoute(ZuulRoute route, String path) {\n\t\tif (route == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString targetPath = path;\n\t\tString prefix = this.properties.getPrefix();\n\t\tif (path.startsWith(prefix) && this.properties.isStripPrefix()) {\n\t\t\ttargetPath = path.substring(prefix.length());\n\t\t}\n\t\tif (route.isStripPrefix()) {\n\t\t\tint index = route.getPath().indexOf(\"*\") - 1;\n\t\t\tif (index > 0) {\n\t\t\t\tString routePrefix = route.getPath().substring(0, index);\n\t\t\t\ttargetPath = targetPath.replaceFirst(routePrefix, \"\");\n\t\t\t\tprefix = prefix + routePrefix;\n\t\t\t}\n\t\t}\n\t\tBoolean retryable = this.properties.getRetryable();\n\t\tif (route.getRetryable() != null) {\n\t\t\tretryable = route.getRetryable();\n\t\t}\n\t\treturn new Route(route.getId(), targetPath, route.getLocation(), prefix,\n\t\t\t\tretryable,\n\t\t\t\troute.isCustomSensitiveHeaders() ? route.getSensitiveHeaders() : null);\n\t}\n\n\t//注意这个类并没有实现refresh接口，但是却提供了一个protected级别的方法,旨在让子类不需要重复维护一个private AtomicReference<Map<String, ZuulRoute>> routes = new AtomicReference<>();也可以达到刷新的效果\n\tprotected void doRefresh() {\n\t\tthis.routes.set(locateRoutes());\n\t}\n\n\n\t//具体就是在这儿定位路由信息的，我们之后从数据库加载路由信息，主要也是从这儿改写\n\t/**\n\t * Compute a map of path pattern to route. The default is just a static map from the\n\t * {@link ZuulProperties}, but subclasses can add dynamic calculations.\n\t */\n\tprotected Map<String, ZuulRoute> locateRoutes() {\n\t\tLinkedHashMap<String, ZuulRoute> routesMap = new LinkedHashMap<String, ZuulRoute>();\n\t\tfor (ZuulRoute route : this.properties.getRoutes().values()) {\n\t\t\troutesMap.put(route.getPath(), route);\n\t\t}\n\t\treturn routesMap;\n\t}\n\n\tprotected boolean matchesIgnoredPatterns(String path) {\n\t\tfor (String pattern : this.properties.getIgnoredPatterns()) {\n\t\t\tlog.debug(\"Matching ignored pattern:\" + pattern);\n\t\t\tif (this.pathMatcher.match(pattern, path)) {\n\t\t\t\tlog.debug(\"Path \" + path + \" matches ignored pattern \" + pattern);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate String adjustPath(final String path) {\n\t\tString adjustedPath = path;\n\n\t\tif (RequestUtils.isDispatcherServletRequest()\n\t\t\t\t&& StringUtils.hasText(this.dispatcherServletPath)) {\n\t\t\tif (!this.dispatcherServletPath.equals(\"/\")) {\n\t\t\t\tadjustedPath = path.substring(this.dispatcherServletPath.length());\n\t\t\t\tlog.debug(\"Stripped dispatcherServletPath\");\n\t\t\t}\n\t\t}\n\t\telse if (RequestUtils.isZuulServletRequest()) {\n\t\t\tif (StringUtils.hasText(this.zuulServletPath)\n\t\t\t\t\t&& !this.zuulServletPath.equals(\"/\")) {\n\t\t\t\tadjustedPath = path.substring(this.zuulServletPath.length());\n\t\t\t\tlog.debug(\"Stripped zuulServletPath\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// do nothing\n\t\t}\n\n\t\tlog.debug(\"adjustedPath=\" + path);\n\t\treturn adjustedPath;\n\t}\n\n}\n```\n重写过后的自定义路由定位器如下：\n\n```java\npublic class CustomRouteLocator extends SimpleRouteLocator implements RefreshableRouteLocator{\n\n    public final static Logger logger = LoggerFactory.getLogger(CustomRouteLocator.class);\n\n    private JdbcTemplate jdbcTemplate;\n\n    private ZuulProperties properties;\n\n    public void setJdbcTemplate(JdbcTemplate jdbcTemplate){\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    public CustomRouteLocator(String servletPath, ZuulProperties properties) {\n        super(servletPath, properties);\n        this.properties = properties;\n        logger.info(\"servletPath:{}\",servletPath);\n    }\n\n    //父类已经提供了这个方法，这里写出来只是为了说明这一个方法很重要！！！\n//    @Override\n//    protected void doRefresh() {\n//        super.doRefresh();\n//    }\n\n\n    @Override\n    public void refresh() {\n        doRefresh();\n    }\n\n    @Override\n    protected Map<String, ZuulRoute> locateRoutes() {\n        LinkedHashMap<String, ZuulRoute> routesMap = new LinkedHashMap<String, ZuulRoute>();\n        //从application.properties中加载路由信息\n        routesMap.putAll(super.locateRoutes());\n        //从db中加载路由信息\n        routesMap.putAll(locateRoutesFromDB());\n        //优化一下配置\n        LinkedHashMap<String, ZuulRoute> values = new LinkedHashMap<>();\n        for (Map.Entry<String, ZuulRoute> entry : routesMap.entrySet()) {\n            String path = entry.getKey();\n            // Prepend with slash if not already present.\n            if (!path.startsWith(\"/\")) {\n                path = \"/\" + path;\n            }\n            if (StringUtils.hasText(this.properties.getPrefix())) {\n                path = this.properties.getPrefix() + path;\n                if (!path.startsWith(\"/\")) {\n                    path = \"/\" + path;\n                }\n            }\n            values.put(path, entry.getValue());\n        }\n        return values;\n    }\n\n    private Map<String, ZuulRoute> locateRoutesFromDB(){\n        Map<String, ZuulRoute> routes = new LinkedHashMap<>();\n        List<ZuulRouteVO> results = jdbcTemplate.query(\"select * from gateway_api_define where enabled = true \",new BeanPropertyRowMapper<>(ZuulRouteVO.class));\n        for (ZuulRouteVO result : results) {\n            if(org.apache.commons.lang3.StringUtils.isBlank(result.getPath()) || org.apache.commons.lang3.StringUtils.isBlank(result.getUrl()) ){\n                continue;\n            }\n            ZuulRoute zuulRoute = new ZuulRoute();\n            try {\n                org.springframework.beans.BeanUtils.copyProperties(result,zuulRoute);\n            } catch (Exception e) {\n                logger.error(\"=============load zuul route info from db with error==============\",e);\n            }\n            routes.put(zuulRoute.getPath(),zuulRoute);\n        }\n        return routes;\n    }\n\n    public static class ZuulRouteVO {\n\n        /**\n         * The ID of the route (the same as its map key by default).\n         */\n        private String id;\n\n        /**\n         * The path (pattern) for the route, e.g. /foo/**.\n         */\n        private String path;\n\n        /**\n         * The service ID (if any) to map to this route. You can specify a physical URL or\n         * a service, but not both.\n         */\n        private String serviceId;\n\n        /**\n         * A full physical URL to map to the route. An alternative is to use a service ID\n         * and service discovery to find the physical address.\n         */\n        private String url;\n\n        /**\n         * Flag to determine whether the prefix for this route (the path, minus pattern\n         * patcher) should be stripped before forwarding.\n         */\n        private boolean stripPrefix = true;\n\n        /**\n         * Flag to indicate that this route should be retryable (if supported). Generally\n         * retry requires a service ID and ribbon.\n         */\n        private Boolean retryable;\n\n        private Boolean enabled;\n\n        public String getId() {\n            return id;\n        }\n\n        public void setId(String id) {\n            this.id = id;\n        }\n\n        public String getPath() {\n            return path;\n        }\n\n        public void setPath(String path) {\n            this.path = path;\n        }\n\n        public String getServiceId() {\n            return serviceId;\n        }\n\n        public void setServiceId(String serviceId) {\n            this.serviceId = serviceId;\n        }\n\n        public String getUrl() {\n            return url;\n        }\n\n        public void setUrl(String url) {\n            this.url = url;\n        }\n\n        public boolean isStripPrefix() {\n            return stripPrefix;\n        }\n\n        public void setStripPrefix(boolean stripPrefix) {\n            this.stripPrefix = stripPrefix;\n        }\n\n        public Boolean getRetryable() {\n            return retryable;\n        }\n\n        public void setRetryable(Boolean retryable) {\n            this.retryable = retryable;\n        }\n\n        public Boolean getEnabled() {\n            return enabled;\n        }\n\n        public void setEnabled(Boolean enabled) {\n            this.enabled = enabled;\n        }\n    }\n}\n```\n配置这个自定义的路由定位器：\n\n```java\n@Configuration\npublic class CustomZuulConfig {\n\n    @Autowired\n    ZuulProperties zuulProperties;\n    @Autowired\n    ServerProperties server;\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n    @Bean\n    public CustomRouteLocator routeLocator() {\n        CustomRouteLocator routeLocator = new CustomRouteLocator(this.server.getServletPrefix(), this.zuulProperties);\n        routeLocator.setJdbcTemplate(jdbcTemplate);\n        return routeLocator;\n    }\n\n}\n```\n现在容器启动时，就可以从数据库和配置文件中一起加载路由信息了，离动态路由还差最后一步，就是实时刷新，前面已经说过了，默认的ZuulConfigure已经配置了事件监听器，我们只需要发送一个事件就可以实现刷新了。\n\n```java\npublic class RefreshRouteService {\n\n    @Autowired\n    ApplicationEventPublisher publisher;\n\n    @Autowired\n    RouteLocator routeLocator;\n\n    public void refreshRoute() {\n        RoutesRefreshedEvent routesRefreshedEvent = new RoutesRefreshedEvent(routeLocator);\n        publisher.publishEvent(routesRefreshedEvent);\n    }\n\n}\n```\n具体的刷新流程其实就是从数据库重新加载了一遍，有人可能会问，为什么不自己是手动重新加载Locator.dorefresh？非要用事件去刷新。这牵扯到内部的zuul内部组件的工作流程，不仅仅是Locator本身的一个变量，具体想要了解的还得去看源码。\n\n到这儿我们就实现了动态路由了，所以的实例代码和建表语句我会放到github上，下载的时候记得给我star   QAQ \n\n[github地址](https://github.com/lexburner/zuul-gateway-demo)\n\n","slug":"springcloud----Zuul动态路由","published":1,"updated":"2017-09-04T11:49:26.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3ztr002jtwv7eyggo7kh","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Zuul 是Netflix 提供的一个开源组件,致力于在云平台上提供动态路由，监控，弹性，安全等边缘服务的框架。也有很多公司使用它来作为网关的重要组成部分，碰巧今年公司的架构组决定自研一个网关产品，集动态路由，动态权限，限流配额等功能为一体，为其他部门的项目提供统一的外网调用管理，最终形成产品(这方面阿里其实已经有成熟的网关产品了，但是不太适用于个性化的配置，也没有集成权限和限流降级)。</p>\n<p>不过这里并不想介绍整个网关的架构，而是想着重于讨论其中的一个关键点，并且也是经常在交流群中听人说起的：动态路由怎么做？</p>\n<p>再阐释什么是动态路由之前，需要介绍一下架构的设计。</p>\n<h2 id=\"传统互联网架构图\"><a href=\"#传统互联网架构图\" class=\"headerlink\" title=\"传统互联网架构图\"></a>传统互联网架构图</h2><p><img src=\"http://img.blog.csdn.net/20170401101904656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>上图是没有网关参与的一个最典型的互联网架构(本文中统一使用book代表应用实例，即真正提供服务的一个业务系统)</p>\n<h2 id=\"加入eureka的架构图\"><a href=\"#加入eureka的架构图\" class=\"headerlink\" title=\"加入eureka的架构图\"></a>加入eureka的架构图</h2><p><img src=\"http://img.blog.csdn.net/20170401103146894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>book注册到eureka注册中心中，zuul本身也连接着同一个eureka，可以拉取book众多实例的列表。服务中心的注册发现一直是值得推崇的一种方式，但是不适用与网关产品。因为我们的网关是面向众多的<strong>其他部门</strong>的<strong>已有</strong>或是<strong>异构架构</strong>的系统，不应该强求其他系统都使用eureka，这样是有侵入性的设计。</p>\n<h2 id=\"最终架构图\"><a href=\"#最终架构图\" class=\"headerlink\" title=\"最终架构图\"></a>最终架构图</h2><p><img src=\"http://img.blog.csdn.net/20170401111650676?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>要强调的一点是，gateway最终也会部署多个实例，达到分布式的效果，在架构图中没有画出，请大家自行脑补。</p>\n<p>本博客的示例使用最后一章架构图为例，带来动态路由的实现方式，会有具体的代码。</p>\n<a id=\"more\"></a>\n<h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><p>动态路由需要达到可持久化配置，动态刷新的效果。如架构图所示，不仅要能满足从spring的配置文件properties加载路由信息，还需要从数据库加载我们的配置。另外一点是，路由信息在容器启动时就已经加载进入了内存，我们希望配置完成后，实施发布，动态刷新内存中的路由信息，达到不停机维护路由信息的效果。</p>\n<h2 id=\"zuul–HelloWorldDemo\"><a href=\"#zuul–HelloWorldDemo\" class=\"headerlink\" title=\"zuul–HelloWorldDemo\"></a>zuul–HelloWorldDemo</h2><p>项目结构<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.sinosoft<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zuul-gateway-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>gateway<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>book<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Camden.SR6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>tip：springboot-1.5.2对应的springcloud的版本需要使用Camden.SR6，一开始想专门写这个demo时，只替换了springboot的版本1.4.0-&gt;1.5.2，结果启动就报错了，最后发现是版本不兼容的锅。</p>\n<p>gateway项目：<br>启动类：<code>GatewayApplication.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableZuulProxy</span></div><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GatewayApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        SpringApplication.run(GatewayApplication.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>配置：<code>application.properties</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#配置在配置文件中的路由信息</div><div class=\"line\">zuul.routes.books.url=http://localhost:8090</div><div class=\"line\">zuul.routes.books.path=/books/**</div><div class=\"line\">#不使用注册中心,会带来侵入性</div><div class=\"line\">ribbon.eureka.enabled=false</div><div class=\"line\">#网关端口</div><div class=\"line\">server.port=8080</div></pre></td></tr></table></figure>\n<p>book项目：<br>启动类：<code>BookApplication.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/available\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">available</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Spring in Action\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Spring in Action\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/checked-out\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">checkedOut</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Spring Boot in Action\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        SpringApplication.run(BookApplication.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>配置类：<code>application.properties</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.port=8090</div></pre></td></tr></table></figure>\n<p>测试访问：<a href=\"http://localhost:8080/books/available\" target=\"_blank\" rel=\"external\">http://localhost:8080/books/available</a></p>\n<p>上述demo是一个简单的<strong>静态路由</strong>，简单看下源码，zuul是怎么做到转发，路由的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(&#123; ZuulProperties.class &#125;)</div><div class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(ZuulServlet.class)</div><div class=\"line\"><span class=\"meta\">@Import</span>(ServerPropertiesAutoConfiguration.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZuulConfiguration</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"comment\">//zuul的配置文件,对应了application.properties中的配置信息</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> ZuulProperties zuulProperties;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> ServerProperties server;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Autowired</span>(required = <span class=\"keyword\">false</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> ErrorController errorController;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HasFeatures <span class=\"title\">zuulFeature</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> HasFeatures.namedFeature(<span class=\"string\">\"Zuul (Simple)\"</span>, ZuulConfiguration.class);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//核心类，路由定位器，最最重要</span></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean</span>(RouteLocator.class)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> RouteLocator <span class=\"title\">routeLocator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//默认配置的实现是SimpleRouteLocator.class</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleRouteLocator(<span class=\"keyword\">this</span>.server.getServletPrefix(),</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.zuulProperties);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//zuul的控制器，负责处理链路调用</span></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ZuulController <span class=\"title\">zuulController</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ZuulController();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//MVC HandlerMapping that maps incoming request paths to remote services.</span></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ZuulHandlerMapping <span class=\"title\">zuulHandlerMapping</span><span class=\"params\">(RouteLocator routes)</span> </span>&#123;</div><div class=\"line\">\t\tZuulHandlerMapping mapping = <span class=\"keyword\">new</span> ZuulHandlerMapping(routes, zuulController());</div><div class=\"line\">\t\tmapping.setErrorController(<span class=\"keyword\">this</span>.errorController);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mapping;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//注册了一个路由刷新监听器，默认实现是ZuulRefreshListener.class，这个是我们动态路由的关键</span></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ApplicationListener&lt;ApplicationEvent&gt; <span class=\"title\">zuulRefreshRoutesListener</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ZuulRefreshListener();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean</span>(name = <span class=\"string\">\"zuulServlet\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">zuulServlet</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tServletRegistrationBean servlet = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> ZuulServlet(),</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.zuulProperties.getServletPattern());</div><div class=\"line\">\t\t<span class=\"comment\">// The whole point of exposing this servlet is to provide a route that doesn't</span></div><div class=\"line\">\t\t<span class=\"comment\">// buffer requests.</span></div><div class=\"line\">\t\tservlet.addInitParameter(<span class=\"string\">\"buffer-requests\"</span>, <span class=\"string\">\"false\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> servlet;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// pre filters</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ServletDetectionFilter <span class=\"title\">servletDetectionFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ServletDetectionFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> FormBodyWrapperFilter <span class=\"title\">formBodyWrapperFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FormBodyWrapperFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DebugFilter <span class=\"title\">debugFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DebugFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Servlet30WrapperFilter <span class=\"title\">servlet30WrapperFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Servlet30WrapperFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// post filters</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> SendResponseFilter <span class=\"title\">sendResponseFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SendResponseFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> SendErrorFilter <span class=\"title\">sendErrorFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SendErrorFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> SendForwardFilter <span class=\"title\">sendForwardFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SendForwardFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Configuration</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZuulFilterConfiguration</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> Map&lt;String, ZuulFilter&gt; filters;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> ZuulFilterInitializer <span class=\"title\">zuulFilterInitializer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ZuulFilterInitializer(<span class=\"keyword\">this</span>.filters);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//上面提到的路由刷新监听器</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZuulRefreshListener</span></span></div><div class=\"line\"><span class=\"class\">\t\t\t<span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">ApplicationEvent</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> ZuulHandlerMapping zuulHandlerMapping;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> HeartbeatMonitor heartbeatMonitor = <span class=\"keyword\">new</span> HeartbeatMonitor();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ApplicationEvent event)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> ContextRefreshedEvent</div><div class=\"line\">\t\t\t\t\t|| event <span class=\"keyword\">instanceof</span> RefreshScopeRefreshedEvent</div><div class=\"line\">\t\t\t\t\t|| event <span class=\"keyword\">instanceof</span> RoutesRefreshedEvent) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//设置为脏,下一次匹配到路径时，如果发现为脏，则会去刷新路由信息</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.zuulHandlerMapping.setDirty(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> HeartbeatEvent) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.heartbeatMonitor.update(((HeartbeatEvent) event).getValue())) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">this</span>.zuulHandlerMapping.setDirty(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们要解决动态路由的难题，第一步就得理解路由定位器的作用。<br><img src=\"http://img.blog.csdn.net/20170401115214231?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>很失望，因为从接口关系来看，spring考虑到了路由刷新的需求，但是默认实现的SimpleRouteLocator没有实现RefreshableRouteLocator接口，看来我们只能借鉴DiscoveryClientRouteLocator去改造SimpleRouteLocator使其具备刷新能力。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RefreshableRouteLocator</span> <span class=\"keyword\">extends</span> <span class=\"title\">RouteLocator</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>DiscoveryClientRouteLocator比SimpleRouteLocator多了两个功能，第一是从DiscoveryClient（如Eureka）发现路由信息，之前的架构图已经给大家解释清楚了，我们不想使用eureka这种侵入式的网关模块，所以忽略它，第二是实现了RefreshableRouteLocator接口，能够实现动态刷新。<br>对SimpleRouteLocator.class的源码加一些注释，方便大家阅读：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleRouteLocator</span> <span class=\"keyword\">implements</span> <span class=\"title\">RouteLocator</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//配置文件中的路由信息配置</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> ZuulProperties properties;</div><div class=\"line\">\t<span class=\"comment\">//路径正则配置器,即作用于path:/books/**</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> PathMatcher pathMatcher = <span class=\"keyword\">new</span> AntPathMatcher();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String dispatcherServletPath = <span class=\"string\">\"/\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String zuulServletPath;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> AtomicReference&lt;Map&lt;String, ZuulRoute&gt;&gt; routes = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleRouteLocator</span><span class=\"params\">(String servletPath, ZuulProperties properties)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.properties = properties;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (servletPath != <span class=\"keyword\">null</span> &amp;&amp; StringUtils.hasText(servletPath)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.dispatcherServletPath = servletPath;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.zuulServletPath = properties.getServletPath();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//路由定位器和其他组件的交互，是最终把定位的Routes以list的方式提供出去,核心实现</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Route&gt; <span class=\"title\">getRoutes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.routes.get() == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.routes.set(locateRoutes());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tList&lt;Route&gt; values = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (String url : <span class=\"keyword\">this</span>.routes.get().keySet()) &#123;</div><div class=\"line\">\t\t\tZuulRoute route = <span class=\"keyword\">this</span>.routes.get().get(url);</div><div class=\"line\">\t\t\tString path = route.getPath();</div><div class=\"line\">\t\t\tvalues.add(getRoute(route, path));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> values;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Collection&lt;String&gt; <span class=\"title\">getIgnoredPaths</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.properties.getIgnoredPatterns();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//这个方法在网关产品中也很重要，可以根据实际路径匹配到Route来进行业务逻辑的操作，进行一些加工</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Route <span class=\"title\">getMatchingRoute</span><span class=\"params\">(<span class=\"keyword\">final</span> String path)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"Finding route for path: \"</span> + path);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.routes.get() == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.routes.set(locateRoutes());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"servletPath=\"</span> + <span class=\"keyword\">this</span>.dispatcherServletPath);</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"zuulServletPath=\"</span> + <span class=\"keyword\">this</span>.zuulServletPath);</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"RequestUtils.isDispatcherServletRequest()=\"</span></div><div class=\"line\">\t\t\t\t\t+ RequestUtils.isDispatcherServletRequest());</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"RequestUtils.isZuulServletRequest()=\"</span></div><div class=\"line\">\t\t\t\t\t+ RequestUtils.isZuulServletRequest());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tString adjustedPath = adjustPath(path);</div><div class=\"line\"></div><div class=\"line\">\t\tZuulRoute route = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!matchesIgnoredPatterns(adjustedPath)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Entry&lt;String, ZuulRoute&gt; entry : <span class=\"keyword\">this</span>.routes.get().entrySet()) &#123;</div><div class=\"line\">\t\t\t\tString pattern = entry.getKey();</div><div class=\"line\">\t\t\t\tlog.debug(<span class=\"string\">\"Matching pattern:\"</span> + pattern);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pathMatcher.match(pattern, adjustedPath)) &#123;</div><div class=\"line\">\t\t\t\t\troute = entry.getValue();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"route matched=\"</span> + route);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> getRoute(route, adjustedPath);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Route <span class=\"title\">getRoute</span><span class=\"params\">(ZuulRoute route, String path)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (route == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tString targetPath = path;</div><div class=\"line\">\t\tString prefix = <span class=\"keyword\">this</span>.properties.getPrefix();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (path.startsWith(prefix) &amp;&amp; <span class=\"keyword\">this</span>.properties.isStripPrefix()) &#123;</div><div class=\"line\">\t\t\ttargetPath = path.substring(prefix.length());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (route.isStripPrefix()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> index = route.getPath().indexOf(<span class=\"string\">\"*\"</span>) - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (index &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tString routePrefix = route.getPath().substring(<span class=\"number\">0</span>, index);</div><div class=\"line\">\t\t\t\ttargetPath = targetPath.replaceFirst(routePrefix, <span class=\"string\">\"\"</span>);</div><div class=\"line\">\t\t\t\tprefix = prefix + routePrefix;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tBoolean retryable = <span class=\"keyword\">this</span>.properties.getRetryable();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (route.getRetryable() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tretryable = route.getRetryable();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Route(route.getId(), targetPath, route.getLocation(), prefix,</div><div class=\"line\">\t\t\t\tretryable,</div><div class=\"line\">\t\t\t\troute.isCustomSensitiveHeaders() ? route.getSensitiveHeaders() : <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//注意这个类并没有实现refresh接口，但是却提供了一个protected级别的方法,旨在让子类不需要重复维护一个private AtomicReference&lt;Map&lt;String, ZuulRoute&gt;&gt; routes = new AtomicReference&lt;&gt;();也可以达到刷新的效果</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doRefresh</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.routes.set(locateRoutes());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//具体就是在这儿定位路由信息的，我们之后从数据库加载路由信息，主要也是从这儿改写</span></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * Compute a map of path pattern to route. The default is just a static map from the</span></div><div class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> ZuulProperties&#125;, but subclasses can add dynamic calculations.</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Map&lt;String, ZuulRoute&gt; <span class=\"title\">locateRoutes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tLinkedHashMap&lt;String, ZuulRoute&gt; routesMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, ZuulRoute&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (ZuulRoute route : <span class=\"keyword\">this</span>.properties.getRoutes().values()) &#123;</div><div class=\"line\">\t\t\troutesMap.put(route.getPath(), route);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> routesMap;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matchesIgnoredPatterns</span><span class=\"params\">(String path)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (String pattern : <span class=\"keyword\">this</span>.properties.getIgnoredPatterns()) &#123;</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"Matching ignored pattern:\"</span> + pattern);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pathMatcher.match(pattern, path)) &#123;</div><div class=\"line\">\t\t\t\tlog.debug(<span class=\"string\">\"Path \"</span> + path + <span class=\"string\">\" matches ignored pattern \"</span> + pattern);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">adjustPath</span><span class=\"params\">(<span class=\"keyword\">final</span> String path)</span> </span>&#123;</div><div class=\"line\">\t\tString adjustedPath = path;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (RequestUtils.isDispatcherServletRequest()</div><div class=\"line\">\t\t\t\t&amp;&amp; StringUtils.hasText(<span class=\"keyword\">this</span>.dispatcherServletPath)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.dispatcherServletPath.equals(<span class=\"string\">\"/\"</span>)) &#123;</div><div class=\"line\">\t\t\t\tadjustedPath = path.substring(<span class=\"keyword\">this</span>.dispatcherServletPath.length());</div><div class=\"line\">\t\t\t\tlog.debug(<span class=\"string\">\"Stripped dispatcherServletPath\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (RequestUtils.isZuulServletRequest()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.zuulServletPath)</div><div class=\"line\">\t\t\t\t\t&amp;&amp; !<span class=\"keyword\">this</span>.zuulServletPath.equals(<span class=\"string\">\"/\"</span>)) &#123;</div><div class=\"line\">\t\t\t\tadjustedPath = path.substring(<span class=\"keyword\">this</span>.zuulServletPath.length());</div><div class=\"line\">\t\t\t\tlog.debug(<span class=\"string\">\"Stripped zuulServletPath\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// do nothing</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tlog.debug(<span class=\"string\">\"adjustedPath=\"</span> + path);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> adjustedPath;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重写过后的自定义路由定位器如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomRouteLocator</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleRouteLocator</span> <span class=\"keyword\">implements</span> <span class=\"title\">RefreshableRouteLocator</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(CustomRouteLocator.class);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ZuulProperties properties;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setJdbcTemplate</span><span class=\"params\">(JdbcTemplate jdbcTemplate)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.jdbcTemplate = jdbcTemplate;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomRouteLocator</span><span class=\"params\">(String servletPath, ZuulProperties properties)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(servletPath, properties);</div><div class=\"line\">        <span class=\"keyword\">this</span>.properties = properties;</div><div class=\"line\">        logger.info(<span class=\"string\">\"servletPath:&#123;&#125;\"</span>,servletPath);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//父类已经提供了这个方法，这里写出来只是为了说明这一个方法很重要！！！</span></div><div class=\"line\"><span class=\"comment\">//    @Override</span></div><div class=\"line\"><span class=\"comment\">//    protected void doRefresh() &#123;</span></div><div class=\"line\"><span class=\"comment\">//        super.doRefresh();</span></div><div class=\"line\"><span class=\"comment\">//    &#125;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        doRefresh();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Map&lt;String, ZuulRoute&gt; <span class=\"title\">locateRoutes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        LinkedHashMap&lt;String, ZuulRoute&gt; routesMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, ZuulRoute&gt;();</div><div class=\"line\">        <span class=\"comment\">//从application.properties中加载路由信息</span></div><div class=\"line\">        routesMap.putAll(<span class=\"keyword\">super</span>.locateRoutes());</div><div class=\"line\">        <span class=\"comment\">//从db中加载路由信息</span></div><div class=\"line\">        routesMap.putAll(locateRoutesFromDB());</div><div class=\"line\">        <span class=\"comment\">//优化一下配置</span></div><div class=\"line\">        LinkedHashMap&lt;String, ZuulRoute&gt; values = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, ZuulRoute&gt; entry : routesMap.entrySet()) &#123;</div><div class=\"line\">            String path = entry.getKey();</div><div class=\"line\">            <span class=\"comment\">// Prepend with slash if not already present.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!path.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</div><div class=\"line\">                path = <span class=\"string\">\"/\"</span> + path;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.properties.getPrefix())) &#123;</div><div class=\"line\">                path = <span class=\"keyword\">this</span>.properties.getPrefix() + path;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!path.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</div><div class=\"line\">                    path = <span class=\"string\">\"/\"</span> + path;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            values.put(path, entry.getValue());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> values;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Map&lt;String, ZuulRoute&gt; <span class=\"title\">locateRoutesFromDB</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        Map&lt;String, ZuulRoute&gt; routes = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\">        List&lt;ZuulRouteVO&gt; results = jdbcTemplate.query(<span class=\"string\">\"select * from gateway_api_define where enabled = true \"</span>,<span class=\"keyword\">new</span> BeanPropertyRowMapper&lt;&gt;(ZuulRouteVO.class));</div><div class=\"line\">        <span class=\"keyword\">for</span> (ZuulRouteVO result : results) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(org.apache.commons.lang3.StringUtils.isBlank(result.getPath()) || org.apache.commons.lang3.StringUtils.isBlank(result.getUrl()) )&#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            ZuulRoute zuulRoute = <span class=\"keyword\">new</span> ZuulRoute();</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                org.springframework.beans.BeanUtils.copyProperties(result,zuulRoute);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                logger.error(<span class=\"string\">\"=============load zuul route info from db with error==============\"</span>,e);</div><div class=\"line\">            &#125;</div><div class=\"line\">            routes.put(zuulRoute.getPath(),zuulRoute);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> routes;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZuulRouteVO</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * The ID of the route (the same as its map key by default).</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String id;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * The path (pattern) for the route, e.g. /foo/**.</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String path;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * The service ID (if any) to map to this route. You can specify a physical URL or</span></div><div class=\"line\"><span class=\"comment\">         * a service, but not both.</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String serviceId;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * A full physical URL to map to the route. An alternative is to use a service ID</span></div><div class=\"line\"><span class=\"comment\">         * and service discovery to find the physical address.</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String url;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * Flag to determine whether the prefix for this route (the path, minus pattern</span></div><div class=\"line\"><span class=\"comment\">         * patcher) should be stripped before forwarding.</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> stripPrefix = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * Flag to indicate that this route should be retryable (if supported). Generally</span></div><div class=\"line\"><span class=\"comment\">         * retry requires a service ID and ribbon.</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> Boolean retryable;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> Boolean enabled;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> id;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPath</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> path;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPath</span><span class=\"params\">(String path)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.path = path;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getServiceId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> serviceId;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServiceId</span><span class=\"params\">(String serviceId)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.serviceId = serviceId;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUrl</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> url;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUrl</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.url = url;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isStripPrefix</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> stripPrefix;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStripPrefix</span><span class=\"params\">(<span class=\"keyword\">boolean</span> stripPrefix)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.stripPrefix = stripPrefix;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">getRetryable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> retryable;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRetryable</span><span class=\"params\">(Boolean retryable)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.retryable = retryable;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">getEnabled</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> enabled;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEnabled</span><span class=\"params\">(Boolean enabled)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.enabled = enabled;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>配置这个自定义的路由定位器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomZuulConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    ZuulProperties zuulProperties;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    ServerProperties server;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    JdbcTemplate jdbcTemplate;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CustomRouteLocator <span class=\"title\">routeLocator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        CustomRouteLocator routeLocator = <span class=\"keyword\">new</span> CustomRouteLocator(<span class=\"keyword\">this</span>.server.getServletPrefix(), <span class=\"keyword\">this</span>.zuulProperties);</div><div class=\"line\">        routeLocator.setJdbcTemplate(jdbcTemplate);</div><div class=\"line\">        <span class=\"keyword\">return</span> routeLocator;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在容器启动时，就可以从数据库和配置文件中一起加载路由信息了，离动态路由还差最后一步，就是实时刷新，前面已经说过了，默认的ZuulConfigure已经配置了事件监听器，我们只需要发送一个事件就可以实现刷新了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefreshRouteService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    ApplicationEventPublisher publisher;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    RouteLocator routeLocator;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshRoute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        RoutesRefreshedEvent routesRefreshedEvent = <span class=\"keyword\">new</span> RoutesRefreshedEvent(routeLocator);</div><div class=\"line\">        publisher.publishEvent(routesRefreshedEvent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体的刷新流程其实就是从数据库重新加载了一遍，有人可能会问，为什么不自己是手动重新加载Locator.dorefresh？非要用事件去刷新。这牵扯到内部的zuul内部组件的工作流程，不仅仅是Locator本身的一个变量，具体想要了解的还得去看源码。</p>\n<p>到这儿我们就实现了动态路由了，所以的实例代码和建表语句我会放到github上，下载的时候记得给我star   QAQ </p>\n<p><a href=\"https://github.com/lexburner/zuul-gateway-demo\" target=\"_blank\" rel=\"external\">github地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Zuul 是Netflix 提供的一个开源组件,致力于在云平台上提供动态路由，监控，弹性，安全等边缘服务的框架。也有很多公司使用它来作为网关的重要组成部分，碰巧今年公司的架构组决定自研一个网关产品，集动态路由，动态权限，限流配额等功能为一体，为其他部门的项目提供统一的外网调用管理，最终形成产品(这方面阿里其实已经有成熟的网关产品了，但是不太适用于个性化的配置，也没有集成权限和限流降级)。</p>\n<p>不过这里并不想介绍整个网关的架构，而是想着重于讨论其中的一个关键点，并且也是经常在交流群中听人说起的：动态路由怎么做？</p>\n<p>再阐释什么是动态路由之前，需要介绍一下架构的设计。</p>\n<h2 id=\"传统互联网架构图\"><a href=\"#传统互联网架构图\" class=\"headerlink\" title=\"传统互联网架构图\"></a>传统互联网架构图</h2><p><img src=\"http://img.blog.csdn.net/20170401101904656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>上图是没有网关参与的一个最典型的互联网架构(本文中统一使用book代表应用实例，即真正提供服务的一个业务系统)</p>\n<h2 id=\"加入eureka的架构图\"><a href=\"#加入eureka的架构图\" class=\"headerlink\" title=\"加入eureka的架构图\"></a>加入eureka的架构图</h2><p><img src=\"http://img.blog.csdn.net/20170401103146894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>book注册到eureka注册中心中，zuul本身也连接着同一个eureka，可以拉取book众多实例的列表。服务中心的注册发现一直是值得推崇的一种方式，但是不适用与网关产品。因为我们的网关是面向众多的<strong>其他部门</strong>的<strong>已有</strong>或是<strong>异构架构</strong>的系统，不应该强求其他系统都使用eureka，这样是有侵入性的设计。</p>\n<h2 id=\"最终架构图\"><a href=\"#最终架构图\" class=\"headerlink\" title=\"最终架构图\"></a>最终架构图</h2><p><img src=\"http://img.blog.csdn.net/20170401111650676?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>要强调的一点是，gateway最终也会部署多个实例，达到分布式的效果，在架构图中没有画出，请大家自行脑补。</p>\n<p>本博客的示例使用最后一章架构图为例，带来动态路由的实现方式，会有具体的代码。</p>","more":"<h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><p>动态路由需要达到可持久化配置，动态刷新的效果。如架构图所示，不仅要能满足从spring的配置文件properties加载路由信息，还需要从数据库加载我们的配置。另外一点是，路由信息在容器启动时就已经加载进入了内存，我们希望配置完成后，实施发布，动态刷新内存中的路由信息，达到不停机维护路由信息的效果。</p>\n<h2 id=\"zuul–HelloWorldDemo\"><a href=\"#zuul–HelloWorldDemo\" class=\"headerlink\" title=\"zuul–HelloWorldDemo\"></a>zuul–HelloWorldDemo</h2><p>项目结构<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.sinosoft<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>zuul-gateway-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>gateway<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>book<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Camden.SR6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>tip：springboot-1.5.2对应的springcloud的版本需要使用Camden.SR6，一开始想专门写这个demo时，只替换了springboot的版本1.4.0-&gt;1.5.2，结果启动就报错了，最后发现是版本不兼容的锅。</p>\n<p>gateway项目：<br>启动类：<code>GatewayApplication.java</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableZuulProxy</span></div><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GatewayApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        SpringApplication.run(GatewayApplication.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>配置：<code>application.properties</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#配置在配置文件中的路由信息</div><div class=\"line\">zuul.routes.books.url=http://localhost:8090</div><div class=\"line\">zuul.routes.books.path=/books/**</div><div class=\"line\">#不使用注册中心,会带来侵入性</div><div class=\"line\">ribbon.eureka.enabled=false</div><div class=\"line\">#网关端口</div><div class=\"line\">server.port=8080</div></pre></td></tr></table></figure>\n<p>book项目：<br>启动类：<code>BookApplication.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookApplication</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/available\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">available</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Spring in Action\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Spring in Action\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/checked-out\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">checkedOut</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Spring Boot in Action\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        SpringApplication.run(BookApplication.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>配置类：<code>application.properties</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.port=8090</div></pre></td></tr></table></figure>\n<p>测试访问：<a href=\"http://localhost:8080/books/available\" target=\"_blank\" rel=\"external\">http://localhost:8080/books/available</a></p>\n<p>上述demo是一个简单的<strong>静态路由</strong>，简单看下源码，zuul是怎么做到转发，路由的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(&#123; ZuulProperties.class &#125;)</div><div class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(ZuulServlet.class)</div><div class=\"line\"><span class=\"meta\">@Import</span>(ServerPropertiesAutoConfiguration.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZuulConfiguration</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"comment\">//zuul的配置文件,对应了application.properties中的配置信息</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> ZuulProperties zuulProperties;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> ServerProperties server;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Autowired</span>(required = <span class=\"keyword\">false</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> ErrorController errorController;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> HasFeatures <span class=\"title\">zuulFeature</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> HasFeatures.namedFeature(<span class=\"string\">\"Zuul (Simple)\"</span>, ZuulConfiguration.class);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//核心类，路由定位器，最最重要</span></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean</span>(RouteLocator.class)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> RouteLocator <span class=\"title\">routeLocator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//默认配置的实现是SimpleRouteLocator.class</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleRouteLocator(<span class=\"keyword\">this</span>.server.getServletPrefix(),</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.zuulProperties);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//zuul的控制器，负责处理链路调用</span></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ZuulController <span class=\"title\">zuulController</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ZuulController();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//MVC HandlerMapping that maps incoming request paths to remote services.</span></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ZuulHandlerMapping <span class=\"title\">zuulHandlerMapping</span><span class=\"params\">(RouteLocator routes)</span> </span>&#123;</div><div class=\"line\">\t\tZuulHandlerMapping mapping = <span class=\"keyword\">new</span> ZuulHandlerMapping(routes, zuulController());</div><div class=\"line\">\t\tmapping.setErrorController(<span class=\"keyword\">this</span>.errorController);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> mapping;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//注册了一个路由刷新监听器，默认实现是ZuulRefreshListener.class，这个是我们动态路由的关键</span></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ApplicationListener&lt;ApplicationEvent&gt; <span class=\"title\">zuulRefreshRoutesListener</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ZuulRefreshListener();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean</span>(name = <span class=\"string\">\"zuulServlet\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">zuulServlet</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tServletRegistrationBean servlet = <span class=\"keyword\">new</span> ServletRegistrationBean(<span class=\"keyword\">new</span> ZuulServlet(),</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.zuulProperties.getServletPattern());</div><div class=\"line\">\t\t<span class=\"comment\">// The whole point of exposing this servlet is to provide a route that doesn't</span></div><div class=\"line\">\t\t<span class=\"comment\">// buffer requests.</span></div><div class=\"line\">\t\tservlet.addInitParameter(<span class=\"string\">\"buffer-requests\"</span>, <span class=\"string\">\"false\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> servlet;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// pre filters</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ServletDetectionFilter <span class=\"title\">servletDetectionFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ServletDetectionFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> FormBodyWrapperFilter <span class=\"title\">formBodyWrapperFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FormBodyWrapperFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DebugFilter <span class=\"title\">debugFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DebugFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Servlet30WrapperFilter <span class=\"title\">servlet30WrapperFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Servlet30WrapperFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// post filters</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> SendResponseFilter <span class=\"title\">sendResponseFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SendResponseFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> SendErrorFilter <span class=\"title\">sendErrorFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SendErrorFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> SendForwardFilter <span class=\"title\">sendForwardFilter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SendForwardFilter();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Configuration</span></div><div class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZuulFilterConfiguration</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> Map&lt;String, ZuulFilter&gt; filters;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Bean</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> ZuulFilterInitializer <span class=\"title\">zuulFilterInitializer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ZuulFilterInitializer(<span class=\"keyword\">this</span>.filters);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//上面提到的路由刷新监听器</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZuulRefreshListener</span></span></div><div class=\"line\"><span class=\"class\">\t\t\t<span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">ApplicationEvent</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> ZuulHandlerMapping zuulHandlerMapping;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">private</span> HeartbeatMonitor heartbeatMonitor = <span class=\"keyword\">new</span> HeartbeatMonitor();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ApplicationEvent event)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> ContextRefreshedEvent</div><div class=\"line\">\t\t\t\t\t|| event <span class=\"keyword\">instanceof</span> RefreshScopeRefreshedEvent</div><div class=\"line\">\t\t\t\t\t|| event <span class=\"keyword\">instanceof</span> RoutesRefreshedEvent) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//设置为脏,下一次匹配到路径时，如果发现为脏，则会去刷新路由信息</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.zuulHandlerMapping.setDirty(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> HeartbeatEvent) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.heartbeatMonitor.update(((HeartbeatEvent) event).getValue())) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">this</span>.zuulHandlerMapping.setDirty(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们要解决动态路由的难题，第一步就得理解路由定位器的作用。<br><img src=\"http://img.blog.csdn.net/20170401115214231?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>很失望，因为从接口关系来看，spring考虑到了路由刷新的需求，但是默认实现的SimpleRouteLocator没有实现RefreshableRouteLocator接口，看来我们只能借鉴DiscoveryClientRouteLocator去改造SimpleRouteLocator使其具备刷新能力。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RefreshableRouteLocator</span> <span class=\"keyword\">extends</span> <span class=\"title\">RouteLocator</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>DiscoveryClientRouteLocator比SimpleRouteLocator多了两个功能，第一是从DiscoveryClient（如Eureka）发现路由信息，之前的架构图已经给大家解释清楚了，我们不想使用eureka这种侵入式的网关模块，所以忽略它，第二是实现了RefreshableRouteLocator接口，能够实现动态刷新。<br>对SimpleRouteLocator.class的源码加一些注释，方便大家阅读：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleRouteLocator</span> <span class=\"keyword\">implements</span> <span class=\"title\">RouteLocator</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//配置文件中的路由信息配置</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> ZuulProperties properties;</div><div class=\"line\">\t<span class=\"comment\">//路径正则配置器,即作用于path:/books/**</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> PathMatcher pathMatcher = <span class=\"keyword\">new</span> AntPathMatcher();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> String dispatcherServletPath = <span class=\"string\">\"/\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String zuulServletPath;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> AtomicReference&lt;Map&lt;String, ZuulRoute&gt;&gt; routes = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SimpleRouteLocator</span><span class=\"params\">(String servletPath, ZuulProperties properties)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.properties = properties;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (servletPath != <span class=\"keyword\">null</span> &amp;&amp; StringUtils.hasText(servletPath)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.dispatcherServletPath = servletPath;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.zuulServletPath = properties.getServletPath();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//路由定位器和其他组件的交互，是最终把定位的Routes以list的方式提供出去,核心实现</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Route&gt; <span class=\"title\">getRoutes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.routes.get() == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.routes.set(locateRoutes());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tList&lt;Route&gt; values = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (String url : <span class=\"keyword\">this</span>.routes.get().keySet()) &#123;</div><div class=\"line\">\t\t\tZuulRoute route = <span class=\"keyword\">this</span>.routes.get().get(url);</div><div class=\"line\">\t\t\tString path = route.getPath();</div><div class=\"line\">\t\t\tvalues.add(getRoute(route, path));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> values;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Collection&lt;String&gt; <span class=\"title\">getIgnoredPaths</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.properties.getIgnoredPatterns();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//这个方法在网关产品中也很重要，可以根据实际路径匹配到Route来进行业务逻辑的操作，进行一些加工</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Route <span class=\"title\">getMatchingRoute</span><span class=\"params\">(<span class=\"keyword\">final</span> String path)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"Finding route for path: \"</span> + path);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.routes.get() == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.routes.set(locateRoutes());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"servletPath=\"</span> + <span class=\"keyword\">this</span>.dispatcherServletPath);</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"zuulServletPath=\"</span> + <span class=\"keyword\">this</span>.zuulServletPath);</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"RequestUtils.isDispatcherServletRequest()=\"</span></div><div class=\"line\">\t\t\t\t\t+ RequestUtils.isDispatcherServletRequest());</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"RequestUtils.isZuulServletRequest()=\"</span></div><div class=\"line\">\t\t\t\t\t+ RequestUtils.isZuulServletRequest());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tString adjustedPath = adjustPath(path);</div><div class=\"line\"></div><div class=\"line\">\t\tZuulRoute route = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!matchesIgnoredPatterns(adjustedPath)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Entry&lt;String, ZuulRoute&gt; entry : <span class=\"keyword\">this</span>.routes.get().entrySet()) &#123;</div><div class=\"line\">\t\t\t\tString pattern = entry.getKey();</div><div class=\"line\">\t\t\t\tlog.debug(<span class=\"string\">\"Matching pattern:\"</span> + pattern);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pathMatcher.match(pattern, adjustedPath)) &#123;</div><div class=\"line\">\t\t\t\t\troute = entry.getValue();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"route matched=\"</span> + route);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> getRoute(route, adjustedPath);</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Route <span class=\"title\">getRoute</span><span class=\"params\">(ZuulRoute route, String path)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (route == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tString targetPath = path;</div><div class=\"line\">\t\tString prefix = <span class=\"keyword\">this</span>.properties.getPrefix();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (path.startsWith(prefix) &amp;&amp; <span class=\"keyword\">this</span>.properties.isStripPrefix()) &#123;</div><div class=\"line\">\t\t\ttargetPath = path.substring(prefix.length());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (route.isStripPrefix()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> index = route.getPath().indexOf(<span class=\"string\">\"*\"</span>) - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (index &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\tString routePrefix = route.getPath().substring(<span class=\"number\">0</span>, index);</div><div class=\"line\">\t\t\t\ttargetPath = targetPath.replaceFirst(routePrefix, <span class=\"string\">\"\"</span>);</div><div class=\"line\">\t\t\t\tprefix = prefix + routePrefix;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tBoolean retryable = <span class=\"keyword\">this</span>.properties.getRetryable();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (route.getRetryable() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\tretryable = route.getRetryable();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Route(route.getId(), targetPath, route.getLocation(), prefix,</div><div class=\"line\">\t\t\t\tretryable,</div><div class=\"line\">\t\t\t\troute.isCustomSensitiveHeaders() ? route.getSensitiveHeaders() : <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//注意这个类并没有实现refresh接口，但是却提供了一个protected级别的方法,旨在让子类不需要重复维护一个private AtomicReference&lt;Map&lt;String, ZuulRoute&gt;&gt; routes = new AtomicReference&lt;&gt;();也可以达到刷新的效果</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doRefresh</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.routes.set(locateRoutes());</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//具体就是在这儿定位路由信息的，我们之后从数据库加载路由信息，主要也是从这儿改写</span></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * Compute a map of path pattern to route. The default is just a static map from the</span></div><div class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> ZuulProperties&#125;, but subclasses can add dynamic calculations.</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Map&lt;String, ZuulRoute&gt; <span class=\"title\">locateRoutes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tLinkedHashMap&lt;String, ZuulRoute&gt; routesMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, ZuulRoute&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (ZuulRoute route : <span class=\"keyword\">this</span>.properties.getRoutes().values()) &#123;</div><div class=\"line\">\t\t\troutesMap.put(route.getPath(), route);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> routesMap;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matchesIgnoredPatterns</span><span class=\"params\">(String path)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (String pattern : <span class=\"keyword\">this</span>.properties.getIgnoredPatterns()) &#123;</div><div class=\"line\">\t\t\tlog.debug(<span class=\"string\">\"Matching ignored pattern:\"</span> + pattern);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pathMatcher.match(pattern, path)) &#123;</div><div class=\"line\">\t\t\t\tlog.debug(<span class=\"string\">\"Path \"</span> + path + <span class=\"string\">\" matches ignored pattern \"</span> + pattern);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">adjustPath</span><span class=\"params\">(<span class=\"keyword\">final</span> String path)</span> </span>&#123;</div><div class=\"line\">\t\tString adjustedPath = path;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (RequestUtils.isDispatcherServletRequest()</div><div class=\"line\">\t\t\t\t&amp;&amp; StringUtils.hasText(<span class=\"keyword\">this</span>.dispatcherServletPath)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.dispatcherServletPath.equals(<span class=\"string\">\"/\"</span>)) &#123;</div><div class=\"line\">\t\t\t\tadjustedPath = path.substring(<span class=\"keyword\">this</span>.dispatcherServletPath.length());</div><div class=\"line\">\t\t\t\tlog.debug(<span class=\"string\">\"Stripped dispatcherServletPath\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (RequestUtils.isZuulServletRequest()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.zuulServletPath)</div><div class=\"line\">\t\t\t\t\t&amp;&amp; !<span class=\"keyword\">this</span>.zuulServletPath.equals(<span class=\"string\">\"/\"</span>)) &#123;</div><div class=\"line\">\t\t\t\tadjustedPath = path.substring(<span class=\"keyword\">this</span>.zuulServletPath.length());</div><div class=\"line\">\t\t\t\tlog.debug(<span class=\"string\">\"Stripped zuulServletPath\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// do nothing</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tlog.debug(<span class=\"string\">\"adjustedPath=\"</span> + path);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> adjustedPath;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重写过后的自定义路由定位器如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomRouteLocator</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleRouteLocator</span> <span class=\"keyword\">implements</span> <span class=\"title\">RefreshableRouteLocator</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(CustomRouteLocator.class);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ZuulProperties properties;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setJdbcTemplate</span><span class=\"params\">(JdbcTemplate jdbcTemplate)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.jdbcTemplate = jdbcTemplate;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomRouteLocator</span><span class=\"params\">(String servletPath, ZuulProperties properties)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(servletPath, properties);</div><div class=\"line\">        <span class=\"keyword\">this</span>.properties = properties;</div><div class=\"line\">        logger.info(<span class=\"string\">\"servletPath:&#123;&#125;\"</span>,servletPath);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//父类已经提供了这个方法，这里写出来只是为了说明这一个方法很重要！！！</span></div><div class=\"line\"><span class=\"comment\">//    @Override</span></div><div class=\"line\"><span class=\"comment\">//    protected void doRefresh() &#123;</span></div><div class=\"line\"><span class=\"comment\">//        super.doRefresh();</span></div><div class=\"line\"><span class=\"comment\">//    &#125;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        doRefresh();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Map&lt;String, ZuulRoute&gt; <span class=\"title\">locateRoutes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        LinkedHashMap&lt;String, ZuulRoute&gt; routesMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, ZuulRoute&gt;();</div><div class=\"line\">        <span class=\"comment\">//从application.properties中加载路由信息</span></div><div class=\"line\">        routesMap.putAll(<span class=\"keyword\">super</span>.locateRoutes());</div><div class=\"line\">        <span class=\"comment\">//从db中加载路由信息</span></div><div class=\"line\">        routesMap.putAll(locateRoutesFromDB());</div><div class=\"line\">        <span class=\"comment\">//优化一下配置</span></div><div class=\"line\">        LinkedHashMap&lt;String, ZuulRoute&gt; values = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, ZuulRoute&gt; entry : routesMap.entrySet()) &#123;</div><div class=\"line\">            String path = entry.getKey();</div><div class=\"line\">            <span class=\"comment\">// Prepend with slash if not already present.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!path.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</div><div class=\"line\">                path = <span class=\"string\">\"/\"</span> + path;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.properties.getPrefix())) &#123;</div><div class=\"line\">                path = <span class=\"keyword\">this</span>.properties.getPrefix() + path;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!path.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</div><div class=\"line\">                    path = <span class=\"string\">\"/\"</span> + path;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            values.put(path, entry.getValue());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> values;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Map&lt;String, ZuulRoute&gt; <span class=\"title\">locateRoutesFromDB</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        Map&lt;String, ZuulRoute&gt; routes = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\">        List&lt;ZuulRouteVO&gt; results = jdbcTemplate.query(<span class=\"string\">\"select * from gateway_api_define where enabled = true \"</span>,<span class=\"keyword\">new</span> BeanPropertyRowMapper&lt;&gt;(ZuulRouteVO.class));</div><div class=\"line\">        <span class=\"keyword\">for</span> (ZuulRouteVO result : results) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(org.apache.commons.lang3.StringUtils.isBlank(result.getPath()) || org.apache.commons.lang3.StringUtils.isBlank(result.getUrl()) )&#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            ZuulRoute zuulRoute = <span class=\"keyword\">new</span> ZuulRoute();</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                org.springframework.beans.BeanUtils.copyProperties(result,zuulRoute);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                logger.error(<span class=\"string\">\"=============load zuul route info from db with error==============\"</span>,e);</div><div class=\"line\">            &#125;</div><div class=\"line\">            routes.put(zuulRoute.getPath(),zuulRoute);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> routes;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZuulRouteVO</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * The ID of the route (the same as its map key by default).</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String id;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * The path (pattern) for the route, e.g. /foo/**.</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String path;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * The service ID (if any) to map to this route. You can specify a physical URL or</span></div><div class=\"line\"><span class=\"comment\">         * a service, but not both.</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String serviceId;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * A full physical URL to map to the route. An alternative is to use a service ID</span></div><div class=\"line\"><span class=\"comment\">         * and service discovery to find the physical address.</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String url;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * Flag to determine whether the prefix for this route (the path, minus pattern</span></div><div class=\"line\"><span class=\"comment\">         * patcher) should be stripped before forwarding.</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> stripPrefix = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">         * Flag to indicate that this route should be retryable (if supported). Generally</span></div><div class=\"line\"><span class=\"comment\">         * retry requires a service ID and ribbon.</span></div><div class=\"line\"><span class=\"comment\">         */</span></div><div class=\"line\">        <span class=\"keyword\">private</span> Boolean retryable;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> Boolean enabled;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> id;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(String id)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPath</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> path;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPath</span><span class=\"params\">(String path)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.path = path;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getServiceId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> serviceId;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setServiceId</span><span class=\"params\">(String serviceId)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.serviceId = serviceId;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUrl</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> url;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUrl</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.url = url;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isStripPrefix</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> stripPrefix;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStripPrefix</span><span class=\"params\">(<span class=\"keyword\">boolean</span> stripPrefix)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.stripPrefix = stripPrefix;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">getRetryable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> retryable;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRetryable</span><span class=\"params\">(Boolean retryable)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.retryable = retryable;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">getEnabled</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> enabled;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEnabled</span><span class=\"params\">(Boolean enabled)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.enabled = enabled;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>配置这个自定义的路由定位器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomZuulConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    ZuulProperties zuulProperties;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    ServerProperties server;</div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    JdbcTemplate jdbcTemplate;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CustomRouteLocator <span class=\"title\">routeLocator</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        CustomRouteLocator routeLocator = <span class=\"keyword\">new</span> CustomRouteLocator(<span class=\"keyword\">this</span>.server.getServletPrefix(), <span class=\"keyword\">this</span>.zuulProperties);</div><div class=\"line\">        routeLocator.setJdbcTemplate(jdbcTemplate);</div><div class=\"line\">        <span class=\"keyword\">return</span> routeLocator;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在容器启动时，就可以从数据库和配置文件中一起加载路由信息了，离动态路由还差最后一步，就是实时刷新，前面已经说过了，默认的ZuulConfigure已经配置了事件监听器，我们只需要发送一个事件就可以实现刷新了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefreshRouteService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    ApplicationEventPublisher publisher;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    RouteLocator routeLocator;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshRoute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        RoutesRefreshedEvent routesRefreshedEvent = <span class=\"keyword\">new</span> RoutesRefreshedEvent(routeLocator);</div><div class=\"line\">        publisher.publishEvent(routesRefreshedEvent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体的刷新流程其实就是从数据库重新加载了一遍，有人可能会问，为什么不自己是手动重新加载Locator.dorefresh？非要用事件去刷新。这牵扯到内部的zuul内部组件的工作流程，不仅仅是Locator本身的一个变量，具体想要了解的还得去看源码。</p>\n<p>到这儿我们就实现了动态路由了，所以的实例代码和建表语句我会放到github上，下载的时候记得给我star   QAQ </p>\n<p><a href=\"https://github.com/lexburner/zuul-gateway-demo\" target=\"_blank\" rel=\"external\">github地址</a></p>"},{"title":"spring中的懒加载与事务--排坑记录","date":"2017-06-23T05:37:41.000Z","_content":"\n\n\n## 案例描述\n本文主要描述了开发中常见的几个与spring懒加载和事务相关的案例，主要描述常见的使用场景，以及如何规避他们，给出具体的代码。\n1. 在新的线程中，访问某个持久化对象的懒加载属性。\n2. 在quartz定时任务中，访问某个持久化对象的懒加载属性。\n3. 在dubbo，motan一类rpc框架中，远程调用时服务端session关闭的问题。\n\n上面三个案例，其实核心都是一个问题，就是牵扯到spring对事务的管理，而懒加载这个技术，只是比较容易体现出事务出错的一个实践，主要用它来引发问题，进而对问题进行思考。\n\n<!-- more -->\n\n## 前期准备\n为了能直观的暴露出第一个案例的问题，我新建了一个项目，采用传统的mvc分层，一个student.java实体类，一个studentDao.java持久层，一个studentService.java业务层，一个studentController控制层。\n\n```java\n@Entity\n@Table(name = \"student\")\npublic class Student {\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.AUTO)\n\tprivate Integer id;\n\tprivate String name;\n\t\n\tgetter..setter..\n}\n```\n持久层使用springdata，框架自动扩展出CURD方法\n```java\npublic interface StudentDao extends JpaRepository<Student, Integer>{\n}\n```\nservice层，先给出普通的调用方法。用于错误演示。\n```java\n@Service\npublic class StudentService {\n\n    @Autowired\n    StudentDao studentDao;\n\n    public void testNormalGetOne(){\n        Student student = studentDao.getOne(1);\n        System.out.println(student.getName());\n    }\n}\n```\n注意：getOne和findOne都是springdata提供的根据id查找单个实体的方法，区别是前者是懒加载，后者是立即加载。我们使用getOne来进行懒加载的实验，就不用大费周章去写懒加载属性，设置多个实体类了。\n\ncontroller层，不是简简单单的调用，而是在新的线程中调用。使用controller层来代替单元测试（实际项目中，通常使用controller调用service，然后在浏览器或者http工具中调用触发，较为方便）\n```java\n\t@RequestMapping(\"/testNormalGetOne\")\n\t@ResponseBody\n\tpublic String testNormalGetOne() {\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tstudentService.testNormalGetOne();\n\t\t\t}\n\t\t}).start();\n\t\treturn \"testNormalGetOne\";\n\t}\n```\n启动项目后，访问`localhost:8080/testNormalGetOne`报错如下：\n```java\nException in thread \"Thread-6\" org.hibernate.LazyInitializationException: could not initialize proxy - no Session\n\tat org.hibernate.proxy.AbstractLazyInitializer.initialize(AbstractLazyInitializer.java:148)\n\tat org.hibernate.proxy.AbstractLazyInitializer.getImplementation(AbstractLazyInitializer.java:266)\n\tat org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer.invoke(JavassistLazyInitializer.java:68)\n\tat com.example.transaction.entity.Student_$$_jvste17_0.getName(Student_$$_jvste17_0.java)\n\tat com.example.transaction.service.StudentService.testNormalGetOne(StudentService.java:71)\n\tat com.example.transaction.service.StudentService$$FastClassBySpringCGLIB$$f8048714.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:651)\n\tat com.example.transaction.service.StudentService$$EnhancerBySpringCGLIB$$a6640151.testNormalGetOne(<generated>)\n\tat com.example.transaction.controller.StudentController$1.run(StudentController.java:71)\n\tat java.lang.Thread.run(Thread.java:745)\n```\n\n## 问题分析\nno session说明了什么？\n道理很简单，因为spring的session是和线程绑定的，在整个model->dao->service->controller的调用链中，这种事务和线程绑定的机制非常契合。而我们出现的问题正式由于新开启了一个线程，这个线程与调用链的线程不是同一个。\n\n## 问题解决\n我们先使用一种不太优雅的方式解决这个问题。在新的线程中，手动打开session。\n\n```java\npublic void testNormalGetOne() {\n        EntityManagerFactory entityManagerFactory = ApplicationContextProvider.getApplicationContext().getBean(EntityManagerFactory.class);\n        EntityManager entityManager = entityManagerFactory.createEntityManager();\n        EntityManagerHolder entityManagerHolder = new EntityManagerHolder(entityManager);\n        TransactionSynchronizationManager.bindResource(entityManagerFactory, entityManagerHolder);\n        Student student = studentDao.getOne(1);\n        System.out.println(student.getName());\n        TransactionSynchronizationManager.unbindResource(entityManagerFactory);\n        EntityManagerFactoryUtils.closeEntityManager(entityManager);\n}\n```\n由于我们使用了JPA，所以事务是由EntityManagerFactory这个工厂类生成的EntityManager来管理的。`TransactionSynchronizationManager.bindResource(entityManagerFactory, entityManagerHolder);`这个方法使用事务管理器绑定session。\n而`ApplicationContextProvider`这个工具类是用来获取spring容器中的`EntityManagerFactory`的，为什么不用注入的方式，下文讲解。它的代码如下：\n```java\npublic class ApplicationContextProvider implements ApplicationContextAware {\n\n    private static ApplicationContext context = null;\n\n    public static ApplicationContext getApplicationContext() {\n        return context;\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext ac) throws BeansException {\n        context = ac;\n    }\n}\n```\n问题暂时得到了解决。\n\n## 问题再思考\n我们一般情况下使用懒加载属性，为什么没有出现no session的问题呢？相信大家都知道`@Transactional`这个注解，他会帮我们进行事务包裹，当然也会绑定session；以及大家熟知的hiberbate中的`OpenSessionInterceptor`和`OpenSessionInViewFilter`以及jpa中的` OpenEntityManagerInViewInterceptor`都是在没有session的情况下，打开session的过滤器。这种方法开始前依赖事务开启，方法结束后回收资源的操作，非常适合用过滤器拦截器处理，后续的两个未讲解的案例，其实都是使用了特殊的过滤器。\n\n看一下官方文档如何描述这个jpa中的过滤器的：\n\n> 29.3.4 Open EntityManager in View\n\n>If you are running a web application, Spring Boot will by default register OpenEntityManagerInViewInterceptor to apply the \"Open EntityManager in View\" pattern, i.e. to allow for lazy loading in web views. If you don’t want this behavior you should set spring.jpa.open-in-view to false in your application.properties.\n\n我们尝试着关闭这个过滤器：\n配置application.properties/application.yml文件\n```properties\nspring.jpa.open-in-view=false\n```\n再使用正常的方式访问懒加载属性（而不是在一个新的线程中）：\n\n```java\n\t@RequestMapping(\"/testNormalGetOne\")\n\t@ResponseBody\n\tpublic String testNormalGetOne() {\n//\t\tnew Thread(new Runnable() {\n//\t\t\t@Override\n//\t\t\tpublic void run() {\n\t\t\t\tstudentService.testNormalGetOne();\n//\t\t\t}\n//\t\t}).start();\n\t\treturn \"testNormalGetOne\";\n\t}\n```\n报错如下：\n\n```json\n{\"timestamp\":1498194914012,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"org.hibernate.LazyInitializationException\",\"message\":\"could not initialize proxy - no Session\",\"path\":\"/testNormalGetOne\"}\n```\n是的，我们使用spring的controller作为单元测试时，以及我们平时在直接使用jpa的懒加载属性时没有太关注这个jpa的特性，因为springboot帮我们默认开启了这个过滤器。这也解释了，为什么在新的线程中，定时任务线程中，rpc远程调用时session没有打开的原因，因为这些流程没有经过springboot的web调用链。\n\n## 另外两个实战案例\n上文已经阐释了，为什么quartz定时任务中访问懒加载属性，rpc框架服务端访问懒加载属性（注意不是客户端，客户端访问懒加载属性那是一种作死的行为，因为是代理对象）为出现问题。我们仿照spring打开session的思路（这取决于你使用hibernate还是jpa，抑或是mybatis），来编写我们的过滤器。\n\n**quartz中打开session：**\n使用quartz提供的`JobListenerSupport`支持，编写一个任务过滤器，用于在每次任务执行时打开session\n```java\npublic class OpenEntityManagerJobListener extends JobListenerSupport implements ApplicationContextAware {\n\n    @Override\n    public String getName() {\n        return \"OpenEntityManagerJobListener\";\n    }\n\n    EntityManagerFactory entityManagerFactory;\n\n    @Override\n    public void jobToBeExecuted(JobExecutionContext context) {\n        entityManagerFactory = applicationContext.getBean(EntityManagerFactory.class);\n        EntityManager entityManager = entityManagerFactory.createEntityManager();\n        EntityManagerHolder emHolder = new EntityManagerHolder(entityManager);\n        TransactionSynchronizationManager.bindResource(entityManagerFactory, emHolder);\n    }\n\n    @Override\n    public void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {\n        EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.unbindResource(entityManagerFactory);\n        EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());\n    }\n\n\n    ApplicationContext applicationContext;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        this.applicationContext = applicationContext;\n        if(this.applicationContext ==null) throw new RuntimeException(\"applicationContext is null\");\n    }\n}\n```\n**配置调度工厂：**\n\n```java\n//调度工厂\n    @Bean\n    public SchedulerFactoryBean schedulerFactoryBean() {\n        SchedulerFactoryBean factoryBean = new SchedulerFactoryBean();\n        factoryBean.setTriggers(triggerFactoryBeans().getObject());\n        factoryBean.setGlobalJobListeners(openEntityManagerJobListener());\n        return factoryBean;\n    }\n```\n\n也可以参考我的另一篇描述更为细致的文章(解决Quartz定时器中查询懒加载数据no session的问题)，那是我还是刚刚参加工作，可能有些许疏漏之处，不过参考是够了。\n\n**Motan（我现在使用的rpc框架）服务端打开session**\n利用了motan对spi扩展的支持，编写了一个Filter，主要参考了motan的spi过滤器写法和springdata打开session/entityManager的思路。\n```java\n@SpiMeta(name = \"openjpasession\")\n@Activation(sequence = 100)\npublic class OpenEntityManagerInMotanFilter implements Filter {\n    private Logger logger = LoggerFactory.getLogger(OpenEntityManagerInMotanFilter.class);\n\n    /**\n     * Default EntityManagerFactory bean name: \"entityManagerFactory\".\n     * Only applies when no \"persistenceUnitName\" param has been specified.\n     *\n     * @see #setEntityManagerFactoryBeanName\n     * @see #setPersistenceUnitName\n     */\n    public static final String DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME = \"entityManagerFactory\";\n\n\n    private String entityManagerFactoryBeanName;\n\n    private String persistenceUnitName;\n\n    private volatile EntityManagerFactory entityManagerFactory;\n\n\n    /**\n     * Set the bean name of the EntityManagerFactory to fetch from Spring's\n     * root application context.\n     * <p>Default is \"entityManagerFactory\". Note that this default only applies\n     * when no \"persistenceUnitName\" param has been specified.\n     *\n     * @see #setPersistenceUnitName\n     * @see #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME\n     */\n    public void setEntityManagerFactoryBeanName(String entityManagerFactoryBeanName) {\n        this.entityManagerFactoryBeanName = entityManagerFactoryBeanName;\n    }\n\n    /**\n     * Return the bean name of the EntityManagerFactory to fetch from Spring's\n     * root application context.\n     */\n    protected String getEntityManagerFactoryBeanName() {\n        return this.entityManagerFactoryBeanName;\n    }\n\n    /**\n     * Set the name of the persistence unit to access the EntityManagerFactory for.\n     * <p>This is an alternative to specifying the EntityManagerFactory by bean name,\n     * resolving it by its persistence unit name instead. If no bean name and no persistence\n     * unit name have been specified, we'll check whether a bean exists for the default\n     * bean name \"entityManagerFactory\"; if not, a default EntityManagerFactory will\n     * be retrieved through finding a single unique bean of type EntityManagerFactory.\n     *\n     * @see #setEntityManagerFactoryBeanName\n     * @see #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME\n     */\n    public void setPersistenceUnitName(String persistenceUnitName) {\n        this.persistenceUnitName = persistenceUnitName;\n    }\n\n    /**\n     * Return the name of the persistence unit to access the EntityManagerFactory for, if any.\n     */\n    protected String getPersistenceUnitName() {\n        return this.persistenceUnitName;\n    }\n\n    /**\n     * Look up the EntityManagerFactory that this filter should use.\n     * <p>The default implementation looks for a bean with the specified name\n     * in Spring's root application context.\n     *\n     * @return the EntityManagerFactory to use\n     * @see #getEntityManagerFactoryBeanName\n     */\n    protected EntityManagerFactory lookupEntityManagerFactory() {\n\n        String emfBeanName = getEntityManagerFactoryBeanName();\n        String puName = getPersistenceUnitName();\n        if (StringUtils.hasLength(emfBeanName)) {\n            return ApplicationContextProvider.getApplicationContext().getBean(emfBeanName, EntityManagerFactory.class);\n        } else if (!StringUtils.hasLength(puName) && ApplicationContextProvider.getApplicationContext().containsBean(DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME)) {\n            return ApplicationContextProvider.getApplicationContext().getBean(DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME, EntityManagerFactory.class);\n        } else {\n            // Includes fallback search for single EntityManagerFactory bean by type.\n            return EntityManagerFactoryUtils.findEntityManagerFactory(ApplicationContextProvider.getApplicationContext(), puName);\n        }\n    }\n\n    /**\n     * Create a JPA EntityManager to be bound to a request.\n     * <p>Can be overridden in subclasses.\n     *\n     * @param emf the EntityManagerFactory to use\n     * @see javax.persistence.EntityManagerFactory#createEntityManager()\n     */\n    protected EntityManager createEntityManager(EntityManagerFactory emf) {\n        return emf.createEntityManager();\n    }\n\n    @Override\n    public Response filter(Caller<?> caller, Request request) {\n        if (!(caller instanceof Provider)) {\n            return caller.call(request);\n        }\n\n        EntityManagerFactory emf = null;\n        try {\n            emf = lookupEntityManagerFactory();\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n\n        //可能没有启用openjpa\n        if (emf == null) {\n            return caller.call(request);\n        }\n\n        try {\n            //如果没有绑定，绑定到当前线程\n            if (TransactionSynchronizationManager.getResource(emf) == null) {\n                EntityManager em = createEntityManager(emf);\n                EntityManagerHolder emHolder = new EntityManagerHolder(em);\n                TransactionSynchronizationManager.bindResource(emf, emHolder);\n            }\n        } catch (Exception e) {\n            logger.error(e.getLocalizedMessage(), e);\n        }\n        try {\n            return caller.call(request);\n        } finally {\n            //解除绑定\n            closeManager(emf);\n        }\n    }\n\n    /**\n     * 关闭 emf\n     *\n     * @param emf\n     */\n    private void closeManager(EntityManagerFactory emf) {\n        if (emf == null || TransactionSynchronizationManager.getResource(emf) == null) {\n            return;\n        }\n        EntityManagerHolder emHolder = null;\n        try {\n            emHolder = (EntityManagerHolder) TransactionSynchronizationManager.unbindResource(emf);\n        } catch (IllegalStateException e) {\n            logger.error(e.getLocalizedMessage(), e);\n        }\n        try {\n            if (emHolder != null) {\n                EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());\n            }\n        } catch (Exception e) {\n            logger.error(e.getLocalizedMessage(), e);\n        }\n    }\n}\n```\n\n## 总结\nspringboot中的事务管理做的永远比我们想的多，事务管理器的使用场景，@Transactional究竟起了哪些作用，以及spring-data这个对DDD最佳的阐释，以及mybatis一类的非j2ee规范在微服务的地位中是否高于jpa，各个层次之间的实体传输，消息传递...都是值得思考的。\n\n","source":"_posts/spring中的懒加载与事务--排坑记录.md","raw":"---\ntitle: spring中的懒加载与事务--排坑记录\ndate: 2017-06-23 13:37:41\ntags: \n- Spring\n- 事务\ncategories: \n- Spring\n---\n\n\n\n## 案例描述\n本文主要描述了开发中常见的几个与spring懒加载和事务相关的案例，主要描述常见的使用场景，以及如何规避他们，给出具体的代码。\n1. 在新的线程中，访问某个持久化对象的懒加载属性。\n2. 在quartz定时任务中，访问某个持久化对象的懒加载属性。\n3. 在dubbo，motan一类rpc框架中，远程调用时服务端session关闭的问题。\n\n上面三个案例，其实核心都是一个问题，就是牵扯到spring对事务的管理，而懒加载这个技术，只是比较容易体现出事务出错的一个实践，主要用它来引发问题，进而对问题进行思考。\n\n<!-- more -->\n\n## 前期准备\n为了能直观的暴露出第一个案例的问题，我新建了一个项目，采用传统的mvc分层，一个student.java实体类，一个studentDao.java持久层，一个studentService.java业务层，一个studentController控制层。\n\n```java\n@Entity\n@Table(name = \"student\")\npublic class Student {\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.AUTO)\n\tprivate Integer id;\n\tprivate String name;\n\t\n\tgetter..setter..\n}\n```\n持久层使用springdata，框架自动扩展出CURD方法\n```java\npublic interface StudentDao extends JpaRepository<Student, Integer>{\n}\n```\nservice层，先给出普通的调用方法。用于错误演示。\n```java\n@Service\npublic class StudentService {\n\n    @Autowired\n    StudentDao studentDao;\n\n    public void testNormalGetOne(){\n        Student student = studentDao.getOne(1);\n        System.out.println(student.getName());\n    }\n}\n```\n注意：getOne和findOne都是springdata提供的根据id查找单个实体的方法，区别是前者是懒加载，后者是立即加载。我们使用getOne来进行懒加载的实验，就不用大费周章去写懒加载属性，设置多个实体类了。\n\ncontroller层，不是简简单单的调用，而是在新的线程中调用。使用controller层来代替单元测试（实际项目中，通常使用controller调用service，然后在浏览器或者http工具中调用触发，较为方便）\n```java\n\t@RequestMapping(\"/testNormalGetOne\")\n\t@ResponseBody\n\tpublic String testNormalGetOne() {\n\t\tnew Thread(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tstudentService.testNormalGetOne();\n\t\t\t}\n\t\t}).start();\n\t\treturn \"testNormalGetOne\";\n\t}\n```\n启动项目后，访问`localhost:8080/testNormalGetOne`报错如下：\n```java\nException in thread \"Thread-6\" org.hibernate.LazyInitializationException: could not initialize proxy - no Session\n\tat org.hibernate.proxy.AbstractLazyInitializer.initialize(AbstractLazyInitializer.java:148)\n\tat org.hibernate.proxy.AbstractLazyInitializer.getImplementation(AbstractLazyInitializer.java:266)\n\tat org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer.invoke(JavassistLazyInitializer.java:68)\n\tat com.example.transaction.entity.Student_$$_jvste17_0.getName(Student_$$_jvste17_0.java)\n\tat com.example.transaction.service.StudentService.testNormalGetOne(StudentService.java:71)\n\tat com.example.transaction.service.StudentService$$FastClassBySpringCGLIB$$f8048714.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:651)\n\tat com.example.transaction.service.StudentService$$EnhancerBySpringCGLIB$$a6640151.testNormalGetOne(<generated>)\n\tat com.example.transaction.controller.StudentController$1.run(StudentController.java:71)\n\tat java.lang.Thread.run(Thread.java:745)\n```\n\n## 问题分析\nno session说明了什么？\n道理很简单，因为spring的session是和线程绑定的，在整个model->dao->service->controller的调用链中，这种事务和线程绑定的机制非常契合。而我们出现的问题正式由于新开启了一个线程，这个线程与调用链的线程不是同一个。\n\n## 问题解决\n我们先使用一种不太优雅的方式解决这个问题。在新的线程中，手动打开session。\n\n```java\npublic void testNormalGetOne() {\n        EntityManagerFactory entityManagerFactory = ApplicationContextProvider.getApplicationContext().getBean(EntityManagerFactory.class);\n        EntityManager entityManager = entityManagerFactory.createEntityManager();\n        EntityManagerHolder entityManagerHolder = new EntityManagerHolder(entityManager);\n        TransactionSynchronizationManager.bindResource(entityManagerFactory, entityManagerHolder);\n        Student student = studentDao.getOne(1);\n        System.out.println(student.getName());\n        TransactionSynchronizationManager.unbindResource(entityManagerFactory);\n        EntityManagerFactoryUtils.closeEntityManager(entityManager);\n}\n```\n由于我们使用了JPA，所以事务是由EntityManagerFactory这个工厂类生成的EntityManager来管理的。`TransactionSynchronizationManager.bindResource(entityManagerFactory, entityManagerHolder);`这个方法使用事务管理器绑定session。\n而`ApplicationContextProvider`这个工具类是用来获取spring容器中的`EntityManagerFactory`的，为什么不用注入的方式，下文讲解。它的代码如下：\n```java\npublic class ApplicationContextProvider implements ApplicationContextAware {\n\n    private static ApplicationContext context = null;\n\n    public static ApplicationContext getApplicationContext() {\n        return context;\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext ac) throws BeansException {\n        context = ac;\n    }\n}\n```\n问题暂时得到了解决。\n\n## 问题再思考\n我们一般情况下使用懒加载属性，为什么没有出现no session的问题呢？相信大家都知道`@Transactional`这个注解，他会帮我们进行事务包裹，当然也会绑定session；以及大家熟知的hiberbate中的`OpenSessionInterceptor`和`OpenSessionInViewFilter`以及jpa中的` OpenEntityManagerInViewInterceptor`都是在没有session的情况下，打开session的过滤器。这种方法开始前依赖事务开启，方法结束后回收资源的操作，非常适合用过滤器拦截器处理，后续的两个未讲解的案例，其实都是使用了特殊的过滤器。\n\n看一下官方文档如何描述这个jpa中的过滤器的：\n\n> 29.3.4 Open EntityManager in View\n\n>If you are running a web application, Spring Boot will by default register OpenEntityManagerInViewInterceptor to apply the \"Open EntityManager in View\" pattern, i.e. to allow for lazy loading in web views. If you don’t want this behavior you should set spring.jpa.open-in-view to false in your application.properties.\n\n我们尝试着关闭这个过滤器：\n配置application.properties/application.yml文件\n```properties\nspring.jpa.open-in-view=false\n```\n再使用正常的方式访问懒加载属性（而不是在一个新的线程中）：\n\n```java\n\t@RequestMapping(\"/testNormalGetOne\")\n\t@ResponseBody\n\tpublic String testNormalGetOne() {\n//\t\tnew Thread(new Runnable() {\n//\t\t\t@Override\n//\t\t\tpublic void run() {\n\t\t\t\tstudentService.testNormalGetOne();\n//\t\t\t}\n//\t\t}).start();\n\t\treturn \"testNormalGetOne\";\n\t}\n```\n报错如下：\n\n```json\n{\"timestamp\":1498194914012,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"org.hibernate.LazyInitializationException\",\"message\":\"could not initialize proxy - no Session\",\"path\":\"/testNormalGetOne\"}\n```\n是的，我们使用spring的controller作为单元测试时，以及我们平时在直接使用jpa的懒加载属性时没有太关注这个jpa的特性，因为springboot帮我们默认开启了这个过滤器。这也解释了，为什么在新的线程中，定时任务线程中，rpc远程调用时session没有打开的原因，因为这些流程没有经过springboot的web调用链。\n\n## 另外两个实战案例\n上文已经阐释了，为什么quartz定时任务中访问懒加载属性，rpc框架服务端访问懒加载属性（注意不是客户端，客户端访问懒加载属性那是一种作死的行为，因为是代理对象）为出现问题。我们仿照spring打开session的思路（这取决于你使用hibernate还是jpa，抑或是mybatis），来编写我们的过滤器。\n\n**quartz中打开session：**\n使用quartz提供的`JobListenerSupport`支持，编写一个任务过滤器，用于在每次任务执行时打开session\n```java\npublic class OpenEntityManagerJobListener extends JobListenerSupport implements ApplicationContextAware {\n\n    @Override\n    public String getName() {\n        return \"OpenEntityManagerJobListener\";\n    }\n\n    EntityManagerFactory entityManagerFactory;\n\n    @Override\n    public void jobToBeExecuted(JobExecutionContext context) {\n        entityManagerFactory = applicationContext.getBean(EntityManagerFactory.class);\n        EntityManager entityManager = entityManagerFactory.createEntityManager();\n        EntityManagerHolder emHolder = new EntityManagerHolder(entityManager);\n        TransactionSynchronizationManager.bindResource(entityManagerFactory, emHolder);\n    }\n\n    @Override\n    public void jobWasExecuted(JobExecutionContext context, JobExecutionException jobException) {\n        EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.unbindResource(entityManagerFactory);\n        EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());\n    }\n\n\n    ApplicationContext applicationContext;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        this.applicationContext = applicationContext;\n        if(this.applicationContext ==null) throw new RuntimeException(\"applicationContext is null\");\n    }\n}\n```\n**配置调度工厂：**\n\n```java\n//调度工厂\n    @Bean\n    public SchedulerFactoryBean schedulerFactoryBean() {\n        SchedulerFactoryBean factoryBean = new SchedulerFactoryBean();\n        factoryBean.setTriggers(triggerFactoryBeans().getObject());\n        factoryBean.setGlobalJobListeners(openEntityManagerJobListener());\n        return factoryBean;\n    }\n```\n\n也可以参考我的另一篇描述更为细致的文章(解决Quartz定时器中查询懒加载数据no session的问题)，那是我还是刚刚参加工作，可能有些许疏漏之处，不过参考是够了。\n\n**Motan（我现在使用的rpc框架）服务端打开session**\n利用了motan对spi扩展的支持，编写了一个Filter，主要参考了motan的spi过滤器写法和springdata打开session/entityManager的思路。\n```java\n@SpiMeta(name = \"openjpasession\")\n@Activation(sequence = 100)\npublic class OpenEntityManagerInMotanFilter implements Filter {\n    private Logger logger = LoggerFactory.getLogger(OpenEntityManagerInMotanFilter.class);\n\n    /**\n     * Default EntityManagerFactory bean name: \"entityManagerFactory\".\n     * Only applies when no \"persistenceUnitName\" param has been specified.\n     *\n     * @see #setEntityManagerFactoryBeanName\n     * @see #setPersistenceUnitName\n     */\n    public static final String DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME = \"entityManagerFactory\";\n\n\n    private String entityManagerFactoryBeanName;\n\n    private String persistenceUnitName;\n\n    private volatile EntityManagerFactory entityManagerFactory;\n\n\n    /**\n     * Set the bean name of the EntityManagerFactory to fetch from Spring's\n     * root application context.\n     * <p>Default is \"entityManagerFactory\". Note that this default only applies\n     * when no \"persistenceUnitName\" param has been specified.\n     *\n     * @see #setPersistenceUnitName\n     * @see #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME\n     */\n    public void setEntityManagerFactoryBeanName(String entityManagerFactoryBeanName) {\n        this.entityManagerFactoryBeanName = entityManagerFactoryBeanName;\n    }\n\n    /**\n     * Return the bean name of the EntityManagerFactory to fetch from Spring's\n     * root application context.\n     */\n    protected String getEntityManagerFactoryBeanName() {\n        return this.entityManagerFactoryBeanName;\n    }\n\n    /**\n     * Set the name of the persistence unit to access the EntityManagerFactory for.\n     * <p>This is an alternative to specifying the EntityManagerFactory by bean name,\n     * resolving it by its persistence unit name instead. If no bean name and no persistence\n     * unit name have been specified, we'll check whether a bean exists for the default\n     * bean name \"entityManagerFactory\"; if not, a default EntityManagerFactory will\n     * be retrieved through finding a single unique bean of type EntityManagerFactory.\n     *\n     * @see #setEntityManagerFactoryBeanName\n     * @see #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME\n     */\n    public void setPersistenceUnitName(String persistenceUnitName) {\n        this.persistenceUnitName = persistenceUnitName;\n    }\n\n    /**\n     * Return the name of the persistence unit to access the EntityManagerFactory for, if any.\n     */\n    protected String getPersistenceUnitName() {\n        return this.persistenceUnitName;\n    }\n\n    /**\n     * Look up the EntityManagerFactory that this filter should use.\n     * <p>The default implementation looks for a bean with the specified name\n     * in Spring's root application context.\n     *\n     * @return the EntityManagerFactory to use\n     * @see #getEntityManagerFactoryBeanName\n     */\n    protected EntityManagerFactory lookupEntityManagerFactory() {\n\n        String emfBeanName = getEntityManagerFactoryBeanName();\n        String puName = getPersistenceUnitName();\n        if (StringUtils.hasLength(emfBeanName)) {\n            return ApplicationContextProvider.getApplicationContext().getBean(emfBeanName, EntityManagerFactory.class);\n        } else if (!StringUtils.hasLength(puName) && ApplicationContextProvider.getApplicationContext().containsBean(DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME)) {\n            return ApplicationContextProvider.getApplicationContext().getBean(DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME, EntityManagerFactory.class);\n        } else {\n            // Includes fallback search for single EntityManagerFactory bean by type.\n            return EntityManagerFactoryUtils.findEntityManagerFactory(ApplicationContextProvider.getApplicationContext(), puName);\n        }\n    }\n\n    /**\n     * Create a JPA EntityManager to be bound to a request.\n     * <p>Can be overridden in subclasses.\n     *\n     * @param emf the EntityManagerFactory to use\n     * @see javax.persistence.EntityManagerFactory#createEntityManager()\n     */\n    protected EntityManager createEntityManager(EntityManagerFactory emf) {\n        return emf.createEntityManager();\n    }\n\n    @Override\n    public Response filter(Caller<?> caller, Request request) {\n        if (!(caller instanceof Provider)) {\n            return caller.call(request);\n        }\n\n        EntityManagerFactory emf = null;\n        try {\n            emf = lookupEntityManagerFactory();\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n\n        //可能没有启用openjpa\n        if (emf == null) {\n            return caller.call(request);\n        }\n\n        try {\n            //如果没有绑定，绑定到当前线程\n            if (TransactionSynchronizationManager.getResource(emf) == null) {\n                EntityManager em = createEntityManager(emf);\n                EntityManagerHolder emHolder = new EntityManagerHolder(em);\n                TransactionSynchronizationManager.bindResource(emf, emHolder);\n            }\n        } catch (Exception e) {\n            logger.error(e.getLocalizedMessage(), e);\n        }\n        try {\n            return caller.call(request);\n        } finally {\n            //解除绑定\n            closeManager(emf);\n        }\n    }\n\n    /**\n     * 关闭 emf\n     *\n     * @param emf\n     */\n    private void closeManager(EntityManagerFactory emf) {\n        if (emf == null || TransactionSynchronizationManager.getResource(emf) == null) {\n            return;\n        }\n        EntityManagerHolder emHolder = null;\n        try {\n            emHolder = (EntityManagerHolder) TransactionSynchronizationManager.unbindResource(emf);\n        } catch (IllegalStateException e) {\n            logger.error(e.getLocalizedMessage(), e);\n        }\n        try {\n            if (emHolder != null) {\n                EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());\n            }\n        } catch (Exception e) {\n            logger.error(e.getLocalizedMessage(), e);\n        }\n    }\n}\n```\n\n## 总结\nspringboot中的事务管理做的永远比我们想的多，事务管理器的使用场景，@Transactional究竟起了哪些作用，以及spring-data这个对DDD最佳的阐释，以及mybatis一类的非j2ee规范在微服务的地位中是否高于jpa，各个层次之间的实体传输，消息传递...都是值得思考的。\n\n","slug":"spring中的懒加载与事务--排坑记录","published":1,"updated":"2017-09-04T11:49:26.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3ztu002ntwv7zjkoa2x6","content":"<h2 id=\"案例描述\"><a href=\"#案例描述\" class=\"headerlink\" title=\"案例描述\"></a>案例描述</h2><p>本文主要描述了开发中常见的几个与spring懒加载和事务相关的案例，主要描述常见的使用场景，以及如何规避他们，给出具体的代码。</p>\n<ol>\n<li>在新的线程中，访问某个持久化对象的懒加载属性。</li>\n<li>在quartz定时任务中，访问某个持久化对象的懒加载属性。</li>\n<li>在dubbo，motan一类rpc框架中，远程调用时服务端session关闭的问题。</li>\n</ol>\n<p>上面三个案例，其实核心都是一个问题，就是牵扯到spring对事务的管理，而懒加载这个技术，只是比较容易体现出事务出错的一个实践，主要用它来引发问题，进而对问题进行思考。</p>\n<a id=\"more\"></a>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>为了能直观的暴露出第一个案例的问题，我新建了一个项目，采用传统的mvc分层，一个student.java实体类，一个studentDao.java持久层，一个studentService.java业务层，一个studentController控制层。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"student\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Id</span></div><div class=\"line\">\t<span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</div><div class=\"line\">\t<span class=\"keyword\">private</span> Integer id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t</div><div class=\"line\">\tgetter..setter..</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>持久层使用springdata，框架自动扩展出CURD方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StudentDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Student</span>, <span class=\"title\">Integer</span>&gt;</span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>service层，先给出普通的调用方法。用于错误演示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Service</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    StudentDao studentDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testNormalGetOne</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        Student student = studentDao.getOne(<span class=\"number\">1</span>);</div><div class=\"line\">        System.out.println(student.getName());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意：getOne和findOne都是springdata提供的根据id查找单个实体的方法，区别是前者是懒加载，后者是立即加载。我们使用getOne来进行懒加载的实验，就不用大费周章去写懒加载属性，设置多个实体类了。</p>\n<p>controller层，不是简简单单的调用，而是在新的线程中调用。使用controller层来代替单元测试（实际项目中，通常使用controller调用service，然后在浏览器或者http工具中调用触发，较为方便）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testNormalGetOne\"</span>)</div><div class=\"line\"><span class=\"meta\">@ResponseBody</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testNormalGetOne</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tstudentService.testNormalGetOne();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;).start();</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"testNormalGetOne\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>启动项目后，访问<code>localhost:8080/testNormalGetOne</code>报错如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception in thread <span class=\"string\">\"Thread-6\"</span> org.hibernate.LazyInitializationException: could not initialize proxy - no Session</div><div class=\"line\">\tat org.hibernate.proxy.AbstractLazyInitializer.initialize(AbstractLazyInitializer.java:<span class=\"number\">148</span>)</div><div class=\"line\">\tat org.hibernate.proxy.AbstractLazyInitializer.getImplementation(AbstractLazyInitializer.java:<span class=\"number\">266</span>)</div><div class=\"line\">\tat org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer.invoke(JavassistLazyInitializer.java:<span class=\"number\">68</span>)</div><div class=\"line\">\tat com.example.transaction.entity.Student_$$_jvste17_0.getName(Student_$$_jvste17_0.java)</div><div class=\"line\">\tat com.example.transaction.service.StudentService.testNormalGetOne(StudentService.java:<span class=\"number\">71</span>)</div><div class=\"line\">\tat com.example.transaction.service.StudentService$$FastClassBySpringCGLIB$$f8048714.invoke(&lt;generated&gt;)</div><div class=\"line\">\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:<span class=\"number\">204</span>)</div><div class=\"line\">\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class=\"number\">651</span>)</div><div class=\"line\">\tat com.example.transaction.service.StudentService$$EnhancerBySpringCGLIB$$a6640151.testNormalGetOne(&lt;generated&gt;)</div><div class=\"line\">\tat com.example.transaction.controller.StudentController$<span class=\"number\">1</span>.run(StudentController.java:<span class=\"number\">71</span>)</div><div class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>no session说明了什么？<br>道理很简单，因为spring的session是和线程绑定的，在整个model-&gt;dao-&gt;service-&gt;controller的调用链中，这种事务和线程绑定的机制非常契合。而我们出现的问题正式由于新开启了一个线程，这个线程与调用链的线程不是同一个。</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>我们先使用一种不太优雅的方式解决这个问题。在新的线程中，手动打开session。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testNormalGetOne</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        EntityManagerFactory entityManagerFactory = ApplicationContextProvider.getApplicationContext().getBean(EntityManagerFactory.class);</div><div class=\"line\">        EntityManager entityManager = entityManagerFactory.createEntityManager();</div><div class=\"line\">        EntityManagerHolder entityManagerHolder = <span class=\"keyword\">new</span> EntityManagerHolder(entityManager);</div><div class=\"line\">        TransactionSynchronizationManager.bindResource(entityManagerFactory, entityManagerHolder);</div><div class=\"line\">        Student student = studentDao.getOne(<span class=\"number\">1</span>);</div><div class=\"line\">        System.out.println(student.getName());</div><div class=\"line\">        TransactionSynchronizationManager.unbindResource(entityManagerFactory);</div><div class=\"line\">        EntityManagerFactoryUtils.closeEntityManager(entityManager);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于我们使用了JPA，所以事务是由EntityManagerFactory这个工厂类生成的EntityManager来管理的。<code>TransactionSynchronizationManager.bindResource(entityManagerFactory, entityManagerHolder);</code>这个方法使用事务管理器绑定session。<br>而<code>ApplicationContextProvider</code>这个工具类是用来获取spring容器中的<code>EntityManagerFactory</code>的，为什么不用注入的方式，下文讲解。它的代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationContextProvider</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext context = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ApplicationContext <span class=\"title\">getApplicationContext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext ac)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</div><div class=\"line\">        context = ac;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>问题暂时得到了解决。</p>\n<h2 id=\"问题再思考\"><a href=\"#问题再思考\" class=\"headerlink\" title=\"问题再思考\"></a>问题再思考</h2><p>我们一般情况下使用懒加载属性，为什么没有出现no session的问题呢？相信大家都知道<code>@Transactional</code>这个注解，他会帮我们进行事务包裹，当然也会绑定session；以及大家熟知的hiberbate中的<code>OpenSessionInterceptor</code>和<code>OpenSessionInViewFilter</code>以及jpa中的<code>OpenEntityManagerInViewInterceptor</code>都是在没有session的情况下，打开session的过滤器。这种方法开始前依赖事务开启，方法结束后回收资源的操作，非常适合用过滤器拦截器处理，后续的两个未讲解的案例，其实都是使用了特殊的过滤器。</p>\n<p>看一下官方文档如何描述这个jpa中的过滤器的：</p>\n<blockquote>\n<p>29.3.4 Open EntityManager in View</p>\n<p>If you are running a web application, Spring Boot will by default register OpenEntityManagerInViewInterceptor to apply the “Open EntityManager in View” pattern, i.e. to allow for lazy loading in web views. If you don’t want this behavior you should set spring.jpa.open-in-view to false in your application.properties.</p>\n</blockquote>\n<p>我们尝试着关闭这个过滤器：<br>配置application.properties/application.yml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.jpa.open-in-view=false</div></pre></td></tr></table></figure></p>\n<p>再使用正常的方式访问懒加载属性（而不是在一个新的线程中）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testNormalGetOne\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@ResponseBody</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testNormalGetOne</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//\t\tnew Thread(new Runnable() &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t@Override</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tpublic void run() &#123;</span></div><div class=\"line\">\t\t\t\tstudentService.testNormalGetOne();</div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t&#125;).start();</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"testNormalGetOne\"</span>;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>报错如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"timestamp\"</span>:<span class=\"number\">1498194914012</span>,<span class=\"attr\">\"status\"</span>:<span class=\"number\">500</span>,<span class=\"attr\">\"error\"</span>:<span class=\"string\">\"Internal Server Error\"</span>,<span class=\"attr\">\"exception\"</span>:<span class=\"string\">\"org.hibernate.LazyInitializationException\"</span>,<span class=\"attr\">\"message\"</span>:<span class=\"string\">\"could not initialize proxy - no Session\"</span>,<span class=\"attr\">\"path\"</span>:<span class=\"string\">\"/testNormalGetOne\"</span>&#125;</div></pre></td></tr></table></figure>\n<p>是的，我们使用spring的controller作为单元测试时，以及我们平时在直接使用jpa的懒加载属性时没有太关注这个jpa的特性，因为springboot帮我们默认开启了这个过滤器。这也解释了，为什么在新的线程中，定时任务线程中，rpc远程调用时session没有打开的原因，因为这些流程没有经过springboot的web调用链。</p>\n<h2 id=\"另外两个实战案例\"><a href=\"#另外两个实战案例\" class=\"headerlink\" title=\"另外两个实战案例\"></a>另外两个实战案例</h2><p>上文已经阐释了，为什么quartz定时任务中访问懒加载属性，rpc框架服务端访问懒加载属性（注意不是客户端，客户端访问懒加载属性那是一种作死的行为，因为是代理对象）为出现问题。我们仿照spring打开session的思路（这取决于你使用hibernate还是jpa，抑或是mybatis），来编写我们的过滤器。</p>\n<p><strong>quartz中打开session：</strong><br>使用quartz提供的<code>JobListenerSupport</code>支持，编写一个任务过滤器，用于在每次任务执行时打开session<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenEntityManagerJobListener</span> <span class=\"keyword\">extends</span> <span class=\"title\">JobListenerSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"OpenEntityManagerJobListener\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    EntityManagerFactory entityManagerFactory;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jobToBeExecuted</span><span class=\"params\">(JobExecutionContext context)</span> </span>&#123;</div><div class=\"line\">        entityManagerFactory = applicationContext.getBean(EntityManagerFactory.class);</div><div class=\"line\">        EntityManager entityManager = entityManagerFactory.createEntityManager();</div><div class=\"line\">        EntityManagerHolder emHolder = <span class=\"keyword\">new</span> EntityManagerHolder(entityManager);</div><div class=\"line\">        TransactionSynchronizationManager.bindResource(entityManagerFactory, emHolder);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jobWasExecuted</span><span class=\"params\">(JobExecutionContext context, JobExecutionException jobException)</span> </span>&#123;</div><div class=\"line\">        EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.unbindResource(entityManagerFactory);</div><div class=\"line\">        EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    ApplicationContext applicationContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.applicationContext = applicationContext;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.applicationContext ==<span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"applicationContext is null\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>配置调度工厂：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//调度工厂</span></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SchedulerFactoryBean <span class=\"title\">schedulerFactoryBean</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        SchedulerFactoryBean factoryBean = <span class=\"keyword\">new</span> SchedulerFactoryBean();</div><div class=\"line\">        factoryBean.setTriggers(triggerFactoryBeans().getObject());</div><div class=\"line\">        factoryBean.setGlobalJobListeners(openEntityManagerJobListener());</div><div class=\"line\">        <span class=\"keyword\">return</span> factoryBean;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>也可以参考我的另一篇描述更为细致的文章(解决Quartz定时器中查询懒加载数据no session的问题)，那是我还是刚刚参加工作，可能有些许疏漏之处，不过参考是够了。</p>\n<p><strong>Motan（我现在使用的rpc框架）服务端打开session</strong><br>利用了motan对spi扩展的支持，编写了一个Filter，主要参考了motan的spi过滤器写法和springdata打开session/entityManager的思路。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpiMeta</span>(name = <span class=\"string\">\"openjpasession\"</span>)</div><div class=\"line\"><span class=\"meta\">@Activation</span>(sequence = <span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenEntityManagerInMotanFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(OpenEntityManagerInMotanFilter.class);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Default EntityManagerFactory bean name: \"entityManagerFactory\".</span></div><div class=\"line\"><span class=\"comment\">     * Only applies when no \"persistenceUnitName\" param has been specified.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #setEntityManagerFactoryBeanName</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #setPersistenceUnitName</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME = <span class=\"string\">\"entityManagerFactory\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String entityManagerFactoryBeanName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String persistenceUnitName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> EntityManagerFactory entityManagerFactory;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Set the bean name of the EntityManagerFactory to fetch from Spring's</span></div><div class=\"line\"><span class=\"comment\">     * root application context.</span></div><div class=\"line\"><span class=\"comment\">     * &lt;p&gt;Default is \"entityManagerFactory\". Note that this default only applies</span></div><div class=\"line\"><span class=\"comment\">     * when no \"persistenceUnitName\" param has been specified.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #setPersistenceUnitName</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEntityManagerFactoryBeanName</span><span class=\"params\">(String entityManagerFactoryBeanName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.entityManagerFactoryBeanName = entityManagerFactoryBeanName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Return the bean name of the EntityManagerFactory to fetch from Spring's</span></div><div class=\"line\"><span class=\"comment\">     * root application context.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getEntityManagerFactoryBeanName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.entityManagerFactoryBeanName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Set the name of the persistence unit to access the EntityManagerFactory for.</span></div><div class=\"line\"><span class=\"comment\">     * &lt;p&gt;This is an alternative to specifying the EntityManagerFactory by bean name,</span></div><div class=\"line\"><span class=\"comment\">     * resolving it by its persistence unit name instead. If no bean name and no persistence</span></div><div class=\"line\"><span class=\"comment\">     * unit name have been specified, we'll check whether a bean exists for the default</span></div><div class=\"line\"><span class=\"comment\">     * bean name \"entityManagerFactory\"; if not, a default EntityManagerFactory will</span></div><div class=\"line\"><span class=\"comment\">     * be retrieved through finding a single unique bean of type EntityManagerFactory.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #setEntityManagerFactoryBeanName</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPersistenceUnitName</span><span class=\"params\">(String persistenceUnitName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.persistenceUnitName = persistenceUnitName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Return the name of the persistence unit to access the EntityManagerFactory for, if any.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getPersistenceUnitName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.persistenceUnitName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Look up the EntityManagerFactory that this filter should use.</span></div><div class=\"line\"><span class=\"comment\">     * &lt;p&gt;The default implementation looks for a bean with the specified name</span></div><div class=\"line\"><span class=\"comment\">     * in Spring's root application context.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the EntityManagerFactory to use</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #getEntityManagerFactoryBeanName</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> EntityManagerFactory <span class=\"title\">lookupEntityManagerFactory</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        String emfBeanName = getEntityManagerFactoryBeanName();</div><div class=\"line\">        String puName = getPersistenceUnitName();</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(emfBeanName)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ApplicationContextProvider.getApplicationContext().getBean(emfBeanName, EntityManagerFactory.class);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!StringUtils.hasLength(puName) &amp;&amp; ApplicationContextProvider.getApplicationContext().containsBean(DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ApplicationContextProvider.getApplicationContext().getBean(DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME, EntityManagerFactory.class);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// Includes fallback search for single EntityManagerFactory bean by type.</span></div><div class=\"line\">            <span class=\"keyword\">return</span> EntityManagerFactoryUtils.findEntityManagerFactory(ApplicationContextProvider.getApplicationContext(), puName);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Create a JPA EntityManager to be bound to a request.</span></div><div class=\"line\"><span class=\"comment\">     * &lt;p&gt;Can be overridden in subclasses.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> emf the EntityManagerFactory to use</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> javax.persistence.EntityManagerFactory#createEntityManager()</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> EntityManager <span class=\"title\">createEntityManager</span><span class=\"params\">(EntityManagerFactory emf)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> emf.createEntityManager();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">filter</span><span class=\"params\">(Caller&lt;?&gt; caller, Request request)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!(caller <span class=\"keyword\">instanceof</span> Provider)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> caller.call(request);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        EntityManagerFactory emf = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            emf = lookupEntityManagerFactory();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            logger.error(e.getMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//可能没有启用openjpa</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (emf == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> caller.call(request);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//如果没有绑定，绑定到当前线程</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (TransactionSynchronizationManager.getResource(emf) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                EntityManager em = createEntityManager(emf);</div><div class=\"line\">                EntityManagerHolder emHolder = <span class=\"keyword\">new</span> EntityManagerHolder(em);</div><div class=\"line\">                TransactionSynchronizationManager.bindResource(emf, emHolder);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            logger.error(e.getLocalizedMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> caller.call(request);</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//解除绑定</span></div><div class=\"line\">            closeManager(emf);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 关闭 emf</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> emf</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">closeManager</span><span class=\"params\">(EntityManagerFactory emf)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (emf == <span class=\"keyword\">null</span> || TransactionSynchronizationManager.getResource(emf) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        EntityManagerHolder emHolder = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            emHolder = (EntityManagerHolder) TransactionSynchronizationManager.unbindResource(emf);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalStateException e) &#123;</div><div class=\"line\">            logger.error(e.getLocalizedMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (emHolder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            logger.error(e.getLocalizedMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>springboot中的事务管理做的永远比我们想的多，事务管理器的使用场景，@Transactional究竟起了哪些作用，以及spring-data这个对DDD最佳的阐释，以及mybatis一类的非j2ee规范在微服务的地位中是否高于jpa，各个层次之间的实体传输，消息传递…都是值得思考的。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"案例描述\"><a href=\"#案例描述\" class=\"headerlink\" title=\"案例描述\"></a>案例描述</h2><p>本文主要描述了开发中常见的几个与spring懒加载和事务相关的案例，主要描述常见的使用场景，以及如何规避他们，给出具体的代码。</p>\n<ol>\n<li>在新的线程中，访问某个持久化对象的懒加载属性。</li>\n<li>在quartz定时任务中，访问某个持久化对象的懒加载属性。</li>\n<li>在dubbo，motan一类rpc框架中，远程调用时服务端session关闭的问题。</li>\n</ol>\n<p>上面三个案例，其实核心都是一个问题，就是牵扯到spring对事务的管理，而懒加载这个技术，只是比较容易体现出事务出错的一个实践，主要用它来引发问题，进而对问题进行思考。</p>","more":"<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>为了能直观的暴露出第一个案例的问题，我新建了一个项目，采用传统的mvc分层，一个student.java实体类，一个studentDao.java持久层，一个studentService.java业务层，一个studentController控制层。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"student\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Id</span></div><div class=\"line\">\t<span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</div><div class=\"line\">\t<span class=\"keyword\">private</span> Integer id;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String name;</div><div class=\"line\">\t</div><div class=\"line\">\tgetter..setter..</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>持久层使用springdata，框架自动扩展出CURD方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StudentDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Student</span>, <span class=\"title\">Integer</span>&gt;</span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>service层，先给出普通的调用方法。用于错误演示。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Service</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    StudentDao studentDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testNormalGetOne</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        Student student = studentDao.getOne(<span class=\"number\">1</span>);</div><div class=\"line\">        System.out.println(student.getName());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意：getOne和findOne都是springdata提供的根据id查找单个实体的方法，区别是前者是懒加载，后者是立即加载。我们使用getOne来进行懒加载的实验，就不用大费周章去写懒加载属性，设置多个实体类了。</p>\n<p>controller层，不是简简单单的调用，而是在新的线程中调用。使用controller层来代替单元测试（实际项目中，通常使用controller调用service，然后在浏览器或者http工具中调用触发，较为方便）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testNormalGetOne\"</span>)</div><div class=\"line\"><span class=\"meta\">@ResponseBody</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testNormalGetOne</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\tstudentService.testNormalGetOne();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;).start();</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"testNormalGetOne\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>启动项目后，访问<code>localhost:8080/testNormalGetOne</code>报错如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">Exception in thread <span class=\"string\">\"Thread-6\"</span> org.hibernate.LazyInitializationException: could not initialize proxy - no Session</div><div class=\"line\">\tat org.hibernate.proxy.AbstractLazyInitializer.initialize(AbstractLazyInitializer.java:<span class=\"number\">148</span>)</div><div class=\"line\">\tat org.hibernate.proxy.AbstractLazyInitializer.getImplementation(AbstractLazyInitializer.java:<span class=\"number\">266</span>)</div><div class=\"line\">\tat org.hibernate.proxy.pojo.javassist.JavassistLazyInitializer.invoke(JavassistLazyInitializer.java:<span class=\"number\">68</span>)</div><div class=\"line\">\tat com.example.transaction.entity.Student_$$_jvste17_0.getName(Student_$$_jvste17_0.java)</div><div class=\"line\">\tat com.example.transaction.service.StudentService.testNormalGetOne(StudentService.java:<span class=\"number\">71</span>)</div><div class=\"line\">\tat com.example.transaction.service.StudentService$$FastClassBySpringCGLIB$$f8048714.invoke(&lt;generated&gt;)</div><div class=\"line\">\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:<span class=\"number\">204</span>)</div><div class=\"line\">\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class=\"number\">651</span>)</div><div class=\"line\">\tat com.example.transaction.service.StudentService$$EnhancerBySpringCGLIB$$a6640151.testNormalGetOne(&lt;generated&gt;)</div><div class=\"line\">\tat com.example.transaction.controller.StudentController$<span class=\"number\">1</span>.run(StudentController.java:<span class=\"number\">71</span>)</div><div class=\"line\">\tat java.lang.Thread.run(Thread.java:<span class=\"number\">745</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>no session说明了什么？<br>道理很简单，因为spring的session是和线程绑定的，在整个model-&gt;dao-&gt;service-&gt;controller的调用链中，这种事务和线程绑定的机制非常契合。而我们出现的问题正式由于新开启了一个线程，这个线程与调用链的线程不是同一个。</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>我们先使用一种不太优雅的方式解决这个问题。在新的线程中，手动打开session。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testNormalGetOne</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        EntityManagerFactory entityManagerFactory = ApplicationContextProvider.getApplicationContext().getBean(EntityManagerFactory.class);</div><div class=\"line\">        EntityManager entityManager = entityManagerFactory.createEntityManager();</div><div class=\"line\">        EntityManagerHolder entityManagerHolder = <span class=\"keyword\">new</span> EntityManagerHolder(entityManager);</div><div class=\"line\">        TransactionSynchronizationManager.bindResource(entityManagerFactory, entityManagerHolder);</div><div class=\"line\">        Student student = studentDao.getOne(<span class=\"number\">1</span>);</div><div class=\"line\">        System.out.println(student.getName());</div><div class=\"line\">        TransactionSynchronizationManager.unbindResource(entityManagerFactory);</div><div class=\"line\">        EntityManagerFactoryUtils.closeEntityManager(entityManager);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于我们使用了JPA，所以事务是由EntityManagerFactory这个工厂类生成的EntityManager来管理的。<code>TransactionSynchronizationManager.bindResource(entityManagerFactory, entityManagerHolder);</code>这个方法使用事务管理器绑定session。<br>而<code>ApplicationContextProvider</code>这个工具类是用来获取spring容器中的<code>EntityManagerFactory</code>的，为什么不用注入的方式，下文讲解。它的代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationContextProvider</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext context = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ApplicationContext <span class=\"title\">getApplicationContext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> context;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext ac)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</div><div class=\"line\">        context = ac;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>问题暂时得到了解决。</p>\n<h2 id=\"问题再思考\"><a href=\"#问题再思考\" class=\"headerlink\" title=\"问题再思考\"></a>问题再思考</h2><p>我们一般情况下使用懒加载属性，为什么没有出现no session的问题呢？相信大家都知道<code>@Transactional</code>这个注解，他会帮我们进行事务包裹，当然也会绑定session；以及大家熟知的hiberbate中的<code>OpenSessionInterceptor</code>和<code>OpenSessionInViewFilter</code>以及jpa中的<code>OpenEntityManagerInViewInterceptor</code>都是在没有session的情况下，打开session的过滤器。这种方法开始前依赖事务开启，方法结束后回收资源的操作，非常适合用过滤器拦截器处理，后续的两个未讲解的案例，其实都是使用了特殊的过滤器。</p>\n<p>看一下官方文档如何描述这个jpa中的过滤器的：</p>\n<blockquote>\n<p>29.3.4 Open EntityManager in View</p>\n<p>If you are running a web application, Spring Boot will by default register OpenEntityManagerInViewInterceptor to apply the “Open EntityManager in View” pattern, i.e. to allow for lazy loading in web views. If you don’t want this behavior you should set spring.jpa.open-in-view to false in your application.properties.</p>\n</blockquote>\n<p>我们尝试着关闭这个过滤器：<br>配置application.properties/application.yml文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spring.jpa.open-in-view=false</div></pre></td></tr></table></figure></p>\n<p>再使用正常的方式访问懒加载属性（而不是在一个新的线程中）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testNormalGetOne\"</span>)</div><div class=\"line\">\t<span class=\"meta\">@ResponseBody</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testNormalGetOne</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//\t\tnew Thread(new Runnable() &#123;</span></div><div class=\"line\"><span class=\"comment\">//\t\t\t@Override</span></div><div class=\"line\"><span class=\"comment\">//\t\t\tpublic void run() &#123;</span></div><div class=\"line\">\t\t\t\tstudentService.testNormalGetOne();</div><div class=\"line\"><span class=\"comment\">//\t\t\t&#125;</span></div><div class=\"line\"><span class=\"comment\">//\t\t&#125;).start();</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"testNormalGetOne\"</span>;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>报错如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"timestamp\"</span>:<span class=\"number\">1498194914012</span>,<span class=\"attr\">\"status\"</span>:<span class=\"number\">500</span>,<span class=\"attr\">\"error\"</span>:<span class=\"string\">\"Internal Server Error\"</span>,<span class=\"attr\">\"exception\"</span>:<span class=\"string\">\"org.hibernate.LazyInitializationException\"</span>,<span class=\"attr\">\"message\"</span>:<span class=\"string\">\"could not initialize proxy - no Session\"</span>,<span class=\"attr\">\"path\"</span>:<span class=\"string\">\"/testNormalGetOne\"</span>&#125;</div></pre></td></tr></table></figure>\n<p>是的，我们使用spring的controller作为单元测试时，以及我们平时在直接使用jpa的懒加载属性时没有太关注这个jpa的特性，因为springboot帮我们默认开启了这个过滤器。这也解释了，为什么在新的线程中，定时任务线程中，rpc远程调用时session没有打开的原因，因为这些流程没有经过springboot的web调用链。</p>\n<h2 id=\"另外两个实战案例\"><a href=\"#另外两个实战案例\" class=\"headerlink\" title=\"另外两个实战案例\"></a>另外两个实战案例</h2><p>上文已经阐释了，为什么quartz定时任务中访问懒加载属性，rpc框架服务端访问懒加载属性（注意不是客户端，客户端访问懒加载属性那是一种作死的行为，因为是代理对象）为出现问题。我们仿照spring打开session的思路（这取决于你使用hibernate还是jpa，抑或是mybatis），来编写我们的过滤器。</p>\n<p><strong>quartz中打开session：</strong><br>使用quartz提供的<code>JobListenerSupport</code>支持，编写一个任务过滤器，用于在每次任务执行时打开session<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenEntityManagerJobListener</span> <span class=\"keyword\">extends</span> <span class=\"title\">JobListenerSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"OpenEntityManagerJobListener\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    EntityManagerFactory entityManagerFactory;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jobToBeExecuted</span><span class=\"params\">(JobExecutionContext context)</span> </span>&#123;</div><div class=\"line\">        entityManagerFactory = applicationContext.getBean(EntityManagerFactory.class);</div><div class=\"line\">        EntityManager entityManager = entityManagerFactory.createEntityManager();</div><div class=\"line\">        EntityManagerHolder emHolder = <span class=\"keyword\">new</span> EntityManagerHolder(entityManager);</div><div class=\"line\">        TransactionSynchronizationManager.bindResource(entityManagerFactory, emHolder);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jobWasExecuted</span><span class=\"params\">(JobExecutionContext context, JobExecutionException jobException)</span> </span>&#123;</div><div class=\"line\">        EntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.unbindResource(entityManagerFactory);</div><div class=\"line\">        EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    ApplicationContext applicationContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.applicationContext = applicationContext;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.applicationContext ==<span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"applicationContext is null\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>配置调度工厂：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//调度工厂</span></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SchedulerFactoryBean <span class=\"title\">schedulerFactoryBean</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        SchedulerFactoryBean factoryBean = <span class=\"keyword\">new</span> SchedulerFactoryBean();</div><div class=\"line\">        factoryBean.setTriggers(triggerFactoryBeans().getObject());</div><div class=\"line\">        factoryBean.setGlobalJobListeners(openEntityManagerJobListener());</div><div class=\"line\">        <span class=\"keyword\">return</span> factoryBean;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>也可以参考我的另一篇描述更为细致的文章(解决Quartz定时器中查询懒加载数据no session的问题)，那是我还是刚刚参加工作，可能有些许疏漏之处，不过参考是够了。</p>\n<p><strong>Motan（我现在使用的rpc框架）服务端打开session</strong><br>利用了motan对spi扩展的支持，编写了一个Filter，主要参考了motan的spi过滤器写法和springdata打开session/entityManager的思路。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpiMeta</span>(name = <span class=\"string\">\"openjpasession\"</span>)</div><div class=\"line\"><span class=\"meta\">@Activation</span>(sequence = <span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenEntityManagerInMotanFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(OpenEntityManagerInMotanFilter.class);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Default EntityManagerFactory bean name: \"entityManagerFactory\".</span></div><div class=\"line\"><span class=\"comment\">     * Only applies when no \"persistenceUnitName\" param has been specified.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #setEntityManagerFactoryBeanName</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #setPersistenceUnitName</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME = <span class=\"string\">\"entityManagerFactory\"</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String entityManagerFactoryBeanName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String persistenceUnitName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> EntityManagerFactory entityManagerFactory;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Set the bean name of the EntityManagerFactory to fetch from Spring's</span></div><div class=\"line\"><span class=\"comment\">     * root application context.</span></div><div class=\"line\"><span class=\"comment\">     * &lt;p&gt;Default is \"entityManagerFactory\". Note that this default only applies</span></div><div class=\"line\"><span class=\"comment\">     * when no \"persistenceUnitName\" param has been specified.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #setPersistenceUnitName</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEntityManagerFactoryBeanName</span><span class=\"params\">(String entityManagerFactoryBeanName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.entityManagerFactoryBeanName = entityManagerFactoryBeanName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Return the bean name of the EntityManagerFactory to fetch from Spring's</span></div><div class=\"line\"><span class=\"comment\">     * root application context.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getEntityManagerFactoryBeanName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.entityManagerFactoryBeanName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Set the name of the persistence unit to access the EntityManagerFactory for.</span></div><div class=\"line\"><span class=\"comment\">     * &lt;p&gt;This is an alternative to specifying the EntityManagerFactory by bean name,</span></div><div class=\"line\"><span class=\"comment\">     * resolving it by its persistence unit name instead. If no bean name and no persistence</span></div><div class=\"line\"><span class=\"comment\">     * unit name have been specified, we'll check whether a bean exists for the default</span></div><div class=\"line\"><span class=\"comment\">     * bean name \"entityManagerFactory\"; if not, a default EntityManagerFactory will</span></div><div class=\"line\"><span class=\"comment\">     * be retrieved through finding a single unique bean of type EntityManagerFactory.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #setEntityManagerFactoryBeanName</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPersistenceUnitName</span><span class=\"params\">(String persistenceUnitName)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.persistenceUnitName = persistenceUnitName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Return the name of the persistence unit to access the EntityManagerFactory for, if any.</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">getPersistenceUnitName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.persistenceUnitName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Look up the EntityManagerFactory that this filter should use.</span></div><div class=\"line\"><span class=\"comment\">     * &lt;p&gt;The default implementation looks for a bean with the specified name</span></div><div class=\"line\"><span class=\"comment\">     * in Spring's root application context.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the EntityManagerFactory to use</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #getEntityManagerFactoryBeanName</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> EntityManagerFactory <span class=\"title\">lookupEntityManagerFactory</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        String emfBeanName = getEntityManagerFactoryBeanName();</div><div class=\"line\">        String puName = getPersistenceUnitName();</div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(emfBeanName)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ApplicationContextProvider.getApplicationContext().getBean(emfBeanName, EntityManagerFactory.class);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!StringUtils.hasLength(puName) &amp;&amp; ApplicationContextProvider.getApplicationContext().containsBean(DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ApplicationContextProvider.getApplicationContext().getBean(DEFAULT_ENTITY_MANAGER_FACTORY_BEAN_NAME, EntityManagerFactory.class);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// Includes fallback search for single EntityManagerFactory bean by type.</span></div><div class=\"line\">            <span class=\"keyword\">return</span> EntityManagerFactoryUtils.findEntityManagerFactory(ApplicationContextProvider.getApplicationContext(), puName);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * Create a JPA EntityManager to be bound to a request.</span></div><div class=\"line\"><span class=\"comment\">     * &lt;p&gt;Can be overridden in subclasses.</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> emf the EntityManagerFactory to use</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> javax.persistence.EntityManagerFactory#createEntityManager()</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> EntityManager <span class=\"title\">createEntityManager</span><span class=\"params\">(EntityManagerFactory emf)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> emf.createEntityManager();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">filter</span><span class=\"params\">(Caller&lt;?&gt; caller, Request request)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!(caller <span class=\"keyword\">instanceof</span> Provider)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> caller.call(request);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        EntityManagerFactory emf = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            emf = lookupEntityManagerFactory();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            logger.error(e.getMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//可能没有启用openjpa</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (emf == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> caller.call(request);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//如果没有绑定，绑定到当前线程</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (TransactionSynchronizationManager.getResource(emf) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                EntityManager em = createEntityManager(emf);</div><div class=\"line\">                EntityManagerHolder emHolder = <span class=\"keyword\">new</span> EntityManagerHolder(em);</div><div class=\"line\">                TransactionSynchronizationManager.bindResource(emf, emHolder);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            logger.error(e.getLocalizedMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> caller.call(request);</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//解除绑定</span></div><div class=\"line\">            closeManager(emf);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 关闭 emf</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> emf</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">closeManager</span><span class=\"params\">(EntityManagerFactory emf)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (emf == <span class=\"keyword\">null</span> || TransactionSynchronizationManager.getResource(emf) == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        EntityManagerHolder emHolder = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            emHolder = (EntityManagerHolder) TransactionSynchronizationManager.unbindResource(emf);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalStateException e) &#123;</div><div class=\"line\">            logger.error(e.getLocalizedMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (emHolder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            logger.error(e.getLocalizedMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>springboot中的事务管理做的永远比我们想的多，事务管理器的使用场景，@Transactional究竟起了哪些作用，以及spring-data这个对DDD最佳的阐释，以及mybatis一类的非j2ee规范在微服务的地位中是否高于jpa，各个层次之间的实体传输，消息传递…都是值得思考的。</p>"},{"title":"DevOps的八荣八耻","date":"2017-03-13T16:43:52.000Z","_content":"\n\n\n## 前言\n\n被群里的好友安利了一发，周日跑去参加了一个技术讲座《云上开发与运维最佳实践》，听完两个人的演讲之后才发现主题竟然是讲运维，好在有一个人干货不少，在此记录下所得。简单追溯了一下这个DevOps才发现并不是一个新的概念，早在2010年就能看到有相关的人在追捧这个概念了。DevOps 就是开发（Development）和运维（Operations）这两个领域的合并。（如果没错的话，DevOps还包括产品管理、QA、*winces* 甚至销售等领域）。这种理念和现如今流行的微服务架构以及分布式特性的相关理念不谋而合。这篇文章主要就是转载记录了当时又拍云运维总监的演讲稿。\n\n## DevOps的八荣八耻\n\nDevOps这个思想提出来已经五六年了，一直都是呼声很高，落地很难，为什么呢？这可能与各个公司的业务情况和技术发展路线有或多或少的关系，比如说创业的最早技术合伙人是运维出身或者技术出身，但是水平不高，为了公司持续发展，引入新鲜血液时，就会存在技术的先进性跟解决遗留烂摊子的矛盾。又或者业务本身偏向于用户，导致技术被边缘化，产品又没有好的架构，限制了快速发展等；所以，DevOps的推进一定要自上而下，凭借挑战自我，颠覆传统的勇气才能去落实。\n\n## 以可配置为荣，以硬编码为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/442859059ca8412b9ccc86005922f1e5_th.jpeg)\n\n△ 以可配置为荣，以硬编码为耻\n\nhardcoding一时爽，真正要做改动时，需要定位代码，做出调整，甚至可能会破坏功能。以下可以说是配置的一个进化史\n\n• 本地配置,程序⽣生成 (txt/ini/cfg)\n• 集中配置, 动态⽣生成(Yaml/Json)\n• 环境变量量(代码⽆无侵⼊入&语⾔言⽆无关性)\n• 服务⾃自动发现,⾃自动注册(zookeeper/consul)\n\n## 以互备为荣，以单点为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/e1ff6885b5184119965586baf841fee4_th.jpeg)\n\n　　△ 以互备为荣，以单点为耻\n\n互容互备一直是优良架构的设计重点。\n\n又拍云早期做架构设计，使用了LVS+Keeplived+VRRP做转换，这样可以方便负载均衡，动态升级，隔离故障。现在的又拍云第二代，已经在部分大节点使用OSPF和Quagga做等价路由的负载均衡和冗余保障。\n\nNginx可以加Haproxy或LVS做负载均衡。MySQL可以做主从切换，或者是MMM的高可用成熟解决方案。我们的消息队列之前用rabbitmq做，现在主要是redis和kafka集群化，其中kafka已经迁到了Mesos容器平台里。\n\n服务的自动发现、注册，我们可以使用consul、etcd、doozer（Heroku公司产品），还有zookeeper。主要区别是算法不一样，zookeeper用的是paxos算法，而consul用的是raft算法。目前看来consul比较流行，因为consul的自动发现和自动注册更加容易使用。etcd主要是CoreOS在主推，CoreOS本身就是一个滚动发布的针对分布式部署的操作系统，大家可以去关注一下它。还有一个是hadoop和elk，大数据平台的可扩展性是标配，很容易互备。\n\n上面是举了一些常见互备的软件组件的造型，那我们如何是设计一个无单点的架构呢？主要掌握以下几点：\n\n1.无状态\n\n无状态意味着没有竞争，很容易做负载均衡，负载均衡的方式有很多种，F5，LVS，Haproxy，总能找到一种适合你的方式。\n\n2.无共享\n\n以前我们很喜欢用内存来保持临时信息，如进程间的交换，这种方式虽然效率很高，但是对程序的扩展性没什么好处，尤其是现在的互联网体量，光靠单机或者高性能机器是明显玩不转的。所以我们现在就需要使用类似消息队列的组件，把数据共享出去，利用多台机器把负载给承担下来。\n\n3.松耦合/异步处理\n\n以前我们用Gearman这样的任务框架。大家可以把任务丢进任务池里，生成多个消费者去取任务。当我的消费不够用时，可以平滑增加我的work资源，让他从更快的去拿任务。运维平台这边以python/celery的组合使用更多。\n\n4.分布式/集群协作\n\n像Hadoop这样的天生大数据/数据仓库解决方案，由于先前设计比较成熟，一般都是通过很多台机器扩容来实现map/reduce的扩展计算能力。\n\n## 以随时重启为荣，以不能迁移为耻\n\n![img](http://img.mp.itc.cn/upload/20161101/f74832b01e78472e8507cbf089e3aa8d_th.jpeg)\n\n△ 以随时重启为荣，以不能迁移为耻\n\n关于这个点，我们讲三个方面：\n\n1.Pet到Cow观念的转变\n\n以前我们说机器是pet，也就是宠物模式，然后花了几万块钱去买的服务器，当宝一般供奉。但事实上却并不是这样，任何电子设备、服务器只要一上线，便开始了一个衰老的过程，你根本不知道在运行过程中会发生什么事，比如说质量差的电容会老化爆浆，电子元器件在机房的恶劣环境里会加速损坏，这些变化都是我们无法参与控制的，所以无论我们怎么努力，都无法保障机器有多么的牢靠。\n\n谷歌指出的Cow模式就是指农场模式。就是要把机器发生故障当做常态，打个比方，比如说这头牛死了，那我就不要了，因为我有很多这样的牛，或者是再拉一头新的牛。这就是我们软件开发和运维需要做的转变，去适应这种变化。\n\n2.OpenStack虚拟机的编排\n\n虚拟化是个好东西，通过OpenStack我们很容易就可以做出一些存储或者迁移的操作，但是在实施的过程中，也是一波三折的。\n\n又拍云从2014年开始在内部推动OpenStack，当然我们也踩过OpenStack网络的坑，那时候我们用双千兆的卡做内网通讯，因为使用OpenStack实现虚拟化后，一切都变成了文件，在网络上传输的话，对网络的压力会非常大，结果就导致部分服务响应缓慢（因为本身就是实验性质，所以在硬件上没有足够投入，内测时也没有推广，所以影响不大）。\n\n2015年又拍云再上的OpenStack，全部都用双万兆的网卡做bonding，交换机也是做了端口聚合和堆叠。目前来说，只有云存储没有上线，其它云处理，云网络的使用还是能够满足要求。\n\n3.Docker的导入导出\n\nDocker是更轻量级的资源隔离和复用技术，从2016年开始，又拍云同时也在尝试使用Mesos/Docker来实现云处理的业务迁移。\n\n## 以整体交付为荣，以部分交付为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/64c1749dcf464204bf80d5e8024aad7f_th.jpeg)\n\n　　△ 以整体交付为荣，以部分交付为耻\n\n以往开发运维要安装一个机器，首先要去申请采购，购买完了还要等待运输，在运输中要花去一天的时间，之后还需要配交换机和网络。在这个过程中你会发现，简单的给开发配台机器，光上架就涉及到运维的很多环节，更不要说系统安装，优化，软件配置等剩余工作了，所以大多数情况下你只能做到部分交付。\n\n要如何解决这些问题？通过OpenStack可以做到云计算、云网络、云存储这三块搭建完成之后，进行整体交付。\n\n根据一些经验总结，在整个云平台当中，云存储的坑最多，云计算、云网络相对来说比较成熟。现在云计算的硬件基本上是基于英特尔CPU的虚拟化技术来硬件指令穿透的，损耗大概2%～5%，这是可以接受的。至于云网络，刚才胡凯（B站运维总监）提到内网包转发效率，我做过一个测试，在OpenStack的内网中，如果MTU默认是1500，万兆网卡的转发率大概为6.7xxGbps。后来我在优化的过程中，也翻查一些文档，看到的数据是可以达到9.5xxGbps，通过不断的摸索，对比测试后发现，如果把内网的MTU搞成大包，如9000时，万兆网卡的存储量直接达到了9.72Gbps左右的。不过，这个MTU需要提前在宿主机上调整好，需要重启生效。所以，这个问题发现得越早越好，这样就可以做到统一调度，分配资源。\n\nDocker的好处是可以做到Build、Shipand Run，一气呵成。无论是对开发，测试，还是运维来说，Docker都是同一份Dockerfile清单，所以使用Docker在公司里的推动就很顺畅。虽然OpenStack也可以一站式交付，整体交付，使用时非常方便。但是对开发来说，他还是拿到一台机器，还是需要去安装软件环境，配置，上线，运行，除了得到机器快一些，对上线服务没有什么大的帮助，所以又拍云现在的Openstack集群一般对内申请开发测试用，外网生产环境还是以Docker容器化部署为主，这也是大家都喜闻乐见的方式，但前提是开发那边能够适应编写Dockerfile（目前是我在内部推动这种变革，如新的项目就强制要求用docker）。\n\n## 以无状态为荣，以有状态为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/687e9c56b5b742078e0c6b7b67ee0c06_th.jpeg)\n\n　　△ 以无状态为荣，以有状态为耻\n\n有状态的服务真的很麻烦，无论是存在数据库、磁盘开销，还有各种锁等资源的竞争，横向扩展也很差，不能重启，也不能互备。所以，有姿态的服务对于扩展原则来说，就是一场恶梦。如果是说我们解决这个问题，那就要使用解耦和负载均衡的方法去解决问题。\n\n1.使用可靠的中间件\n\n中间件其实最早出现在金融公司、证券公司，后来随着互联网行业不断壮大以后，就用一些高可靠性的号称工业级的消息队列出现，如RabbitMQ，一出来以后，就把中间件拉下神坛。随着中间件民用化，互联网蓬勃发展，是可以把一些服务变成无状态，方便扩展。\n\n2.公共资源池\n\n我们可以通过各种云，容器云、弹性云，做计算单元的弹性扩展。\n\n3.能够被计算\n\n如果你不想存状态，那也可以被计算，比如说Ceph存储，它的创新在于每个数据块都是可计算出来的，这就类似无状态的，每次都算，反正现在的cpu都这么强悍了，所以，无状态是一个命题，在做架构的时候，你脑海里一定要有这个意念，然后再看你用什么样的方式开动脑筋，预先的跟开发，运维沟通好，把应用拆分成一种无状态的最佳组合。\n\n## 以标准化为荣，以特殊化为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/99df354cd9514e6bb8da2f6a51bc5765_th.jpeg)\n\n△ 以标准化为荣，以特殊化为耻\n\n在标准化方面，我们在这几个方面改良：\n\n1.统一输入输出\n\n统一入口是我加入又拍云后做的第一件事情，我们用一个统一的文本，到现在也在用，然后推送到所有的边缘，服务器上面的组件，要用到的参数，都能从配置里读出来。代码管理方面我们也使用git，git wiki，批量部署我们用ansible（早在2012年，我做了一些比较后，就在公司里推行ansible，看来还是很明智的决定）。\n\n2.统一的流程管理\n\n运维中使用python最多，所以我们使用了yaml和playbook。又拍云有自己的跳板机，通过VPN登陆，目前我们也在试用一个带有审计功能的堡垒机，可以把每个人的操作录制下来，然后再去回放观察，改进我们的工作流程。\n\n3.抽象底层设计和复用组件\n\n如果是开发者的话，就会写很多的复用函数，对于优秀的运维人员来说，也要有优秀的抽象业务的能力，也要去做一些重复工作的复用准备，如频繁的，繁琐易出错的手工操作抽象成若干运维的脚本化。\n\n最后是巧妙的利用虚拟化、容器服务、server-less微服务，这些服务是可以被备份，还原的，可以保持一个相对稳定的状态，我们要拒绝多的特殊管理操作。香农-信息熵理论里说，变量的不确定性越大，熵就越大，把它搞清楚所需要的信息量也就越大。理论上来说，如果是一个孤立的系统，他就会变得越来越乱。\n\n## 以自动化工具为荣，以手动和人肉为耻\n\n![img](http://img.mp.itc.cn/upload/20161101/9f47211cf22444dbb17ca767872dfc61_th.jpeg)\n\n　　△ 以自动化工具为荣，以手动和人肉为耻\n\n又拍云早期，用的是bash、sed、awk，因为我之前有搞嵌入式的背景和经验，对一个十几兆的嵌入式系统来说，上面是不可能有python/perl/nodejs等环境。所以我们把服务器批量安装，部署，上线，做成了嵌入式的系统后，只要点亮以后，运行一个硬件检测的程序，会把机器的CPU、内存、硬盘大小等都打印出来，供货商截图给我看，这个机器是否合格。合格的机器可以直接发到机房去，在机器到了机房通上网线以后会有一个ansibleplaybook的推动。\n\n自从用了这种方法以后，我们在公司里面基本上没有见到服务器，一般直接产线上检测通过后发到机房。然后又拍云的运维人员就可以连上去远程管理，在过去的三年里我们服务器平均每年翻了三倍，节点翻了六倍多，但是人手并没有增加。\n\n关于tgz、rpm、pkg的打包部署，我们用的是tgz的打包及docker镜像。优势在于，又拍云自有CDN网络，软件通过推动到CDN网络下可以加速下发。\n\n关于集成测试、自动测试的发布，像ELK集中日志的分析、大数据的分析，我们现在使用ELK以后，只要有基础的运维技术知识便可看懂，不需要高深的运维知识和脚本编辑知识，大多数人都可以完成这份工作，好处就是你多了好多眼睛帮你一起来发现问题，定位问题。\n\n最后是不要图形，不要交互，不要终端。一旦有了图形以后，很难实现自动化。原则就是，不要手工hack，最好是用程序生成程序的方式去完成这个步骤。\n\n## 以无人值守为荣，以人工介入为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/ecb1a9bc0f1e478dbfcd81f2b79d5c7e_th.jpeg)\n\n　　△ 以无人值守为荣，以人工介入为耻\n\n运维部门要做的事情有三件：\n\n1.运维自动化\n\n要有一定的业务抽象能力，要有标准化的流程。没有好的自动化，就很难把运维的工作效率提升了，只要做好这些，就可以节省时间，从容应对业务增长。而且运维自动化的另一个好处就是运维不会因为人的喜怒哀乐而受到影响稳定性，比如说我今天心情不好，你让我装一台机器我还可以忍，你让我装十台一百台就不行了。但如果公司有了运维自动化的流程，这个事情就可以避免，因为谁做都一样。\n\n2.监控要常态\n\n2016年年初，又拍云特别成立大数据分析部门，我们把日志做了采样收集和过滤，通过大数据平台做日志的同构数据分析，重点关注4xx/5xx/2xx比例，响应时间分析如100毫秒、200毫秒、500毫秒，还有区域性的速率分布，讲真，这真是一个好东西。\n\n3.性能可视化\n\n数据的有效展示。现在ELK对我们的帮助很大，从监控图上来看相关的数据指标，一目了然。这里就不反复赘述了。\n\n## DevOps的本质\n\n最后，我们谈一谈DevOps的本质。\n\n1. 弹性\n\n   像亚马逊推云时，那个单词叫elastic，意思是，你要能够扩展，如横向扩展；你要能负载均衡，如果你是基于openstack/docker资源池，你的资源就可以复用，可以编排回滚。比如说OpenStack有模板，我打一个镜像包，稍微重了一点，Docker的就轻一点，Docker可以做一个滚动发布，可以保留原来的程序、原来的容器，你可以做快速切换，这也是一种变化的弹性。\n\n2. 无关性\n\n   如果是虚拟化资源，一切都可以在模板里面设置，可以把底层的硬件、系统、网络抚平差异，比如说不管物理磁盘是1T(市面上缺货)/4T/6T的盘，都可以划分100G容量，所以当把一切变成按需申请的服务，无论是开发还是运维，工作都会比较简单，因为它的无关性。\n\n3. 不可变的基础设施\n\n   这个对传统运维可能是一种打击，因为基础镜像可能已经做的足够安全，足够完美，足够精干，不需要基础运维过多的人工参与。但我认为恰恰能帮助传统运维减轻工作量，反而有更多的精力去迎接虚拟化、容器化，SDN的挑战，掌握了新技能后，就可以随取随用。","source":"_posts/DevOps的八荣八耻.md","raw":"---\ntitle: DevOps的八荣八耻\ndate: 2017-03-14 00:43:52\ntags: \n- DevOps\ncategories: \n- DevOps\n---\n\n\n\n## 前言\n\n被群里的好友安利了一发，周日跑去参加了一个技术讲座《云上开发与运维最佳实践》，听完两个人的演讲之后才发现主题竟然是讲运维，好在有一个人干货不少，在此记录下所得。简单追溯了一下这个DevOps才发现并不是一个新的概念，早在2010年就能看到有相关的人在追捧这个概念了。DevOps 就是开发（Development）和运维（Operations）这两个领域的合并。（如果没错的话，DevOps还包括产品管理、QA、*winces* 甚至销售等领域）。这种理念和现如今流行的微服务架构以及分布式特性的相关理念不谋而合。这篇文章主要就是转载记录了当时又拍云运维总监的演讲稿。\n\n## DevOps的八荣八耻\n\nDevOps这个思想提出来已经五六年了，一直都是呼声很高，落地很难，为什么呢？这可能与各个公司的业务情况和技术发展路线有或多或少的关系，比如说创业的最早技术合伙人是运维出身或者技术出身，但是水平不高，为了公司持续发展，引入新鲜血液时，就会存在技术的先进性跟解决遗留烂摊子的矛盾。又或者业务本身偏向于用户，导致技术被边缘化，产品又没有好的架构，限制了快速发展等；所以，DevOps的推进一定要自上而下，凭借挑战自我，颠覆传统的勇气才能去落实。\n\n## 以可配置为荣，以硬编码为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/442859059ca8412b9ccc86005922f1e5_th.jpeg)\n\n△ 以可配置为荣，以硬编码为耻\n\nhardcoding一时爽，真正要做改动时，需要定位代码，做出调整，甚至可能会破坏功能。以下可以说是配置的一个进化史\n\n• 本地配置,程序⽣生成 (txt/ini/cfg)\n• 集中配置, 动态⽣生成(Yaml/Json)\n• 环境变量量(代码⽆无侵⼊入&语⾔言⽆无关性)\n• 服务⾃自动发现,⾃自动注册(zookeeper/consul)\n\n## 以互备为荣，以单点为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/e1ff6885b5184119965586baf841fee4_th.jpeg)\n\n　　△ 以互备为荣，以单点为耻\n\n互容互备一直是优良架构的设计重点。\n\n又拍云早期做架构设计，使用了LVS+Keeplived+VRRP做转换，这样可以方便负载均衡，动态升级，隔离故障。现在的又拍云第二代，已经在部分大节点使用OSPF和Quagga做等价路由的负载均衡和冗余保障。\n\nNginx可以加Haproxy或LVS做负载均衡。MySQL可以做主从切换，或者是MMM的高可用成熟解决方案。我们的消息队列之前用rabbitmq做，现在主要是redis和kafka集群化，其中kafka已经迁到了Mesos容器平台里。\n\n服务的自动发现、注册，我们可以使用consul、etcd、doozer（Heroku公司产品），还有zookeeper。主要区别是算法不一样，zookeeper用的是paxos算法，而consul用的是raft算法。目前看来consul比较流行，因为consul的自动发现和自动注册更加容易使用。etcd主要是CoreOS在主推，CoreOS本身就是一个滚动发布的针对分布式部署的操作系统，大家可以去关注一下它。还有一个是hadoop和elk，大数据平台的可扩展性是标配，很容易互备。\n\n上面是举了一些常见互备的软件组件的造型，那我们如何是设计一个无单点的架构呢？主要掌握以下几点：\n\n1.无状态\n\n无状态意味着没有竞争，很容易做负载均衡，负载均衡的方式有很多种，F5，LVS，Haproxy，总能找到一种适合你的方式。\n\n2.无共享\n\n以前我们很喜欢用内存来保持临时信息，如进程间的交换，这种方式虽然效率很高，但是对程序的扩展性没什么好处，尤其是现在的互联网体量，光靠单机或者高性能机器是明显玩不转的。所以我们现在就需要使用类似消息队列的组件，把数据共享出去，利用多台机器把负载给承担下来。\n\n3.松耦合/异步处理\n\n以前我们用Gearman这样的任务框架。大家可以把任务丢进任务池里，生成多个消费者去取任务。当我的消费不够用时，可以平滑增加我的work资源，让他从更快的去拿任务。运维平台这边以python/celery的组合使用更多。\n\n4.分布式/集群协作\n\n像Hadoop这样的天生大数据/数据仓库解决方案，由于先前设计比较成熟，一般都是通过很多台机器扩容来实现map/reduce的扩展计算能力。\n\n## 以随时重启为荣，以不能迁移为耻\n\n![img](http://img.mp.itc.cn/upload/20161101/f74832b01e78472e8507cbf089e3aa8d_th.jpeg)\n\n△ 以随时重启为荣，以不能迁移为耻\n\n关于这个点，我们讲三个方面：\n\n1.Pet到Cow观念的转变\n\n以前我们说机器是pet，也就是宠物模式，然后花了几万块钱去买的服务器，当宝一般供奉。但事实上却并不是这样，任何电子设备、服务器只要一上线，便开始了一个衰老的过程，你根本不知道在运行过程中会发生什么事，比如说质量差的电容会老化爆浆，电子元器件在机房的恶劣环境里会加速损坏，这些变化都是我们无法参与控制的，所以无论我们怎么努力，都无法保障机器有多么的牢靠。\n\n谷歌指出的Cow模式就是指农场模式。就是要把机器发生故障当做常态，打个比方，比如说这头牛死了，那我就不要了，因为我有很多这样的牛，或者是再拉一头新的牛。这就是我们软件开发和运维需要做的转变，去适应这种变化。\n\n2.OpenStack虚拟机的编排\n\n虚拟化是个好东西，通过OpenStack我们很容易就可以做出一些存储或者迁移的操作，但是在实施的过程中，也是一波三折的。\n\n又拍云从2014年开始在内部推动OpenStack，当然我们也踩过OpenStack网络的坑，那时候我们用双千兆的卡做内网通讯，因为使用OpenStack实现虚拟化后，一切都变成了文件，在网络上传输的话，对网络的压力会非常大，结果就导致部分服务响应缓慢（因为本身就是实验性质，所以在硬件上没有足够投入，内测时也没有推广，所以影响不大）。\n\n2015年又拍云再上的OpenStack，全部都用双万兆的网卡做bonding，交换机也是做了端口聚合和堆叠。目前来说，只有云存储没有上线，其它云处理，云网络的使用还是能够满足要求。\n\n3.Docker的导入导出\n\nDocker是更轻量级的资源隔离和复用技术，从2016年开始，又拍云同时也在尝试使用Mesos/Docker来实现云处理的业务迁移。\n\n## 以整体交付为荣，以部分交付为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/64c1749dcf464204bf80d5e8024aad7f_th.jpeg)\n\n　　△ 以整体交付为荣，以部分交付为耻\n\n以往开发运维要安装一个机器，首先要去申请采购，购买完了还要等待运输，在运输中要花去一天的时间，之后还需要配交换机和网络。在这个过程中你会发现，简单的给开发配台机器，光上架就涉及到运维的很多环节，更不要说系统安装，优化，软件配置等剩余工作了，所以大多数情况下你只能做到部分交付。\n\n要如何解决这些问题？通过OpenStack可以做到云计算、云网络、云存储这三块搭建完成之后，进行整体交付。\n\n根据一些经验总结，在整个云平台当中，云存储的坑最多，云计算、云网络相对来说比较成熟。现在云计算的硬件基本上是基于英特尔CPU的虚拟化技术来硬件指令穿透的，损耗大概2%～5%，这是可以接受的。至于云网络，刚才胡凯（B站运维总监）提到内网包转发效率，我做过一个测试，在OpenStack的内网中，如果MTU默认是1500，万兆网卡的转发率大概为6.7xxGbps。后来我在优化的过程中，也翻查一些文档，看到的数据是可以达到9.5xxGbps，通过不断的摸索，对比测试后发现，如果把内网的MTU搞成大包，如9000时，万兆网卡的存储量直接达到了9.72Gbps左右的。不过，这个MTU需要提前在宿主机上调整好，需要重启生效。所以，这个问题发现得越早越好，这样就可以做到统一调度，分配资源。\n\nDocker的好处是可以做到Build、Shipand Run，一气呵成。无论是对开发，测试，还是运维来说，Docker都是同一份Dockerfile清单，所以使用Docker在公司里的推动就很顺畅。虽然OpenStack也可以一站式交付，整体交付，使用时非常方便。但是对开发来说，他还是拿到一台机器，还是需要去安装软件环境，配置，上线，运行，除了得到机器快一些，对上线服务没有什么大的帮助，所以又拍云现在的Openstack集群一般对内申请开发测试用，外网生产环境还是以Docker容器化部署为主，这也是大家都喜闻乐见的方式，但前提是开发那边能够适应编写Dockerfile（目前是我在内部推动这种变革，如新的项目就强制要求用docker）。\n\n## 以无状态为荣，以有状态为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/687e9c56b5b742078e0c6b7b67ee0c06_th.jpeg)\n\n　　△ 以无状态为荣，以有状态为耻\n\n有状态的服务真的很麻烦，无论是存在数据库、磁盘开销，还有各种锁等资源的竞争，横向扩展也很差，不能重启，也不能互备。所以，有姿态的服务对于扩展原则来说，就是一场恶梦。如果是说我们解决这个问题，那就要使用解耦和负载均衡的方法去解决问题。\n\n1.使用可靠的中间件\n\n中间件其实最早出现在金融公司、证券公司，后来随着互联网行业不断壮大以后，就用一些高可靠性的号称工业级的消息队列出现，如RabbitMQ，一出来以后，就把中间件拉下神坛。随着中间件民用化，互联网蓬勃发展，是可以把一些服务变成无状态，方便扩展。\n\n2.公共资源池\n\n我们可以通过各种云，容器云、弹性云，做计算单元的弹性扩展。\n\n3.能够被计算\n\n如果你不想存状态，那也可以被计算，比如说Ceph存储，它的创新在于每个数据块都是可计算出来的，这就类似无状态的，每次都算，反正现在的cpu都这么强悍了，所以，无状态是一个命题，在做架构的时候，你脑海里一定要有这个意念，然后再看你用什么样的方式开动脑筋，预先的跟开发，运维沟通好，把应用拆分成一种无状态的最佳组合。\n\n## 以标准化为荣，以特殊化为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/99df354cd9514e6bb8da2f6a51bc5765_th.jpeg)\n\n△ 以标准化为荣，以特殊化为耻\n\n在标准化方面，我们在这几个方面改良：\n\n1.统一输入输出\n\n统一入口是我加入又拍云后做的第一件事情，我们用一个统一的文本，到现在也在用，然后推送到所有的边缘，服务器上面的组件，要用到的参数，都能从配置里读出来。代码管理方面我们也使用git，git wiki，批量部署我们用ansible（早在2012年，我做了一些比较后，就在公司里推行ansible，看来还是很明智的决定）。\n\n2.统一的流程管理\n\n运维中使用python最多，所以我们使用了yaml和playbook。又拍云有自己的跳板机，通过VPN登陆，目前我们也在试用一个带有审计功能的堡垒机，可以把每个人的操作录制下来，然后再去回放观察，改进我们的工作流程。\n\n3.抽象底层设计和复用组件\n\n如果是开发者的话，就会写很多的复用函数，对于优秀的运维人员来说，也要有优秀的抽象业务的能力，也要去做一些重复工作的复用准备，如频繁的，繁琐易出错的手工操作抽象成若干运维的脚本化。\n\n最后是巧妙的利用虚拟化、容器服务、server-less微服务，这些服务是可以被备份，还原的，可以保持一个相对稳定的状态，我们要拒绝多的特殊管理操作。香农-信息熵理论里说，变量的不确定性越大，熵就越大，把它搞清楚所需要的信息量也就越大。理论上来说，如果是一个孤立的系统，他就会变得越来越乱。\n\n## 以自动化工具为荣，以手动和人肉为耻\n\n![img](http://img.mp.itc.cn/upload/20161101/9f47211cf22444dbb17ca767872dfc61_th.jpeg)\n\n　　△ 以自动化工具为荣，以手动和人肉为耻\n\n又拍云早期，用的是bash、sed、awk，因为我之前有搞嵌入式的背景和经验，对一个十几兆的嵌入式系统来说，上面是不可能有python/perl/nodejs等环境。所以我们把服务器批量安装，部署，上线，做成了嵌入式的系统后，只要点亮以后，运行一个硬件检测的程序，会把机器的CPU、内存、硬盘大小等都打印出来，供货商截图给我看，这个机器是否合格。合格的机器可以直接发到机房去，在机器到了机房通上网线以后会有一个ansibleplaybook的推动。\n\n自从用了这种方法以后，我们在公司里面基本上没有见到服务器，一般直接产线上检测通过后发到机房。然后又拍云的运维人员就可以连上去远程管理，在过去的三年里我们服务器平均每年翻了三倍，节点翻了六倍多，但是人手并没有增加。\n\n关于tgz、rpm、pkg的打包部署，我们用的是tgz的打包及docker镜像。优势在于，又拍云自有CDN网络，软件通过推动到CDN网络下可以加速下发。\n\n关于集成测试、自动测试的发布，像ELK集中日志的分析、大数据的分析，我们现在使用ELK以后，只要有基础的运维技术知识便可看懂，不需要高深的运维知识和脚本编辑知识，大多数人都可以完成这份工作，好处就是你多了好多眼睛帮你一起来发现问题，定位问题。\n\n最后是不要图形，不要交互，不要终端。一旦有了图形以后，很难实现自动化。原则就是，不要手工hack，最好是用程序生成程序的方式去完成这个步骤。\n\n## 以无人值守为荣，以人工介入为耻\n\n　　![img](http://img.mp.itc.cn/upload/20161101/ecb1a9bc0f1e478dbfcd81f2b79d5c7e_th.jpeg)\n\n　　△ 以无人值守为荣，以人工介入为耻\n\n运维部门要做的事情有三件：\n\n1.运维自动化\n\n要有一定的业务抽象能力，要有标准化的流程。没有好的自动化，就很难把运维的工作效率提升了，只要做好这些，就可以节省时间，从容应对业务增长。而且运维自动化的另一个好处就是运维不会因为人的喜怒哀乐而受到影响稳定性，比如说我今天心情不好，你让我装一台机器我还可以忍，你让我装十台一百台就不行了。但如果公司有了运维自动化的流程，这个事情就可以避免，因为谁做都一样。\n\n2.监控要常态\n\n2016年年初，又拍云特别成立大数据分析部门，我们把日志做了采样收集和过滤，通过大数据平台做日志的同构数据分析，重点关注4xx/5xx/2xx比例，响应时间分析如100毫秒、200毫秒、500毫秒，还有区域性的速率分布，讲真，这真是一个好东西。\n\n3.性能可视化\n\n数据的有效展示。现在ELK对我们的帮助很大，从监控图上来看相关的数据指标，一目了然。这里就不反复赘述了。\n\n## DevOps的本质\n\n最后，我们谈一谈DevOps的本质。\n\n1. 弹性\n\n   像亚马逊推云时，那个单词叫elastic，意思是，你要能够扩展，如横向扩展；你要能负载均衡，如果你是基于openstack/docker资源池，你的资源就可以复用，可以编排回滚。比如说OpenStack有模板，我打一个镜像包，稍微重了一点，Docker的就轻一点，Docker可以做一个滚动发布，可以保留原来的程序、原来的容器，你可以做快速切换，这也是一种变化的弹性。\n\n2. 无关性\n\n   如果是虚拟化资源，一切都可以在模板里面设置，可以把底层的硬件、系统、网络抚平差异，比如说不管物理磁盘是1T(市面上缺货)/4T/6T的盘，都可以划分100G容量，所以当把一切变成按需申请的服务，无论是开发还是运维，工作都会比较简单，因为它的无关性。\n\n3. 不可变的基础设施\n\n   这个对传统运维可能是一种打击，因为基础镜像可能已经做的足够安全，足够完美，足够精干，不需要基础运维过多的人工参与。但我认为恰恰能帮助传统运维减轻工作量，反而有更多的精力去迎接虚拟化、容器化，SDN的挑战，掌握了新技能后，就可以随取随用。","slug":"DevOps的八荣八耻","published":1,"updated":"2017-09-04T11:49:26.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3ztx002qtwv7alr60z64","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>被群里的好友安利了一发，周日跑去参加了一个技术讲座《云上开发与运维最佳实践》，听完两个人的演讲之后才发现主题竟然是讲运维，好在有一个人干货不少，在此记录下所得。简单追溯了一下这个DevOps才发现并不是一个新的概念，早在2010年就能看到有相关的人在追捧这个概念了。DevOps 就是开发（Development）和运维（Operations）这两个领域的合并。（如果没错的话，DevOps还包括产品管理、QA、<em>winces</em> 甚至销售等领域）。这种理念和现如今流行的微服务架构以及分布式特性的相关理念不谋而合。这篇文章主要就是转载记录了当时又拍云运维总监的演讲稿。</p>\n<h2 id=\"DevOps的八荣八耻\"><a href=\"#DevOps的八荣八耻\" class=\"headerlink\" title=\"DevOps的八荣八耻\"></a>DevOps的八荣八耻</h2><p>DevOps这个思想提出来已经五六年了，一直都是呼声很高，落地很难，为什么呢？这可能与各个公司的业务情况和技术发展路线有或多或少的关系，比如说创业的最早技术合伙人是运维出身或者技术出身，但是水平不高，为了公司持续发展，引入新鲜血液时，就会存在技术的先进性跟解决遗留烂摊子的矛盾。又或者业务本身偏向于用户，导致技术被边缘化，产品又没有好的架构，限制了快速发展等；所以，DevOps的推进一定要自上而下，凭借挑战自我，颠覆传统的勇气才能去落实。</p>\n<h2 id=\"以可配置为荣，以硬编码为耻\"><a href=\"#以可配置为荣，以硬编码为耻\" class=\"headerlink\" title=\"以可配置为荣，以硬编码为耻\"></a>以可配置为荣，以硬编码为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/442859059ca8412b9ccc86005922f1e5_th.jpeg\" alt=\"img\"></p>\n<p>△ 以可配置为荣，以硬编码为耻</p>\n<p>hardcoding一时爽，真正要做改动时，需要定位代码，做出调整，甚至可能会破坏功能。以下可以说是配置的一个进化史</p>\n<p>• 本地配置,程序⽣生成 (txt/ini/cfg)<br>• 集中配置, 动态⽣生成(Yaml/Json)<br>• 环境变量量(代码⽆无侵⼊入&amp;语⾔言⽆无关性)<br>• 服务⾃自动发现,⾃自动注册(zookeeper/consul)</p>\n<h2 id=\"以互备为荣，以单点为耻\"><a href=\"#以互备为荣，以单点为耻\" class=\"headerlink\" title=\"以互备为荣，以单点为耻\"></a>以互备为荣，以单点为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/e1ff6885b5184119965586baf841fee4_th.jpeg\" alt=\"img\"></p>\n<p>　　△ 以互备为荣，以单点为耻</p>\n<p>互容互备一直是优良架构的设计重点。</p>\n<p>又拍云早期做架构设计，使用了LVS+Keeplived+VRRP做转换，这样可以方便负载均衡，动态升级，隔离故障。现在的又拍云第二代，已经在部分大节点使用OSPF和Quagga做等价路由的负载均衡和冗余保障。</p>\n<p>Nginx可以加Haproxy或LVS做负载均衡。MySQL可以做主从切换，或者是MMM的高可用成熟解决方案。我们的消息队列之前用rabbitmq做，现在主要是redis和kafka集群化，其中kafka已经迁到了Mesos容器平台里。</p>\n<p>服务的自动发现、注册，我们可以使用consul、etcd、doozer（Heroku公司产品），还有zookeeper。主要区别是算法不一样，zookeeper用的是paxos算法，而consul用的是raft算法。目前看来consul比较流行，因为consul的自动发现和自动注册更加容易使用。etcd主要是CoreOS在主推，CoreOS本身就是一个滚动发布的针对分布式部署的操作系统，大家可以去关注一下它。还有一个是hadoop和elk，大数据平台的可扩展性是标配，很容易互备。</p>\n<p>上面是举了一些常见互备的软件组件的造型，那我们如何是设计一个无单点的架构呢？主要掌握以下几点：</p>\n<p>1.无状态</p>\n<p>无状态意味着没有竞争，很容易做负载均衡，负载均衡的方式有很多种，F5，LVS，Haproxy，总能找到一种适合你的方式。</p>\n<p>2.无共享</p>\n<p>以前我们很喜欢用内存来保持临时信息，如进程间的交换，这种方式虽然效率很高，但是对程序的扩展性没什么好处，尤其是现在的互联网体量，光靠单机或者高性能机器是明显玩不转的。所以我们现在就需要使用类似消息队列的组件，把数据共享出去，利用多台机器把负载给承担下来。</p>\n<p>3.松耦合/异步处理</p>\n<p>以前我们用Gearman这样的任务框架。大家可以把任务丢进任务池里，生成多个消费者去取任务。当我的消费不够用时，可以平滑增加我的work资源，让他从更快的去拿任务。运维平台这边以python/celery的组合使用更多。</p>\n<p>4.分布式/集群协作</p>\n<p>像Hadoop这样的天生大数据/数据仓库解决方案，由于先前设计比较成熟，一般都是通过很多台机器扩容来实现map/reduce的扩展计算能力。</p>\n<h2 id=\"以随时重启为荣，以不能迁移为耻\"><a href=\"#以随时重启为荣，以不能迁移为耻\" class=\"headerlink\" title=\"以随时重启为荣，以不能迁移为耻\"></a>以随时重启为荣，以不能迁移为耻</h2><p><img src=\"http://img.mp.itc.cn/upload/20161101/f74832b01e78472e8507cbf089e3aa8d_th.jpeg\" alt=\"img\"></p>\n<p>△ 以随时重启为荣，以不能迁移为耻</p>\n<p>关于这个点，我们讲三个方面：</p>\n<p>1.Pet到Cow观念的转变</p>\n<p>以前我们说机器是pet，也就是宠物模式，然后花了几万块钱去买的服务器，当宝一般供奉。但事实上却并不是这样，任何电子设备、服务器只要一上线，便开始了一个衰老的过程，你根本不知道在运行过程中会发生什么事，比如说质量差的电容会老化爆浆，电子元器件在机房的恶劣环境里会加速损坏，这些变化都是我们无法参与控制的，所以无论我们怎么努力，都无法保障机器有多么的牢靠。</p>\n<p>谷歌指出的Cow模式就是指农场模式。就是要把机器发生故障当做常态，打个比方，比如说这头牛死了，那我就不要了，因为我有很多这样的牛，或者是再拉一头新的牛。这就是我们软件开发和运维需要做的转变，去适应这种变化。</p>\n<p>2.OpenStack虚拟机的编排</p>\n<p>虚拟化是个好东西，通过OpenStack我们很容易就可以做出一些存储或者迁移的操作，但是在实施的过程中，也是一波三折的。</p>\n<p>又拍云从2014年开始在内部推动OpenStack，当然我们也踩过OpenStack网络的坑，那时候我们用双千兆的卡做内网通讯，因为使用OpenStack实现虚拟化后，一切都变成了文件，在网络上传输的话，对网络的压力会非常大，结果就导致部分服务响应缓慢（因为本身就是实验性质，所以在硬件上没有足够投入，内测时也没有推广，所以影响不大）。</p>\n<p>2015年又拍云再上的OpenStack，全部都用双万兆的网卡做bonding，交换机也是做了端口聚合和堆叠。目前来说，只有云存储没有上线，其它云处理，云网络的使用还是能够满足要求。</p>\n<p>3.Docker的导入导出</p>\n<p>Docker是更轻量级的资源隔离和复用技术，从2016年开始，又拍云同时也在尝试使用Mesos/Docker来实现云处理的业务迁移。</p>\n<h2 id=\"以整体交付为荣，以部分交付为耻\"><a href=\"#以整体交付为荣，以部分交付为耻\" class=\"headerlink\" title=\"以整体交付为荣，以部分交付为耻\"></a>以整体交付为荣，以部分交付为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/64c1749dcf464204bf80d5e8024aad7f_th.jpeg\" alt=\"img\"></p>\n<p>　　△ 以整体交付为荣，以部分交付为耻</p>\n<p>以往开发运维要安装一个机器，首先要去申请采购，购买完了还要等待运输，在运输中要花去一天的时间，之后还需要配交换机和网络。在这个过程中你会发现，简单的给开发配台机器，光上架就涉及到运维的很多环节，更不要说系统安装，优化，软件配置等剩余工作了，所以大多数情况下你只能做到部分交付。</p>\n<p>要如何解决这些问题？通过OpenStack可以做到云计算、云网络、云存储这三块搭建完成之后，进行整体交付。</p>\n<p>根据一些经验总结，在整个云平台当中，云存储的坑最多，云计算、云网络相对来说比较成熟。现在云计算的硬件基本上是基于英特尔CPU的虚拟化技术来硬件指令穿透的，损耗大概2%～5%，这是可以接受的。至于云网络，刚才胡凯（B站运维总监）提到内网包转发效率，我做过一个测试，在OpenStack的内网中，如果MTU默认是1500，万兆网卡的转发率大概为6.7xxGbps。后来我在优化的过程中，也翻查一些文档，看到的数据是可以达到9.5xxGbps，通过不断的摸索，对比测试后发现，如果把内网的MTU搞成大包，如9000时，万兆网卡的存储量直接达到了9.72Gbps左右的。不过，这个MTU需要提前在宿主机上调整好，需要重启生效。所以，这个问题发现得越早越好，这样就可以做到统一调度，分配资源。</p>\n<p>Docker的好处是可以做到Build、Shipand Run，一气呵成。无论是对开发，测试，还是运维来说，Docker都是同一份Dockerfile清单，所以使用Docker在公司里的推动就很顺畅。虽然OpenStack也可以一站式交付，整体交付，使用时非常方便。但是对开发来说，他还是拿到一台机器，还是需要去安装软件环境，配置，上线，运行，除了得到机器快一些，对上线服务没有什么大的帮助，所以又拍云现在的Openstack集群一般对内申请开发测试用，外网生产环境还是以Docker容器化部署为主，这也是大家都喜闻乐见的方式，但前提是开发那边能够适应编写Dockerfile（目前是我在内部推动这种变革，如新的项目就强制要求用docker）。</p>\n<h2 id=\"以无状态为荣，以有状态为耻\"><a href=\"#以无状态为荣，以有状态为耻\" class=\"headerlink\" title=\"以无状态为荣，以有状态为耻\"></a>以无状态为荣，以有状态为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/687e9c56b5b742078e0c6b7b67ee0c06_th.jpeg\" alt=\"img\"></p>\n<p>　　△ 以无状态为荣，以有状态为耻</p>\n<p>有状态的服务真的很麻烦，无论是存在数据库、磁盘开销，还有各种锁等资源的竞争，横向扩展也很差，不能重启，也不能互备。所以，有姿态的服务对于扩展原则来说，就是一场恶梦。如果是说我们解决这个问题，那就要使用解耦和负载均衡的方法去解决问题。</p>\n<p>1.使用可靠的中间件</p>\n<p>中间件其实最早出现在金融公司、证券公司，后来随着互联网行业不断壮大以后，就用一些高可靠性的号称工业级的消息队列出现，如RabbitMQ，一出来以后，就把中间件拉下神坛。随着中间件民用化，互联网蓬勃发展，是可以把一些服务变成无状态，方便扩展。</p>\n<p>2.公共资源池</p>\n<p>我们可以通过各种云，容器云、弹性云，做计算单元的弹性扩展。</p>\n<p>3.能够被计算</p>\n<p>如果你不想存状态，那也可以被计算，比如说Ceph存储，它的创新在于每个数据块都是可计算出来的，这就类似无状态的，每次都算，反正现在的cpu都这么强悍了，所以，无状态是一个命题，在做架构的时候，你脑海里一定要有这个意念，然后再看你用什么样的方式开动脑筋，预先的跟开发，运维沟通好，把应用拆分成一种无状态的最佳组合。</p>\n<h2 id=\"以标准化为荣，以特殊化为耻\"><a href=\"#以标准化为荣，以特殊化为耻\" class=\"headerlink\" title=\"以标准化为荣，以特殊化为耻\"></a>以标准化为荣，以特殊化为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/99df354cd9514e6bb8da2f6a51bc5765_th.jpeg\" alt=\"img\"></p>\n<p>△ 以标准化为荣，以特殊化为耻</p>\n<p>在标准化方面，我们在这几个方面改良：</p>\n<p>1.统一输入输出</p>\n<p>统一入口是我加入又拍云后做的第一件事情，我们用一个统一的文本，到现在也在用，然后推送到所有的边缘，服务器上面的组件，要用到的参数，都能从配置里读出来。代码管理方面我们也使用git，git wiki，批量部署我们用ansible（早在2012年，我做了一些比较后，就在公司里推行ansible，看来还是很明智的决定）。</p>\n<p>2.统一的流程管理</p>\n<p>运维中使用python最多，所以我们使用了yaml和playbook。又拍云有自己的跳板机，通过VPN登陆，目前我们也在试用一个带有审计功能的堡垒机，可以把每个人的操作录制下来，然后再去回放观察，改进我们的工作流程。</p>\n<p>3.抽象底层设计和复用组件</p>\n<p>如果是开发者的话，就会写很多的复用函数，对于优秀的运维人员来说，也要有优秀的抽象业务的能力，也要去做一些重复工作的复用准备，如频繁的，繁琐易出错的手工操作抽象成若干运维的脚本化。</p>\n<p>最后是巧妙的利用虚拟化、容器服务、server-less微服务，这些服务是可以被备份，还原的，可以保持一个相对稳定的状态，我们要拒绝多的特殊管理操作。香农-信息熵理论里说，变量的不确定性越大，熵就越大，把它搞清楚所需要的信息量也就越大。理论上来说，如果是一个孤立的系统，他就会变得越来越乱。</p>\n<h2 id=\"以自动化工具为荣，以手动和人肉为耻\"><a href=\"#以自动化工具为荣，以手动和人肉为耻\" class=\"headerlink\" title=\"以自动化工具为荣，以手动和人肉为耻\"></a>以自动化工具为荣，以手动和人肉为耻</h2><p><img src=\"http://img.mp.itc.cn/upload/20161101/9f47211cf22444dbb17ca767872dfc61_th.jpeg\" alt=\"img\"></p>\n<p>　　△ 以自动化工具为荣，以手动和人肉为耻</p>\n<p>又拍云早期，用的是bash、sed、awk，因为我之前有搞嵌入式的背景和经验，对一个十几兆的嵌入式系统来说，上面是不可能有python/perl/nodejs等环境。所以我们把服务器批量安装，部署，上线，做成了嵌入式的系统后，只要点亮以后，运行一个硬件检测的程序，会把机器的CPU、内存、硬盘大小等都打印出来，供货商截图给我看，这个机器是否合格。合格的机器可以直接发到机房去，在机器到了机房通上网线以后会有一个ansibleplaybook的推动。</p>\n<p>自从用了这种方法以后，我们在公司里面基本上没有见到服务器，一般直接产线上检测通过后发到机房。然后又拍云的运维人员就可以连上去远程管理，在过去的三年里我们服务器平均每年翻了三倍，节点翻了六倍多，但是人手并没有增加。</p>\n<p>关于tgz、rpm、pkg的打包部署，我们用的是tgz的打包及docker镜像。优势在于，又拍云自有CDN网络，软件通过推动到CDN网络下可以加速下发。</p>\n<p>关于集成测试、自动测试的发布，像ELK集中日志的分析、大数据的分析，我们现在使用ELK以后，只要有基础的运维技术知识便可看懂，不需要高深的运维知识和脚本编辑知识，大多数人都可以完成这份工作，好处就是你多了好多眼睛帮你一起来发现问题，定位问题。</p>\n<p>最后是不要图形，不要交互，不要终端。一旦有了图形以后，很难实现自动化。原则就是，不要手工hack，最好是用程序生成程序的方式去完成这个步骤。</p>\n<h2 id=\"以无人值守为荣，以人工介入为耻\"><a href=\"#以无人值守为荣，以人工介入为耻\" class=\"headerlink\" title=\"以无人值守为荣，以人工介入为耻\"></a>以无人值守为荣，以人工介入为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/ecb1a9bc0f1e478dbfcd81f2b79d5c7e_th.jpeg\" alt=\"img\"></p>\n<p>　　△ 以无人值守为荣，以人工介入为耻</p>\n<p>运维部门要做的事情有三件：</p>\n<p>1.运维自动化</p>\n<p>要有一定的业务抽象能力，要有标准化的流程。没有好的自动化，就很难把运维的工作效率提升了，只要做好这些，就可以节省时间，从容应对业务增长。而且运维自动化的另一个好处就是运维不会因为人的喜怒哀乐而受到影响稳定性，比如说我今天心情不好，你让我装一台机器我还可以忍，你让我装十台一百台就不行了。但如果公司有了运维自动化的流程，这个事情就可以避免，因为谁做都一样。</p>\n<p>2.监控要常态</p>\n<p>2016年年初，又拍云特别成立大数据分析部门，我们把日志做了采样收集和过滤，通过大数据平台做日志的同构数据分析，重点关注4xx/5xx/2xx比例，响应时间分析如100毫秒、200毫秒、500毫秒，还有区域性的速率分布，讲真，这真是一个好东西。</p>\n<p>3.性能可视化</p>\n<p>数据的有效展示。现在ELK对我们的帮助很大，从监控图上来看相关的数据指标，一目了然。这里就不反复赘述了。</p>\n<h2 id=\"DevOps的本质\"><a href=\"#DevOps的本质\" class=\"headerlink\" title=\"DevOps的本质\"></a>DevOps的本质</h2><p>最后，我们谈一谈DevOps的本质。</p>\n<ol>\n<li><p>弹性</p>\n<p>像亚马逊推云时，那个单词叫elastic，意思是，你要能够扩展，如横向扩展；你要能负载均衡，如果你是基于openstack/docker资源池，你的资源就可以复用，可以编排回滚。比如说OpenStack有模板，我打一个镜像包，稍微重了一点，Docker的就轻一点，Docker可以做一个滚动发布，可以保留原来的程序、原来的容器，你可以做快速切换，这也是一种变化的弹性。</p>\n</li>\n<li><p>无关性</p>\n<p>如果是虚拟化资源，一切都可以在模板里面设置，可以把底层的硬件、系统、网络抚平差异，比如说不管物理磁盘是1T(市面上缺货)/4T/6T的盘，都可以划分100G容量，所以当把一切变成按需申请的服务，无论是开发还是运维，工作都会比较简单，因为它的无关性。</p>\n</li>\n<li><p>不可变的基础设施</p>\n<p>这个对传统运维可能是一种打击，因为基础镜像可能已经做的足够安全，足够完美，足够精干，不需要基础运维过多的人工参与。但我认为恰恰能帮助传统运维减轻工作量，反而有更多的精力去迎接虚拟化、容器化，SDN的挑战，掌握了新技能后，就可以随取随用。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>被群里的好友安利了一发，周日跑去参加了一个技术讲座《云上开发与运维最佳实践》，听完两个人的演讲之后才发现主题竟然是讲运维，好在有一个人干货不少，在此记录下所得。简单追溯了一下这个DevOps才发现并不是一个新的概念，早在2010年就能看到有相关的人在追捧这个概念了。DevOps 就是开发（Development）和运维（Operations）这两个领域的合并。（如果没错的话，DevOps还包括产品管理、QA、<em>winces</em> 甚至销售等领域）。这种理念和现如今流行的微服务架构以及分布式特性的相关理念不谋而合。这篇文章主要就是转载记录了当时又拍云运维总监的演讲稿。</p>\n<h2 id=\"DevOps的八荣八耻\"><a href=\"#DevOps的八荣八耻\" class=\"headerlink\" title=\"DevOps的八荣八耻\"></a>DevOps的八荣八耻</h2><p>DevOps这个思想提出来已经五六年了，一直都是呼声很高，落地很难，为什么呢？这可能与各个公司的业务情况和技术发展路线有或多或少的关系，比如说创业的最早技术合伙人是运维出身或者技术出身，但是水平不高，为了公司持续发展，引入新鲜血液时，就会存在技术的先进性跟解决遗留烂摊子的矛盾。又或者业务本身偏向于用户，导致技术被边缘化，产品又没有好的架构，限制了快速发展等；所以，DevOps的推进一定要自上而下，凭借挑战自我，颠覆传统的勇气才能去落实。</p>\n<h2 id=\"以可配置为荣，以硬编码为耻\"><a href=\"#以可配置为荣，以硬编码为耻\" class=\"headerlink\" title=\"以可配置为荣，以硬编码为耻\"></a>以可配置为荣，以硬编码为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/442859059ca8412b9ccc86005922f1e5_th.jpeg\" alt=\"img\"></p>\n<p>△ 以可配置为荣，以硬编码为耻</p>\n<p>hardcoding一时爽，真正要做改动时，需要定位代码，做出调整，甚至可能会破坏功能。以下可以说是配置的一个进化史</p>\n<p>• 本地配置,程序⽣生成 (txt/ini/cfg)<br>• 集中配置, 动态⽣生成(Yaml/Json)<br>• 环境变量量(代码⽆无侵⼊入&amp;语⾔言⽆无关性)<br>• 服务⾃自动发现,⾃自动注册(zookeeper/consul)</p>\n<h2 id=\"以互备为荣，以单点为耻\"><a href=\"#以互备为荣，以单点为耻\" class=\"headerlink\" title=\"以互备为荣，以单点为耻\"></a>以互备为荣，以单点为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/e1ff6885b5184119965586baf841fee4_th.jpeg\" alt=\"img\"></p>\n<p>　　△ 以互备为荣，以单点为耻</p>\n<p>互容互备一直是优良架构的设计重点。</p>\n<p>又拍云早期做架构设计，使用了LVS+Keeplived+VRRP做转换，这样可以方便负载均衡，动态升级，隔离故障。现在的又拍云第二代，已经在部分大节点使用OSPF和Quagga做等价路由的负载均衡和冗余保障。</p>\n<p>Nginx可以加Haproxy或LVS做负载均衡。MySQL可以做主从切换，或者是MMM的高可用成熟解决方案。我们的消息队列之前用rabbitmq做，现在主要是redis和kafka集群化，其中kafka已经迁到了Mesos容器平台里。</p>\n<p>服务的自动发现、注册，我们可以使用consul、etcd、doozer（Heroku公司产品），还有zookeeper。主要区别是算法不一样，zookeeper用的是paxos算法，而consul用的是raft算法。目前看来consul比较流行，因为consul的自动发现和自动注册更加容易使用。etcd主要是CoreOS在主推，CoreOS本身就是一个滚动发布的针对分布式部署的操作系统，大家可以去关注一下它。还有一个是hadoop和elk，大数据平台的可扩展性是标配，很容易互备。</p>\n<p>上面是举了一些常见互备的软件组件的造型，那我们如何是设计一个无单点的架构呢？主要掌握以下几点：</p>\n<p>1.无状态</p>\n<p>无状态意味着没有竞争，很容易做负载均衡，负载均衡的方式有很多种，F5，LVS，Haproxy，总能找到一种适合你的方式。</p>\n<p>2.无共享</p>\n<p>以前我们很喜欢用内存来保持临时信息，如进程间的交换，这种方式虽然效率很高，但是对程序的扩展性没什么好处，尤其是现在的互联网体量，光靠单机或者高性能机器是明显玩不转的。所以我们现在就需要使用类似消息队列的组件，把数据共享出去，利用多台机器把负载给承担下来。</p>\n<p>3.松耦合/异步处理</p>\n<p>以前我们用Gearman这样的任务框架。大家可以把任务丢进任务池里，生成多个消费者去取任务。当我的消费不够用时，可以平滑增加我的work资源，让他从更快的去拿任务。运维平台这边以python/celery的组合使用更多。</p>\n<p>4.分布式/集群协作</p>\n<p>像Hadoop这样的天生大数据/数据仓库解决方案，由于先前设计比较成熟，一般都是通过很多台机器扩容来实现map/reduce的扩展计算能力。</p>\n<h2 id=\"以随时重启为荣，以不能迁移为耻\"><a href=\"#以随时重启为荣，以不能迁移为耻\" class=\"headerlink\" title=\"以随时重启为荣，以不能迁移为耻\"></a>以随时重启为荣，以不能迁移为耻</h2><p><img src=\"http://img.mp.itc.cn/upload/20161101/f74832b01e78472e8507cbf089e3aa8d_th.jpeg\" alt=\"img\"></p>\n<p>△ 以随时重启为荣，以不能迁移为耻</p>\n<p>关于这个点，我们讲三个方面：</p>\n<p>1.Pet到Cow观念的转变</p>\n<p>以前我们说机器是pet，也就是宠物模式，然后花了几万块钱去买的服务器，当宝一般供奉。但事实上却并不是这样，任何电子设备、服务器只要一上线，便开始了一个衰老的过程，你根本不知道在运行过程中会发生什么事，比如说质量差的电容会老化爆浆，电子元器件在机房的恶劣环境里会加速损坏，这些变化都是我们无法参与控制的，所以无论我们怎么努力，都无法保障机器有多么的牢靠。</p>\n<p>谷歌指出的Cow模式就是指农场模式。就是要把机器发生故障当做常态，打个比方，比如说这头牛死了，那我就不要了，因为我有很多这样的牛，或者是再拉一头新的牛。这就是我们软件开发和运维需要做的转变，去适应这种变化。</p>\n<p>2.OpenStack虚拟机的编排</p>\n<p>虚拟化是个好东西，通过OpenStack我们很容易就可以做出一些存储或者迁移的操作，但是在实施的过程中，也是一波三折的。</p>\n<p>又拍云从2014年开始在内部推动OpenStack，当然我们也踩过OpenStack网络的坑，那时候我们用双千兆的卡做内网通讯，因为使用OpenStack实现虚拟化后，一切都变成了文件，在网络上传输的话，对网络的压力会非常大，结果就导致部分服务响应缓慢（因为本身就是实验性质，所以在硬件上没有足够投入，内测时也没有推广，所以影响不大）。</p>\n<p>2015年又拍云再上的OpenStack，全部都用双万兆的网卡做bonding，交换机也是做了端口聚合和堆叠。目前来说，只有云存储没有上线，其它云处理，云网络的使用还是能够满足要求。</p>\n<p>3.Docker的导入导出</p>\n<p>Docker是更轻量级的资源隔离和复用技术，从2016年开始，又拍云同时也在尝试使用Mesos/Docker来实现云处理的业务迁移。</p>\n<h2 id=\"以整体交付为荣，以部分交付为耻\"><a href=\"#以整体交付为荣，以部分交付为耻\" class=\"headerlink\" title=\"以整体交付为荣，以部分交付为耻\"></a>以整体交付为荣，以部分交付为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/64c1749dcf464204bf80d5e8024aad7f_th.jpeg\" alt=\"img\"></p>\n<p>　　△ 以整体交付为荣，以部分交付为耻</p>\n<p>以往开发运维要安装一个机器，首先要去申请采购，购买完了还要等待运输，在运输中要花去一天的时间，之后还需要配交换机和网络。在这个过程中你会发现，简单的给开发配台机器，光上架就涉及到运维的很多环节，更不要说系统安装，优化，软件配置等剩余工作了，所以大多数情况下你只能做到部分交付。</p>\n<p>要如何解决这些问题？通过OpenStack可以做到云计算、云网络、云存储这三块搭建完成之后，进行整体交付。</p>\n<p>根据一些经验总结，在整个云平台当中，云存储的坑最多，云计算、云网络相对来说比较成熟。现在云计算的硬件基本上是基于英特尔CPU的虚拟化技术来硬件指令穿透的，损耗大概2%～5%，这是可以接受的。至于云网络，刚才胡凯（B站运维总监）提到内网包转发效率，我做过一个测试，在OpenStack的内网中，如果MTU默认是1500，万兆网卡的转发率大概为6.7xxGbps。后来我在优化的过程中，也翻查一些文档，看到的数据是可以达到9.5xxGbps，通过不断的摸索，对比测试后发现，如果把内网的MTU搞成大包，如9000时，万兆网卡的存储量直接达到了9.72Gbps左右的。不过，这个MTU需要提前在宿主机上调整好，需要重启生效。所以，这个问题发现得越早越好，这样就可以做到统一调度，分配资源。</p>\n<p>Docker的好处是可以做到Build、Shipand Run，一气呵成。无论是对开发，测试，还是运维来说，Docker都是同一份Dockerfile清单，所以使用Docker在公司里的推动就很顺畅。虽然OpenStack也可以一站式交付，整体交付，使用时非常方便。但是对开发来说，他还是拿到一台机器，还是需要去安装软件环境，配置，上线，运行，除了得到机器快一些，对上线服务没有什么大的帮助，所以又拍云现在的Openstack集群一般对内申请开发测试用，外网生产环境还是以Docker容器化部署为主，这也是大家都喜闻乐见的方式，但前提是开发那边能够适应编写Dockerfile（目前是我在内部推动这种变革，如新的项目就强制要求用docker）。</p>\n<h2 id=\"以无状态为荣，以有状态为耻\"><a href=\"#以无状态为荣，以有状态为耻\" class=\"headerlink\" title=\"以无状态为荣，以有状态为耻\"></a>以无状态为荣，以有状态为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/687e9c56b5b742078e0c6b7b67ee0c06_th.jpeg\" alt=\"img\"></p>\n<p>　　△ 以无状态为荣，以有状态为耻</p>\n<p>有状态的服务真的很麻烦，无论是存在数据库、磁盘开销，还有各种锁等资源的竞争，横向扩展也很差，不能重启，也不能互备。所以，有姿态的服务对于扩展原则来说，就是一场恶梦。如果是说我们解决这个问题，那就要使用解耦和负载均衡的方法去解决问题。</p>\n<p>1.使用可靠的中间件</p>\n<p>中间件其实最早出现在金融公司、证券公司，后来随着互联网行业不断壮大以后，就用一些高可靠性的号称工业级的消息队列出现，如RabbitMQ，一出来以后，就把中间件拉下神坛。随着中间件民用化，互联网蓬勃发展，是可以把一些服务变成无状态，方便扩展。</p>\n<p>2.公共资源池</p>\n<p>我们可以通过各种云，容器云、弹性云，做计算单元的弹性扩展。</p>\n<p>3.能够被计算</p>\n<p>如果你不想存状态，那也可以被计算，比如说Ceph存储，它的创新在于每个数据块都是可计算出来的，这就类似无状态的，每次都算，反正现在的cpu都这么强悍了，所以，无状态是一个命题，在做架构的时候，你脑海里一定要有这个意念，然后再看你用什么样的方式开动脑筋，预先的跟开发，运维沟通好，把应用拆分成一种无状态的最佳组合。</p>\n<h2 id=\"以标准化为荣，以特殊化为耻\"><a href=\"#以标准化为荣，以特殊化为耻\" class=\"headerlink\" title=\"以标准化为荣，以特殊化为耻\"></a>以标准化为荣，以特殊化为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/99df354cd9514e6bb8da2f6a51bc5765_th.jpeg\" alt=\"img\"></p>\n<p>△ 以标准化为荣，以特殊化为耻</p>\n<p>在标准化方面，我们在这几个方面改良：</p>\n<p>1.统一输入输出</p>\n<p>统一入口是我加入又拍云后做的第一件事情，我们用一个统一的文本，到现在也在用，然后推送到所有的边缘，服务器上面的组件，要用到的参数，都能从配置里读出来。代码管理方面我们也使用git，git wiki，批量部署我们用ansible（早在2012年，我做了一些比较后，就在公司里推行ansible，看来还是很明智的决定）。</p>\n<p>2.统一的流程管理</p>\n<p>运维中使用python最多，所以我们使用了yaml和playbook。又拍云有自己的跳板机，通过VPN登陆，目前我们也在试用一个带有审计功能的堡垒机，可以把每个人的操作录制下来，然后再去回放观察，改进我们的工作流程。</p>\n<p>3.抽象底层设计和复用组件</p>\n<p>如果是开发者的话，就会写很多的复用函数，对于优秀的运维人员来说，也要有优秀的抽象业务的能力，也要去做一些重复工作的复用准备，如频繁的，繁琐易出错的手工操作抽象成若干运维的脚本化。</p>\n<p>最后是巧妙的利用虚拟化、容器服务、server-less微服务，这些服务是可以被备份，还原的，可以保持一个相对稳定的状态，我们要拒绝多的特殊管理操作。香农-信息熵理论里说，变量的不确定性越大，熵就越大，把它搞清楚所需要的信息量也就越大。理论上来说，如果是一个孤立的系统，他就会变得越来越乱。</p>\n<h2 id=\"以自动化工具为荣，以手动和人肉为耻\"><a href=\"#以自动化工具为荣，以手动和人肉为耻\" class=\"headerlink\" title=\"以自动化工具为荣，以手动和人肉为耻\"></a>以自动化工具为荣，以手动和人肉为耻</h2><p><img src=\"http://img.mp.itc.cn/upload/20161101/9f47211cf22444dbb17ca767872dfc61_th.jpeg\" alt=\"img\"></p>\n<p>　　△ 以自动化工具为荣，以手动和人肉为耻</p>\n<p>又拍云早期，用的是bash、sed、awk，因为我之前有搞嵌入式的背景和经验，对一个十几兆的嵌入式系统来说，上面是不可能有python/perl/nodejs等环境。所以我们把服务器批量安装，部署，上线，做成了嵌入式的系统后，只要点亮以后，运行一个硬件检测的程序，会把机器的CPU、内存、硬盘大小等都打印出来，供货商截图给我看，这个机器是否合格。合格的机器可以直接发到机房去，在机器到了机房通上网线以后会有一个ansibleplaybook的推动。</p>\n<p>自从用了这种方法以后，我们在公司里面基本上没有见到服务器，一般直接产线上检测通过后发到机房。然后又拍云的运维人员就可以连上去远程管理，在过去的三年里我们服务器平均每年翻了三倍，节点翻了六倍多，但是人手并没有增加。</p>\n<p>关于tgz、rpm、pkg的打包部署，我们用的是tgz的打包及docker镜像。优势在于，又拍云自有CDN网络，软件通过推动到CDN网络下可以加速下发。</p>\n<p>关于集成测试、自动测试的发布，像ELK集中日志的分析、大数据的分析，我们现在使用ELK以后，只要有基础的运维技术知识便可看懂，不需要高深的运维知识和脚本编辑知识，大多数人都可以完成这份工作，好处就是你多了好多眼睛帮你一起来发现问题，定位问题。</p>\n<p>最后是不要图形，不要交互，不要终端。一旦有了图形以后，很难实现自动化。原则就是，不要手工hack，最好是用程序生成程序的方式去完成这个步骤。</p>\n<h2 id=\"以无人值守为荣，以人工介入为耻\"><a href=\"#以无人值守为荣，以人工介入为耻\" class=\"headerlink\" title=\"以无人值守为荣，以人工介入为耻\"></a>以无人值守为荣，以人工介入为耻</h2><p>　　<img src=\"http://img.mp.itc.cn/upload/20161101/ecb1a9bc0f1e478dbfcd81f2b79d5c7e_th.jpeg\" alt=\"img\"></p>\n<p>　　△ 以无人值守为荣，以人工介入为耻</p>\n<p>运维部门要做的事情有三件：</p>\n<p>1.运维自动化</p>\n<p>要有一定的业务抽象能力，要有标准化的流程。没有好的自动化，就很难把运维的工作效率提升了，只要做好这些，就可以节省时间，从容应对业务增长。而且运维自动化的另一个好处就是运维不会因为人的喜怒哀乐而受到影响稳定性，比如说我今天心情不好，你让我装一台机器我还可以忍，你让我装十台一百台就不行了。但如果公司有了运维自动化的流程，这个事情就可以避免，因为谁做都一样。</p>\n<p>2.监控要常态</p>\n<p>2016年年初，又拍云特别成立大数据分析部门，我们把日志做了采样收集和过滤，通过大数据平台做日志的同构数据分析，重点关注4xx/5xx/2xx比例，响应时间分析如100毫秒、200毫秒、500毫秒，还有区域性的速率分布，讲真，这真是一个好东西。</p>\n<p>3.性能可视化</p>\n<p>数据的有效展示。现在ELK对我们的帮助很大，从监控图上来看相关的数据指标，一目了然。这里就不反复赘述了。</p>\n<h2 id=\"DevOps的本质\"><a href=\"#DevOps的本质\" class=\"headerlink\" title=\"DevOps的本质\"></a>DevOps的本质</h2><p>最后，我们谈一谈DevOps的本质。</p>\n<ol>\n<li><p>弹性</p>\n<p>像亚马逊推云时，那个单词叫elastic，意思是，你要能够扩展，如横向扩展；你要能负载均衡，如果你是基于openstack/docker资源池，你的资源就可以复用，可以编排回滚。比如说OpenStack有模板，我打一个镜像包，稍微重了一点，Docker的就轻一点，Docker可以做一个滚动发布，可以保留原来的程序、原来的容器，你可以做快速切换，这也是一种变化的弹性。</p>\n</li>\n<li><p>无关性</p>\n<p>如果是虚拟化资源，一切都可以在模板里面设置，可以把底层的硬件、系统、网络抚平差异，比如说不管物理磁盘是1T(市面上缺货)/4T/6T的盘，都可以划分100G容量，所以当把一切变成按需申请的服务，无论是开发还是运维，工作都会比较简单，因为它的无关性。</p>\n</li>\n<li><p>不可变的基础设施</p>\n<p>这个对传统运维可能是一种打击，因为基础镜像可能已经做的足够安全，足够完美，足够精干，不需要基础运维过多的人工参与。但我认为恰恰能帮助传统运维减轻工作量，反而有更多的精力去迎接虚拟化、容器化，SDN的挑战，掌握了新技能后，就可以随取随用。</p>\n</li>\n</ol>\n"},{"title":"XML与javabean的转换","date":"2017-08-25T19:41:27.000Z","_content":"\n\n\nXML可以说是一种被时代淘汰的数据传输格式，毕竟相比较JSON，其语法，表现形式，以及第三方类库的支持，都要略逊一筹，但最近在对接一些老接口时，主要还是以XML为主，而翻阅相关的文档以及博客，没看到很好的文章介绍如何使用xml进行数据传输，所以简单写下此文，做一下记录。内心多多少少还是会抵制对接如此老旧的接口，不过生活还是要继续。\n\n## Code First\n\n先上一段代码，展示一下如何封装，讲解放到后面\n\n一个典型的对接方提供的XML如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<ORDER>\n    <ORDER_NO>10086</ORDER_NO>\n    <TOTAL_PRICE>3.14</TOTAL_PRICE>\n    <CREATE_TIME>2017-08-26 03:39:30</CREATE_TIME>\n    <ORDER_ITEMS>\n        <ORDER_ITEM>\n            <GOODS_NAME>德芙</GOODS_NAME>\n            <NUM>3</NUM>\n        </ORDER_ITEM>\n        <ORDER_ITEM>\n            <GOODS_NAME>旺仔</GOODS_NAME>\n            <NUM>10</NUM>\n        </ORDER_ITEM>\n    </ORDER_ITEMS>\n</ORDER>\n```\n\n而我们要对应的实体类，则应当如下：\n\n```java\n@XmlRootElement(name = \"ORDER\")// <1>\n@XmlAccessorType(XmlAccessType.FIELD)// <1>\npublic class Order {\n\n    @XmlElement(name = \"ORDER_NO\")// <1>\n    private String orderNo;\n\n    @XmlElement(name = \"TOTAL_PRICE\")\n    private BigDecimal totalPrice;\n\n    @XmlElement(name = \"CREATE_TIME\")\n    @XmlJavaTypeAdapter(DateAdapter.class) // <2>\n    private Date createTime;\n\n    @XmlElementWrapper(name = \"ORDER_ITEMS\") // <3>\n    @XmlElement(name = \"ORDER_ITEM\")\n    private List<OrderItem> orderItems;\n\n}\n```\n\n```java\n@XmlAccessorType(XmlAccessType.FIELD)\npublic class OrderItem {\n\n    @XmlElement(name = \"GOODS_NAME\")\n    private String goodsName;\n\n    @XmlElement(name = \"NUM\")\n    private Integer num;\n\n}\n```\n\n我举的这个示例基本包含一般情况下所有可能出现的需求\n\n<1> 常用注解XmlRootElement，XmlAccessorType，XmlElement\n\n<2> 日期转换的适配器注解\n\n<3> 如何在XML中设置集合\n\n在介绍这三点之前，先给出转换的工具类\n\n<!-- more -->\n\n## 转换工具类\n\n```java\npublic class XML {\n\n    public static String toXmlString(Object obj) {\n        String result;\n        try {\n            JAXBContext context = JAXBContext.newInstance(obj.getClass());\n            Marshaller marshaller = context.createMarshaller();\n            StringWriter writer = new StringWriter();\n            marshaller.marshal(obj, writer);\n            result = writer.toString();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return result;\n    }\n\n    public static <T> T parseObject(String input, Class<T> claaz) {\n        Object result;\n        try {\n            JAXBContext context = JAXBContext.newInstance(claaz);\n            Unmarshaller unmarshaller = context.createUnmarshaller();\n            result = unmarshaller.unmarshal(new StringReader(input));\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return (T) result;\n    }\n\n}\n```\n\nJSON工具类中，笔者习惯于使用fastjson，所以干脆连同工具类类名命名和方法命名都按照了它的风格，只有两个方法。\n\n## 注解的介绍\n\n给实体类加上注解，再使用工具类，就可以实现实体和XML的相互转换了。那么前面提到的三个注意点中的相关注解分别代表了什么含义呢？\n\n- @XmlRootElement\n\n  作用域：类\n\n  代表一个XML对象的根节点，常使用name属性来可以指定生成XML之后的具体名称\n\n- @XmlElement\n\n  作用域：字段，方法，参数（不常用）\n\n  代表一个XML对象的普通界点信息，常使用name属性来指定生成XML之后的具体名称。需要注意与@XmlAccessorType搭配使用时，有一些注意点，见下\n\n- @XmlAccessorType\n\n  作用域：类，包（不常用）\n\n  告诉解析器，在解析XML时要如何获取类的字段属性，有4个枚举类型：\n\n  | 枚举类型                            | 访问方式                            |\n  | ------------------------------- | ------------------------------- |\n  | XmlAccessType.FIELD             | 成员变量                            |\n  | XmlAccessType.PROPERTY          | public getter,setter            |\n  | XmlAccessType.PUBLIC_MEMBER（默认） | public getter,setter+public成员变量 |\n  | XmlAccessType.NONE              | 必须显示指定@XmlElement               |\n\n  我们上述的例子中，使用的方式是在类上配置@XmlAccessorType(XmlAccessType.FIELD)，基于成员变量访问属性，并且，在每一个成员变量之上都显示指定了name=xxx；而如果配置@XmlAccessorType(XmlAccessType.PUBLIC_MEMBER)即默认配置，则你需要将@XmlElement注解写在getter方法上,笔者比较习惯例子中的写法。需要注意点的一点是，如果@XmlAccessorType与@XmlElement的配置不对应，很容易触发自动的转换方式，会导致某个节点出现两次的异常。\n\n- @XmlJavaTypeAdapter\n\n  作用域：字段,方法,类,包,参数（前三者常用）\n\n  java内置的xml日期转换类不能满足我们的需求（可以动手试试看默认日期的格式是什么），以及遇到自定义的类，需要配置转换器，就可以使用这个注解，@XmlJavaTypeAdapter注解接收一个自定义的Adapter，需要继承自`XmlAdapter<ValueType,BoundType>`抽象类，一个常用的日期转化适配器如下：\n\n  ```java\n  public class DateAdapter extends XmlAdapter<String, Date> {\n\n      static ThreadLocal<DateFormat> sdf ;\n\n      static {\n          sdf =new ThreadLocal<DateFormat>() {\n              @Override\n              protected DateFormat initialValue() {\n                  return new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n              }\n          };\n      }\n\n      @Override\n      public Date unmarshal(String v) throws Exception {\n          return sdf.get().parse(v);\n      }\n\n      @Override\n      public String marshal(Date v) throws Exception {\n          return sdf.get().format(v);\n      }\n  }\n  ```\n\n  使用Adapter的弊端也很明显，一个适配器只能对应一个日期的格式，在实际开发中我们往往会将日期区分成天维度的日期和秒维度的日期，不能像大多数JSON那样拥有灵活的注解，如果有读者有想到好的解决方案，欢迎跟我沟通。涉及到日期格式转化，时刻不要忘记SimpleDateFormat线程不安全这一点。\n\n- @XmlElementWrapper\n\n  XML中表示集合时，在最外层通常会有一个Xxxs或者XxxList这样的标签，可以通过@XmlElementWrapper实现，其中name就代表额外添加的包裹信息是什么,如上文的OrderItems。\n\n## 一些其他的转换工具类\n\n我们主要任务是实现XML字符串和javabean之间转换，不是解析XML，所以dom4j一类的类库不用考虑。熟悉spring的人会了解到一点，spring其实已经封装了xml转换相关的类，即`org.springframework.oxm.jaxb.Jaxb2Marshaller`这个类，他的顶层接口是`org.springframework.oxm.Marshaller`和`org.springframework.oxm.UnMarshaller`。而在java规范中，也存在同名的接口：`javax.xml.bind.Marshaller`,`javax.xml.bind.UnMarshaller`，这点在使用中需要注意下。笔者的建议是，这种数据格式转换操作，应当尽量引入最少的依赖。所以使用javax的类库下的相关方法进行封装。上述的工具类，仅仅只需要引入javax包，即可使用了。非常方便、","source":"_posts/xml与javabean的转换.md","raw":"---\ntitle: XML与javabean的转换\ndate: 2017-08-26 03:41:27\ntags: \n- XML\ncategories:\n- JAVA\n---\n\n\n\nXML可以说是一种被时代淘汰的数据传输格式，毕竟相比较JSON，其语法，表现形式，以及第三方类库的支持，都要略逊一筹，但最近在对接一些老接口时，主要还是以XML为主，而翻阅相关的文档以及博客，没看到很好的文章介绍如何使用xml进行数据传输，所以简单写下此文，做一下记录。内心多多少少还是会抵制对接如此老旧的接口，不过生活还是要继续。\n\n## Code First\n\n先上一段代码，展示一下如何封装，讲解放到后面\n\n一个典型的对接方提供的XML如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<ORDER>\n    <ORDER_NO>10086</ORDER_NO>\n    <TOTAL_PRICE>3.14</TOTAL_PRICE>\n    <CREATE_TIME>2017-08-26 03:39:30</CREATE_TIME>\n    <ORDER_ITEMS>\n        <ORDER_ITEM>\n            <GOODS_NAME>德芙</GOODS_NAME>\n            <NUM>3</NUM>\n        </ORDER_ITEM>\n        <ORDER_ITEM>\n            <GOODS_NAME>旺仔</GOODS_NAME>\n            <NUM>10</NUM>\n        </ORDER_ITEM>\n    </ORDER_ITEMS>\n</ORDER>\n```\n\n而我们要对应的实体类，则应当如下：\n\n```java\n@XmlRootElement(name = \"ORDER\")// <1>\n@XmlAccessorType(XmlAccessType.FIELD)// <1>\npublic class Order {\n\n    @XmlElement(name = \"ORDER_NO\")// <1>\n    private String orderNo;\n\n    @XmlElement(name = \"TOTAL_PRICE\")\n    private BigDecimal totalPrice;\n\n    @XmlElement(name = \"CREATE_TIME\")\n    @XmlJavaTypeAdapter(DateAdapter.class) // <2>\n    private Date createTime;\n\n    @XmlElementWrapper(name = \"ORDER_ITEMS\") // <3>\n    @XmlElement(name = \"ORDER_ITEM\")\n    private List<OrderItem> orderItems;\n\n}\n```\n\n```java\n@XmlAccessorType(XmlAccessType.FIELD)\npublic class OrderItem {\n\n    @XmlElement(name = \"GOODS_NAME\")\n    private String goodsName;\n\n    @XmlElement(name = \"NUM\")\n    private Integer num;\n\n}\n```\n\n我举的这个示例基本包含一般情况下所有可能出现的需求\n\n<1> 常用注解XmlRootElement，XmlAccessorType，XmlElement\n\n<2> 日期转换的适配器注解\n\n<3> 如何在XML中设置集合\n\n在介绍这三点之前，先给出转换的工具类\n\n<!-- more -->\n\n## 转换工具类\n\n```java\npublic class XML {\n\n    public static String toXmlString(Object obj) {\n        String result;\n        try {\n            JAXBContext context = JAXBContext.newInstance(obj.getClass());\n            Marshaller marshaller = context.createMarshaller();\n            StringWriter writer = new StringWriter();\n            marshaller.marshal(obj, writer);\n            result = writer.toString();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return result;\n    }\n\n    public static <T> T parseObject(String input, Class<T> claaz) {\n        Object result;\n        try {\n            JAXBContext context = JAXBContext.newInstance(claaz);\n            Unmarshaller unmarshaller = context.createUnmarshaller();\n            result = unmarshaller.unmarshal(new StringReader(input));\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return (T) result;\n    }\n\n}\n```\n\nJSON工具类中，笔者习惯于使用fastjson，所以干脆连同工具类类名命名和方法命名都按照了它的风格，只有两个方法。\n\n## 注解的介绍\n\n给实体类加上注解，再使用工具类，就可以实现实体和XML的相互转换了。那么前面提到的三个注意点中的相关注解分别代表了什么含义呢？\n\n- @XmlRootElement\n\n  作用域：类\n\n  代表一个XML对象的根节点，常使用name属性来可以指定生成XML之后的具体名称\n\n- @XmlElement\n\n  作用域：字段，方法，参数（不常用）\n\n  代表一个XML对象的普通界点信息，常使用name属性来指定生成XML之后的具体名称。需要注意与@XmlAccessorType搭配使用时，有一些注意点，见下\n\n- @XmlAccessorType\n\n  作用域：类，包（不常用）\n\n  告诉解析器，在解析XML时要如何获取类的字段属性，有4个枚举类型：\n\n  | 枚举类型                            | 访问方式                            |\n  | ------------------------------- | ------------------------------- |\n  | XmlAccessType.FIELD             | 成员变量                            |\n  | XmlAccessType.PROPERTY          | public getter,setter            |\n  | XmlAccessType.PUBLIC_MEMBER（默认） | public getter,setter+public成员变量 |\n  | XmlAccessType.NONE              | 必须显示指定@XmlElement               |\n\n  我们上述的例子中，使用的方式是在类上配置@XmlAccessorType(XmlAccessType.FIELD)，基于成员变量访问属性，并且，在每一个成员变量之上都显示指定了name=xxx；而如果配置@XmlAccessorType(XmlAccessType.PUBLIC_MEMBER)即默认配置，则你需要将@XmlElement注解写在getter方法上,笔者比较习惯例子中的写法。需要注意点的一点是，如果@XmlAccessorType与@XmlElement的配置不对应，很容易触发自动的转换方式，会导致某个节点出现两次的异常。\n\n- @XmlJavaTypeAdapter\n\n  作用域：字段,方法,类,包,参数（前三者常用）\n\n  java内置的xml日期转换类不能满足我们的需求（可以动手试试看默认日期的格式是什么），以及遇到自定义的类，需要配置转换器，就可以使用这个注解，@XmlJavaTypeAdapter注解接收一个自定义的Adapter，需要继承自`XmlAdapter<ValueType,BoundType>`抽象类，一个常用的日期转化适配器如下：\n\n  ```java\n  public class DateAdapter extends XmlAdapter<String, Date> {\n\n      static ThreadLocal<DateFormat> sdf ;\n\n      static {\n          sdf =new ThreadLocal<DateFormat>() {\n              @Override\n              protected DateFormat initialValue() {\n                  return new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n              }\n          };\n      }\n\n      @Override\n      public Date unmarshal(String v) throws Exception {\n          return sdf.get().parse(v);\n      }\n\n      @Override\n      public String marshal(Date v) throws Exception {\n          return sdf.get().format(v);\n      }\n  }\n  ```\n\n  使用Adapter的弊端也很明显，一个适配器只能对应一个日期的格式，在实际开发中我们往往会将日期区分成天维度的日期和秒维度的日期，不能像大多数JSON那样拥有灵活的注解，如果有读者有想到好的解决方案，欢迎跟我沟通。涉及到日期格式转化，时刻不要忘记SimpleDateFormat线程不安全这一点。\n\n- @XmlElementWrapper\n\n  XML中表示集合时，在最外层通常会有一个Xxxs或者XxxList这样的标签，可以通过@XmlElementWrapper实现，其中name就代表额外添加的包裹信息是什么,如上文的OrderItems。\n\n## 一些其他的转换工具类\n\n我们主要任务是实现XML字符串和javabean之间转换，不是解析XML，所以dom4j一类的类库不用考虑。熟悉spring的人会了解到一点，spring其实已经封装了xml转换相关的类，即`org.springframework.oxm.jaxb.Jaxb2Marshaller`这个类，他的顶层接口是`org.springframework.oxm.Marshaller`和`org.springframework.oxm.UnMarshaller`。而在java规范中，也存在同名的接口：`javax.xml.bind.Marshaller`,`javax.xml.bind.UnMarshaller`，这点在使用中需要注意下。笔者的建议是，这种数据格式转换操作，应当尽量引入最少的依赖。所以使用javax的类库下的相关方法进行封装。上述的工具类，仅仅只需要引入javax包，即可使用了。非常方便、","slug":"xml与javabean的转换","published":1,"updated":"2017-09-04T11:49:26.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3ztz002utwv7ja12yc4f","content":"<p>XML可以说是一种被时代淘汰的数据传输格式，毕竟相比较JSON，其语法，表现形式，以及第三方类库的支持，都要略逊一筹，但最近在对接一些老接口时，主要还是以XML为主，而翻阅相关的文档以及博客，没看到很好的文章介绍如何使用xml进行数据传输，所以简单写下此文，做一下记录。内心多多少少还是会抵制对接如此老旧的接口，不过生活还是要继续。</p>\n<h2 id=\"Code-First\"><a href=\"#Code-First\" class=\"headerlink\" title=\"Code First\"></a>Code First</h2><p>先上一段代码，展示一下如何封装，讲解放到后面</p>\n<p>一个典型的对接方提供的XML如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ORDER</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ORDER_NO</span>&gt;</span>10086<span class=\"tag\">&lt;/<span class=\"name\">ORDER_NO</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TOTAL_PRICE</span>&gt;</span>3.14<span class=\"tag\">&lt;/<span class=\"name\">TOTAL_PRICE</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">CREATE_TIME</span>&gt;</span>2017-08-26 03:39:30<span class=\"tag\">&lt;/<span class=\"name\">CREATE_TIME</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ORDER_ITEMS</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ORDER_ITEM</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">GOODS_NAME</span>&gt;</span>德芙<span class=\"tag\">&lt;/<span class=\"name\">GOODS_NAME</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">NUM</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">NUM</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ORDER_ITEM</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ORDER_ITEM</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">GOODS_NAME</span>&gt;</span>旺仔<span class=\"tag\">&lt;/<span class=\"name\">GOODS_NAME</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">NUM</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">NUM</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ORDER_ITEM</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ORDER_ITEMS</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ORDER</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>而我们要对应的实体类，则应当如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@XmlRootElement</span>(name = <span class=\"string\">\"ORDER\"</span>)<span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\"><span class=\"meta\">@XmlAccessorType</span>(XmlAccessType.FIELD)<span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"ORDER_NO\"</span>)<span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String orderNo;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"TOTAL_PRICE\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> BigDecimal totalPrice;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"CREATE_TIME\"</span>)</div><div class=\"line\">    <span class=\"meta\">@XmlJavaTypeAdapter</span>(DateAdapter.class) <span class=\"comment\">// &lt;2&gt;</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Date createTime;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElementWrapper</span>(name = <span class=\"string\">\"ORDER_ITEMS\"</span>) <span class=\"comment\">// &lt;3&gt;</span></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"ORDER_ITEM\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;OrderItem&gt; orderItems;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@XmlAccessorType</span>(XmlAccessType.FIELD)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderItem</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"GOODS_NAME\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String goodsName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"NUM\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer num;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我举的这个示例基本包含一般情况下所有可能出现的需求</p>\n<p><1> 常用注解XmlRootElement，XmlAccessorType，XmlElement</1></p>\n<p><2> 日期转换的适配器注解</2></p>\n<p><3> 如何在XML中设置集合</3></p>\n<p>在介绍这三点之前，先给出转换的工具类</p>\n<a id=\"more\"></a>\n<h2 id=\"转换工具类\"><a href=\"#转换工具类\" class=\"headerlink\" title=\"转换工具类\"></a>转换工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XML</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toXmlString</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">        String result;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            JAXBContext context = JAXBContext.newInstance(obj.getClass());</div><div class=\"line\">            Marshaller marshaller = context.createMarshaller();</div><div class=\"line\">            StringWriter writer = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">            marshaller.marshal(obj, writer);</div><div class=\"line\">            result = writer.toString();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">parseObject</span><span class=\"params\">(String input, Class&lt;T&gt; claaz)</span> </span>&#123;</div><div class=\"line\">        Object result;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            JAXBContext context = JAXBContext.newInstance(claaz);</div><div class=\"line\">            Unmarshaller unmarshaller = context.createUnmarshaller();</div><div class=\"line\">            result = unmarshaller.unmarshal(<span class=\"keyword\">new</span> StringReader(input));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (T) result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>JSON工具类中，笔者习惯于使用fastjson，所以干脆连同工具类类名命名和方法命名都按照了它的风格，只有两个方法。</p>\n<h2 id=\"注解的介绍\"><a href=\"#注解的介绍\" class=\"headerlink\" title=\"注解的介绍\"></a>注解的介绍</h2><p>给实体类加上注解，再使用工具类，就可以实现实体和XML的相互转换了。那么前面提到的三个注意点中的相关注解分别代表了什么含义呢？</p>\n<ul>\n<li><p>@XmlRootElement</p>\n<p>作用域：类</p>\n<p>代表一个XML对象的根节点，常使用name属性来可以指定生成XML之后的具体名称</p>\n</li>\n<li><p>@XmlElement</p>\n<p>作用域：字段，方法，参数（不常用）</p>\n<p>代表一个XML对象的普通界点信息，常使用name属性来指定生成XML之后的具体名称。需要注意与@XmlAccessorType搭配使用时，有一些注意点，见下</p>\n</li>\n<li><p>@XmlAccessorType</p>\n<p>作用域：类，包（不常用）</p>\n<p>告诉解析器，在解析XML时要如何获取类的字段属性，有4个枚举类型：</p>\n<p>| 枚举类型                            | 访问方式                            |<br>| ——————————- | ——————————- |<br>| XmlAccessType.FIELD             | 成员变量                            |<br>| XmlAccessType.PROPERTY          | public getter,setter            |<br>| XmlAccessType.PUBLIC_MEMBER（默认） | public getter,setter+public成员变量 |<br>| XmlAccessType.NONE              | 必须显示指定@XmlElement               |</p>\n<p>我们上述的例子中，使用的方式是在类上配置@XmlAccessorType(XmlAccessType.FIELD)，基于成员变量访问属性，并且，在每一个成员变量之上都显示指定了name=xxx；而如果配置@XmlAccessorType(XmlAccessType.PUBLIC_MEMBER)即默认配置，则你需要将@XmlElement注解写在getter方法上,笔者比较习惯例子中的写法。需要注意点的一点是，如果@XmlAccessorType与@XmlElement的配置不对应，很容易触发自动的转换方式，会导致某个节点出现两次的异常。</p>\n</li>\n<li><p>@XmlJavaTypeAdapter</p>\n<p>作用域：字段,方法,类,包,参数（前三者常用）</p>\n<p>java内置的xml日期转换类不能满足我们的需求（可以动手试试看默认日期的格式是什么），以及遇到自定义的类，需要配置转换器，就可以使用这个注解，@XmlJavaTypeAdapter注解接收一个自定义的Adapter，需要继承自<code>XmlAdapter&lt;ValueType,BoundType&gt;</code>抽象类，一个常用的日期转化适配器如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">XmlAdapter</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">Date</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> ThreadLocal&lt;DateFormat&gt; sdf ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        sdf =<span class=\"keyword\">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> DateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">unmarshal</span><span class=\"params\">(String v)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sdf.get().parse(v);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">marshal</span><span class=\"params\">(Date v)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sdf.get().format(v);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用Adapter的弊端也很明显，一个适配器只能对应一个日期的格式，在实际开发中我们往往会将日期区分成天维度的日期和秒维度的日期，不能像大多数JSON那样拥有灵活的注解，如果有读者有想到好的解决方案，欢迎跟我沟通。涉及到日期格式转化，时刻不要忘记SimpleDateFormat线程不安全这一点。</p>\n</li>\n<li><p>@XmlElementWrapper</p>\n<p>XML中表示集合时，在最外层通常会有一个Xxxs或者XxxList这样的标签，可以通过@XmlElementWrapper实现，其中name就代表额外添加的包裹信息是什么,如上文的OrderItems。</p>\n</li>\n</ul>\n<h2 id=\"一些其他的转换工具类\"><a href=\"#一些其他的转换工具类\" class=\"headerlink\" title=\"一些其他的转换工具类\"></a>一些其他的转换工具类</h2><p>我们主要任务是实现XML字符串和javabean之间转换，不是解析XML，所以dom4j一类的类库不用考虑。熟悉spring的人会了解到一点，spring其实已经封装了xml转换相关的类，即<code>org.springframework.oxm.jaxb.Jaxb2Marshaller</code>这个类，他的顶层接口是<code>org.springframework.oxm.Marshaller</code>和<code>org.springframework.oxm.UnMarshaller</code>。而在java规范中，也存在同名的接口：<code>javax.xml.bind.Marshaller</code>,<code>javax.xml.bind.UnMarshaller</code>，这点在使用中需要注意下。笔者的建议是，这种数据格式转换操作，应当尽量引入最少的依赖。所以使用javax的类库下的相关方法进行封装。上述的工具类，仅仅只需要引入javax包，即可使用了。非常方便、</p>\n","site":{"data":{}},"excerpt":"<p>XML可以说是一种被时代淘汰的数据传输格式，毕竟相比较JSON，其语法，表现形式，以及第三方类库的支持，都要略逊一筹，但最近在对接一些老接口时，主要还是以XML为主，而翻阅相关的文档以及博客，没看到很好的文章介绍如何使用xml进行数据传输，所以简单写下此文，做一下记录。内心多多少少还是会抵制对接如此老旧的接口，不过生活还是要继续。</p>\n<h2 id=\"Code-First\"><a href=\"#Code-First\" class=\"headerlink\" title=\"Code First\"></a>Code First</h2><p>先上一段代码，展示一下如何封装，讲解放到后面</p>\n<p>一个典型的对接方提供的XML如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ORDER</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ORDER_NO</span>&gt;</span>10086<span class=\"tag\">&lt;/<span class=\"name\">ORDER_NO</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TOTAL_PRICE</span>&gt;</span>3.14<span class=\"tag\">&lt;/<span class=\"name\">TOTAL_PRICE</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">CREATE_TIME</span>&gt;</span>2017-08-26 03:39:30<span class=\"tag\">&lt;/<span class=\"name\">CREATE_TIME</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ORDER_ITEMS</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ORDER_ITEM</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">GOODS_NAME</span>&gt;</span>德芙<span class=\"tag\">&lt;/<span class=\"name\">GOODS_NAME</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">NUM</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">NUM</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ORDER_ITEM</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ORDER_ITEM</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">GOODS_NAME</span>&gt;</span>旺仔<span class=\"tag\">&lt;/<span class=\"name\">GOODS_NAME</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">NUM</span>&gt;</span>10<span class=\"tag\">&lt;/<span class=\"name\">NUM</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ORDER_ITEM</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ORDER_ITEMS</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ORDER</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>而我们要对应的实体类，则应当如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@XmlRootElement</span>(name = <span class=\"string\">\"ORDER\"</span>)<span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\"><span class=\"meta\">@XmlAccessorType</span>(XmlAccessType.FIELD)<span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"ORDER_NO\"</span>)<span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String orderNo;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"TOTAL_PRICE\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> BigDecimal totalPrice;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"CREATE_TIME\"</span>)</div><div class=\"line\">    <span class=\"meta\">@XmlJavaTypeAdapter</span>(DateAdapter.class) <span class=\"comment\">// &lt;2&gt;</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Date createTime;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElementWrapper</span>(name = <span class=\"string\">\"ORDER_ITEMS\"</span>) <span class=\"comment\">// &lt;3&gt;</span></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"ORDER_ITEM\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;OrderItem&gt; orderItems;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@XmlAccessorType</span>(XmlAccessType.FIELD)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderItem</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"GOODS_NAME\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String goodsName;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@XmlElement</span>(name = <span class=\"string\">\"NUM\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer num;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我举的这个示例基本包含一般情况下所有可能出现的需求</p>\n<p><1> 常用注解XmlRootElement，XmlAccessorType，XmlElement</1></p>\n<p><2> 日期转换的适配器注解</2></p>\n<p><3> 如何在XML中设置集合</3></p>\n<p>在介绍这三点之前，先给出转换的工具类</p>","more":"<h2 id=\"转换工具类\"><a href=\"#转换工具类\" class=\"headerlink\" title=\"转换工具类\"></a>转换工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XML</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toXmlString</span><span class=\"params\">(Object obj)</span> </span>&#123;</div><div class=\"line\">        String result;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            JAXBContext context = JAXBContext.newInstance(obj.getClass());</div><div class=\"line\">            Marshaller marshaller = context.createMarshaller();</div><div class=\"line\">            StringWriter writer = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">            marshaller.marshal(obj, writer);</div><div class=\"line\">            result = writer.toString();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">parseObject</span><span class=\"params\">(String input, Class&lt;T&gt; claaz)</span> </span>&#123;</div><div class=\"line\">        Object result;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            JAXBContext context = JAXBContext.newInstance(claaz);</div><div class=\"line\">            Unmarshaller unmarshaller = context.createUnmarshaller();</div><div class=\"line\">            result = unmarshaller.unmarshal(<span class=\"keyword\">new</span> StringReader(input));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> (T) result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>JSON工具类中，笔者习惯于使用fastjson，所以干脆连同工具类类名命名和方法命名都按照了它的风格，只有两个方法。</p>\n<h2 id=\"注解的介绍\"><a href=\"#注解的介绍\" class=\"headerlink\" title=\"注解的介绍\"></a>注解的介绍</h2><p>给实体类加上注解，再使用工具类，就可以实现实体和XML的相互转换了。那么前面提到的三个注意点中的相关注解分别代表了什么含义呢？</p>\n<ul>\n<li><p>@XmlRootElement</p>\n<p>作用域：类</p>\n<p>代表一个XML对象的根节点，常使用name属性来可以指定生成XML之后的具体名称</p>\n</li>\n<li><p>@XmlElement</p>\n<p>作用域：字段，方法，参数（不常用）</p>\n<p>代表一个XML对象的普通界点信息，常使用name属性来指定生成XML之后的具体名称。需要注意与@XmlAccessorType搭配使用时，有一些注意点，见下</p>\n</li>\n<li><p>@XmlAccessorType</p>\n<p>作用域：类，包（不常用）</p>\n<p>告诉解析器，在解析XML时要如何获取类的字段属性，有4个枚举类型：</p>\n<p>| 枚举类型                            | 访问方式                            |<br>| ——————————- | ——————————- |<br>| XmlAccessType.FIELD             | 成员变量                            |<br>| XmlAccessType.PROPERTY          | public getter,setter            |<br>| XmlAccessType.PUBLIC_MEMBER（默认） | public getter,setter+public成员变量 |<br>| XmlAccessType.NONE              | 必须显示指定@XmlElement               |</p>\n<p>我们上述的例子中，使用的方式是在类上配置@XmlAccessorType(XmlAccessType.FIELD)，基于成员变量访问属性，并且，在每一个成员变量之上都显示指定了name=xxx；而如果配置@XmlAccessorType(XmlAccessType.PUBLIC_MEMBER)即默认配置，则你需要将@XmlElement注解写在getter方法上,笔者比较习惯例子中的写法。需要注意点的一点是，如果@XmlAccessorType与@XmlElement的配置不对应，很容易触发自动的转换方式，会导致某个节点出现两次的异常。</p>\n</li>\n<li><p>@XmlJavaTypeAdapter</p>\n<p>作用域：字段,方法,类,包,参数（前三者常用）</p>\n<p>java内置的xml日期转换类不能满足我们的需求（可以动手试试看默认日期的格式是什么），以及遇到自定义的类，需要配置转换器，就可以使用这个注解，@XmlJavaTypeAdapter注解接收一个自定义的Adapter，需要继承自<code>XmlAdapter&lt;ValueType,BoundType&gt;</code>抽象类，一个常用的日期转化适配器如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">XmlAdapter</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">Date</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> ThreadLocal&lt;DateFormat&gt; sdf ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        sdf =<span class=\"keyword\">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> DateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">unmarshal</span><span class=\"params\">(String v)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sdf.get().parse(v);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">marshal</span><span class=\"params\">(Date v)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sdf.get().format(v);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用Adapter的弊端也很明显，一个适配器只能对应一个日期的格式，在实际开发中我们往往会将日期区分成天维度的日期和秒维度的日期，不能像大多数JSON那样拥有灵活的注解，如果有读者有想到好的解决方案，欢迎跟我沟通。涉及到日期格式转化，时刻不要忘记SimpleDateFormat线程不安全这一点。</p>\n</li>\n<li><p>@XmlElementWrapper</p>\n<p>XML中表示集合时，在最外层通常会有一个Xxxs或者XxxList这样的标签，可以通过@XmlElementWrapper实现，其中name就代表额外添加的包裹信息是什么,如上文的OrderItems。</p>\n</li>\n</ul>\n<h2 id=\"一些其他的转换工具类\"><a href=\"#一些其他的转换工具类\" class=\"headerlink\" title=\"一些其他的转换工具类\"></a>一些其他的转换工具类</h2><p>我们主要任务是实现XML字符串和javabean之间转换，不是解析XML，所以dom4j一类的类库不用考虑。熟悉spring的人会了解到一点，spring其实已经封装了xml转换相关的类，即<code>org.springframework.oxm.jaxb.Jaxb2Marshaller</code>这个类，他的顶层接口是<code>org.springframework.oxm.Marshaller</code>和<code>org.springframework.oxm.UnMarshaller</code>。而在java规范中，也存在同名的接口：<code>javax.xml.bind.Marshaller</code>,<code>javax.xml.bind.UnMarshaller</code>，这点在使用中需要注意下。笔者的建议是，这种数据格式转换操作，应当尽量引入最少的依赖。所以使用javax的类库下的相关方法进行封装。上述的工具类，仅仅只需要引入javax包，即可使用了。非常方便、</p>"},{"title":"《微服务》九大特性笔记","date":"2017-02-18T17:05:52.000Z","_content":"\n服务组件化\n-----\n\n组件，是一个可以独立更换和升级的单元。就像PC中的CPU、内存、显卡、硬盘一样，独立且可以更换升级而不影响其他单元。\n\n在“微服务”架构中，需要我们对服务进行组件化分解。服务，是一种进程外的组件，它通过http等通信协议进行协作，而不是传统组件以嵌入的方式协同工作。服务都独立开发、部署，可以有效的避免一个服务的修改引起整个系统的重新部署。\n\n打一个不恰当的比喻，如果我们的PC组件以服务的方式构建，我们只维护主板和一些必要外设之后，计算能力通过一组外部服务实现，我们只需要告诉PC我们从哪个地址来获得计算能力，通过服务定义的计算接口来实现我们使用过程中的计算需求，从而实现CPU组件的服务化。这样我们原本复杂的PC服务得到了更轻量化的实现，我们甚至只需要更换服务地址就能升级我们PC的计算能力。\n\n按业务组织团队\n-------\n\n当我们开始决定如何划分“微服务”时，通常也意味着我们要开始对团队进行重新规划与组织。按以往的方式，我们往往会以技术的层面去划分多个不同的团队，比如：DBA团队、运维团队、后端团队、前端团队、设计师团队等等。若我们继续按这种方式组织团队来实施“微服务”架构开发时，当有一个有问题需要更改，可能是一个非常简单的变动，比如：对人物描述增加一个字段，这就需要从数据存储开始考虑一直到设计和前端，虽然大家的修改都非常小，但这会引起跨团队的时间和预算审批。\n\n在实施“微服务”架构时，需要采用不同的团队分割方法。由于每一个微服务都是针对特定业务的宽栈或是全栈实现，既要负责数据的持久化存储，又要负责用户的接口定义等各种跨专业领域的职能。因此，面对大型项目时候，对于微服务团队拆分更加建议按业务线的方式进行拆分，一方面可以有效减少服务内部修改所产生的内耗；另一方面，团队边界可以变得更为清晰。\n\n做“产品”的态度\n--------\n\n实施“微服务”架构的团队中，每个小团队都应该以做产品的方式，对其产品的整个生命周期负责。而不是以项目的模式，以完成开发与交付并将成果交接给维护者为最终目标。\n\n开发团队通过了解服务在具体生产环境中的情况，可以增加他们对具体业务的理解，比如：很多时候一些业务中发生的特殊或异常情况，很可能产品经理都并不知晓，但细心的开发者很容易通过生产环境发现这些特殊的潜在问题或需求。\n\n所以，我们需要用做“产品”的态度来对待每一个“微服务”，持续关注服务的运作情况，并不断地分析帮助用户来提升业务功能。\n\n智能端点与哑管道\n--------\n\n在单体应用中，组件间直接通过函数调用的方式进行交互协作。而在“微服务”架构中，服务由于不在一个进程中，组件间的通信模式发生了改变，若仅仅将原本在进程内的方法调用改成RPC方式的调用，会导致微服务之间产生繁琐的通信，使得系统表现更为糟糕，所以，我们需要更粗粒度的通信协议。\n\n在“微服务”架构中，通常会使用这两个服务调用方式：\n\n第一种，使用HTTP协议的RESTful API或轻量级的消息发送协议，来实现信息传递与服务调用的触发。\n第二种，通过在轻量级消息总线上传递消息，类似RabbitMQ等一些提供可靠异步交换的结构。\n\n> 在极度强调性能的情况下，有些团队会使用二进制的消息发送协议，例如：protobuf。即使是这样，这些系统仍然会呈现出“智能端点和哑管道”的特点，为了在易读性与高效性之间取得平衡。当然大多数Web应用或企业系统并不需要作出在这两者间做出选择，能够获得易读性就已经是一个极大的胜利了。\n> ——Martin Fowler\n\n去中心化治理\n------\n\n当我们采用集中化的架构治理方案时，通常在技术平台上都会做同一的标准，但是每一种技术平台都有其短板，这会导致在碰到短板时，不得不花费大力气去解决，并且可能还是因为其底层原因解决的不是很好。\n\n在实施“微服务”架构时，通过采用轻量级的契约定义接口，使得我们对于服务本身的具体技术平台不再那么敏感，这样我们整个“微服务”架构的系统中的组件就能针对其不同的业务特点选择不同的技术平台，终于不会出现杀鸡用牛刀或是杀牛用指甲钳的尴尬处境了。\n\n> 不是每一个问题都是钉子，不是每一个解决方案都是锤子\n\n去中心化管理数据\n--------\n\n我们在实施“微服务”架构时，都希望可以让每一个服务来管理其自有的数据库，这就是数据管理的去中心化。\n\n在去中心化过程中，我们除了将原数据库中的存储内容拆分到新的同平台的其他数据库实例中之外（如：把原本存储在MySQL中的表拆分后，存储多几个不同的MySQL实例中），也可以针对一些具有特殊结构或业务特性的数据存储到一些其他技术的数据库实例中（如：把日志信息存储到MongoDB中、把用户登录信息存储到Redis中）。\n\n虽然，数据管理的去中心化可以让数据管理更加细致化，通过采用更合适的技术来让数据存储和性能达到最优。但是，由于数据存储于不同的数据库实例中后，数据一致性也成为“微服务”架构中急需解决的问题之一。分布式事务的实现，本身难度就非常大，所以在“微服务”架构中，我们更强调在各服务之间进行“无事务”的调用，而对于数据一致性，只要求数据在最后的处理状态是一致的效果；若在过程中发现错误，通过补偿机制来进行处理，使得错误数据能够达到最终的一致性。\n\n基础设施自动化\n-------\n\n近年来云计算服务与容器化技术的不断成熟，运维基础设施的工作变得越来越不那么难了。但是，当我们实施“微服务”架构时，数据库、应用程序的个头虽然都变小了，但是因为拆分的原因，数量成倍的增长。这使得运维人员需要关注的内容也成倍的增长，并且操作性任务也会成倍的增长，这些问题若没有得到妥善的解决，必将成为运维人员的噩梦。\n\n所以，在“微服务”架构中，请务必从一开始就构建起“持续交付”平台来支撑整个实施过程，该平台需要两大内容，不可或缺：\n\n自动化测试：每次部署前的强心剂，尽可能的获得对正在运行软件的信心。\n自动化部署：解放繁琐枯燥的重复操作以及对多环境的配置管理。\n\n容错设计\n----\n\n在单体应用中，一般不存在单个组件故障而其他还在运行的情况，通常是一挂全挂。而在“微服务”架构中，由于服务都运行在独立的进程中，所以是存在部分服务出现故障，而其他服务都正常运行的情况，比如：当正常运作的服务B调用到故障服务A时，因故障服务A没有返回，线程挂起开始等待，直到超时才能释放，而此时若触发服务B调用服务A的请求来自服务C，而服务C频繁调用服务B时，由于其依赖服务A，大量线程被挂起等待，最后导致服务A也不能正常服务，这时就会出现故障的蔓延。\n\n所以，在“微服务”架构中，快速的检测出故障源并尽可能的自动恢复服务是必须要被设计和考虑的。通常，我们都希望在每个服务中实现监控和日志记录的组件，比如：服务状态、断路器状态、吞吐量、网络延迟等关键数据的仪表盘等。\n\n演进式设计\n-----\n\n通过上面的几点特征，我们已经能够体会到，要实施一个完美的“微服务”架构，需要考虑的设计与成本并不小，对于没有足够经验的团队来说，甚至要比单体应用发付出更多的代价。\n\n所以，很多情况下，架构师们都会以演进的方式进行系统的构建，在初期系统以单体系统的方式来设计和实施，一方面系统体量初期并不会很大，构建和维护成本都不高。另一方面，初期的核心业务在后期通常也不会发生巨大的改变。随着系统的发展或者业务的需要，架构师们会将一些经常变动或是有一定时间效应的内容进行“微服务”处理，并逐渐地将原来在单体系统中多变的模块逐步拆分出来，而稳定不太变化的就形成了一个核心“微服务”存在于整个架构之中。\n\n\n\n\n*原文由 程序猿DD-翟永超 创作*\n转载自[《微服务》九大特性笔记](http://blog.didispace.com/20160917-microservices-note/)","source":"_posts/《微服务》九大特性笔记.md","raw":"---\ntitle: 《微服务》九大特性笔记\ndate: 2017-02-19 01:05:52\ntags: \n- 微服务\ncategories: \n- 架构设计\n---\n\n服务组件化\n-----\n\n组件，是一个可以独立更换和升级的单元。就像PC中的CPU、内存、显卡、硬盘一样，独立且可以更换升级而不影响其他单元。\n\n在“微服务”架构中，需要我们对服务进行组件化分解。服务，是一种进程外的组件，它通过http等通信协议进行协作，而不是传统组件以嵌入的方式协同工作。服务都独立开发、部署，可以有效的避免一个服务的修改引起整个系统的重新部署。\n\n打一个不恰当的比喻，如果我们的PC组件以服务的方式构建，我们只维护主板和一些必要外设之后，计算能力通过一组外部服务实现，我们只需要告诉PC我们从哪个地址来获得计算能力，通过服务定义的计算接口来实现我们使用过程中的计算需求，从而实现CPU组件的服务化。这样我们原本复杂的PC服务得到了更轻量化的实现，我们甚至只需要更换服务地址就能升级我们PC的计算能力。\n\n按业务组织团队\n-------\n\n当我们开始决定如何划分“微服务”时，通常也意味着我们要开始对团队进行重新规划与组织。按以往的方式，我们往往会以技术的层面去划分多个不同的团队，比如：DBA团队、运维团队、后端团队、前端团队、设计师团队等等。若我们继续按这种方式组织团队来实施“微服务”架构开发时，当有一个有问题需要更改，可能是一个非常简单的变动，比如：对人物描述增加一个字段，这就需要从数据存储开始考虑一直到设计和前端，虽然大家的修改都非常小，但这会引起跨团队的时间和预算审批。\n\n在实施“微服务”架构时，需要采用不同的团队分割方法。由于每一个微服务都是针对特定业务的宽栈或是全栈实现，既要负责数据的持久化存储，又要负责用户的接口定义等各种跨专业领域的职能。因此，面对大型项目时候，对于微服务团队拆分更加建议按业务线的方式进行拆分，一方面可以有效减少服务内部修改所产生的内耗；另一方面，团队边界可以变得更为清晰。\n\n做“产品”的态度\n--------\n\n实施“微服务”架构的团队中，每个小团队都应该以做产品的方式，对其产品的整个生命周期负责。而不是以项目的模式，以完成开发与交付并将成果交接给维护者为最终目标。\n\n开发团队通过了解服务在具体生产环境中的情况，可以增加他们对具体业务的理解，比如：很多时候一些业务中发生的特殊或异常情况，很可能产品经理都并不知晓，但细心的开发者很容易通过生产环境发现这些特殊的潜在问题或需求。\n\n所以，我们需要用做“产品”的态度来对待每一个“微服务”，持续关注服务的运作情况，并不断地分析帮助用户来提升业务功能。\n\n智能端点与哑管道\n--------\n\n在单体应用中，组件间直接通过函数调用的方式进行交互协作。而在“微服务”架构中，服务由于不在一个进程中，组件间的通信模式发生了改变，若仅仅将原本在进程内的方法调用改成RPC方式的调用，会导致微服务之间产生繁琐的通信，使得系统表现更为糟糕，所以，我们需要更粗粒度的通信协议。\n\n在“微服务”架构中，通常会使用这两个服务调用方式：\n\n第一种，使用HTTP协议的RESTful API或轻量级的消息发送协议，来实现信息传递与服务调用的触发。\n第二种，通过在轻量级消息总线上传递消息，类似RabbitMQ等一些提供可靠异步交换的结构。\n\n> 在极度强调性能的情况下，有些团队会使用二进制的消息发送协议，例如：protobuf。即使是这样，这些系统仍然会呈现出“智能端点和哑管道”的特点，为了在易读性与高效性之间取得平衡。当然大多数Web应用或企业系统并不需要作出在这两者间做出选择，能够获得易读性就已经是一个极大的胜利了。\n> ——Martin Fowler\n\n去中心化治理\n------\n\n当我们采用集中化的架构治理方案时，通常在技术平台上都会做同一的标准，但是每一种技术平台都有其短板，这会导致在碰到短板时，不得不花费大力气去解决，并且可能还是因为其底层原因解决的不是很好。\n\n在实施“微服务”架构时，通过采用轻量级的契约定义接口，使得我们对于服务本身的具体技术平台不再那么敏感，这样我们整个“微服务”架构的系统中的组件就能针对其不同的业务特点选择不同的技术平台，终于不会出现杀鸡用牛刀或是杀牛用指甲钳的尴尬处境了。\n\n> 不是每一个问题都是钉子，不是每一个解决方案都是锤子\n\n去中心化管理数据\n--------\n\n我们在实施“微服务”架构时，都希望可以让每一个服务来管理其自有的数据库，这就是数据管理的去中心化。\n\n在去中心化过程中，我们除了将原数据库中的存储内容拆分到新的同平台的其他数据库实例中之外（如：把原本存储在MySQL中的表拆分后，存储多几个不同的MySQL实例中），也可以针对一些具有特殊结构或业务特性的数据存储到一些其他技术的数据库实例中（如：把日志信息存储到MongoDB中、把用户登录信息存储到Redis中）。\n\n虽然，数据管理的去中心化可以让数据管理更加细致化，通过采用更合适的技术来让数据存储和性能达到最优。但是，由于数据存储于不同的数据库实例中后，数据一致性也成为“微服务”架构中急需解决的问题之一。分布式事务的实现，本身难度就非常大，所以在“微服务”架构中，我们更强调在各服务之间进行“无事务”的调用，而对于数据一致性，只要求数据在最后的处理状态是一致的效果；若在过程中发现错误，通过补偿机制来进行处理，使得错误数据能够达到最终的一致性。\n\n基础设施自动化\n-------\n\n近年来云计算服务与容器化技术的不断成熟，运维基础设施的工作变得越来越不那么难了。但是，当我们实施“微服务”架构时，数据库、应用程序的个头虽然都变小了，但是因为拆分的原因，数量成倍的增长。这使得运维人员需要关注的内容也成倍的增长，并且操作性任务也会成倍的增长，这些问题若没有得到妥善的解决，必将成为运维人员的噩梦。\n\n所以，在“微服务”架构中，请务必从一开始就构建起“持续交付”平台来支撑整个实施过程，该平台需要两大内容，不可或缺：\n\n自动化测试：每次部署前的强心剂，尽可能的获得对正在运行软件的信心。\n自动化部署：解放繁琐枯燥的重复操作以及对多环境的配置管理。\n\n容错设计\n----\n\n在单体应用中，一般不存在单个组件故障而其他还在运行的情况，通常是一挂全挂。而在“微服务”架构中，由于服务都运行在独立的进程中，所以是存在部分服务出现故障，而其他服务都正常运行的情况，比如：当正常运作的服务B调用到故障服务A时，因故障服务A没有返回，线程挂起开始等待，直到超时才能释放，而此时若触发服务B调用服务A的请求来自服务C，而服务C频繁调用服务B时，由于其依赖服务A，大量线程被挂起等待，最后导致服务A也不能正常服务，这时就会出现故障的蔓延。\n\n所以，在“微服务”架构中，快速的检测出故障源并尽可能的自动恢复服务是必须要被设计和考虑的。通常，我们都希望在每个服务中实现监控和日志记录的组件，比如：服务状态、断路器状态、吞吐量、网络延迟等关键数据的仪表盘等。\n\n演进式设计\n-----\n\n通过上面的几点特征，我们已经能够体会到，要实施一个完美的“微服务”架构，需要考虑的设计与成本并不小，对于没有足够经验的团队来说，甚至要比单体应用发付出更多的代价。\n\n所以，很多情况下，架构师们都会以演进的方式进行系统的构建，在初期系统以单体系统的方式来设计和实施，一方面系统体量初期并不会很大，构建和维护成本都不高。另一方面，初期的核心业务在后期通常也不会发生巨大的改变。随着系统的发展或者业务的需要，架构师们会将一些经常变动或是有一定时间效应的内容进行“微服务”处理，并逐渐地将原来在单体系统中多变的模块逐步拆分出来，而稳定不太变化的就形成了一个核心“微服务”存在于整个架构之中。\n\n\n\n\n*原文由 程序猿DD-翟永超 创作*\n转载自[《微服务》九大特性笔记](http://blog.didispace.com/20160917-microservices-note/)","slug":"《微服务》九大特性笔记","published":1,"updated":"2017-09-04T11:49:26.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zu3002ytwv7hx28eyhy","content":"<h2 id=\"服务组件化\"><a href=\"#服务组件化\" class=\"headerlink\" title=\"服务组件化\"></a>服务组件化</h2><p>组件，是一个可以独立更换和升级的单元。就像PC中的CPU、内存、显卡、硬盘一样，独立且可以更换升级而不影响其他单元。</p>\n<p>在“微服务”架构中，需要我们对服务进行组件化分解。服务，是一种进程外的组件，它通过http等通信协议进行协作，而不是传统组件以嵌入的方式协同工作。服务都独立开发、部署，可以有效的避免一个服务的修改引起整个系统的重新部署。</p>\n<p>打一个不恰当的比喻，如果我们的PC组件以服务的方式构建，我们只维护主板和一些必要外设之后，计算能力通过一组外部服务实现，我们只需要告诉PC我们从哪个地址来获得计算能力，通过服务定义的计算接口来实现我们使用过程中的计算需求，从而实现CPU组件的服务化。这样我们原本复杂的PC服务得到了更轻量化的实现，我们甚至只需要更换服务地址就能升级我们PC的计算能力。</p>\n<h2 id=\"按业务组织团队\"><a href=\"#按业务组织团队\" class=\"headerlink\" title=\"按业务组织团队\"></a>按业务组织团队</h2><p>当我们开始决定如何划分“微服务”时，通常也意味着我们要开始对团队进行重新规划与组织。按以往的方式，我们往往会以技术的层面去划分多个不同的团队，比如：DBA团队、运维团队、后端团队、前端团队、设计师团队等等。若我们继续按这种方式组织团队来实施“微服务”架构开发时，当有一个有问题需要更改，可能是一个非常简单的变动，比如：对人物描述增加一个字段，这就需要从数据存储开始考虑一直到设计和前端，虽然大家的修改都非常小，但这会引起跨团队的时间和预算审批。</p>\n<p>在实施“微服务”架构时，需要采用不同的团队分割方法。由于每一个微服务都是针对特定业务的宽栈或是全栈实现，既要负责数据的持久化存储，又要负责用户的接口定义等各种跨专业领域的职能。因此，面对大型项目时候，对于微服务团队拆分更加建议按业务线的方式进行拆分，一方面可以有效减少服务内部修改所产生的内耗；另一方面，团队边界可以变得更为清晰。</p>\n<h2 id=\"做“产品”的态度\"><a href=\"#做“产品”的态度\" class=\"headerlink\" title=\"做“产品”的态度\"></a>做“产品”的态度</h2><p>实施“微服务”架构的团队中，每个小团队都应该以做产品的方式，对其产品的整个生命周期负责。而不是以项目的模式，以完成开发与交付并将成果交接给维护者为最终目标。</p>\n<p>开发团队通过了解服务在具体生产环境中的情况，可以增加他们对具体业务的理解，比如：很多时候一些业务中发生的特殊或异常情况，很可能产品经理都并不知晓，但细心的开发者很容易通过生产环境发现这些特殊的潜在问题或需求。</p>\n<p>所以，我们需要用做“产品”的态度来对待每一个“微服务”，持续关注服务的运作情况，并不断地分析帮助用户来提升业务功能。</p>\n<h2 id=\"智能端点与哑管道\"><a href=\"#智能端点与哑管道\" class=\"headerlink\" title=\"智能端点与哑管道\"></a>智能端点与哑管道</h2><p>在单体应用中，组件间直接通过函数调用的方式进行交互协作。而在“微服务”架构中，服务由于不在一个进程中，组件间的通信模式发生了改变，若仅仅将原本在进程内的方法调用改成RPC方式的调用，会导致微服务之间产生繁琐的通信，使得系统表现更为糟糕，所以，我们需要更粗粒度的通信协议。</p>\n<p>在“微服务”架构中，通常会使用这两个服务调用方式：</p>\n<p>第一种，使用HTTP协议的RESTful API或轻量级的消息发送协议，来实现信息传递与服务调用的触发。<br>第二种，通过在轻量级消息总线上传递消息，类似RabbitMQ等一些提供可靠异步交换的结构。</p>\n<blockquote>\n<p>在极度强调性能的情况下，有些团队会使用二进制的消息发送协议，例如：protobuf。即使是这样，这些系统仍然会呈现出“智能端点和哑管道”的特点，为了在易读性与高效性之间取得平衡。当然大多数Web应用或企业系统并不需要作出在这两者间做出选择，能够获得易读性就已经是一个极大的胜利了。<br>——Martin Fowler</p>\n</blockquote>\n<h2 id=\"去中心化治理\"><a href=\"#去中心化治理\" class=\"headerlink\" title=\"去中心化治理\"></a>去中心化治理</h2><p>当我们采用集中化的架构治理方案时，通常在技术平台上都会做同一的标准，但是每一种技术平台都有其短板，这会导致在碰到短板时，不得不花费大力气去解决，并且可能还是因为其底层原因解决的不是很好。</p>\n<p>在实施“微服务”架构时，通过采用轻量级的契约定义接口，使得我们对于服务本身的具体技术平台不再那么敏感，这样我们整个“微服务”架构的系统中的组件就能针对其不同的业务特点选择不同的技术平台，终于不会出现杀鸡用牛刀或是杀牛用指甲钳的尴尬处境了。</p>\n<blockquote>\n<p>不是每一个问题都是钉子，不是每一个解决方案都是锤子</p>\n</blockquote>\n<h2 id=\"去中心化管理数据\"><a href=\"#去中心化管理数据\" class=\"headerlink\" title=\"去中心化管理数据\"></a>去中心化管理数据</h2><p>我们在实施“微服务”架构时，都希望可以让每一个服务来管理其自有的数据库，这就是数据管理的去中心化。</p>\n<p>在去中心化过程中，我们除了将原数据库中的存储内容拆分到新的同平台的其他数据库实例中之外（如：把原本存储在MySQL中的表拆分后，存储多几个不同的MySQL实例中），也可以针对一些具有特殊结构或业务特性的数据存储到一些其他技术的数据库实例中（如：把日志信息存储到MongoDB中、把用户登录信息存储到Redis中）。</p>\n<p>虽然，数据管理的去中心化可以让数据管理更加细致化，通过采用更合适的技术来让数据存储和性能达到最优。但是，由于数据存储于不同的数据库实例中后，数据一致性也成为“微服务”架构中急需解决的问题之一。分布式事务的实现，本身难度就非常大，所以在“微服务”架构中，我们更强调在各服务之间进行“无事务”的调用，而对于数据一致性，只要求数据在最后的处理状态是一致的效果；若在过程中发现错误，通过补偿机制来进行处理，使得错误数据能够达到最终的一致性。</p>\n<h2 id=\"基础设施自动化\"><a href=\"#基础设施自动化\" class=\"headerlink\" title=\"基础设施自动化\"></a>基础设施自动化</h2><p>近年来云计算服务与容器化技术的不断成熟，运维基础设施的工作变得越来越不那么难了。但是，当我们实施“微服务”架构时，数据库、应用程序的个头虽然都变小了，但是因为拆分的原因，数量成倍的增长。这使得运维人员需要关注的内容也成倍的增长，并且操作性任务也会成倍的增长，这些问题若没有得到妥善的解决，必将成为运维人员的噩梦。</p>\n<p>所以，在“微服务”架构中，请务必从一开始就构建起“持续交付”平台来支撑整个实施过程，该平台需要两大内容，不可或缺：</p>\n<p>自动化测试：每次部署前的强心剂，尽可能的获得对正在运行软件的信心。<br>自动化部署：解放繁琐枯燥的重复操作以及对多环境的配置管理。</p>\n<h2 id=\"容错设计\"><a href=\"#容错设计\" class=\"headerlink\" title=\"容错设计\"></a>容错设计</h2><p>在单体应用中，一般不存在单个组件故障而其他还在运行的情况，通常是一挂全挂。而在“微服务”架构中，由于服务都运行在独立的进程中，所以是存在部分服务出现故障，而其他服务都正常运行的情况，比如：当正常运作的服务B调用到故障服务A时，因故障服务A没有返回，线程挂起开始等待，直到超时才能释放，而此时若触发服务B调用服务A的请求来自服务C，而服务C频繁调用服务B时，由于其依赖服务A，大量线程被挂起等待，最后导致服务A也不能正常服务，这时就会出现故障的蔓延。</p>\n<p>所以，在“微服务”架构中，快速的检测出故障源并尽可能的自动恢复服务是必须要被设计和考虑的。通常，我们都希望在每个服务中实现监控和日志记录的组件，比如：服务状态、断路器状态、吞吐量、网络延迟等关键数据的仪表盘等。</p>\n<h2 id=\"演进式设计\"><a href=\"#演进式设计\" class=\"headerlink\" title=\"演进式设计\"></a>演进式设计</h2><p>通过上面的几点特征，我们已经能够体会到，要实施一个完美的“微服务”架构，需要考虑的设计与成本并不小，对于没有足够经验的团队来说，甚至要比单体应用发付出更多的代价。</p>\n<p>所以，很多情况下，架构师们都会以演进的方式进行系统的构建，在初期系统以单体系统的方式来设计和实施，一方面系统体量初期并不会很大，构建和维护成本都不高。另一方面，初期的核心业务在后期通常也不会发生巨大的改变。随着系统的发展或者业务的需要，架构师们会将一些经常变动或是有一定时间效应的内容进行“微服务”处理，并逐渐地将原来在单体系统中多变的模块逐步拆分出来，而稳定不太变化的就形成了一个核心“微服务”存在于整个架构之中。</p>\n<p><em>原文由 程序猿DD-翟永超 创作</em><br>转载自<a href=\"http://blog.didispace.com/20160917-microservices-note/\" target=\"_blank\" rel=\"external\">《微服务》九大特性笔记</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"服务组件化\"><a href=\"#服务组件化\" class=\"headerlink\" title=\"服务组件化\"></a>服务组件化</h2><p>组件，是一个可以独立更换和升级的单元。就像PC中的CPU、内存、显卡、硬盘一样，独立且可以更换升级而不影响其他单元。</p>\n<p>在“微服务”架构中，需要我们对服务进行组件化分解。服务，是一种进程外的组件，它通过http等通信协议进行协作，而不是传统组件以嵌入的方式协同工作。服务都独立开发、部署，可以有效的避免一个服务的修改引起整个系统的重新部署。</p>\n<p>打一个不恰当的比喻，如果我们的PC组件以服务的方式构建，我们只维护主板和一些必要外设之后，计算能力通过一组外部服务实现，我们只需要告诉PC我们从哪个地址来获得计算能力，通过服务定义的计算接口来实现我们使用过程中的计算需求，从而实现CPU组件的服务化。这样我们原本复杂的PC服务得到了更轻量化的实现，我们甚至只需要更换服务地址就能升级我们PC的计算能力。</p>\n<h2 id=\"按业务组织团队\"><a href=\"#按业务组织团队\" class=\"headerlink\" title=\"按业务组织团队\"></a>按业务组织团队</h2><p>当我们开始决定如何划分“微服务”时，通常也意味着我们要开始对团队进行重新规划与组织。按以往的方式，我们往往会以技术的层面去划分多个不同的团队，比如：DBA团队、运维团队、后端团队、前端团队、设计师团队等等。若我们继续按这种方式组织团队来实施“微服务”架构开发时，当有一个有问题需要更改，可能是一个非常简单的变动，比如：对人物描述增加一个字段，这就需要从数据存储开始考虑一直到设计和前端，虽然大家的修改都非常小，但这会引起跨团队的时间和预算审批。</p>\n<p>在实施“微服务”架构时，需要采用不同的团队分割方法。由于每一个微服务都是针对特定业务的宽栈或是全栈实现，既要负责数据的持久化存储，又要负责用户的接口定义等各种跨专业领域的职能。因此，面对大型项目时候，对于微服务团队拆分更加建议按业务线的方式进行拆分，一方面可以有效减少服务内部修改所产生的内耗；另一方面，团队边界可以变得更为清晰。</p>\n<h2 id=\"做“产品”的态度\"><a href=\"#做“产品”的态度\" class=\"headerlink\" title=\"做“产品”的态度\"></a>做“产品”的态度</h2><p>实施“微服务”架构的团队中，每个小团队都应该以做产品的方式，对其产品的整个生命周期负责。而不是以项目的模式，以完成开发与交付并将成果交接给维护者为最终目标。</p>\n<p>开发团队通过了解服务在具体生产环境中的情况，可以增加他们对具体业务的理解，比如：很多时候一些业务中发生的特殊或异常情况，很可能产品经理都并不知晓，但细心的开发者很容易通过生产环境发现这些特殊的潜在问题或需求。</p>\n<p>所以，我们需要用做“产品”的态度来对待每一个“微服务”，持续关注服务的运作情况，并不断地分析帮助用户来提升业务功能。</p>\n<h2 id=\"智能端点与哑管道\"><a href=\"#智能端点与哑管道\" class=\"headerlink\" title=\"智能端点与哑管道\"></a>智能端点与哑管道</h2><p>在单体应用中，组件间直接通过函数调用的方式进行交互协作。而在“微服务”架构中，服务由于不在一个进程中，组件间的通信模式发生了改变，若仅仅将原本在进程内的方法调用改成RPC方式的调用，会导致微服务之间产生繁琐的通信，使得系统表现更为糟糕，所以，我们需要更粗粒度的通信协议。</p>\n<p>在“微服务”架构中，通常会使用这两个服务调用方式：</p>\n<p>第一种，使用HTTP协议的RESTful API或轻量级的消息发送协议，来实现信息传递与服务调用的触发。<br>第二种，通过在轻量级消息总线上传递消息，类似RabbitMQ等一些提供可靠异步交换的结构。</p>\n<blockquote>\n<p>在极度强调性能的情况下，有些团队会使用二进制的消息发送协议，例如：protobuf。即使是这样，这些系统仍然会呈现出“智能端点和哑管道”的特点，为了在易读性与高效性之间取得平衡。当然大多数Web应用或企业系统并不需要作出在这两者间做出选择，能够获得易读性就已经是一个极大的胜利了。<br>——Martin Fowler</p>\n</blockquote>\n<h2 id=\"去中心化治理\"><a href=\"#去中心化治理\" class=\"headerlink\" title=\"去中心化治理\"></a>去中心化治理</h2><p>当我们采用集中化的架构治理方案时，通常在技术平台上都会做同一的标准，但是每一种技术平台都有其短板，这会导致在碰到短板时，不得不花费大力气去解决，并且可能还是因为其底层原因解决的不是很好。</p>\n<p>在实施“微服务”架构时，通过采用轻量级的契约定义接口，使得我们对于服务本身的具体技术平台不再那么敏感，这样我们整个“微服务”架构的系统中的组件就能针对其不同的业务特点选择不同的技术平台，终于不会出现杀鸡用牛刀或是杀牛用指甲钳的尴尬处境了。</p>\n<blockquote>\n<p>不是每一个问题都是钉子，不是每一个解决方案都是锤子</p>\n</blockquote>\n<h2 id=\"去中心化管理数据\"><a href=\"#去中心化管理数据\" class=\"headerlink\" title=\"去中心化管理数据\"></a>去中心化管理数据</h2><p>我们在实施“微服务”架构时，都希望可以让每一个服务来管理其自有的数据库，这就是数据管理的去中心化。</p>\n<p>在去中心化过程中，我们除了将原数据库中的存储内容拆分到新的同平台的其他数据库实例中之外（如：把原本存储在MySQL中的表拆分后，存储多几个不同的MySQL实例中），也可以针对一些具有特殊结构或业务特性的数据存储到一些其他技术的数据库实例中（如：把日志信息存储到MongoDB中、把用户登录信息存储到Redis中）。</p>\n<p>虽然，数据管理的去中心化可以让数据管理更加细致化，通过采用更合适的技术来让数据存储和性能达到最优。但是，由于数据存储于不同的数据库实例中后，数据一致性也成为“微服务”架构中急需解决的问题之一。分布式事务的实现，本身难度就非常大，所以在“微服务”架构中，我们更强调在各服务之间进行“无事务”的调用，而对于数据一致性，只要求数据在最后的处理状态是一致的效果；若在过程中发现错误，通过补偿机制来进行处理，使得错误数据能够达到最终的一致性。</p>\n<h2 id=\"基础设施自动化\"><a href=\"#基础设施自动化\" class=\"headerlink\" title=\"基础设施自动化\"></a>基础设施自动化</h2><p>近年来云计算服务与容器化技术的不断成熟，运维基础设施的工作变得越来越不那么难了。但是，当我们实施“微服务”架构时，数据库、应用程序的个头虽然都变小了，但是因为拆分的原因，数量成倍的增长。这使得运维人员需要关注的内容也成倍的增长，并且操作性任务也会成倍的增长，这些问题若没有得到妥善的解决，必将成为运维人员的噩梦。</p>\n<p>所以，在“微服务”架构中，请务必从一开始就构建起“持续交付”平台来支撑整个实施过程，该平台需要两大内容，不可或缺：</p>\n<p>自动化测试：每次部署前的强心剂，尽可能的获得对正在运行软件的信心。<br>自动化部署：解放繁琐枯燥的重复操作以及对多环境的配置管理。</p>\n<h2 id=\"容错设计\"><a href=\"#容错设计\" class=\"headerlink\" title=\"容错设计\"></a>容错设计</h2><p>在单体应用中，一般不存在单个组件故障而其他还在运行的情况，通常是一挂全挂。而在“微服务”架构中，由于服务都运行在独立的进程中，所以是存在部分服务出现故障，而其他服务都正常运行的情况，比如：当正常运作的服务B调用到故障服务A时，因故障服务A没有返回，线程挂起开始等待，直到超时才能释放，而此时若触发服务B调用服务A的请求来自服务C，而服务C频繁调用服务B时，由于其依赖服务A，大量线程被挂起等待，最后导致服务A也不能正常服务，这时就会出现故障的蔓延。</p>\n<p>所以，在“微服务”架构中，快速的检测出故障源并尽可能的自动恢复服务是必须要被设计和考虑的。通常，我们都希望在每个服务中实现监控和日志记录的组件，比如：服务状态、断路器状态、吞吐量、网络延迟等关键数据的仪表盘等。</p>\n<h2 id=\"演进式设计\"><a href=\"#演进式设计\" class=\"headerlink\" title=\"演进式设计\"></a>演进式设计</h2><p>通过上面的几点特征，我们已经能够体会到，要实施一个完美的“微服务”架构，需要考虑的设计与成本并不小，对于没有足够经验的团队来说，甚至要比单体应用发付出更多的代价。</p>\n<p>所以，很多情况下，架构师们都会以演进的方式进行系统的构建，在初期系统以单体系统的方式来设计和实施，一方面系统体量初期并不会很大，构建和维护成本都不高。另一方面，初期的核心业务在后期通常也不会发生巨大的改变。随着系统的发展或者业务的需要，架构师们会将一些经常变动或是有一定时间效应的内容进行“微服务”处理，并逐渐地将原来在单体系统中多变的模块逐步拆分出来，而稳定不太变化的就形成了一个核心“微服务”存在于整个架构之中。</p>\n<p><em>原文由 程序猿DD-翟永超 创作</em><br>转载自<a href=\"http://blog.didispace.com/20160917-microservices-note/\" target=\"_blank\" rel=\"external\">《微服务》九大特性笔记</a></p>\n"},{"title":"一个DDD指导下的实体类设计案例","date":"2017-08-21T07:59:52.000Z","_content":"\n## 1 引子\n\n项目开发中的工具类代码总是随着项目发展逐渐变大，在公司诸多的公用代码中，笔者发现了一个简单的，也是经常被使用的类：BaseDomain，引起了我的思考。\n在我们公司的开发习惯中，数据库实体类通常会继承一个叫做BaseDomain的类，这个类很简单，主要用来填充一些数据库实体公用的属性，它的设计如下：\n<!--more-->\n```java\n@MappedSuperclass <1>\npublic class BaseDomain {\n    \n    private Boolean deleteFlag; <2>\n    private Date deleteDate;\n    private Date lastUpdateDate;\n    private Date createDate;\n    @Version <3>\n    private Integer version;\n    \n    @PrePersist <4>\n    public void init(){\n        Date now = new Date();\n        deleteFlag = false;\n        createDate = lastUpdateDate = now;\n    }\n    \n    @PreUpdate <4>\n    public void update(){\n        lastUpdateDate = new Date();\n    }\n    \n}\n```\n\n小小的一个类其实还是蕴含了不少的知识点在里面，至少可以包含以下几点：\n\n<1> 被其他类继承后，父类的字段不会被忽略，也就意味着子类没有必要自己写这一堆公用的属性了。\n\n<2> 逻辑删除标识，业务类的删除必须是这种打标识的行为，不能进行物理删除。值得一提的是，公司原先的该字段被命名成了isDelete，这不符合变量命名的规范，会导致一些序列化框架出现问题，而delete是数据库的保留字，所以本文中用deleteFlag。\n\n<3> 使用version作为乐观锁的实现，version的自增以及版本失效异常受@Version该注解的影响，是由框架控制的。\n\n<4> 创建日期，更新日期等等属性，在我们使用JPA的save方法后，框架会自动去填充相应的值。\n\n## 2 发现问题与解决问题\n\n这个基类使用的频次是怎么样的呢？every class！是的，公司的每个开发者在新增一个实体类时总是优先写上`Xxx extends BaseDomain` 。初级开发者总是有什么学什么，他们看到公司原来的代码都是会继承这个类，以及周围的同事也是这么写着，他们甚至不知道version乐观锁的实现，不知道类的创建日期更新日期是在基类中被声明的；高级开发者能够掌握我上面所说的那些技术要点，尽管开发中因此遇到一些不适，但也是尽可能的克服。\n等等，上面说到添加这个基类后，对开发造成了不适感，这引起了我的思考，下面就来谈谈直观的有哪些不适感以及解决方案。\n\n#### 2.1 没有物理删除，只有逻辑删除\n\n真正delete操作不会再出现了,物理删除操作被setDeleteFlag(true)代替。在列表展示中，再也不能使用findAll()操作了，而是需要使用findByDeleteFlagFalse()。更多的数据库查询操作，都要考虑到，deleteFlag=true的那些记录，不应该被影响到。\n\n**解决问题**：在DDD中，值得推崇的方式是使用specification模式来解决这个问题，对应到实际开发中，也就是JPA的Predicate，或者是熟悉Hibernate的人所了解的Criteria。但不可避免的一点是由于只有逻辑删除，导致了我们的数据库越来越大（解决方法不是没有，正是EventSouring+CQRS架构，这属于DDD的高级实践，本文不进行讨论）。从技术开发角度出发，这的确使得我们的编码变得稍微复杂了一点，但是其业务意义远大于这点开发工作量，所以是值得的。\n\n\n#### 2.2 级联查询变得麻烦\n\n一个会员有多个通信地址，多个银行卡。反映到实体设计，便是这样的：\n\n\n```java\npublic class Member extends BaseDomain{\n  \n  private String username;\n\n  @OneToMany\n  private List<MemberAddress> memberAddresses;\n\n  @OneToMany\n  private List<BankCard> bankCards;\n    \n}\n```\n\n其中，MemberAddress及BankCard都继承了BaseDomain。使用orm框架自带的级联功能，我们本可以查询出会员信息时，顺带查出其对应的通讯地址列表和银行卡列表。但现在不是那么的美好了，使用级联查询，可能会查询出已经被删除的MemberAddress，BankCard，只能在应用层进行deleteFlag的判断，从而过滤被删除的信息，这无法避免，因为框架不认识逻辑删除标识！\n\n**解决问题**：这个问题和2.3节的问题，恰恰是促成我写这篇文章的初衷，这与DDD有着密不可分的关联。DDD将对象划分成了entity（实体）和value object（值对象）。如果仔细分析下上面的业务并且懂一点DDD，你会立刻意识到。Member对象就是一个entity，而MemberAddress以及BankCard则是value object（username也是value object）。value object的一个重要特点，就是作为entity的修饰，从业务角度出发，MemberAddress和BankCard的确是为了更好描述Member信息，而抽象出的一个集合。而value object的另一特性，不可变性，指导了我们，**不应该让MemberAddress，BankCard继承BaseDomain**。说了这么多，就是想从一个理论的高度，让那些设计一个新实体便继承BaseDomain的人戒掉这个习惯。在value object丧失了deleteFlag，lastUpdateDate等属性后，可能会引发一些的质疑，他们会声称：“数据库里面member_address这张表没有lastUpdateDate字段了，我再也无法得知这条会员地址最后修改的时间了!”。是的，从逻辑意义上看，地址并没有改变，而改变的只是会员自己的地址，这个UpdateDate字段在地址上极为不合理，应该是会员的修改。也就是说lastUpdateDate应该反映到Member上。实际的开发经验告诉我，从前那么多的value object继承了BaseDomain，99%不会使用到其中的相关属性，如果真的需要使用，那么请单独为类添加，而不是继承BaseDomain。其次这些人犯了另一个错误，我们设计一个系统时，应该是entity first，而不应该database first。DDD告诉我们一个软件开发的大忌，到现在2017年，仍然有大帮的人在问：“我要实现xxxx功能，我的数据库应该如何设计？”这些人犯了根本性的错误，就是把软件的目的搞错了，软件研究的是什么？是研究如何使用计算机来解决实际（领域）问题，而不是去研究数据应该如何保存更合理。我的公司中有不少的程序员新人，希望这番话能够帮助那些“步入歧途”的从业人员 “走上正路”。软件设计应该从“数据库驱动”走向“领域驱动”，而DDD的实践经验正是为设计和开发大型复杂的软件系统提供了实践指导。\n\n#### 2.3 乐观锁的尴尬地位\n\n再说回BaseDomain中的version字段，由于MemberAddress和BankCard这样的value object也被赋予了乐观锁的行为，这意味着加锁的粒度变小了。DDD的指导下，改动也可以理解为由Member这个根发出，统一由Member中的version来控制，这使锁的粒度变大了。换言之，从技术开发角度，对value object加上version可以允许同时（操作系统级别真正的同时）修改一个用户的地址信息和银行卡信息，甚至是多个银行卡中不同的银行卡，而单独由Member控制，则意味着，系统在同一时刻只能进行单独一项操作。在业务并发的一般角度上考虑，一个用户是不会出现多线程修改行为的。而从软件设计的角度，单独为value object 添加version，破坏了value object的不可变性，若要修改，应当是被整个替换。\n\n**解决方案**：在一般情况下，请不要为value object添加乐观锁。如果有一个场景下，你的value object需要出现版本控制，那可能有两种情况：1 你的value object是压根不是value object，可能是一个entity 2 聚合根划分错误 ....这，要真是这样源头都弄错了，压根没法聊了对吧\n\n## 3 总结\n\nBaseDomain这样的设计本身并不是我想要强调的重点，但是既然出现了BaseDomain这样的设计，那么它究竟应该被什么样的实体继承，就是需要被考虑的了。DDD下，识别aggregate root，entity，value object，是整个软件设计的核心点，在本文中，判别是否继承BaseDomain的前提，就是这个对象是entity，还是value object。大家都是存在数据库中的，但是地位是不一样的。\n\n本文若有什么不足之处，欢迎DDD爱好者指出。\n\n","source":"_posts/一个DDD指导下的实体类设计案例.md","raw":"---\ntitle: 一个DDD指导下的实体类设计案例\ndate: 2017-08-21 15:59:52\ntags: \n- 领域驱动设计\ncategories: \n- 领域驱动设计\n---\n\n## 1 引子\n\n项目开发中的工具类代码总是随着项目发展逐渐变大，在公司诸多的公用代码中，笔者发现了一个简单的，也是经常被使用的类：BaseDomain，引起了我的思考。\n在我们公司的开发习惯中，数据库实体类通常会继承一个叫做BaseDomain的类，这个类很简单，主要用来填充一些数据库实体公用的属性，它的设计如下：\n<!--more-->\n```java\n@MappedSuperclass <1>\npublic class BaseDomain {\n    \n    private Boolean deleteFlag; <2>\n    private Date deleteDate;\n    private Date lastUpdateDate;\n    private Date createDate;\n    @Version <3>\n    private Integer version;\n    \n    @PrePersist <4>\n    public void init(){\n        Date now = new Date();\n        deleteFlag = false;\n        createDate = lastUpdateDate = now;\n    }\n    \n    @PreUpdate <4>\n    public void update(){\n        lastUpdateDate = new Date();\n    }\n    \n}\n```\n\n小小的一个类其实还是蕴含了不少的知识点在里面，至少可以包含以下几点：\n\n<1> 被其他类继承后，父类的字段不会被忽略，也就意味着子类没有必要自己写这一堆公用的属性了。\n\n<2> 逻辑删除标识，业务类的删除必须是这种打标识的行为，不能进行物理删除。值得一提的是，公司原先的该字段被命名成了isDelete，这不符合变量命名的规范，会导致一些序列化框架出现问题，而delete是数据库的保留字，所以本文中用deleteFlag。\n\n<3> 使用version作为乐观锁的实现，version的自增以及版本失效异常受@Version该注解的影响，是由框架控制的。\n\n<4> 创建日期，更新日期等等属性，在我们使用JPA的save方法后，框架会自动去填充相应的值。\n\n## 2 发现问题与解决问题\n\n这个基类使用的频次是怎么样的呢？every class！是的，公司的每个开发者在新增一个实体类时总是优先写上`Xxx extends BaseDomain` 。初级开发者总是有什么学什么，他们看到公司原来的代码都是会继承这个类，以及周围的同事也是这么写着，他们甚至不知道version乐观锁的实现，不知道类的创建日期更新日期是在基类中被声明的；高级开发者能够掌握我上面所说的那些技术要点，尽管开发中因此遇到一些不适，但也是尽可能的克服。\n等等，上面说到添加这个基类后，对开发造成了不适感，这引起了我的思考，下面就来谈谈直观的有哪些不适感以及解决方案。\n\n#### 2.1 没有物理删除，只有逻辑删除\n\n真正delete操作不会再出现了,物理删除操作被setDeleteFlag(true)代替。在列表展示中，再也不能使用findAll()操作了，而是需要使用findByDeleteFlagFalse()。更多的数据库查询操作，都要考虑到，deleteFlag=true的那些记录，不应该被影响到。\n\n**解决问题**：在DDD中，值得推崇的方式是使用specification模式来解决这个问题，对应到实际开发中，也就是JPA的Predicate，或者是熟悉Hibernate的人所了解的Criteria。但不可避免的一点是由于只有逻辑删除，导致了我们的数据库越来越大（解决方法不是没有，正是EventSouring+CQRS架构，这属于DDD的高级实践，本文不进行讨论）。从技术开发角度出发，这的确使得我们的编码变得稍微复杂了一点，但是其业务意义远大于这点开发工作量，所以是值得的。\n\n\n#### 2.2 级联查询变得麻烦\n\n一个会员有多个通信地址，多个银行卡。反映到实体设计，便是这样的：\n\n\n```java\npublic class Member extends BaseDomain{\n  \n  private String username;\n\n  @OneToMany\n  private List<MemberAddress> memberAddresses;\n\n  @OneToMany\n  private List<BankCard> bankCards;\n    \n}\n```\n\n其中，MemberAddress及BankCard都继承了BaseDomain。使用orm框架自带的级联功能，我们本可以查询出会员信息时，顺带查出其对应的通讯地址列表和银行卡列表。但现在不是那么的美好了，使用级联查询，可能会查询出已经被删除的MemberAddress，BankCard，只能在应用层进行deleteFlag的判断，从而过滤被删除的信息，这无法避免，因为框架不认识逻辑删除标识！\n\n**解决问题**：这个问题和2.3节的问题，恰恰是促成我写这篇文章的初衷，这与DDD有着密不可分的关联。DDD将对象划分成了entity（实体）和value object（值对象）。如果仔细分析下上面的业务并且懂一点DDD，你会立刻意识到。Member对象就是一个entity，而MemberAddress以及BankCard则是value object（username也是value object）。value object的一个重要特点，就是作为entity的修饰，从业务角度出发，MemberAddress和BankCard的确是为了更好描述Member信息，而抽象出的一个集合。而value object的另一特性，不可变性，指导了我们，**不应该让MemberAddress，BankCard继承BaseDomain**。说了这么多，就是想从一个理论的高度，让那些设计一个新实体便继承BaseDomain的人戒掉这个习惯。在value object丧失了deleteFlag，lastUpdateDate等属性后，可能会引发一些的质疑，他们会声称：“数据库里面member_address这张表没有lastUpdateDate字段了，我再也无法得知这条会员地址最后修改的时间了!”。是的，从逻辑意义上看，地址并没有改变，而改变的只是会员自己的地址，这个UpdateDate字段在地址上极为不合理，应该是会员的修改。也就是说lastUpdateDate应该反映到Member上。实际的开发经验告诉我，从前那么多的value object继承了BaseDomain，99%不会使用到其中的相关属性，如果真的需要使用，那么请单独为类添加，而不是继承BaseDomain。其次这些人犯了另一个错误，我们设计一个系统时，应该是entity first，而不应该database first。DDD告诉我们一个软件开发的大忌，到现在2017年，仍然有大帮的人在问：“我要实现xxxx功能，我的数据库应该如何设计？”这些人犯了根本性的错误，就是把软件的目的搞错了，软件研究的是什么？是研究如何使用计算机来解决实际（领域）问题，而不是去研究数据应该如何保存更合理。我的公司中有不少的程序员新人，希望这番话能够帮助那些“步入歧途”的从业人员 “走上正路”。软件设计应该从“数据库驱动”走向“领域驱动”，而DDD的实践经验正是为设计和开发大型复杂的软件系统提供了实践指导。\n\n#### 2.3 乐观锁的尴尬地位\n\n再说回BaseDomain中的version字段，由于MemberAddress和BankCard这样的value object也被赋予了乐观锁的行为，这意味着加锁的粒度变小了。DDD的指导下，改动也可以理解为由Member这个根发出，统一由Member中的version来控制，这使锁的粒度变大了。换言之，从技术开发角度，对value object加上version可以允许同时（操作系统级别真正的同时）修改一个用户的地址信息和银行卡信息，甚至是多个银行卡中不同的银行卡，而单独由Member控制，则意味着，系统在同一时刻只能进行单独一项操作。在业务并发的一般角度上考虑，一个用户是不会出现多线程修改行为的。而从软件设计的角度，单独为value object 添加version，破坏了value object的不可变性，若要修改，应当是被整个替换。\n\n**解决方案**：在一般情况下，请不要为value object添加乐观锁。如果有一个场景下，你的value object需要出现版本控制，那可能有两种情况：1 你的value object是压根不是value object，可能是一个entity 2 聚合根划分错误 ....这，要真是这样源头都弄错了，压根没法聊了对吧\n\n## 3 总结\n\nBaseDomain这样的设计本身并不是我想要强调的重点，但是既然出现了BaseDomain这样的设计，那么它究竟应该被什么样的实体继承，就是需要被考虑的了。DDD下，识别aggregate root，entity，value object，是整个软件设计的核心点，在本文中，判别是否继承BaseDomain的前提，就是这个对象是entity，还是value object。大家都是存在数据库中的，但是地位是不一样的。\n\n本文若有什么不足之处，欢迎DDD爱好者指出。\n\n","slug":"一个DDD指导下的实体类设计案例","published":1,"updated":"2017-09-04T11:49:26.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zu50031twv7o3ust31m","content":"<h2 id=\"1-引子\"><a href=\"#1-引子\" class=\"headerlink\" title=\"1 引子\"></a>1 引子</h2><p>项目开发中的工具类代码总是随着项目发展逐渐变大，在公司诸多的公用代码中，笔者发现了一个简单的，也是经常被使用的类：BaseDomain，引起了我的思考。<br>在我们公司的开发习惯中，数据库实体类通常会继承一个叫做BaseDomain的类，这个类很简单，主要用来填充一些数据库实体公用的属性，它的设计如下：<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@MappedSuperclass</span> &lt;<span class=\"number\">1</span>&gt;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseDomain</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> Boolean deleteFlag; &lt;<span class=\"number\">2</span>&gt;</div><div class=\"line\">    <span class=\"keyword\">private</span> Date deleteDate;</div><div class=\"line\">    <span class=\"keyword\">private</span> Date lastUpdateDate;</div><div class=\"line\">    <span class=\"keyword\">private</span> Date createDate;</div><div class=\"line\">    <span class=\"meta\">@Version</span> &lt;<span class=\"number\">3</span>&gt;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer version;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@PrePersist</span> &lt;<span class=\"number\">4</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        Date now = <span class=\"keyword\">new</span> Date();</div><div class=\"line\">        deleteFlag = <span class=\"keyword\">false</span>;</div><div class=\"line\">        createDate = lastUpdateDate = now;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@PreUpdate</span> &lt;<span class=\"number\">4</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        lastUpdateDate = <span class=\"keyword\">new</span> Date();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>小小的一个类其实还是蕴含了不少的知识点在里面，至少可以包含以下几点：</p>\n<p><1> 被其他类继承后，父类的字段不会被忽略，也就意味着子类没有必要自己写这一堆公用的属性了。</1></p>\n<p><2> 逻辑删除标识，业务类的删除必须是这种打标识的行为，不能进行物理删除。值得一提的是，公司原先的该字段被命名成了isDelete，这不符合变量命名的规范，会导致一些序列化框架出现问题，而delete是数据库的保留字，所以本文中用deleteFlag。</2></p>\n<p><3> 使用version作为乐观锁的实现，version的自增以及版本失效异常受@Version该注解的影响，是由框架控制的。</3></p>\n<p><4> 创建日期，更新日期等等属性，在我们使用JPA的save方法后，框架会自动去填充相应的值。</4></p>\n<h2 id=\"2-发现问题与解决问题\"><a href=\"#2-发现问题与解决问题\" class=\"headerlink\" title=\"2 发现问题与解决问题\"></a>2 发现问题与解决问题</h2><p>这个基类使用的频次是怎么样的呢？every class！是的，公司的每个开发者在新增一个实体类时总是优先写上<code>Xxx extends BaseDomain</code> 。初级开发者总是有什么学什么，他们看到公司原来的代码都是会继承这个类，以及周围的同事也是这么写着，他们甚至不知道version乐观锁的实现，不知道类的创建日期更新日期是在基类中被声明的；高级开发者能够掌握我上面所说的那些技术要点，尽管开发中因此遇到一些不适，但也是尽可能的克服。<br>等等，上面说到添加这个基类后，对开发造成了不适感，这引起了我的思考，下面就来谈谈直观的有哪些不适感以及解决方案。</p>\n<h4 id=\"2-1-没有物理删除，只有逻辑删除\"><a href=\"#2-1-没有物理删除，只有逻辑删除\" class=\"headerlink\" title=\"2.1 没有物理删除，只有逻辑删除\"></a>2.1 没有物理删除，只有逻辑删除</h4><p>真正delete操作不会再出现了,物理删除操作被setDeleteFlag(true)代替。在列表展示中，再也不能使用findAll()操作了，而是需要使用findByDeleteFlagFalse()。更多的数据库查询操作，都要考虑到，deleteFlag=true的那些记录，不应该被影响到。</p>\n<p><strong>解决问题</strong>：在DDD中，值得推崇的方式是使用specification模式来解决这个问题，对应到实际开发中，也就是JPA的Predicate，或者是熟悉Hibernate的人所了解的Criteria。但不可避免的一点是由于只有逻辑删除，导致了我们的数据库越来越大（解决方法不是没有，正是EventSouring+CQRS架构，这属于DDD的高级实践，本文不进行讨论）。从技术开发角度出发，这的确使得我们的编码变得稍微复杂了一点，但是其业务意义远大于这点开发工作量，所以是值得的。</p>\n<h4 id=\"2-2-级联查询变得麻烦\"><a href=\"#2-2-级联查询变得麻烦\" class=\"headerlink\" title=\"2.2 级联查询变得麻烦\"></a>2.2 级联查询变得麻烦</h4><p>一个会员有多个通信地址，多个银行卡。反映到实体设计，便是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Member</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseDomain</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> String username;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@OneToMany</span></div><div class=\"line\">  <span class=\"keyword\">private</span> List&lt;MemberAddress&gt; memberAddresses;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@OneToMany</span></div><div class=\"line\">  <span class=\"keyword\">private</span> List&lt;BankCard&gt; bankCards;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，MemberAddress及BankCard都继承了BaseDomain。使用orm框架自带的级联功能，我们本可以查询出会员信息时，顺带查出其对应的通讯地址列表和银行卡列表。但现在不是那么的美好了，使用级联查询，可能会查询出已经被删除的MemberAddress，BankCard，只能在应用层进行deleteFlag的判断，从而过滤被删除的信息，这无法避免，因为框架不认识逻辑删除标识！</p>\n<p><strong>解决问题</strong>：这个问题和2.3节的问题，恰恰是促成我写这篇文章的初衷，这与DDD有着密不可分的关联。DDD将对象划分成了entity（实体）和value object（值对象）。如果仔细分析下上面的业务并且懂一点DDD，你会立刻意识到。Member对象就是一个entity，而MemberAddress以及BankCard则是value object（username也是value object）。value object的一个重要特点，就是作为entity的修饰，从业务角度出发，MemberAddress和BankCard的确是为了更好描述Member信息，而抽象出的一个集合。而value object的另一特性，不可变性，指导了我们，<strong>不应该让MemberAddress，BankCard继承BaseDomain</strong>。说了这么多，就是想从一个理论的高度，让那些设计一个新实体便继承BaseDomain的人戒掉这个习惯。在value object丧失了deleteFlag，lastUpdateDate等属性后，可能会引发一些的质疑，他们会声称：“数据库里面member_address这张表没有lastUpdateDate字段了，我再也无法得知这条会员地址最后修改的时间了!”。是的，从逻辑意义上看，地址并没有改变，而改变的只是会员自己的地址，这个UpdateDate字段在地址上极为不合理，应该是会员的修改。也就是说lastUpdateDate应该反映到Member上。实际的开发经验告诉我，从前那么多的value object继承了BaseDomain，99%不会使用到其中的相关属性，如果真的需要使用，那么请单独为类添加，而不是继承BaseDomain。其次这些人犯了另一个错误，我们设计一个系统时，应该是entity first，而不应该database first。DDD告诉我们一个软件开发的大忌，到现在2017年，仍然有大帮的人在问：“我要实现xxxx功能，我的数据库应该如何设计？”这些人犯了根本性的错误，就是把软件的目的搞错了，软件研究的是什么？是研究如何使用计算机来解决实际（领域）问题，而不是去研究数据应该如何保存更合理。我的公司中有不少的程序员新人，希望这番话能够帮助那些“步入歧途”的从业人员 “走上正路”。软件设计应该从“数据库驱动”走向“领域驱动”，而DDD的实践经验正是为设计和开发大型复杂的软件系统提供了实践指导。</p>\n<h4 id=\"2-3-乐观锁的尴尬地位\"><a href=\"#2-3-乐观锁的尴尬地位\" class=\"headerlink\" title=\"2.3 乐观锁的尴尬地位\"></a>2.3 乐观锁的尴尬地位</h4><p>再说回BaseDomain中的version字段，由于MemberAddress和BankCard这样的value object也被赋予了乐观锁的行为，这意味着加锁的粒度变小了。DDD的指导下，改动也可以理解为由Member这个根发出，统一由Member中的version来控制，这使锁的粒度变大了。换言之，从技术开发角度，对value object加上version可以允许同时（操作系统级别真正的同时）修改一个用户的地址信息和银行卡信息，甚至是多个银行卡中不同的银行卡，而单独由Member控制，则意味着，系统在同一时刻只能进行单独一项操作。在业务并发的一般角度上考虑，一个用户是不会出现多线程修改行为的。而从软件设计的角度，单独为value object 添加version，破坏了value object的不可变性，若要修改，应当是被整个替换。</p>\n<p><strong>解决方案</strong>：在一般情况下，请不要为value object添加乐观锁。如果有一个场景下，你的value object需要出现版本控制，那可能有两种情况：1 你的value object是压根不是value object，可能是一个entity 2 聚合根划分错误 ….这，要真是这样源头都弄错了，压根没法聊了对吧</p>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3 总结\"></a>3 总结</h2><p>BaseDomain这样的设计本身并不是我想要强调的重点，但是既然出现了BaseDomain这样的设计，那么它究竟应该被什么样的实体继承，就是需要被考虑的了。DDD下，识别aggregate root，entity，value object，是整个软件设计的核心点，在本文中，判别是否继承BaseDomain的前提，就是这个对象是entity，还是value object。大家都是存在数据库中的，但是地位是不一样的。</p>\n<p>本文若有什么不足之处，欢迎DDD爱好者指出。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-引子\"><a href=\"#1-引子\" class=\"headerlink\" title=\"1 引子\"></a>1 引子</h2><p>项目开发中的工具类代码总是随着项目发展逐渐变大，在公司诸多的公用代码中，笔者发现了一个简单的，也是经常被使用的类：BaseDomain，引起了我的思考。<br>在我们公司的开发习惯中，数据库实体类通常会继承一个叫做BaseDomain的类，这个类很简单，主要用来填充一些数据库实体公用的属性，它的设计如下：<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@MappedSuperclass</span> &lt;<span class=\"number\">1</span>&gt;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseDomain</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> Boolean deleteFlag; &lt;<span class=\"number\">2</span>&gt;</div><div class=\"line\">    <span class=\"keyword\">private</span> Date deleteDate;</div><div class=\"line\">    <span class=\"keyword\">private</span> Date lastUpdateDate;</div><div class=\"line\">    <span class=\"keyword\">private</span> Date createDate;</div><div class=\"line\">    <span class=\"meta\">@Version</span> &lt;<span class=\"number\">3</span>&gt;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer version;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@PrePersist</span> &lt;<span class=\"number\">4</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        Date now = <span class=\"keyword\">new</span> Date();</div><div class=\"line\">        deleteFlag = <span class=\"keyword\">false</span>;</div><div class=\"line\">        createDate = lastUpdateDate = now;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@PreUpdate</span> &lt;<span class=\"number\">4</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        lastUpdateDate = <span class=\"keyword\">new</span> Date();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>小小的一个类其实还是蕴含了不少的知识点在里面，至少可以包含以下几点：</p>\n<p><1> 被其他类继承后，父类的字段不会被忽略，也就意味着子类没有必要自己写这一堆公用的属性了。</1></p>\n<p><2> 逻辑删除标识，业务类的删除必须是这种打标识的行为，不能进行物理删除。值得一提的是，公司原先的该字段被命名成了isDelete，这不符合变量命名的规范，会导致一些序列化框架出现问题，而delete是数据库的保留字，所以本文中用deleteFlag。</2></p>\n<p><3> 使用version作为乐观锁的实现，version的自增以及版本失效异常受@Version该注解的影响，是由框架控制的。</3></p>\n<p><4> 创建日期，更新日期等等属性，在我们使用JPA的save方法后，框架会自动去填充相应的值。</4></p>\n<h2 id=\"2-发现问题与解决问题\"><a href=\"#2-发现问题与解决问题\" class=\"headerlink\" title=\"2 发现问题与解决问题\"></a>2 发现问题与解决问题</h2><p>这个基类使用的频次是怎么样的呢？every class！是的，公司的每个开发者在新增一个实体类时总是优先写上<code>Xxx extends BaseDomain</code> 。初级开发者总是有什么学什么，他们看到公司原来的代码都是会继承这个类，以及周围的同事也是这么写着，他们甚至不知道version乐观锁的实现，不知道类的创建日期更新日期是在基类中被声明的；高级开发者能够掌握我上面所说的那些技术要点，尽管开发中因此遇到一些不适，但也是尽可能的克服。<br>等等，上面说到添加这个基类后，对开发造成了不适感，这引起了我的思考，下面就来谈谈直观的有哪些不适感以及解决方案。</p>\n<h4 id=\"2-1-没有物理删除，只有逻辑删除\"><a href=\"#2-1-没有物理删除，只有逻辑删除\" class=\"headerlink\" title=\"2.1 没有物理删除，只有逻辑删除\"></a>2.1 没有物理删除，只有逻辑删除</h4><p>真正delete操作不会再出现了,物理删除操作被setDeleteFlag(true)代替。在列表展示中，再也不能使用findAll()操作了，而是需要使用findByDeleteFlagFalse()。更多的数据库查询操作，都要考虑到，deleteFlag=true的那些记录，不应该被影响到。</p>\n<p><strong>解决问题</strong>：在DDD中，值得推崇的方式是使用specification模式来解决这个问题，对应到实际开发中，也就是JPA的Predicate，或者是熟悉Hibernate的人所了解的Criteria。但不可避免的一点是由于只有逻辑删除，导致了我们的数据库越来越大（解决方法不是没有，正是EventSouring+CQRS架构，这属于DDD的高级实践，本文不进行讨论）。从技术开发角度出发，这的确使得我们的编码变得稍微复杂了一点，但是其业务意义远大于这点开发工作量，所以是值得的。</p>\n<h4 id=\"2-2-级联查询变得麻烦\"><a href=\"#2-2-级联查询变得麻烦\" class=\"headerlink\" title=\"2.2 级联查询变得麻烦\"></a>2.2 级联查询变得麻烦</h4><p>一个会员有多个通信地址，多个银行卡。反映到实体设计，便是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Member</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseDomain</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> String username;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@OneToMany</span></div><div class=\"line\">  <span class=\"keyword\">private</span> List&lt;MemberAddress&gt; memberAddresses;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@OneToMany</span></div><div class=\"line\">  <span class=\"keyword\">private</span> List&lt;BankCard&gt; bankCards;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，MemberAddress及BankCard都继承了BaseDomain。使用orm框架自带的级联功能，我们本可以查询出会员信息时，顺带查出其对应的通讯地址列表和银行卡列表。但现在不是那么的美好了，使用级联查询，可能会查询出已经被删除的MemberAddress，BankCard，只能在应用层进行deleteFlag的判断，从而过滤被删除的信息，这无法避免，因为框架不认识逻辑删除标识！</p>\n<p><strong>解决问题</strong>：这个问题和2.3节的问题，恰恰是促成我写这篇文章的初衷，这与DDD有着密不可分的关联。DDD将对象划分成了entity（实体）和value object（值对象）。如果仔细分析下上面的业务并且懂一点DDD，你会立刻意识到。Member对象就是一个entity，而MemberAddress以及BankCard则是value object（username也是value object）。value object的一个重要特点，就是作为entity的修饰，从业务角度出发，MemberAddress和BankCard的确是为了更好描述Member信息，而抽象出的一个集合。而value object的另一特性，不可变性，指导了我们，<strong>不应该让MemberAddress，BankCard继承BaseDomain</strong>。说了这么多，就是想从一个理论的高度，让那些设计一个新实体便继承BaseDomain的人戒掉这个习惯。在value object丧失了deleteFlag，lastUpdateDate等属性后，可能会引发一些的质疑，他们会声称：“数据库里面member_address这张表没有lastUpdateDate字段了，我再也无法得知这条会员地址最后修改的时间了!”。是的，从逻辑意义上看，地址并没有改变，而改变的只是会员自己的地址，这个UpdateDate字段在地址上极为不合理，应该是会员的修改。也就是说lastUpdateDate应该反映到Member上。实际的开发经验告诉我，从前那么多的value object继承了BaseDomain，99%不会使用到其中的相关属性，如果真的需要使用，那么请单独为类添加，而不是继承BaseDomain。其次这些人犯了另一个错误，我们设计一个系统时，应该是entity first，而不应该database first。DDD告诉我们一个软件开发的大忌，到现在2017年，仍然有大帮的人在问：“我要实现xxxx功能，我的数据库应该如何设计？”这些人犯了根本性的错误，就是把软件的目的搞错了，软件研究的是什么？是研究如何使用计算机来解决实际（领域）问题，而不是去研究数据应该如何保存更合理。我的公司中有不少的程序员新人，希望这番话能够帮助那些“步入歧途”的从业人员 “走上正路”。软件设计应该从“数据库驱动”走向“领域驱动”，而DDD的实践经验正是为设计和开发大型复杂的软件系统提供了实践指导。</p>\n<h4 id=\"2-3-乐观锁的尴尬地位\"><a href=\"#2-3-乐观锁的尴尬地位\" class=\"headerlink\" title=\"2.3 乐观锁的尴尬地位\"></a>2.3 乐观锁的尴尬地位</h4><p>再说回BaseDomain中的version字段，由于MemberAddress和BankCard这样的value object也被赋予了乐观锁的行为，这意味着加锁的粒度变小了。DDD的指导下，改动也可以理解为由Member这个根发出，统一由Member中的version来控制，这使锁的粒度变大了。换言之，从技术开发角度，对value object加上version可以允许同时（操作系统级别真正的同时）修改一个用户的地址信息和银行卡信息，甚至是多个银行卡中不同的银行卡，而单独由Member控制，则意味着，系统在同一时刻只能进行单独一项操作。在业务并发的一般角度上考虑，一个用户是不会出现多线程修改行为的。而从软件设计的角度，单独为value object 添加version，破坏了value object的不可变性，若要修改，应当是被整个替换。</p>\n<p><strong>解决方案</strong>：在一般情况下，请不要为value object添加乐观锁。如果有一个场景下，你的value object需要出现版本控制，那可能有两种情况：1 你的value object是压根不是value object，可能是一个entity 2 聚合根划分错误 ….这，要真是这样源头都弄错了，压根没法聊了对吧</p>\n<h2 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3 总结\"></a>3 总结</h2><p>BaseDomain这样的设计本身并不是我想要强调的重点，但是既然出现了BaseDomain这样的设计，那么它究竟应该被什么样的实体继承，就是需要被考虑的了。DDD下，识别aggregate root，entity，value object，是整个软件设计的核心点，在本文中，判别是否继承BaseDomain的前提，就是这个对象是entity，还是value object。大家都是存在数据库中的，但是地位是不一样的。</p>\n<p>本文若有什么不足之处，欢迎DDD爱好者指出。</p>"},{"title":"一些需要普及的项目规范","date":"2017-08-25T04:18:45.000Z","_content":"\n## 介绍\n好的开发规范不仅能够使得项目变得易维护，易升级。一些通用的规范可以参考《阿里巴巴java开发手册》\n本文档主要针对我们项目内部正在使用的框架提出一些开发规范，欢迎补充\n\n## 包结构规范\n\n以短信邮件项目（mail-sms）为例，介绍包结构命名规范。\n\n<!-- more -->![项目目录结构](/css/images/post/package1.png)\n\n短信邮件项目主要包含短信，邮件两个子模块\n\n【强制】 **包分层--通用**\n一般每个项目都包含下面六个模块，还有一些各自扩展的模块\n\n| api            | api-impl | app  | admin | web  | model |\n| -------------- | -------- | ---- | ----- | ---- | ----- |\n| api接口定义，用于暴露服务 | api接口实现  | 应用   | 后台页面  | 前台页面 | 实体    |\n\n关于项目结构的介绍可以参考《项目结构说明.md》,他们的包分层应当统一\n\n| 模块       | 包                        |\n| -------- | ------------------------ |\n| api      | sinosoftgz.message.api   |\n| api-impl | sinosoftgz.message.api   |\n| admin    | sinosoftgz.message.admin |\n| model    | sinosoftgz.message.model |\n| web      | sinosoftgz.message.web   |\n| app      | sinosoftgz.message.app   |\n\n格式如下：公司名.模块名.层次名\n包名应当尽量使用能够概括模块总体含义,单词义,单数,不包含特殊字符的单词\n【正例】: `sinosoftgz.message.admin`\n【反例】: `sinosoftgz.mailsms.admin` `sinosoftgz.mail.sms.admin`\n\n【推荐】**包分层--业务**\n当项目模块的职责较为复杂，且考虑到以后拓展的情况下，单个模块依旧包含着很多小的业务模块时，应当优先按照业务区分包名\n【正例】: \n```java\n    sinosoftgz.message.admin\n        config\n            模块公用Config.java\n        service\n            模块公用Service.java\n        web\n            模块公用Controller.java\n            IndexController.java\n        mail\n            config\n                MailConfig.java\n            service\n                Mail私有Service.java\n                MailTemplateService.java\n                MailMessageService.java\n            web\n                Mail私有Controller.java\n                MailTemplateController.java\n                MailMessageController.java\n        sms\n            config\n                Smsconfig.java\n            service\n                Sms私有Service.java\n                SmsTemplateService.java\n                SmsMessageService.java\n            web\n                Sms私有Controller.java\n                SmsTemplateController.java\n                SmsMessageController.java\n        MessageAdminApp.java\n```\n【反例】:\n```java\n    sinosoftgz.message.admin\n        config\n            模块公用Config.java\n        service\n            模块公用Service.java\n            mail\n                Mail私有Service.java\n                MailTemplateService.java\n                MailMessageService.java\n            sms\n                Sms私有Service.java\n                SmsTemplateService.java\n                SmsMessageService.java\n        web\n            模块公用Controller.java\n            IndexController.java\n            mail\n                Mail私有Controller.java\n                MailTemplateController.java\n                MailMessageController.java\n            sms\n                Sms私有Controller.java\n                SmsTemplateController.java\n                SmsMessageController.java\n        MailSmsAdminApp.java\n```\nservice和controller以及其他业务模块相关的包相隔太远，或者干脆全部丢到一个包内，单纯用前缀区分，会形成臃肿，充血的包结构。如果是项目结构较为单一，可以仅仅使用前缀区分；如果是项目中业务模块有明显的区分条件，应当单独作为一个包，用包名代表业务模块的含义。\n\n## 数据库规范\n【强制】必要的地方必须添加索引，如唯一索引，以及作为条件查询的列\n【强制】生产环境，uat环境，不允许使用`jpa.hibernate.ddl-auto: create`自动建表，每次ddl的修改需要保留脚本，统一管理\n【强制】业务数据不能使用deleteBy...而要使用逻辑删除setDelete(true),查询时，findByxxxAndisDelete(xxx,false)\n\n\n## ORM规范\n\n【强制】条件查询超过三个参数的，使用`criteriaQuery`，`predicates` 而不能使用springdata的findBy\n【正例】\n```java\npublic Page<MailTemplateConfig> findAll(MailTemplateConfig mailTemplateConfig, Pageable pageable) {\n        Specification querySpecification = (Specification<MailTemplateConfig>) (root, criteriaQuery, criteriaBuilder) -> {\n            List<Predicate> predicates = new ArrayList<>();\n            predicates.add(criteriaBuilder.isFalse(root.get(\"deleteFlag\")));\n            //级联查询mailTemplate\n            if (!Lang.isEmpty(mailTemplateConfig.getMailTemplate())) {\n                //短信模板名称\n                if (!Lang.isEmpty(mailTemplateConfig.getMailTemplate().getTemplateName())) {\n                    predicates.add(criteriaBuilder.like(root.join(\"mailTemplate\").get(\"templateName\"), String.format(\"%%%s%%\", mailTemplateConfig.getMailTemplate().getTemplateName())));\n                }\n                //短信模板类型\n                if (!Lang.isEmpty(mailTemplateConfig.getMailTemplate().getTemplateType())) {\n                    predicates.add(criteriaBuilder.equal(root.join(\"mailTemplate\").get(\"templateType\"), mailTemplateConfig.getMailTemplate().getTemplateType()));\n                }\n            }\n            //产品分类\n            if (!Lang.isEmpty(mailTemplateConfig.getProductType())) {\n                predicates.add(criteriaBuilder.equal(root.get(\"productType\"), mailTemplateConfig.getProductType()));\n            }\n            //客户类型\n            if (!Lang.isEmpty(mailTemplateConfig.getConsumerType())) {\n                predicates.add(criteriaBuilder.equal(root.get(\"consumerType\"), mailTemplateConfig.getConsumerType()));\n            }\n            return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));\n        };\n        return mailTemplateConfigRepos.findAll(querySpecification, pageable);\n    }\n```\n【说明】条件查询是admin模块不可避免的一个业务功能，使用`criteriaQuery`可以轻松的添加条件，使得代码容易维护，他也可以进行分页，排序，连表操作，充分发挥jpa面向对象的特性，使得业务开发变得快捷。\n【反例】\n\n```java\npublic Page<GatewayApiDefine> findAll(GatewayApiDefine gatewayApiDefine,Pageable pageable){\n        if(Lang.isEmpty(gatewayApiDefine.getRole())){\n            gatewayApiDefine.setRole(\"\");\n        }\n        if(Lang.isEmpty(gatewayApiDefine.getApiName())){\n            gatewayApiDefine.setApiName(\"\");\n        }\n        if(Lang.isEmpty(gatewayApiDefine.getEnabled())){\n            return gatewayApiDefineDao.findByRoleLikeAndApiNameLikeOrderByLastUpdatedDesc(\"%\"+gatewayApiDefine.getRole()+\"%\",\"%\"+gatewayApiDefine.getApiName()+\"%\",pageable);\n        }else{\n            return gatewayApiDefineDao.findByRoleLikeAndApiNameLikeAndEnabledOrderByLastUpdatedDesc(\"%\"+gatewayApiDefine.getRole()+\"%\",\"%\"+gatewayApiDefine.getApiName()+\"%\",gatewayApiDefine.getEnabled(),pageable);\n        }\n    }\n```\n【说明】在Dao层定义了大量的findBy方法，在Service写了过多的if else判断，导致业务逻辑不清晰\n\n## 禁止使用魔鬼数字\n\n【模型层与业务层】\n一些固定业务含义的代码可以使用枚举类型，或者final static常量表示，在设值时，不能直接使用不具备业务含义的数值。\n【正例】：使用final static常量: \n```java\n//实体类定义\n\t/**\n     * 发送设置标志\n     *\n     * @see sendFlag\n     */\n    public final static String SEND_FLAG_NOW = \"1\"; //立即发送\n    public final static String SEND_FLAG_DELAY = \"2\"; //预设时间发送\n\n    /**\n     * 发送成功标志\n     *\n     * @see sendSuccessFlag\n     */\n    public final static Map<String, String> SEND_SUCCESS_FLAG_MAP = new LinkedHashMap<>();\n    public final static String SEND_WAIT = \"0\";\n    public final static String SEND_SUCCESS = \"1\";\n    public final static String SEND_FAIL = \"2\";\n\n    static {\n        SEND_SUCCESS_FLAG_MAP.put(SEND_WAIT, \"未发送\");\n        SEND_SUCCESS_FLAG_MAP.put(SEND_SUCCESS, \"发送成功\");\n        SEND_SUCCESS_FLAG_MAP.put(SEND_FAIL, \"发送失败\");\n    }\n\t/**\n     * 发送设置标志 (1：立即发送 2：预设时间发送 )\n     */\n    @Column(columnDefinition = \"varchar(1) comment '发送设置标志'\")\n    protected String sendFlag;\n\n//业务代码赋值使用\nMailMessage mailMessage = new MailMessage();\nmailMessage.setSendSuccessFlag(MailMessage.SEND_WAIT);\nmailMessage.setValidStatus(MailMessage.VALID_WAIT);\nmailMessage.setCustom(true);\n```\n【反例】\n```java\n//实体类定义\n/**\n  * 发送设置标志 (1：立即发送 2：预设时间发送 )\n  */\n@Column(columnDefinition = \"varchar(1) comment '发送设置标志'\")\nprotected String sendFlag;\n//业务代码赋值使用\nMailMessage mailMessage = new MailMessage();\nmailMessage.setSendSuccessFlag(\"1\");\nmailMessage.setValidStatus(\"0\");\nmailMessage.setCustom(true);\n```\n【说明】魔鬼数字不能使代码一眼能够看明白到底赋的是什么值，并且，实体类发生变化后，可能会导致赋值错误，与预期赋值不符合且错误不容易被发现。\n\n【正例】：也可以使用枚举类型避免魔鬼数字\n\n```java\n\tprotected String productType;\n\n    protected String productName;\n\n    @Enumerated(EnumType.STRING)\n    protected ConsumerTypeEnum consumerType;\n\n    @Enumerated(EnumType.STRING)\n    protected PolicyTypeEnum policyType;\n\n    @Enumerated(EnumType.STRING)\n    protected ReceiverEnum receiver;\n    public enum ConsumerTypeEnum {\n        PERSONAL, ORGANIZATION;\n    \n        public String getLabel() {\n        switch (this) {\n        \tcase PERSONAL:\n        \t\treturn \"个人\";\n        \tcase ORGANIZATION:\n        \t\treturn \"团体\";\n        \tdefault:\n        \t\treturn \"\";\n        }\n      }\n    }\n```\n【视图层】\n例如，页面迭代select的option，不应该在view层判断，而应该在后台传入map在前台迭代\n【正例】：\n```java\nmodel.put(\"typeMap\",typeMap);\n\n模板类型：<select type=\"text\" name=\"templateType\">\n\t<option value=\"\">全部</option>\n\t<#list typeMap?keys as key>\n\t\t<option <#if ((mailTemplate.templateType!\"\")==key)>selected=\"selected\"</#if>value=\"${key}\">${typeMap[key]}</option>\n\t </#list>\n</select>\n```\n【反例】：\n```java\n模板类型：<select type=\"text\" name=\"templateType\">\n\t<option value=\"\">全部</option>\n\t<option <#if ${xxx.templateType!}==\"1\"\n\t\tselected=\"selected\"</#if> value=\"1\">承保通知</option>\n\t...\n\t<option <#if ${xxx.templateType!}==\"5\"\n\t\tselected=\"selected\"</#if> value=\"5\">核保通知</option>\n</select>\n```\n【说明】：否则修改后台代码后，前端页面也要修改，设计模式的原则，应当是修改一处，其他全部变化。且 1，2...,5的含义可能会变化，不能从页面得知value和option的含义是否对应。\n\n## 并发注意事项\n\n项目中会出现很多并发问题，要做到根据业务选择合适的并发解决方案，避免线程安全问题\n\n【强制】simpleDateFormat有并发问题，不能作为static类变量\n【反例】：\n这是我在某个项目模块中，发现的一段代码\n```java\nClass XxxController{\n\tpublic final static SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n\t\n\t@RequestMapping(\"/xxxx\")\n\tpublic String xxxx(String dateStr){\n\t\tXxxEntity xxxEntity = new XxxEntity();\n\t\txxxEntity.setDate(simpleDateFormat.parse(dateStr));\n\t\txxxDao.save(xxxEntity);\n\t\treturn \"xxx\";\n\t}\n}\n```\n【说明】SimpleDateFormat 是线程不安全的类，不能作为静态类变量给多线程并发访问。如果不了解多线程，可以将其作为实例变量，每次使用时都new一个出来使用。不过更推荐使用ThreadLocal来维护，减少new的开销。\n【正例】一个使用ThreadLocal维护SimpleDateFormat的线程安全的日期转换类：\n```java\npublic class ConcurrentDateUtil {\n\n    private static ThreadLocal<DateFormat> threadLocal = new ThreadLocal<DateFormat>() {\n        @Override\n        protected DateFormat initialValue() {\n            return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        }\n    };\n\n    public static Date parse(String dateStr) throws ParseException {\n        return threadLocal.get().parse(dateStr);\n    }\n\n    public static String format(Date date) {\n        return threadLocal.get().format(date);\n    }\n}\n```\n\n【推荐】名称唯一性校验出现的线程安全问题\n各个项目的admin模块在需求中经常会出现要求名称不能重复，即唯一性问题。通常在前台做ajax校验，后台使用`select count(1) from table_name where name=?`的方式查询数据库。这么做无可厚非，但是在极端的情况下，会出现并发问题。两个线程同时插入一条相同的name，如果没有做并发控制，会导致出现脏数据。如果仅仅是后台系统，那么没有必要加锁去避免，只需要对数据库加上唯一索引，并且再web层或者service层捕获数据异常即可。\n【正例】：\n\n```java\n//实体类添加唯一索引\n@Entity\n@Table(name = \"mns_mail_template\",\n        uniqueConstraints = {@UniqueConstraint(columnNames = {\"templateName\"})}\n)\npublic class MailTemplate extends AbstractTemplate {\n\t/**\n     * 模板名称\n     */\n    @Column(columnDefinition = \"varchar(160) comment '模板名称'\")\n    private String templateName;\n}\n\n//业务代码捕获异常\n@RequestMapping(value = {\"/saveOrUpdate\"}, method = RequestMethod.POST)\n    @ResponseBody\n    public AjaxResponseVo saveOrUpdate(MailTemplate mailTemplate) {\n        AjaxResponseVo ajaxResponseVo = new AjaxResponseVo(AjaxResponseVo.STATUS_CODE_SUCCESS, \"操作成功\", \"邮件模板定义\", AjaxResponseVo.CALLBACK_TYPE_CLOSE_CURRENT);\n        try {\n            //管理端新增时初始化一些数据\n            if (Lang.isEmpty(mailTemplate.getId())) {\n                mailTemplate.setValidStatus(MailTemplate.VALID_WAIT);\n            }\n            mailTemplateService.save(mailTemplate);\n        } catch (DataIntegrityViolationException ce) {\n            ajaxResponseVo.setStatusCode(AjaxResponseVo.STATUS_CODE_ERROR);\n            ajaxResponseVo.setMessage(\"模板名称已经存在\");\n            ajaxResponseVo.setCallbackType(null);\n            logger.error(ce.getMessage());\n        } catch (Exception e) {\n            ajaxResponseVo.setStatusCode(AjaxResponseVo.STATUS_CODE_ERROR);\n            ajaxResponseVo.setMessage(\"操作失败!\");\n            ajaxResponseVo.setCallbackType(null);\n            logger.error(e.getMessage(), e);\n        }\n        return ajaxResponseVo;\n    }\n```\n\n【说明】关于其他一些并发问题,如分布式锁，CAS，不仅仅是一篇文档能够讲解清楚的，需要对开发有很深的理解，我还记录了一些并发问题，仅供参考：[http://blog.csdn.net/u013815546/article/details/56481842](http://blog.csdn.net/u013815546/article/details/56481842%20%E6%B5%85%E6%9E%90%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91)\n\n## moton使用注意事项\n\n【注意】包的扫描\n\n每个模块都要扫描自身的项目结构\n```yaml\nmail-sms-admin:application.yml\n\nmotan:\n  client-group: sinosoftrpc\n  client-access-log: false\n  server-group: sinosoftrpc\n  server-access-log: false\n  export-port: ${random.int[9001,9999]}\n  zookeeper-host: 127.0.0.1:2181\n  annotaiong-package: sinosoftgz.message.admin\n```\napp模块由于将api-impl脱离出了自身的模块，通常还需要扫描api-impl的模块\n\n配置pom.xml依赖 \n\n```xml\n<dependency>\n\t<groupId>sinosoftgz</groupId>\n\t<artifactId>mail-sms-api-impl</artifactId>\n</dependency>\n```\n\n配置spring ioc扫描 AutoImportConfig.java\n\n```java\n@ComponentScans({\n        @ComponentScan(basePackages = {\"sinosoftgz.message.app\", \"sinosoftgz.message.api\"})\n})\n```\n\n配置motan扫描 mail-sms-app:application.yml\n\n```yaml\nmotan:\n  annotaiong-package: sinosoftgz.message.app,sinosoftgz.message.api\n  client-group: sinosoftrpc\n  client-access-log: true\n  server-group: sinosoftrpc\n  server-access-log: true\n  export-port: ${random.int[9001,9999]}\n  zookeeper-host: localhost:2181\n```\n\n【注意】motan跨模块传输实体类时懒加载失效\n遇到的时候注意一下，由于jpa，hibernate懒加载的问题，因为其内部使用动态代理去实现的懒加载，导致懒加载对象无法被正确的跨模块传输，此时需要进行深拷贝。\n【正例】：\n\n```java\n/**\n     * 深拷贝OrderMain对象，主要用于防止Hibernate序列化懒加载Session关闭问题\n     * <p/>\n     * //     * @param order\n     *\n     * @return\n     */\n    public OrderMain cpyOrder(OrderMain from, OrderMain to) {\n        OrderMain orderMainNew = to == null ? new OrderMain() : to;\n        Copys copys = Copys.create();\n        List<OrderItem> orderItemList = new ArrayList<>();\n        List<SubOrder> subOrders = new ArrayList<>();\n        List<OrderGift> orderGifts = new ArrayList<>();\n        List<OrderMainAttr> orderMainAttrs = new ArrayList<>();\n        OrderItem orderItemTmp;\n        SubOrder subOrderTmp;\n        OrderGift orderGiftTmp;\n        OrderMainAttr orderMainAttrTmp;\n        copys.from(from).excludes(\"orderItems\", \"subOrders\", \"orderGifts\", \"orderAttrs\").to(orderMainNew).clear();\n        if (!Lang.isEmpty(from.getOrderItems())) {\n            for (OrderItem i : from.getOrderItems()) {\n                orderItemTmp = new OrderItem();\n                copys.from(i).excludes(\"order\").to(orderItemTmp).clear();\n                orderItemTmp.setOrder(orderMainNew);\n                orderItemList.add(orderItemTmp);\n            }\n            orderMainNew.setOrderItems(orderItemList);\n        }\n        SubOrderItem subOrderItem;\n        List<SubOrderItem> subOrderItemList = new ArrayList<>();\n        if (from.getSubOrders() != null) {\n            for (SubOrder s : from.getSubOrders()) {\n                subOrderTmp = new SubOrder();\n                copys.from(s).excludes(\"order\", \"subOrderItems\").to(subOrderTmp).clear();\n                subOrderTmp.setOrder(from);\n                for (SubOrderItem soi : s.getSubOrderItems()) {\n                    subOrderItem = new SubOrderItem();\n                    copys.from(soi).excludes(\"order\", \"subOrder\", \"orderItem\").to(subOrderItem).clear();\n                    subOrderItem.setOrder(orderMainNew);\n                    subOrderItem.setSubOrder(subOrderTmp);\n                    subOrderItemList.add(subOrderItem);\n                    if (!Lang.isEmpty(soi.getOrderItem())) {\n                        for (OrderItem i : orderMainNew.getOrderItems()) {\n                            if (i.getId().equals(soi.getOrderItem().getId())) {\n                                subOrderItem.setOrderItem(soi.getOrderItem());\n                            } else {\n                                subOrderItem.setOrderItem(soi.getOrderItem());\n                            }\n                        }\n                    }\n                }\n                subOrderTmp.setSubOrderItems(subOrderItemList);\n                subOrders.add(subOrderTmp);\n            }\n            orderMainNew.setSubOrders(subOrders);\n        }\n        if (from.getOrderGifts() != null) {\n            for (OrderGift og : from.getOrderGifts()) {\n                orderGiftTmp = new OrderGift();\n              copys.from(og).excludes(\"order\").to(orderGiftTmp).clear();\n                orderGiftTmp.setOrder(orderMainNew);\n                orderGifts.add(orderGiftTmp);\n            }\n            orderMainNew.setOrderGifts(orderGifts);\n        }\n\n        if (from.getOrderAttrs() != null) {\n            for (OrderMainAttr attr : from.getOrderAttrs()) {\n                orderMainAttrTmp = new OrderMainAttr();\n                copys.from(attr).excludes(\"order\").to(orderMainAttrTmp).clear();\n                orderMainAttrTmp.setOrder(orderMainNew);\n                orderMainAttrs.add(orderMainAttrTmp);\n            }\n            orderMainNew.setOrderAttrs(orderMainAttrs);\n        }\n        return orderMainNew;\n    }\n```\n\n## 公用常量规范\n【强制】模块常量\n模块自身公用的常量放置于模块的Constants 类中，以final static的方式声明\n```java\npublic class Constants {\n    public static final String birthdayPattern = \"yyyy-MM-dd\"; //生日格式\n    public static final String inputTimePattern = \"yyyy-MM-dd HH:mm:ss\"; //录入时间格式\n\n    public static class PolicyType {\n        public static final String personal = \"0\"; //个单\n        public static final String group = \"1\"; //团单\n    }\n\n    public static class InsuredNature {\n        public static final String naturePerson = \"1\"; //自然人\n        public static final String artificialPerson = \"0\"; //法人\n    }\n\n    public static class InsuredIdentity {\n        public static final String myself = \"0\"; //本人\n    }\n\n    public static class JfeeFlag {\n        public static final String noFeeFlag = \"0\"; //非见费标志\n        public static final String feeFlag = \"1\"; //见费标志\n    }\n\n    public static class ItemKindFlag {\n        public static final String mainRiskFlag = \"1\"; //主险标志\n        public static final String additionalRiskFlag = \"2\"; //附加险标志\n        public static final String otherRiskFlag = \"3\"; //其它标志\n    }\n\n    public static class CalculateAmountFlag {\n        public static final String calculateFlag = \"Y\"; //计算保额标志\n        public static final String noCalculateFlag = \"N\"; //不计算保额标志\n    }\n\n    public static class LimitGrade {\n        public static final String policyLevel = \"1\"; //限额/免赔保单级别\n        public static final String clauseLevel = \"2\"; //限额/免赔条款级别\n    }\n\n    /**\n     * 批改类型\n     *\n     * 命名规则：对象（可选）+行为\n     */\n    public static class EndorType {\n        public static final String collectivePolicyInsuredModify = \"22\"; //团单变更被保险人\n        public static final String collectivePolicyInsuredAdd = \"Z1\"; //团单批增被保险人\n        public static final String collectivePolicyInsuredRemove = \"J1\"; //团单批减被保险人\n        public static final String surrender = \"04\"; //全单退保\n        public static final String withdraw = \"05\"; //注销\n        public static final String insurancePeriodModify = \"06\"; //平移保险期限\n        public static final String applicantModify = \"H01\"; //更改投保人\n        public static final String customerModify = \"50\"; //变更客户信息\n        public static final String insuredModify = \"29\"; //变更被保人职业\n        public static final String individualPolicyBeneficiaryModify = \"03\"; //变更受益人信息\n        public static final String engageModify = \"15\"; //变更特别约定\n        public static final String individualPolicyInsuredModify = \"77\";//个单变更被保人\n    }\n}\n```\n\nConstants类在一个限界上下文只能有一个，一个限界上下文包含了一整个业务模块（如policy-admin,policy-admin,policy-api,policy-model）\n构成一个限界上下文\n\n在Constants类中使用静态内部类尽量细化到常量的归属，不要散放\n\n【强制】项目常量\n项目公用的常量放置于util模块的GlobalContants类中，以内部类和final static的方式声明\n\n```java\npublic abstract class GlobalContants {\n\t/**\n     * 返回的状态\n     */\n    public class ResponseStatus{\n        public static final String SUCCESS = \"success\";//成功\n        public static final String ERROR = \"error\";//错误\n    }\n\n\t/**\n\t * 响应状态\n\t */\n    public class ResponseString{\n        public static final String STATUS = \"status\";//状态\n        public static final String ERROR_CODE = \"error\";// 错误代码\n        public static final String MESSAGE = \"message\";//消息\n        public static final String DATA = \"data\";//数据\n    }\n    ...\n}\n```\n\n## 领域模型规范\n\n### javabean规范\n（一些像驼峰命名法之类通用的规范就不说了，强调一些可能会犯错的规范）\n【强制】BigDecimal规范\n【说明】业务实体类中的与金额相关的变量统一使用BigDecimal,四则运算采用BigDecimal的相关api进行，\n做除法时需要额外注意保留精度的问题，否则可能会报异常，并且不易被测试出\n【正例】 \n```java\n    BigDecimal totalMoney = new BigDecimal(\"100.42\");\n    BigDecimal averageMoney = totalMoney.divide(new BigDecimal(\"22\"),2);\n```\n\n【强制】布尔类型规范\n【说明】所有的布尔类型不允许以is开头，否则会导致部分序列化，hibernate框架出现解析异常。\n【反例】\n原来项目的BaseDomain中标记逻辑删除的字段,在部分场景下会出现问题\n```java\n    @Column(name = \"is_delete\")\n    private Boolean isDelete = false;\n    \n    public Boolean getIsDelete() {\n            return isDelete;\n        }\n    \n    public void setIsDelete(Boolean isDelete) {\n        if(deleteFlag)\n            this.deleteDate = new Date();\n        this.isDelete = isDelete;\n    }\n```\n\ntips: 使用intellij idea的快捷键（for eclipse）alt+shift+r，\n或者菜单栏Refactor->Rename，可以重构字段名称\n【正例】\n```java\n    @Column(name = \"is_delete\")\n    private Boolean deleteFlag = false;\n```\n\n【推荐】装箱类型优于原生类型\n在业务代码中，更加推荐使用装箱类型Integer Double Boolean...\n【说明】在未设值的情况下，原生类型具有默认值，而装箱类型为null\n以Boolean类型为例，如果使用boolean，那么在未复制时，无法得知其到底是被赋值成了false，\n还是为赋值\n\n## 其他常用的领域模型\n首先理解各个常用的领域模型的含义：\n\n| 领域模型 | 全称                   | 中文含义   |\n| ---- | -------------------- | ------ |\n| DO   | Domain Object        | 领域对象   |\n| DTO  | Data Transfer Object | 数据传输对象 |\n| VO   | View Object          | 视图对象   |\n\n对于View Object，PO等等其他一些的对象不在此做要求，只说明一下常用的几个\nDO就是我们最常用的数据库持久对象，是OOP对于现实中的抽象，一般使用orm框架映射到数据库\nDTO这一层，目前我们的项目还没有投入使用，即将考虑投入使用，理论上来说，两个微服务模块是严禁共享数据库的\n所以A模块要查询B模块的数据，需要使用B模块app层暴露出来的api来查询，其中B模块返回的实体，不能是直接从数据库中\n查询出来的DO，而应该是DO转换而成的DTO。以及其他服务服务用语传输的变量，都叫做DTO\nVO就是常存在于视图层模板渲染使用的实体类\n\ntips：DO最特殊的一点在于，它拥有主键，而DTO不应该包含数据库的主键\n\n【推荐】领域模型命名规范\n【说明】由于DO这一层大家已经养成了习惯，不做要求了。DTO有些特殊，他常常与业务的传输对象相关，而不限于\n以DTO结尾，如xxxQuery也可以是DTO对象。VO对象推荐以VO结尾。注意：不要命名为Vo,Dto。\n\n","source":"_posts/一些需要普及的项目规范.md","raw":"---\ntitle: 一些需要普及的项目规范\ndate: 2017-08-25 12:18:45\ntags: \n- 代码规范\n- 技术杂谈\ncategories: 技术杂谈\n---\n\n## 介绍\n好的开发规范不仅能够使得项目变得易维护，易升级。一些通用的规范可以参考《阿里巴巴java开发手册》\n本文档主要针对我们项目内部正在使用的框架提出一些开发规范，欢迎补充\n\n## 包结构规范\n\n以短信邮件项目（mail-sms）为例，介绍包结构命名规范。\n\n<!-- more -->![项目目录结构](/css/images/post/package1.png)\n\n短信邮件项目主要包含短信，邮件两个子模块\n\n【强制】 **包分层--通用**\n一般每个项目都包含下面六个模块，还有一些各自扩展的模块\n\n| api            | api-impl | app  | admin | web  | model |\n| -------------- | -------- | ---- | ----- | ---- | ----- |\n| api接口定义，用于暴露服务 | api接口实现  | 应用   | 后台页面  | 前台页面 | 实体    |\n\n关于项目结构的介绍可以参考《项目结构说明.md》,他们的包分层应当统一\n\n| 模块       | 包                        |\n| -------- | ------------------------ |\n| api      | sinosoftgz.message.api   |\n| api-impl | sinosoftgz.message.api   |\n| admin    | sinosoftgz.message.admin |\n| model    | sinosoftgz.message.model |\n| web      | sinosoftgz.message.web   |\n| app      | sinosoftgz.message.app   |\n\n格式如下：公司名.模块名.层次名\n包名应当尽量使用能够概括模块总体含义,单词义,单数,不包含特殊字符的单词\n【正例】: `sinosoftgz.message.admin`\n【反例】: `sinosoftgz.mailsms.admin` `sinosoftgz.mail.sms.admin`\n\n【推荐】**包分层--业务**\n当项目模块的职责较为复杂，且考虑到以后拓展的情况下，单个模块依旧包含着很多小的业务模块时，应当优先按照业务区分包名\n【正例】: \n```java\n    sinosoftgz.message.admin\n        config\n            模块公用Config.java\n        service\n            模块公用Service.java\n        web\n            模块公用Controller.java\n            IndexController.java\n        mail\n            config\n                MailConfig.java\n            service\n                Mail私有Service.java\n                MailTemplateService.java\n                MailMessageService.java\n            web\n                Mail私有Controller.java\n                MailTemplateController.java\n                MailMessageController.java\n        sms\n            config\n                Smsconfig.java\n            service\n                Sms私有Service.java\n                SmsTemplateService.java\n                SmsMessageService.java\n            web\n                Sms私有Controller.java\n                SmsTemplateController.java\n                SmsMessageController.java\n        MessageAdminApp.java\n```\n【反例】:\n```java\n    sinosoftgz.message.admin\n        config\n            模块公用Config.java\n        service\n            模块公用Service.java\n            mail\n                Mail私有Service.java\n                MailTemplateService.java\n                MailMessageService.java\n            sms\n                Sms私有Service.java\n                SmsTemplateService.java\n                SmsMessageService.java\n        web\n            模块公用Controller.java\n            IndexController.java\n            mail\n                Mail私有Controller.java\n                MailTemplateController.java\n                MailMessageController.java\n            sms\n                Sms私有Controller.java\n                SmsTemplateController.java\n                SmsMessageController.java\n        MailSmsAdminApp.java\n```\nservice和controller以及其他业务模块相关的包相隔太远，或者干脆全部丢到一个包内，单纯用前缀区分，会形成臃肿，充血的包结构。如果是项目结构较为单一，可以仅仅使用前缀区分；如果是项目中业务模块有明显的区分条件，应当单独作为一个包，用包名代表业务模块的含义。\n\n## 数据库规范\n【强制】必要的地方必须添加索引，如唯一索引，以及作为条件查询的列\n【强制】生产环境，uat环境，不允许使用`jpa.hibernate.ddl-auto: create`自动建表，每次ddl的修改需要保留脚本，统一管理\n【强制】业务数据不能使用deleteBy...而要使用逻辑删除setDelete(true),查询时，findByxxxAndisDelete(xxx,false)\n\n\n## ORM规范\n\n【强制】条件查询超过三个参数的，使用`criteriaQuery`，`predicates` 而不能使用springdata的findBy\n【正例】\n```java\npublic Page<MailTemplateConfig> findAll(MailTemplateConfig mailTemplateConfig, Pageable pageable) {\n        Specification querySpecification = (Specification<MailTemplateConfig>) (root, criteriaQuery, criteriaBuilder) -> {\n            List<Predicate> predicates = new ArrayList<>();\n            predicates.add(criteriaBuilder.isFalse(root.get(\"deleteFlag\")));\n            //级联查询mailTemplate\n            if (!Lang.isEmpty(mailTemplateConfig.getMailTemplate())) {\n                //短信模板名称\n                if (!Lang.isEmpty(mailTemplateConfig.getMailTemplate().getTemplateName())) {\n                    predicates.add(criteriaBuilder.like(root.join(\"mailTemplate\").get(\"templateName\"), String.format(\"%%%s%%\", mailTemplateConfig.getMailTemplate().getTemplateName())));\n                }\n                //短信模板类型\n                if (!Lang.isEmpty(mailTemplateConfig.getMailTemplate().getTemplateType())) {\n                    predicates.add(criteriaBuilder.equal(root.join(\"mailTemplate\").get(\"templateType\"), mailTemplateConfig.getMailTemplate().getTemplateType()));\n                }\n            }\n            //产品分类\n            if (!Lang.isEmpty(mailTemplateConfig.getProductType())) {\n                predicates.add(criteriaBuilder.equal(root.get(\"productType\"), mailTemplateConfig.getProductType()));\n            }\n            //客户类型\n            if (!Lang.isEmpty(mailTemplateConfig.getConsumerType())) {\n                predicates.add(criteriaBuilder.equal(root.get(\"consumerType\"), mailTemplateConfig.getConsumerType()));\n            }\n            return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));\n        };\n        return mailTemplateConfigRepos.findAll(querySpecification, pageable);\n    }\n```\n【说明】条件查询是admin模块不可避免的一个业务功能，使用`criteriaQuery`可以轻松的添加条件，使得代码容易维护，他也可以进行分页，排序，连表操作，充分发挥jpa面向对象的特性，使得业务开发变得快捷。\n【反例】\n\n```java\npublic Page<GatewayApiDefine> findAll(GatewayApiDefine gatewayApiDefine,Pageable pageable){\n        if(Lang.isEmpty(gatewayApiDefine.getRole())){\n            gatewayApiDefine.setRole(\"\");\n        }\n        if(Lang.isEmpty(gatewayApiDefine.getApiName())){\n            gatewayApiDefine.setApiName(\"\");\n        }\n        if(Lang.isEmpty(gatewayApiDefine.getEnabled())){\n            return gatewayApiDefineDao.findByRoleLikeAndApiNameLikeOrderByLastUpdatedDesc(\"%\"+gatewayApiDefine.getRole()+\"%\",\"%\"+gatewayApiDefine.getApiName()+\"%\",pageable);\n        }else{\n            return gatewayApiDefineDao.findByRoleLikeAndApiNameLikeAndEnabledOrderByLastUpdatedDesc(\"%\"+gatewayApiDefine.getRole()+\"%\",\"%\"+gatewayApiDefine.getApiName()+\"%\",gatewayApiDefine.getEnabled(),pageable);\n        }\n    }\n```\n【说明】在Dao层定义了大量的findBy方法，在Service写了过多的if else判断，导致业务逻辑不清晰\n\n## 禁止使用魔鬼数字\n\n【模型层与业务层】\n一些固定业务含义的代码可以使用枚举类型，或者final static常量表示，在设值时，不能直接使用不具备业务含义的数值。\n【正例】：使用final static常量: \n```java\n//实体类定义\n\t/**\n     * 发送设置标志\n     *\n     * @see sendFlag\n     */\n    public final static String SEND_FLAG_NOW = \"1\"; //立即发送\n    public final static String SEND_FLAG_DELAY = \"2\"; //预设时间发送\n\n    /**\n     * 发送成功标志\n     *\n     * @see sendSuccessFlag\n     */\n    public final static Map<String, String> SEND_SUCCESS_FLAG_MAP = new LinkedHashMap<>();\n    public final static String SEND_WAIT = \"0\";\n    public final static String SEND_SUCCESS = \"1\";\n    public final static String SEND_FAIL = \"2\";\n\n    static {\n        SEND_SUCCESS_FLAG_MAP.put(SEND_WAIT, \"未发送\");\n        SEND_SUCCESS_FLAG_MAP.put(SEND_SUCCESS, \"发送成功\");\n        SEND_SUCCESS_FLAG_MAP.put(SEND_FAIL, \"发送失败\");\n    }\n\t/**\n     * 发送设置标志 (1：立即发送 2：预设时间发送 )\n     */\n    @Column(columnDefinition = \"varchar(1) comment '发送设置标志'\")\n    protected String sendFlag;\n\n//业务代码赋值使用\nMailMessage mailMessage = new MailMessage();\nmailMessage.setSendSuccessFlag(MailMessage.SEND_WAIT);\nmailMessage.setValidStatus(MailMessage.VALID_WAIT);\nmailMessage.setCustom(true);\n```\n【反例】\n```java\n//实体类定义\n/**\n  * 发送设置标志 (1：立即发送 2：预设时间发送 )\n  */\n@Column(columnDefinition = \"varchar(1) comment '发送设置标志'\")\nprotected String sendFlag;\n//业务代码赋值使用\nMailMessage mailMessage = new MailMessage();\nmailMessage.setSendSuccessFlag(\"1\");\nmailMessage.setValidStatus(\"0\");\nmailMessage.setCustom(true);\n```\n【说明】魔鬼数字不能使代码一眼能够看明白到底赋的是什么值，并且，实体类发生变化后，可能会导致赋值错误，与预期赋值不符合且错误不容易被发现。\n\n【正例】：也可以使用枚举类型避免魔鬼数字\n\n```java\n\tprotected String productType;\n\n    protected String productName;\n\n    @Enumerated(EnumType.STRING)\n    protected ConsumerTypeEnum consumerType;\n\n    @Enumerated(EnumType.STRING)\n    protected PolicyTypeEnum policyType;\n\n    @Enumerated(EnumType.STRING)\n    protected ReceiverEnum receiver;\n    public enum ConsumerTypeEnum {\n        PERSONAL, ORGANIZATION;\n    \n        public String getLabel() {\n        switch (this) {\n        \tcase PERSONAL:\n        \t\treturn \"个人\";\n        \tcase ORGANIZATION:\n        \t\treturn \"团体\";\n        \tdefault:\n        \t\treturn \"\";\n        }\n      }\n    }\n```\n【视图层】\n例如，页面迭代select的option，不应该在view层判断，而应该在后台传入map在前台迭代\n【正例】：\n```java\nmodel.put(\"typeMap\",typeMap);\n\n模板类型：<select type=\"text\" name=\"templateType\">\n\t<option value=\"\">全部</option>\n\t<#list typeMap?keys as key>\n\t\t<option <#if ((mailTemplate.templateType!\"\")==key)>selected=\"selected\"</#if>value=\"${key}\">${typeMap[key]}</option>\n\t </#list>\n</select>\n```\n【反例】：\n```java\n模板类型：<select type=\"text\" name=\"templateType\">\n\t<option value=\"\">全部</option>\n\t<option <#if ${xxx.templateType!}==\"1\"\n\t\tselected=\"selected\"</#if> value=\"1\">承保通知</option>\n\t...\n\t<option <#if ${xxx.templateType!}==\"5\"\n\t\tselected=\"selected\"</#if> value=\"5\">核保通知</option>\n</select>\n```\n【说明】：否则修改后台代码后，前端页面也要修改，设计模式的原则，应当是修改一处，其他全部变化。且 1，2...,5的含义可能会变化，不能从页面得知value和option的含义是否对应。\n\n## 并发注意事项\n\n项目中会出现很多并发问题，要做到根据业务选择合适的并发解决方案，避免线程安全问题\n\n【强制】simpleDateFormat有并发问题，不能作为static类变量\n【反例】：\n这是我在某个项目模块中，发现的一段代码\n```java\nClass XxxController{\n\tpublic final static SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n\t\n\t@RequestMapping(\"/xxxx\")\n\tpublic String xxxx(String dateStr){\n\t\tXxxEntity xxxEntity = new XxxEntity();\n\t\txxxEntity.setDate(simpleDateFormat.parse(dateStr));\n\t\txxxDao.save(xxxEntity);\n\t\treturn \"xxx\";\n\t}\n}\n```\n【说明】SimpleDateFormat 是线程不安全的类，不能作为静态类变量给多线程并发访问。如果不了解多线程，可以将其作为实例变量，每次使用时都new一个出来使用。不过更推荐使用ThreadLocal来维护，减少new的开销。\n【正例】一个使用ThreadLocal维护SimpleDateFormat的线程安全的日期转换类：\n```java\npublic class ConcurrentDateUtil {\n\n    private static ThreadLocal<DateFormat> threadLocal = new ThreadLocal<DateFormat>() {\n        @Override\n        protected DateFormat initialValue() {\n            return new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        }\n    };\n\n    public static Date parse(String dateStr) throws ParseException {\n        return threadLocal.get().parse(dateStr);\n    }\n\n    public static String format(Date date) {\n        return threadLocal.get().format(date);\n    }\n}\n```\n\n【推荐】名称唯一性校验出现的线程安全问题\n各个项目的admin模块在需求中经常会出现要求名称不能重复，即唯一性问题。通常在前台做ajax校验，后台使用`select count(1) from table_name where name=?`的方式查询数据库。这么做无可厚非，但是在极端的情况下，会出现并发问题。两个线程同时插入一条相同的name，如果没有做并发控制，会导致出现脏数据。如果仅仅是后台系统，那么没有必要加锁去避免，只需要对数据库加上唯一索引，并且再web层或者service层捕获数据异常即可。\n【正例】：\n\n```java\n//实体类添加唯一索引\n@Entity\n@Table(name = \"mns_mail_template\",\n        uniqueConstraints = {@UniqueConstraint(columnNames = {\"templateName\"})}\n)\npublic class MailTemplate extends AbstractTemplate {\n\t/**\n     * 模板名称\n     */\n    @Column(columnDefinition = \"varchar(160) comment '模板名称'\")\n    private String templateName;\n}\n\n//业务代码捕获异常\n@RequestMapping(value = {\"/saveOrUpdate\"}, method = RequestMethod.POST)\n    @ResponseBody\n    public AjaxResponseVo saveOrUpdate(MailTemplate mailTemplate) {\n        AjaxResponseVo ajaxResponseVo = new AjaxResponseVo(AjaxResponseVo.STATUS_CODE_SUCCESS, \"操作成功\", \"邮件模板定义\", AjaxResponseVo.CALLBACK_TYPE_CLOSE_CURRENT);\n        try {\n            //管理端新增时初始化一些数据\n            if (Lang.isEmpty(mailTemplate.getId())) {\n                mailTemplate.setValidStatus(MailTemplate.VALID_WAIT);\n            }\n            mailTemplateService.save(mailTemplate);\n        } catch (DataIntegrityViolationException ce) {\n            ajaxResponseVo.setStatusCode(AjaxResponseVo.STATUS_CODE_ERROR);\n            ajaxResponseVo.setMessage(\"模板名称已经存在\");\n            ajaxResponseVo.setCallbackType(null);\n            logger.error(ce.getMessage());\n        } catch (Exception e) {\n            ajaxResponseVo.setStatusCode(AjaxResponseVo.STATUS_CODE_ERROR);\n            ajaxResponseVo.setMessage(\"操作失败!\");\n            ajaxResponseVo.setCallbackType(null);\n            logger.error(e.getMessage(), e);\n        }\n        return ajaxResponseVo;\n    }\n```\n\n【说明】关于其他一些并发问题,如分布式锁，CAS，不仅仅是一篇文档能够讲解清楚的，需要对开发有很深的理解，我还记录了一些并发问题，仅供参考：[http://blog.csdn.net/u013815546/article/details/56481842](http://blog.csdn.net/u013815546/article/details/56481842%20%E6%B5%85%E6%9E%90%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91)\n\n## moton使用注意事项\n\n【注意】包的扫描\n\n每个模块都要扫描自身的项目结构\n```yaml\nmail-sms-admin:application.yml\n\nmotan:\n  client-group: sinosoftrpc\n  client-access-log: false\n  server-group: sinosoftrpc\n  server-access-log: false\n  export-port: ${random.int[9001,9999]}\n  zookeeper-host: 127.0.0.1:2181\n  annotaiong-package: sinosoftgz.message.admin\n```\napp模块由于将api-impl脱离出了自身的模块，通常还需要扫描api-impl的模块\n\n配置pom.xml依赖 \n\n```xml\n<dependency>\n\t<groupId>sinosoftgz</groupId>\n\t<artifactId>mail-sms-api-impl</artifactId>\n</dependency>\n```\n\n配置spring ioc扫描 AutoImportConfig.java\n\n```java\n@ComponentScans({\n        @ComponentScan(basePackages = {\"sinosoftgz.message.app\", \"sinosoftgz.message.api\"})\n})\n```\n\n配置motan扫描 mail-sms-app:application.yml\n\n```yaml\nmotan:\n  annotaiong-package: sinosoftgz.message.app,sinosoftgz.message.api\n  client-group: sinosoftrpc\n  client-access-log: true\n  server-group: sinosoftrpc\n  server-access-log: true\n  export-port: ${random.int[9001,9999]}\n  zookeeper-host: localhost:2181\n```\n\n【注意】motan跨模块传输实体类时懒加载失效\n遇到的时候注意一下，由于jpa，hibernate懒加载的问题，因为其内部使用动态代理去实现的懒加载，导致懒加载对象无法被正确的跨模块传输，此时需要进行深拷贝。\n【正例】：\n\n```java\n/**\n     * 深拷贝OrderMain对象，主要用于防止Hibernate序列化懒加载Session关闭问题\n     * <p/>\n     * //     * @param order\n     *\n     * @return\n     */\n    public OrderMain cpyOrder(OrderMain from, OrderMain to) {\n        OrderMain orderMainNew = to == null ? new OrderMain() : to;\n        Copys copys = Copys.create();\n        List<OrderItem> orderItemList = new ArrayList<>();\n        List<SubOrder> subOrders = new ArrayList<>();\n        List<OrderGift> orderGifts = new ArrayList<>();\n        List<OrderMainAttr> orderMainAttrs = new ArrayList<>();\n        OrderItem orderItemTmp;\n        SubOrder subOrderTmp;\n        OrderGift orderGiftTmp;\n        OrderMainAttr orderMainAttrTmp;\n        copys.from(from).excludes(\"orderItems\", \"subOrders\", \"orderGifts\", \"orderAttrs\").to(orderMainNew).clear();\n        if (!Lang.isEmpty(from.getOrderItems())) {\n            for (OrderItem i : from.getOrderItems()) {\n                orderItemTmp = new OrderItem();\n                copys.from(i).excludes(\"order\").to(orderItemTmp).clear();\n                orderItemTmp.setOrder(orderMainNew);\n                orderItemList.add(orderItemTmp);\n            }\n            orderMainNew.setOrderItems(orderItemList);\n        }\n        SubOrderItem subOrderItem;\n        List<SubOrderItem> subOrderItemList = new ArrayList<>();\n        if (from.getSubOrders() != null) {\n            for (SubOrder s : from.getSubOrders()) {\n                subOrderTmp = new SubOrder();\n                copys.from(s).excludes(\"order\", \"subOrderItems\").to(subOrderTmp).clear();\n                subOrderTmp.setOrder(from);\n                for (SubOrderItem soi : s.getSubOrderItems()) {\n                    subOrderItem = new SubOrderItem();\n                    copys.from(soi).excludes(\"order\", \"subOrder\", \"orderItem\").to(subOrderItem).clear();\n                    subOrderItem.setOrder(orderMainNew);\n                    subOrderItem.setSubOrder(subOrderTmp);\n                    subOrderItemList.add(subOrderItem);\n                    if (!Lang.isEmpty(soi.getOrderItem())) {\n                        for (OrderItem i : orderMainNew.getOrderItems()) {\n                            if (i.getId().equals(soi.getOrderItem().getId())) {\n                                subOrderItem.setOrderItem(soi.getOrderItem());\n                            } else {\n                                subOrderItem.setOrderItem(soi.getOrderItem());\n                            }\n                        }\n                    }\n                }\n                subOrderTmp.setSubOrderItems(subOrderItemList);\n                subOrders.add(subOrderTmp);\n            }\n            orderMainNew.setSubOrders(subOrders);\n        }\n        if (from.getOrderGifts() != null) {\n            for (OrderGift og : from.getOrderGifts()) {\n                orderGiftTmp = new OrderGift();\n              copys.from(og).excludes(\"order\").to(orderGiftTmp).clear();\n                orderGiftTmp.setOrder(orderMainNew);\n                orderGifts.add(orderGiftTmp);\n            }\n            orderMainNew.setOrderGifts(orderGifts);\n        }\n\n        if (from.getOrderAttrs() != null) {\n            for (OrderMainAttr attr : from.getOrderAttrs()) {\n                orderMainAttrTmp = new OrderMainAttr();\n                copys.from(attr).excludes(\"order\").to(orderMainAttrTmp).clear();\n                orderMainAttrTmp.setOrder(orderMainNew);\n                orderMainAttrs.add(orderMainAttrTmp);\n            }\n            orderMainNew.setOrderAttrs(orderMainAttrs);\n        }\n        return orderMainNew;\n    }\n```\n\n## 公用常量规范\n【强制】模块常量\n模块自身公用的常量放置于模块的Constants 类中，以final static的方式声明\n```java\npublic class Constants {\n    public static final String birthdayPattern = \"yyyy-MM-dd\"; //生日格式\n    public static final String inputTimePattern = \"yyyy-MM-dd HH:mm:ss\"; //录入时间格式\n\n    public static class PolicyType {\n        public static final String personal = \"0\"; //个单\n        public static final String group = \"1\"; //团单\n    }\n\n    public static class InsuredNature {\n        public static final String naturePerson = \"1\"; //自然人\n        public static final String artificialPerson = \"0\"; //法人\n    }\n\n    public static class InsuredIdentity {\n        public static final String myself = \"0\"; //本人\n    }\n\n    public static class JfeeFlag {\n        public static final String noFeeFlag = \"0\"; //非见费标志\n        public static final String feeFlag = \"1\"; //见费标志\n    }\n\n    public static class ItemKindFlag {\n        public static final String mainRiskFlag = \"1\"; //主险标志\n        public static final String additionalRiskFlag = \"2\"; //附加险标志\n        public static final String otherRiskFlag = \"3\"; //其它标志\n    }\n\n    public static class CalculateAmountFlag {\n        public static final String calculateFlag = \"Y\"; //计算保额标志\n        public static final String noCalculateFlag = \"N\"; //不计算保额标志\n    }\n\n    public static class LimitGrade {\n        public static final String policyLevel = \"1\"; //限额/免赔保单级别\n        public static final String clauseLevel = \"2\"; //限额/免赔条款级别\n    }\n\n    /**\n     * 批改类型\n     *\n     * 命名规则：对象（可选）+行为\n     */\n    public static class EndorType {\n        public static final String collectivePolicyInsuredModify = \"22\"; //团单变更被保险人\n        public static final String collectivePolicyInsuredAdd = \"Z1\"; //团单批增被保险人\n        public static final String collectivePolicyInsuredRemove = \"J1\"; //团单批减被保险人\n        public static final String surrender = \"04\"; //全单退保\n        public static final String withdraw = \"05\"; //注销\n        public static final String insurancePeriodModify = \"06\"; //平移保险期限\n        public static final String applicantModify = \"H01\"; //更改投保人\n        public static final String customerModify = \"50\"; //变更客户信息\n        public static final String insuredModify = \"29\"; //变更被保人职业\n        public static final String individualPolicyBeneficiaryModify = \"03\"; //变更受益人信息\n        public static final String engageModify = \"15\"; //变更特别约定\n        public static final String individualPolicyInsuredModify = \"77\";//个单变更被保人\n    }\n}\n```\n\nConstants类在一个限界上下文只能有一个，一个限界上下文包含了一整个业务模块（如policy-admin,policy-admin,policy-api,policy-model）\n构成一个限界上下文\n\n在Constants类中使用静态内部类尽量细化到常量的归属，不要散放\n\n【强制】项目常量\n项目公用的常量放置于util模块的GlobalContants类中，以内部类和final static的方式声明\n\n```java\npublic abstract class GlobalContants {\n\t/**\n     * 返回的状态\n     */\n    public class ResponseStatus{\n        public static final String SUCCESS = \"success\";//成功\n        public static final String ERROR = \"error\";//错误\n    }\n\n\t/**\n\t * 响应状态\n\t */\n    public class ResponseString{\n        public static final String STATUS = \"status\";//状态\n        public static final String ERROR_CODE = \"error\";// 错误代码\n        public static final String MESSAGE = \"message\";//消息\n        public static final String DATA = \"data\";//数据\n    }\n    ...\n}\n```\n\n## 领域模型规范\n\n### javabean规范\n（一些像驼峰命名法之类通用的规范就不说了，强调一些可能会犯错的规范）\n【强制】BigDecimal规范\n【说明】业务实体类中的与金额相关的变量统一使用BigDecimal,四则运算采用BigDecimal的相关api进行，\n做除法时需要额外注意保留精度的问题，否则可能会报异常，并且不易被测试出\n【正例】 \n```java\n    BigDecimal totalMoney = new BigDecimal(\"100.42\");\n    BigDecimal averageMoney = totalMoney.divide(new BigDecimal(\"22\"),2);\n```\n\n【强制】布尔类型规范\n【说明】所有的布尔类型不允许以is开头，否则会导致部分序列化，hibernate框架出现解析异常。\n【反例】\n原来项目的BaseDomain中标记逻辑删除的字段,在部分场景下会出现问题\n```java\n    @Column(name = \"is_delete\")\n    private Boolean isDelete = false;\n    \n    public Boolean getIsDelete() {\n            return isDelete;\n        }\n    \n    public void setIsDelete(Boolean isDelete) {\n        if(deleteFlag)\n            this.deleteDate = new Date();\n        this.isDelete = isDelete;\n    }\n```\n\ntips: 使用intellij idea的快捷键（for eclipse）alt+shift+r，\n或者菜单栏Refactor->Rename，可以重构字段名称\n【正例】\n```java\n    @Column(name = \"is_delete\")\n    private Boolean deleteFlag = false;\n```\n\n【推荐】装箱类型优于原生类型\n在业务代码中，更加推荐使用装箱类型Integer Double Boolean...\n【说明】在未设值的情况下，原生类型具有默认值，而装箱类型为null\n以Boolean类型为例，如果使用boolean，那么在未复制时，无法得知其到底是被赋值成了false，\n还是为赋值\n\n## 其他常用的领域模型\n首先理解各个常用的领域模型的含义：\n\n| 领域模型 | 全称                   | 中文含义   |\n| ---- | -------------------- | ------ |\n| DO   | Domain Object        | 领域对象   |\n| DTO  | Data Transfer Object | 数据传输对象 |\n| VO   | View Object          | 视图对象   |\n\n对于View Object，PO等等其他一些的对象不在此做要求，只说明一下常用的几个\nDO就是我们最常用的数据库持久对象，是OOP对于现实中的抽象，一般使用orm框架映射到数据库\nDTO这一层，目前我们的项目还没有投入使用，即将考虑投入使用，理论上来说，两个微服务模块是严禁共享数据库的\n所以A模块要查询B模块的数据，需要使用B模块app层暴露出来的api来查询，其中B模块返回的实体，不能是直接从数据库中\n查询出来的DO，而应该是DO转换而成的DTO。以及其他服务服务用语传输的变量，都叫做DTO\nVO就是常存在于视图层模板渲染使用的实体类\n\ntips：DO最特殊的一点在于，它拥有主键，而DTO不应该包含数据库的主键\n\n【推荐】领域模型命名规范\n【说明】由于DO这一层大家已经养成了习惯，不做要求了。DTO有些特殊，他常常与业务的传输对象相关，而不限于\n以DTO结尾，如xxxQuery也可以是DTO对象。VO对象推荐以VO结尾。注意：不要命名为Vo,Dto。\n\n","slug":"一些需要普及的项目规范","published":1,"updated":"2017-09-04T11:49:26.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zu60035twv7qka0ux5k","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>好的开发规范不仅能够使得项目变得易维护，易升级。一些通用的规范可以参考《阿里巴巴java开发手册》<br>本文档主要针对我们项目内部正在使用的框架提出一些开发规范，欢迎补充</p>\n<h2 id=\"包结构规范\"><a href=\"#包结构规范\" class=\"headerlink\" title=\"包结构规范\"></a>包结构规范</h2><p>以短信邮件项目（mail-sms）为例，介绍包结构命名规范。</p>\n<a id=\"more\"></a><img src=\"/css/images/post/package1.png\" alt=\"项目目录结构\"><br><br>短信邮件项目主要包含短信，邮件两个子模块<br><br>【强制】 <strong>包分层–通用</strong><br>一般每个项目都包含下面六个模块，还有一些各自扩展的模块<br><br>| api            | api-impl | app  | admin | web  | model |<br>| ————– | ——– | —- | —– | —- | —– |<br>| api接口定义，用于暴露服务 | api接口实现  | 应用   | 后台页面  | 前台页面 | 实体    |<br><br>关于项目结构的介绍可以参考《项目结构说明.md》,他们的包分层应当统一<br><br>| 模块       | 包                        |<br>| ——– | ———————— |<br>| api      | sinosoftgz.message.api   |<br>| api-impl | sinosoftgz.message.api   |<br>| admin    | sinosoftgz.message.admin |<br>| model    | sinosoftgz.message.model |<br>| web      | sinosoftgz.message.web   |<br>| app      | sinosoftgz.message.app   |<br><br>格式如下：公司名.模块名.层次名<br>包名应当尽量使用能够概括模块总体含义,单词义,单数,不包含特殊字符的单词<br>【正例】: <code>sinosoftgz.message.admin</code><br>【反例】: <code>sinosoftgz.mailsms.admin</code> <code>sinosoftgz.mail.sms.admin</code><br><br>【推荐】<strong>包分层–业务</strong><br>当项目模块的职责较为复杂，且考虑到以后拓展的情况下，单个模块依旧包含着很多小的业务模块时，应当优先按照业务区分包名<br>【正例】:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">sinosoftgz.message.admin</div><div class=\"line\">    config</div><div class=\"line\">        模块公用Config.java</div><div class=\"line\">    service</div><div class=\"line\">        模块公用Service.java</div><div class=\"line\">    web</div><div class=\"line\">        模块公用Controller.java</div><div class=\"line\">        IndexController.java</div><div class=\"line\">    mail</div><div class=\"line\">        config</div><div class=\"line\">            MailConfig.java</div><div class=\"line\">        service</div><div class=\"line\">            Mail私有Service.java</div><div class=\"line\">            MailTemplateService.java</div><div class=\"line\">            MailMessageService.java</div><div class=\"line\">        web</div><div class=\"line\">            Mail私有Controller.java</div><div class=\"line\">            MailTemplateController.java</div><div class=\"line\">            MailMessageController.java</div><div class=\"line\">    sms</div><div class=\"line\">        config</div><div class=\"line\">            Smsconfig.java</div><div class=\"line\">        service</div><div class=\"line\">            Sms私有Service.java</div><div class=\"line\">            SmsTemplateService.java</div><div class=\"line\">            SmsMessageService.java</div><div class=\"line\">        web</div><div class=\"line\">            Sms私有Controller.java</div><div class=\"line\">            SmsTemplateController.java</div><div class=\"line\">            SmsMessageController.java</div><div class=\"line\">    MessageAdminApp.java</div></pre></td></tr></table></figure>\n<p>【反例】:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">sinosoftgz.message.admin</div><div class=\"line\">    config</div><div class=\"line\">        模块公用Config.java</div><div class=\"line\">    service</div><div class=\"line\">        模块公用Service.java</div><div class=\"line\">        mail</div><div class=\"line\">            Mail私有Service.java</div><div class=\"line\">            MailTemplateService.java</div><div class=\"line\">            MailMessageService.java</div><div class=\"line\">        sms</div><div class=\"line\">            Sms私有Service.java</div><div class=\"line\">            SmsTemplateService.java</div><div class=\"line\">            SmsMessageService.java</div><div class=\"line\">    web</div><div class=\"line\">        模块公用Controller.java</div><div class=\"line\">        IndexController.java</div><div class=\"line\">        mail</div><div class=\"line\">            Mail私有Controller.java</div><div class=\"line\">            MailTemplateController.java</div><div class=\"line\">            MailMessageController.java</div><div class=\"line\">        sms</div><div class=\"line\">            Sms私有Controller.java</div><div class=\"line\">            SmsTemplateController.java</div><div class=\"line\">            SmsMessageController.java</div><div class=\"line\">    MailSmsAdminApp.java</div></pre></td></tr></table></figure></p>\n<p>service和controller以及其他业务模块相关的包相隔太远，或者干脆全部丢到一个包内，单纯用前缀区分，会形成臃肿，充血的包结构。如果是项目结构较为单一，可以仅仅使用前缀区分；如果是项目中业务模块有明显的区分条件，应当单独作为一个包，用包名代表业务模块的含义。</p>\n<h2 id=\"数据库规范\"><a href=\"#数据库规范\" class=\"headerlink\" title=\"数据库规范\"></a>数据库规范</h2><p>【强制】必要的地方必须添加索引，如唯一索引，以及作为条件查询的列<br>【强制】生产环境，uat环境，不允许使用<code>jpa.hibernate.ddl-auto: create</code>自动建表，每次ddl的修改需要保留脚本，统一管理<br>【强制】业务数据不能使用deleteBy…而要使用逻辑删除setDelete(true),查询时，findByxxxAndisDelete(xxx,false)</p>\n<h2 id=\"ORM规范\"><a href=\"#ORM规范\" class=\"headerlink\" title=\"ORM规范\"></a>ORM规范</h2><p>【强制】条件查询超过三个参数的，使用<code>criteriaQuery</code>，<code>predicates</code> 而不能使用springdata的findBy<br>【正例】<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Page&lt;MailTemplateConfig&gt; <span class=\"title\">findAll</span><span class=\"params\">(MailTemplateConfig mailTemplateConfig, Pageable pageable)</span> </span>&#123;</div><div class=\"line\">        Specification querySpecification = (Specification&lt;MailTemplateConfig&gt;) (root, criteriaQuery, criteriaBuilder) -&gt; &#123;</div><div class=\"line\">            List&lt;Predicate&gt; predicates = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">            predicates.add(criteriaBuilder.isFalse(root.get(<span class=\"string\">\"deleteFlag\"</span>)));</div><div class=\"line\">            <span class=\"comment\">//级联查询mailTemplate</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!Lang.isEmpty(mailTemplateConfig.getMailTemplate())) &#123;</div><div class=\"line\">                <span class=\"comment\">//短信模板名称</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!Lang.isEmpty(mailTemplateConfig.getMailTemplate().getTemplateName())) &#123;</div><div class=\"line\">                    predicates.add(criteriaBuilder.like(root.join(<span class=\"string\">\"mailTemplate\"</span>).get(<span class=\"string\">\"templateName\"</span>), String.format(<span class=\"string\">\"%%%s%%\"</span>, mailTemplateConfig.getMailTemplate().getTemplateName())));</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//短信模板类型</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!Lang.isEmpty(mailTemplateConfig.getMailTemplate().getTemplateType())) &#123;</div><div class=\"line\">                    predicates.add(criteriaBuilder.equal(root.join(<span class=\"string\">\"mailTemplate\"</span>).get(<span class=\"string\">\"templateType\"</span>), mailTemplateConfig.getMailTemplate().getTemplateType()));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//产品分类</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!Lang.isEmpty(mailTemplateConfig.getProductType())) &#123;</div><div class=\"line\">                predicates.add(criteriaBuilder.equal(root.get(<span class=\"string\">\"productType\"</span>), mailTemplateConfig.getProductType()));</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//客户类型</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!Lang.isEmpty(mailTemplateConfig.getConsumerType())) &#123;</div><div class=\"line\">                predicates.add(criteriaBuilder.equal(root.get(<span class=\"string\">\"consumerType\"</span>), mailTemplateConfig.getConsumerType()));</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> criteriaBuilder.and(predicates.toArray(<span class=\"keyword\">new</span> Predicate[predicates.size()]));</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> mailTemplateConfigRepos.findAll(querySpecification, pageable);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>【说明】条件查询是admin模块不可避免的一个业务功能，使用<code>criteriaQuery</code>可以轻松的添加条件，使得代码容易维护，他也可以进行分页，排序，连表操作，充分发挥jpa面向对象的特性，使得业务开发变得快捷。<br>【反例】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Page&lt;GatewayApiDefine&gt; <span class=\"title\">findAll</span><span class=\"params\">(GatewayApiDefine gatewayApiDefine,Pageable pageable)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(Lang.isEmpty(gatewayApiDefine.getRole()))&#123;</div><div class=\"line\">            gatewayApiDefine.setRole(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(Lang.isEmpty(gatewayApiDefine.getApiName()))&#123;</div><div class=\"line\">            gatewayApiDefine.setApiName(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(Lang.isEmpty(gatewayApiDefine.getEnabled()))&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> gatewayApiDefineDao.findByRoleLikeAndApiNameLikeOrderByLastUpdatedDesc(<span class=\"string\">\"%\"</span>+gatewayApiDefine.getRole()+<span class=\"string\">\"%\"</span>,<span class=\"string\">\"%\"</span>+gatewayApiDefine.getApiName()+<span class=\"string\">\"%\"</span>,pageable);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> gatewayApiDefineDao.findByRoleLikeAndApiNameLikeAndEnabledOrderByLastUpdatedDesc(<span class=\"string\">\"%\"</span>+gatewayApiDefine.getRole()+<span class=\"string\">\"%\"</span>,<span class=\"string\">\"%\"</span>+gatewayApiDefine.getApiName()+<span class=\"string\">\"%\"</span>,gatewayApiDefine.getEnabled(),pageable);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>【说明】在Dao层定义了大量的findBy方法，在Service写了过多的if else判断，导致业务逻辑不清晰</p>\n<h2 id=\"禁止使用魔鬼数字\"><a href=\"#禁止使用魔鬼数字\" class=\"headerlink\" title=\"禁止使用魔鬼数字\"></a>禁止使用魔鬼数字</h2><p>【模型层与业务层】<br>一些固定业务含义的代码可以使用枚举类型，或者final static常量表示，在设值时，不能直接使用不具备业务含义的数值。<br>【正例】：使用final static常量:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实体类定义</span></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 发送设置标志</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> sendFlag</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String SEND_FLAG_NOW = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//立即发送</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String SEND_FLAG_DELAY = <span class=\"string\">\"2\"</span>; <span class=\"comment\">//预设时间发送</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 发送成功标志</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> sendSuccessFlag</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; SEND_SUCCESS_FLAG_MAP = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String SEND_WAIT = <span class=\"string\">\"0\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String SEND_SUCCESS = <span class=\"string\">\"1\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String SEND_FAIL = <span class=\"string\">\"2\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        SEND_SUCCESS_FLAG_MAP.put(SEND_WAIT, <span class=\"string\">\"未发送\"</span>);</div><div class=\"line\">        SEND_SUCCESS_FLAG_MAP.put(SEND_SUCCESS, <span class=\"string\">\"发送成功\"</span>);</div><div class=\"line\">        SEND_SUCCESS_FLAG_MAP.put(SEND_FAIL, <span class=\"string\">\"发送失败\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 发送设置标志 (1：立即发送 2：预设时间发送 )</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Column</span>(columnDefinition = <span class=\"string\">\"varchar(1) comment '发送设置标志'\"</span>)</div><div class=\"line\">    <span class=\"keyword\">protected</span> String sendFlag;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//业务代码赋值使用</span></div><div class=\"line\">MailMessage mailMessage = <span class=\"keyword\">new</span> MailMessage();</div><div class=\"line\">mailMessage.setSendSuccessFlag(MailMessage.SEND_WAIT);</div><div class=\"line\">mailMessage.setValidStatus(MailMessage.VALID_WAIT);</div><div class=\"line\">mailMessage.setCustom(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>【反例】<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实体类定义</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">  * 发送设置标志 (1：立即发送 2：预设时间发送 )</span></div><div class=\"line\"><span class=\"comment\">  */</span></div><div class=\"line\"><span class=\"meta\">@Column</span>(columnDefinition = <span class=\"string\">\"varchar(1) comment '发送设置标志'\"</span>)</div><div class=\"line\"><span class=\"keyword\">protected</span> String sendFlag;</div><div class=\"line\"><span class=\"comment\">//业务代码赋值使用</span></div><div class=\"line\">MailMessage mailMessage = <span class=\"keyword\">new</span> MailMessage();</div><div class=\"line\">mailMessage.setSendSuccessFlag(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">mailMessage.setValidStatus(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">mailMessage.setCustom(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>【说明】魔鬼数字不能使代码一眼能够看明白到底赋的是什么值，并且，实体类发生变化后，可能会导致赋值错误，与预期赋值不符合且错误不容易被发现。</p>\n<p>【正例】：也可以使用枚举类型避免魔鬼数字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> String productType;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">protected</span> String productName;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Enumerated</span>(EnumType.STRING)</div><div class=\"line\">   <span class=\"keyword\">protected</span> ConsumerTypeEnum consumerType;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Enumerated</span>(EnumType.STRING)</div><div class=\"line\">   <span class=\"keyword\">protected</span> PolicyTypeEnum policyType;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Enumerated</span>(EnumType.STRING)</div><div class=\"line\">   <span class=\"keyword\">protected</span> ReceiverEnum receiver;</div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ConsumerTypeEnum &#123;</div><div class=\"line\">       PERSONAL, ORGANIZATION;</div><div class=\"line\">   </div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLabel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">       \t<span class=\"keyword\">case</span> PERSONAL:</div><div class=\"line\">       \t\t<span class=\"keyword\">return</span> <span class=\"string\">\"个人\"</span>;</div><div class=\"line\">       \t<span class=\"keyword\">case</span> ORGANIZATION:</div><div class=\"line\">       \t\t<span class=\"keyword\">return</span> <span class=\"string\">\"团体\"</span>;</div><div class=\"line\">       \t<span class=\"keyword\">default</span>:</div><div class=\"line\">       \t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>【视图层】<br>例如，页面迭代select的option，不应该在view层判断，而应该在后台传入map在前台迭代<br>【正例】：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.put(<span class=\"string\">\"typeMap\"</span>,typeMap);</div><div class=\"line\"></div><div class=\"line\">模板类型：&lt;select type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"templateType\"</span>&gt;</div><div class=\"line\">\t&lt;option value=\"\"&gt;全部&lt;/option&gt;</div><div class=\"line\">\t&lt;#list typeMap?keys as key&gt;</div><div class=\"line\">\t\t&lt;option &lt;#if ((mailTemplate.templateType!\"\")==key)&gt;selected=\"selected\"&lt;/#if&gt;value=\"$&#123;key&#125;\"&gt;$&#123;typeMap[key]&#125;&lt;/option&gt;</div><div class=\"line\">\t &lt;/#list&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>【反例】：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">模板类型：&lt;select type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"templateType\"</span>&gt;</div><div class=\"line\">\t&lt;option value=\"\"&gt;全部&lt;/option&gt;</div><div class=\"line\">\t&lt;option &lt;#if $&#123;xxx.templateType!&#125;==\"1\"</div><div class=\"line\">\t\tselected=\"selected\"&lt;/#if&gt; value=\"1\"&gt;承保通知&lt;/option&gt;</div><div class=\"line\">\t...</div><div class=\"line\">\t&lt;option &lt;#if $&#123;xxx.templateType!&#125;==\"5\"</div><div class=\"line\">\t\tselected=\"selected\"&lt;/#if&gt; value=\"5\"&gt;核保通知&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>【说明】：否则修改后台代码后，前端页面也要修改，设计模式的原则，应当是修改一处，其他全部变化。且 1，2…,5的含义可能会变化，不能从页面得知value和option的含义是否对应。</p>\n<h2 id=\"并发注意事项\"><a href=\"#并发注意事项\" class=\"headerlink\" title=\"并发注意事项\"></a>并发注意事项</h2><p>项目中会出现很多并发问题，要做到根据业务选择合适的并发解决方案，避免线程安全问题</p>\n<p>【强制】simpleDateFormat有并发问题，不能作为static类变量<br>【反例】：<br>这是我在某个项目模块中，发现的一段代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class XxxController&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/xxxx\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">xxxx</span><span class=\"params\">(String dateStr)</span></span>&#123;</div><div class=\"line\">\t\tXxxEntity xxxEntity = <span class=\"keyword\">new</span> XxxEntity();</div><div class=\"line\">\t\txxxEntity.setDate(simpleDateFormat.parse(dateStr));</div><div class=\"line\">\t\txxxDao.save(xxxEntity);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"xxx\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>【说明】SimpleDateFormat 是线程不安全的类，不能作为静态类变量给多线程并发访问。如果不了解多线程，可以将其作为实例变量，每次使用时都new一个出来使用。不过更推荐使用ThreadLocal来维护，减少new的开销。<br>【正例】一个使用ThreadLocal维护SimpleDateFormat的线程安全的日期转换类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcurrentDateUtil</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;DateFormat&gt; threadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> DateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title\">parse</span><span class=\"params\">(String dateStr)</span> <span class=\"keyword\">throws</span> ParseException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> threadLocal.get().parse(dateStr);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">format</span><span class=\"params\">(Date date)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> threadLocal.get().format(date);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>【推荐】名称唯一性校验出现的线程安全问题<br>各个项目的admin模块在需求中经常会出现要求名称不能重复，即唯一性问题。通常在前台做ajax校验，后台使用<code>select count(1) from table_name where name=?</code>的方式查询数据库。这么做无可厚非，但是在极端的情况下，会出现并发问题。两个线程同时插入一条相同的name，如果没有做并发控制，会导致出现脏数据。如果仅仅是后台系统，那么没有必要加锁去避免，只需要对数据库加上唯一索引，并且再web层或者service层捕获数据异常即可。<br>【正例】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实体类添加唯一索引</span></div><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"mns_mail_template\"</span>,</div><div class=\"line\">        uniqueConstraints = &#123;<span class=\"meta\">@UniqueConstraint</span>(columnNames = &#123;<span class=\"string\">\"templateName\"</span>&#125;)&#125;</div><div class=\"line\">)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTemplate</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 模板名称</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Column</span>(columnDefinition = <span class=\"string\">\"varchar(160) comment '模板名称'\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String templateName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//业务代码捕获异常</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = &#123;<span class=\"string\">\"/saveOrUpdate\"</span>&#125;, method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AjaxResponseVo <span class=\"title\">saveOrUpdate</span><span class=\"params\">(MailTemplate mailTemplate)</span> </span>&#123;</div><div class=\"line\">        AjaxResponseVo ajaxResponseVo = <span class=\"keyword\">new</span> AjaxResponseVo(AjaxResponseVo.STATUS_CODE_SUCCESS, <span class=\"string\">\"操作成功\"</span>, <span class=\"string\">\"邮件模板定义\"</span>, AjaxResponseVo.CALLBACK_TYPE_CLOSE_CURRENT);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//管理端新增时初始化一些数据</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Lang.isEmpty(mailTemplate.getId())) &#123;</div><div class=\"line\">                mailTemplate.setValidStatus(MailTemplate.VALID_WAIT);</div><div class=\"line\">            &#125;</div><div class=\"line\">            mailTemplateService.save(mailTemplate);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DataIntegrityViolationException ce) &#123;</div><div class=\"line\">            ajaxResponseVo.setStatusCode(AjaxResponseVo.STATUS_CODE_ERROR);</div><div class=\"line\">            ajaxResponseVo.setMessage(<span class=\"string\">\"模板名称已经存在\"</span>);</div><div class=\"line\">            ajaxResponseVo.setCallbackType(<span class=\"keyword\">null</span>);</div><div class=\"line\">            logger.error(ce.getMessage());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            ajaxResponseVo.setStatusCode(AjaxResponseVo.STATUS_CODE_ERROR);</div><div class=\"line\">            ajaxResponseVo.setMessage(<span class=\"string\">\"操作失败!\"</span>);</div><div class=\"line\">            ajaxResponseVo.setCallbackType(<span class=\"keyword\">null</span>);</div><div class=\"line\">            logger.error(e.getMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> ajaxResponseVo;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>【说明】关于其他一些并发问题,如分布式锁，CAS，不仅仅是一篇文档能够讲解清楚的，需要对开发有很深的理解，我还记录了一些并发问题，仅供参考：<a href=\"http://blog.csdn.net/u013815546/article/details/56481842%20%E6%B5%85%E6%9E%90%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u013815546/article/details/56481842</a></p>\n<h2 id=\"moton使用注意事项\"><a href=\"#moton使用注意事项\" class=\"headerlink\" title=\"moton使用注意事项\"></a>moton使用注意事项</h2><p>【注意】包的扫描</p>\n<p>每个模块都要扫描自身的项目结构<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">mail-sms-admin:</span><span class=\"string\">application.yml</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">motan:</span></div><div class=\"line\"><span class=\"attr\">  client-group:</span> <span class=\"string\">sinosoftrpc</span></div><div class=\"line\"><span class=\"attr\">  client-access-log:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  server-group:</span> <span class=\"string\">sinosoftrpc</span></div><div class=\"line\"><span class=\"attr\">  server-access-log:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  export-port:</span> <span class=\"string\">$&#123;random.int[9001,9999]&#125;</span></div><div class=\"line\"><span class=\"attr\">  zookeeper-host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:2181</span></div><div class=\"line\"><span class=\"attr\">  annotaiong-package:</span> <span class=\"string\">sinosoftgz.message.admin</span></div></pre></td></tr></table></figure></p>\n<p>app模块由于将api-impl脱离出了自身的模块，通常还需要扫描api-impl的模块</p>\n<p>配置pom.xml依赖 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>sinosoftgz<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mail-sms-api-impl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>配置spring ioc扫描 AutoImportConfig.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ComponentScans</span>(&#123;</div><div class=\"line\">        <span class=\"meta\">@ComponentScan</span>(basePackages = &#123;<span class=\"string\">\"sinosoftgz.message.app\"</span>, <span class=\"string\">\"sinosoftgz.message.api\"</span>&#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>配置motan扫描 mail-sms-app:application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">motan:</span></div><div class=\"line\"><span class=\"attr\">  annotaiong-package:</span> <span class=\"string\">sinosoftgz.message.app,sinosoftgz.message.api</span></div><div class=\"line\"><span class=\"attr\">  client-group:</span> <span class=\"string\">sinosoftrpc</span></div><div class=\"line\"><span class=\"attr\">  client-access-log:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  server-group:</span> <span class=\"string\">sinosoftrpc</span></div><div class=\"line\"><span class=\"attr\">  server-access-log:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  export-port:</span> <span class=\"string\">$&#123;random.int[9001,9999]&#125;</span></div><div class=\"line\"><span class=\"attr\">  zookeeper-host:</span> <span class=\"attr\">localhost:2181</span></div></pre></td></tr></table></figure>\n<p>【注意】motan跨模块传输实体类时懒加载失效<br>遇到的时候注意一下，由于jpa，hibernate懒加载的问题，因为其内部使用动态代理去实现的懒加载，导致懒加载对象无法被正确的跨模块传输，此时需要进行深拷贝。<br>【正例】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 深拷贝OrderMain对象，主要用于防止Hibernate序列化懒加载Session关闭问题</span></div><div class=\"line\"><span class=\"comment\">     * &lt;p/&gt;</span></div><div class=\"line\"><span class=\"comment\">     * //     * <span class=\"doctag\">@param</span> order</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OrderMain <span class=\"title\">cpyOrder</span><span class=\"params\">(OrderMain from, OrderMain to)</span> </span>&#123;</div><div class=\"line\">        OrderMain orderMainNew = to == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> OrderMain() : to;</div><div class=\"line\">        Copys copys = Copys.create();</div><div class=\"line\">        List&lt;OrderItem&gt; orderItemList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        List&lt;SubOrder&gt; subOrders = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        List&lt;OrderGift&gt; orderGifts = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        List&lt;OrderMainAttr&gt; orderMainAttrs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        OrderItem orderItemTmp;</div><div class=\"line\">        SubOrder subOrderTmp;</div><div class=\"line\">        OrderGift orderGiftTmp;</div><div class=\"line\">        OrderMainAttr orderMainAttrTmp;</div><div class=\"line\">        copys.from(from).excludes(<span class=\"string\">\"orderItems\"</span>, <span class=\"string\">\"subOrders\"</span>, <span class=\"string\">\"orderGifts\"</span>, <span class=\"string\">\"orderAttrs\"</span>).to(orderMainNew).clear();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Lang.isEmpty(from.getOrderItems())) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (OrderItem i : from.getOrderItems()) &#123;</div><div class=\"line\">                orderItemTmp = <span class=\"keyword\">new</span> OrderItem();</div><div class=\"line\">                copys.from(i).excludes(<span class=\"string\">\"order\"</span>).to(orderItemTmp).clear();</div><div class=\"line\">                orderItemTmp.setOrder(orderMainNew);</div><div class=\"line\">                orderItemList.add(orderItemTmp);</div><div class=\"line\">            &#125;</div><div class=\"line\">            orderMainNew.setOrderItems(orderItemList);</div><div class=\"line\">        &#125;</div><div class=\"line\">        SubOrderItem subOrderItem;</div><div class=\"line\">        List&lt;SubOrderItem&gt; subOrderItemList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">if</span> (from.getSubOrders() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (SubOrder s : from.getSubOrders()) &#123;</div><div class=\"line\">                subOrderTmp = <span class=\"keyword\">new</span> SubOrder();</div><div class=\"line\">                copys.from(s).excludes(<span class=\"string\">\"order\"</span>, <span class=\"string\">\"subOrderItems\"</span>).to(subOrderTmp).clear();</div><div class=\"line\">                subOrderTmp.setOrder(from);</div><div class=\"line\">                <span class=\"keyword\">for</span> (SubOrderItem soi : s.getSubOrderItems()) &#123;</div><div class=\"line\">                    subOrderItem = <span class=\"keyword\">new</span> SubOrderItem();</div><div class=\"line\">                    copys.from(soi).excludes(<span class=\"string\">\"order\"</span>, <span class=\"string\">\"subOrder\"</span>, <span class=\"string\">\"orderItem\"</span>).to(subOrderItem).clear();</div><div class=\"line\">                    subOrderItem.setOrder(orderMainNew);</div><div class=\"line\">                    subOrderItem.setSubOrder(subOrderTmp);</div><div class=\"line\">                    subOrderItemList.add(subOrderItem);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!Lang.isEmpty(soi.getOrderItem())) &#123;</div><div class=\"line\">                        <span class=\"keyword\">for</span> (OrderItem i : orderMainNew.getOrderItems()) &#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (i.getId().equals(soi.getOrderItem().getId())) &#123;</div><div class=\"line\">                                subOrderItem.setOrderItem(soi.getOrderItem());</div><div class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                                subOrderItem.setOrderItem(soi.getOrderItem());</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                subOrderTmp.setSubOrderItems(subOrderItemList);</div><div class=\"line\">                subOrders.add(subOrderTmp);</div><div class=\"line\">            &#125;</div><div class=\"line\">            orderMainNew.setSubOrders(subOrders);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (from.getOrderGifts() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (OrderGift og : from.getOrderGifts()) &#123;</div><div class=\"line\">                orderGiftTmp = <span class=\"keyword\">new</span> OrderGift();</div><div class=\"line\">              copys.from(og).excludes(<span class=\"string\">\"order\"</span>).to(orderGiftTmp).clear();</div><div class=\"line\">                orderGiftTmp.setOrder(orderMainNew);</div><div class=\"line\">                orderGifts.add(orderGiftTmp);</div><div class=\"line\">            &#125;</div><div class=\"line\">            orderMainNew.setOrderGifts(orderGifts);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (from.getOrderAttrs() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (OrderMainAttr attr : from.getOrderAttrs()) &#123;</div><div class=\"line\">                orderMainAttrTmp = <span class=\"keyword\">new</span> OrderMainAttr();</div><div class=\"line\">                copys.from(attr).excludes(<span class=\"string\">\"order\"</span>).to(orderMainAttrTmp).clear();</div><div class=\"line\">                orderMainAttrTmp.setOrder(orderMainNew);</div><div class=\"line\">                orderMainAttrs.add(orderMainAttrTmp);</div><div class=\"line\">            &#125;</div><div class=\"line\">            orderMainNew.setOrderAttrs(orderMainAttrs);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> orderMainNew;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"公用常量规范\"><a href=\"#公用常量规范\" class=\"headerlink\" title=\"公用常量规范\"></a>公用常量规范</h2><p>【强制】模块常量<br>模块自身公用的常量放置于模块的Constants 类中，以final static的方式声明<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Constants</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String birthdayPattern = <span class=\"string\">\"yyyy-MM-dd\"</span>; <span class=\"comment\">//生日格式</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String inputTimePattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>; <span class=\"comment\">//录入时间格式</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolicyType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String personal = <span class=\"string\">\"0\"</span>; <span class=\"comment\">//个单</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String group = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//团单</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsuredNature</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String naturePerson = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//自然人</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String artificialPerson = <span class=\"string\">\"0\"</span>; <span class=\"comment\">//法人</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsuredIdentity</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String myself = <span class=\"string\">\"0\"</span>; <span class=\"comment\">//本人</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JfeeFlag</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String noFeeFlag = <span class=\"string\">\"0\"</span>; <span class=\"comment\">//非见费标志</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String feeFlag = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//见费标志</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemKindFlag</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String mainRiskFlag = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//主险标志</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String additionalRiskFlag = <span class=\"string\">\"2\"</span>; <span class=\"comment\">//附加险标志</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String otherRiskFlag = <span class=\"string\">\"3\"</span>; <span class=\"comment\">//其它标志</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateAmountFlag</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String calculateFlag = <span class=\"string\">\"Y\"</span>; <span class=\"comment\">//计算保额标志</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String noCalculateFlag = <span class=\"string\">\"N\"</span>; <span class=\"comment\">//不计算保额标志</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LimitGrade</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String policyLevel = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//限额/免赔保单级别</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String clauseLevel = <span class=\"string\">\"2\"</span>; <span class=\"comment\">//限额/免赔条款级别</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 批改类型</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * 命名规则：对象（可选）+行为</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EndorType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String collectivePolicyInsuredModify = <span class=\"string\">\"22\"</span>; <span class=\"comment\">//团单变更被保险人</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String collectivePolicyInsuredAdd = <span class=\"string\">\"Z1\"</span>; <span class=\"comment\">//团单批增被保险人</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String collectivePolicyInsuredRemove = <span class=\"string\">\"J1\"</span>; <span class=\"comment\">//团单批减被保险人</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String surrender = <span class=\"string\">\"04\"</span>; <span class=\"comment\">//全单退保</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String withdraw = <span class=\"string\">\"05\"</span>; <span class=\"comment\">//注销</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String insurancePeriodModify = <span class=\"string\">\"06\"</span>; <span class=\"comment\">//平移保险期限</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String applicantModify = <span class=\"string\">\"H01\"</span>; <span class=\"comment\">//更改投保人</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String customerModify = <span class=\"string\">\"50\"</span>; <span class=\"comment\">//变更客户信息</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String insuredModify = <span class=\"string\">\"29\"</span>; <span class=\"comment\">//变更被保人职业</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String individualPolicyBeneficiaryModify = <span class=\"string\">\"03\"</span>; <span class=\"comment\">//变更受益人信息</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String engageModify = <span class=\"string\">\"15\"</span>; <span class=\"comment\">//变更特别约定</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String individualPolicyInsuredModify = <span class=\"string\">\"77\"</span>;<span class=\"comment\">//个单变更被保人</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Constants类在一个限界上下文只能有一个，一个限界上下文包含了一整个业务模块（如policy-admin,policy-admin,policy-api,policy-model）<br>构成一个限界上下文</p>\n<p>在Constants类中使用静态内部类尽量细化到常量的归属，不要散放</p>\n<p>【强制】项目常量<br>项目公用的常量放置于util模块的GlobalContants类中，以内部类和final static的方式声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalContants</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 返回的状态</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseStatus</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SUCCESS = <span class=\"string\">\"success\"</span>;<span class=\"comment\">//成功</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ERROR = <span class=\"string\">\"error\"</span>;<span class=\"comment\">//错误</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 响应状态</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseString</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String STATUS = <span class=\"string\">\"status\"</span>;<span class=\"comment\">//状态</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ERROR_CODE = <span class=\"string\">\"error\"</span>;<span class=\"comment\">// 错误代码</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MESSAGE = <span class=\"string\">\"message\"</span>;<span class=\"comment\">//消息</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DATA = <span class=\"string\">\"data\"</span>;<span class=\"comment\">//数据</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"领域模型规范\"><a href=\"#领域模型规范\" class=\"headerlink\" title=\"领域模型规范\"></a>领域模型规范</h2><h3 id=\"javabean规范\"><a href=\"#javabean规范\" class=\"headerlink\" title=\"javabean规范\"></a>javabean规范</h3><p>（一些像驼峰命名法之类通用的规范就不说了，强调一些可能会犯错的规范）<br>【强制】BigDecimal规范<br>【说明】业务实体类中的与金额相关的变量统一使用BigDecimal,四则运算采用BigDecimal的相关api进行，<br>做除法时需要额外注意保留精度的问题，否则可能会报异常，并且不易被测试出<br>【正例】<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">BigDecimal totalMoney = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"100.42\"</span>);</div><div class=\"line\">BigDecimal averageMoney = totalMoney.divide(<span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"22\"</span>),<span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<p>【强制】布尔类型规范<br>【说明】所有的布尔类型不允许以is开头，否则会导致部分序列化，hibernate框架出现解析异常。<br>【反例】<br>原来项目的BaseDomain中标记逻辑删除的字段,在部分场景下会出现问题<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Column</span>(name = <span class=\"string\">\"is_delete\"</span>)</div><div class=\"line\"><span class=\"keyword\">private</span> Boolean isDelete = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">getIsDelete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> isDelete;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsDelete</span><span class=\"params\">(Boolean isDelete)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(deleteFlag)</div><div class=\"line\">        <span class=\"keyword\">this</span>.deleteDate = <span class=\"keyword\">new</span> Date();</div><div class=\"line\">    <span class=\"keyword\">this</span>.isDelete = isDelete;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>tips: 使用intellij idea的快捷键（for eclipse）alt+shift+r，<br>或者菜单栏Refactor-&gt;Rename，可以重构字段名称<br>【正例】<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Column</span>(name = <span class=\"string\">\"is_delete\"</span>)</div><div class=\"line\"><span class=\"keyword\">private</span> Boolean deleteFlag = <span class=\"keyword\">false</span>;</div></pre></td></tr></table></figure></p>\n<p>【推荐】装箱类型优于原生类型<br>在业务代码中，更加推荐使用装箱类型Integer Double Boolean…<br>【说明】在未设值的情况下，原生类型具有默认值，而装箱类型为null<br>以Boolean类型为例，如果使用boolean，那么在未复制时，无法得知其到底是被赋值成了false，<br>还是为赋值</p>\n<h2 id=\"其他常用的领域模型\"><a href=\"#其他常用的领域模型\" class=\"headerlink\" title=\"其他常用的领域模型\"></a>其他常用的领域模型</h2><p>首先理解各个常用的领域模型的含义：</p>\n<table>\n<thead>\n<tr>\n<th>领域模型</th>\n<th>全称</th>\n<th>中文含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DO</td>\n<td>Domain Object</td>\n<td>领域对象</td>\n</tr>\n<tr>\n<td>DTO</td>\n<td>Data Transfer Object</td>\n<td>数据传输对象</td>\n</tr>\n<tr>\n<td>VO</td>\n<td>View Object</td>\n<td>视图对象</td>\n</tr>\n</tbody>\n</table>\n<p>对于View Object，PO等等其他一些的对象不在此做要求，只说明一下常用的几个<br>DO就是我们最常用的数据库持久对象，是OOP对于现实中的抽象，一般使用orm框架映射到数据库<br>DTO这一层，目前我们的项目还没有投入使用，即将考虑投入使用，理论上来说，两个微服务模块是严禁共享数据库的<br>所以A模块要查询B模块的数据，需要使用B模块app层暴露出来的api来查询，其中B模块返回的实体，不能是直接从数据库中<br>查询出来的DO，而应该是DO转换而成的DTO。以及其他服务服务用语传输的变量，都叫做DTO<br>VO就是常存在于视图层模板渲染使用的实体类</p>\n<p>tips：DO最特殊的一点在于，它拥有主键，而DTO不应该包含数据库的主键</p>\n<p>【推荐】领域模型命名规范<br>【说明】由于DO这一层大家已经养成了习惯，不做要求了。DTO有些特殊，他常常与业务的传输对象相关，而不限于<br>以DTO结尾，如xxxQuery也可以是DTO对象。VO对象推荐以VO结尾。注意：不要命名为Vo,Dto。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>好的开发规范不仅能够使得项目变得易维护，易升级。一些通用的规范可以参考《阿里巴巴java开发手册》<br>本文档主要针对我们项目内部正在使用的框架提出一些开发规范，欢迎补充</p>\n<h2 id=\"包结构规范\"><a href=\"#包结构规范\" class=\"headerlink\" title=\"包结构规范\"></a>包结构规范</h2><p>以短信邮件项目（mail-sms）为例，介绍包结构命名规范。</p>","more":"<img src=\"/css/images/post/package1.png\" alt=\"项目目录结构\"><br><br>短信邮件项目主要包含短信，邮件两个子模块<br><br>【强制】 <strong>包分层–通用</strong><br>一般每个项目都包含下面六个模块，还有一些各自扩展的模块<br><br>| api            | api-impl | app  | admin | web  | model |<br>| ————– | ——– | —- | —– | —- | —– |<br>| api接口定义，用于暴露服务 | api接口实现  | 应用   | 后台页面  | 前台页面 | 实体    |<br><br>关于项目结构的介绍可以参考《项目结构说明.md》,他们的包分层应当统一<br><br>| 模块       | 包                        |<br>| ——– | ———————— |<br>| api      | sinosoftgz.message.api   |<br>| api-impl | sinosoftgz.message.api   |<br>| admin    | sinosoftgz.message.admin |<br>| model    | sinosoftgz.message.model |<br>| web      | sinosoftgz.message.web   |<br>| app      | sinosoftgz.message.app   |<br><br>格式如下：公司名.模块名.层次名<br>包名应当尽量使用能够概括模块总体含义,单词义,单数,不包含特殊字符的单词<br>【正例】: <code>sinosoftgz.message.admin</code><br>【反例】: <code>sinosoftgz.mailsms.admin</code> <code>sinosoftgz.mail.sms.admin</code><br><br>【推荐】<strong>包分层–业务</strong><br>当项目模块的职责较为复杂，且考虑到以后拓展的情况下，单个模块依旧包含着很多小的业务模块时，应当优先按照业务区分包名<br>【正例】:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">sinosoftgz.message.admin</div><div class=\"line\">    config</div><div class=\"line\">        模块公用Config.java</div><div class=\"line\">    service</div><div class=\"line\">        模块公用Service.java</div><div class=\"line\">    web</div><div class=\"line\">        模块公用Controller.java</div><div class=\"line\">        IndexController.java</div><div class=\"line\">    mail</div><div class=\"line\">        config</div><div class=\"line\">            MailConfig.java</div><div class=\"line\">        service</div><div class=\"line\">            Mail私有Service.java</div><div class=\"line\">            MailTemplateService.java</div><div class=\"line\">            MailMessageService.java</div><div class=\"line\">        web</div><div class=\"line\">            Mail私有Controller.java</div><div class=\"line\">            MailTemplateController.java</div><div class=\"line\">            MailMessageController.java</div><div class=\"line\">    sms</div><div class=\"line\">        config</div><div class=\"line\">            Smsconfig.java</div><div class=\"line\">        service</div><div class=\"line\">            Sms私有Service.java</div><div class=\"line\">            SmsTemplateService.java</div><div class=\"line\">            SmsMessageService.java</div><div class=\"line\">        web</div><div class=\"line\">            Sms私有Controller.java</div><div class=\"line\">            SmsTemplateController.java</div><div class=\"line\">            SmsMessageController.java</div><div class=\"line\">    MessageAdminApp.java</div></pre></td></tr></table></figure>\n<p>【反例】:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">sinosoftgz.message.admin</div><div class=\"line\">    config</div><div class=\"line\">        模块公用Config.java</div><div class=\"line\">    service</div><div class=\"line\">        模块公用Service.java</div><div class=\"line\">        mail</div><div class=\"line\">            Mail私有Service.java</div><div class=\"line\">            MailTemplateService.java</div><div class=\"line\">            MailMessageService.java</div><div class=\"line\">        sms</div><div class=\"line\">            Sms私有Service.java</div><div class=\"line\">            SmsTemplateService.java</div><div class=\"line\">            SmsMessageService.java</div><div class=\"line\">    web</div><div class=\"line\">        模块公用Controller.java</div><div class=\"line\">        IndexController.java</div><div class=\"line\">        mail</div><div class=\"line\">            Mail私有Controller.java</div><div class=\"line\">            MailTemplateController.java</div><div class=\"line\">            MailMessageController.java</div><div class=\"line\">        sms</div><div class=\"line\">            Sms私有Controller.java</div><div class=\"line\">            SmsTemplateController.java</div><div class=\"line\">            SmsMessageController.java</div><div class=\"line\">    MailSmsAdminApp.java</div></pre></td></tr></table></figure></p>\n<p>service和controller以及其他业务模块相关的包相隔太远，或者干脆全部丢到一个包内，单纯用前缀区分，会形成臃肿，充血的包结构。如果是项目结构较为单一，可以仅仅使用前缀区分；如果是项目中业务模块有明显的区分条件，应当单独作为一个包，用包名代表业务模块的含义。</p>\n<h2 id=\"数据库规范\"><a href=\"#数据库规范\" class=\"headerlink\" title=\"数据库规范\"></a>数据库规范</h2><p>【强制】必要的地方必须添加索引，如唯一索引，以及作为条件查询的列<br>【强制】生产环境，uat环境，不允许使用<code>jpa.hibernate.ddl-auto: create</code>自动建表，每次ddl的修改需要保留脚本，统一管理<br>【强制】业务数据不能使用deleteBy…而要使用逻辑删除setDelete(true),查询时，findByxxxAndisDelete(xxx,false)</p>\n<h2 id=\"ORM规范\"><a href=\"#ORM规范\" class=\"headerlink\" title=\"ORM规范\"></a>ORM规范</h2><p>【强制】条件查询超过三个参数的，使用<code>criteriaQuery</code>，<code>predicates</code> 而不能使用springdata的findBy<br>【正例】<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Page&lt;MailTemplateConfig&gt; <span class=\"title\">findAll</span><span class=\"params\">(MailTemplateConfig mailTemplateConfig, Pageable pageable)</span> </span>&#123;</div><div class=\"line\">        Specification querySpecification = (Specification&lt;MailTemplateConfig&gt;) (root, criteriaQuery, criteriaBuilder) -&gt; &#123;</div><div class=\"line\">            List&lt;Predicate&gt; predicates = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">            predicates.add(criteriaBuilder.isFalse(root.get(<span class=\"string\">\"deleteFlag\"</span>)));</div><div class=\"line\">            <span class=\"comment\">//级联查询mailTemplate</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!Lang.isEmpty(mailTemplateConfig.getMailTemplate())) &#123;</div><div class=\"line\">                <span class=\"comment\">//短信模板名称</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!Lang.isEmpty(mailTemplateConfig.getMailTemplate().getTemplateName())) &#123;</div><div class=\"line\">                    predicates.add(criteriaBuilder.like(root.join(<span class=\"string\">\"mailTemplate\"</span>).get(<span class=\"string\">\"templateName\"</span>), String.format(<span class=\"string\">\"%%%s%%\"</span>, mailTemplateConfig.getMailTemplate().getTemplateName())));</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//短信模板类型</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!Lang.isEmpty(mailTemplateConfig.getMailTemplate().getTemplateType())) &#123;</div><div class=\"line\">                    predicates.add(criteriaBuilder.equal(root.join(<span class=\"string\">\"mailTemplate\"</span>).get(<span class=\"string\">\"templateType\"</span>), mailTemplateConfig.getMailTemplate().getTemplateType()));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//产品分类</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!Lang.isEmpty(mailTemplateConfig.getProductType())) &#123;</div><div class=\"line\">                predicates.add(criteriaBuilder.equal(root.get(<span class=\"string\">\"productType\"</span>), mailTemplateConfig.getProductType()));</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//客户类型</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (!Lang.isEmpty(mailTemplateConfig.getConsumerType())) &#123;</div><div class=\"line\">                predicates.add(criteriaBuilder.equal(root.get(<span class=\"string\">\"consumerType\"</span>), mailTemplateConfig.getConsumerType()));</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> criteriaBuilder.and(predicates.toArray(<span class=\"keyword\">new</span> Predicate[predicates.size()]));</div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">return</span> mailTemplateConfigRepos.findAll(querySpecification, pageable);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>【说明】条件查询是admin模块不可避免的一个业务功能，使用<code>criteriaQuery</code>可以轻松的添加条件，使得代码容易维护，他也可以进行分页，排序，连表操作，充分发挥jpa面向对象的特性，使得业务开发变得快捷。<br>【反例】</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Page&lt;GatewayApiDefine&gt; <span class=\"title\">findAll</span><span class=\"params\">(GatewayApiDefine gatewayApiDefine,Pageable pageable)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(Lang.isEmpty(gatewayApiDefine.getRole()))&#123;</div><div class=\"line\">            gatewayApiDefine.setRole(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(Lang.isEmpty(gatewayApiDefine.getApiName()))&#123;</div><div class=\"line\">            gatewayApiDefine.setApiName(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(Lang.isEmpty(gatewayApiDefine.getEnabled()))&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> gatewayApiDefineDao.findByRoleLikeAndApiNameLikeOrderByLastUpdatedDesc(<span class=\"string\">\"%\"</span>+gatewayApiDefine.getRole()+<span class=\"string\">\"%\"</span>,<span class=\"string\">\"%\"</span>+gatewayApiDefine.getApiName()+<span class=\"string\">\"%\"</span>,pageable);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> gatewayApiDefineDao.findByRoleLikeAndApiNameLikeAndEnabledOrderByLastUpdatedDesc(<span class=\"string\">\"%\"</span>+gatewayApiDefine.getRole()+<span class=\"string\">\"%\"</span>,<span class=\"string\">\"%\"</span>+gatewayApiDefine.getApiName()+<span class=\"string\">\"%\"</span>,gatewayApiDefine.getEnabled(),pageable);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>【说明】在Dao层定义了大量的findBy方法，在Service写了过多的if else判断，导致业务逻辑不清晰</p>\n<h2 id=\"禁止使用魔鬼数字\"><a href=\"#禁止使用魔鬼数字\" class=\"headerlink\" title=\"禁止使用魔鬼数字\"></a>禁止使用魔鬼数字</h2><p>【模型层与业务层】<br>一些固定业务含义的代码可以使用枚举类型，或者final static常量表示，在设值时，不能直接使用不具备业务含义的数值。<br>【正例】：使用final static常量:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实体类定义</span></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 发送设置标志</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> sendFlag</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String SEND_FLAG_NOW = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//立即发送</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String SEND_FLAG_DELAY = <span class=\"string\">\"2\"</span>; <span class=\"comment\">//预设时间发送</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 发送成功标志</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> sendSuccessFlag</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; SEND_SUCCESS_FLAG_MAP = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String SEND_WAIT = <span class=\"string\">\"0\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String SEND_SUCCESS = <span class=\"string\">\"1\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String SEND_FAIL = <span class=\"string\">\"2\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;</div><div class=\"line\">        SEND_SUCCESS_FLAG_MAP.put(SEND_WAIT, <span class=\"string\">\"未发送\"</span>);</div><div class=\"line\">        SEND_SUCCESS_FLAG_MAP.put(SEND_SUCCESS, <span class=\"string\">\"发送成功\"</span>);</div><div class=\"line\">        SEND_SUCCESS_FLAG_MAP.put(SEND_FAIL, <span class=\"string\">\"发送失败\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 发送设置标志 (1：立即发送 2：预设时间发送 )</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Column</span>(columnDefinition = <span class=\"string\">\"varchar(1) comment '发送设置标志'\"</span>)</div><div class=\"line\">    <span class=\"keyword\">protected</span> String sendFlag;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//业务代码赋值使用</span></div><div class=\"line\">MailMessage mailMessage = <span class=\"keyword\">new</span> MailMessage();</div><div class=\"line\">mailMessage.setSendSuccessFlag(MailMessage.SEND_WAIT);</div><div class=\"line\">mailMessage.setValidStatus(MailMessage.VALID_WAIT);</div><div class=\"line\">mailMessage.setCustom(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>【反例】<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实体类定义</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">  * 发送设置标志 (1：立即发送 2：预设时间发送 )</span></div><div class=\"line\"><span class=\"comment\">  */</span></div><div class=\"line\"><span class=\"meta\">@Column</span>(columnDefinition = <span class=\"string\">\"varchar(1) comment '发送设置标志'\"</span>)</div><div class=\"line\"><span class=\"keyword\">protected</span> String sendFlag;</div><div class=\"line\"><span class=\"comment\">//业务代码赋值使用</span></div><div class=\"line\">MailMessage mailMessage = <span class=\"keyword\">new</span> MailMessage();</div><div class=\"line\">mailMessage.setSendSuccessFlag(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">mailMessage.setValidStatus(<span class=\"string\">\"0\"</span>);</div><div class=\"line\">mailMessage.setCustom(<span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>【说明】魔鬼数字不能使代码一眼能够看明白到底赋的是什么值，并且，实体类发生变化后，可能会导致赋值错误，与预期赋值不符合且错误不容易被发现。</p>\n<p>【正例】：也可以使用枚举类型避免魔鬼数字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> String productType;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">protected</span> String productName;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Enumerated</span>(EnumType.STRING)</div><div class=\"line\">   <span class=\"keyword\">protected</span> ConsumerTypeEnum consumerType;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Enumerated</span>(EnumType.STRING)</div><div class=\"line\">   <span class=\"keyword\">protected</span> PolicyTypeEnum policyType;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Enumerated</span>(EnumType.STRING)</div><div class=\"line\">   <span class=\"keyword\">protected</span> ReceiverEnum receiver;</div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ConsumerTypeEnum &#123;</div><div class=\"line\">       PERSONAL, ORGANIZATION;</div><div class=\"line\">   </div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getLabel</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">       \t<span class=\"keyword\">case</span> PERSONAL:</div><div class=\"line\">       \t\t<span class=\"keyword\">return</span> <span class=\"string\">\"个人\"</span>;</div><div class=\"line\">       \t<span class=\"keyword\">case</span> ORGANIZATION:</div><div class=\"line\">       \t\t<span class=\"keyword\">return</span> <span class=\"string\">\"团体\"</span>;</div><div class=\"line\">       \t<span class=\"keyword\">default</span>:</div><div class=\"line\">       \t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>【视图层】<br>例如，页面迭代select的option，不应该在view层判断，而应该在后台传入map在前台迭代<br>【正例】：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">model.put(<span class=\"string\">\"typeMap\"</span>,typeMap);</div><div class=\"line\"></div><div class=\"line\">模板类型：&lt;select type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"templateType\"</span>&gt;</div><div class=\"line\">\t&lt;option value=\"\"&gt;全部&lt;/option&gt;</div><div class=\"line\">\t&lt;#list typeMap?keys as key&gt;</div><div class=\"line\">\t\t&lt;option &lt;#if ((mailTemplate.templateType!\"\")==key)&gt;selected=\"selected\"&lt;/#if&gt;value=\"$&#123;key&#125;\"&gt;$&#123;typeMap[key]&#125;&lt;/option&gt;</div><div class=\"line\">\t &lt;/#list&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>【反例】：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">模板类型：&lt;select type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"templateType\"</span>&gt;</div><div class=\"line\">\t&lt;option value=\"\"&gt;全部&lt;/option&gt;</div><div class=\"line\">\t&lt;option &lt;#if $&#123;xxx.templateType!&#125;==\"1\"</div><div class=\"line\">\t\tselected=\"selected\"&lt;/#if&gt; value=\"1\"&gt;承保通知&lt;/option&gt;</div><div class=\"line\">\t...</div><div class=\"line\">\t&lt;option &lt;#if $&#123;xxx.templateType!&#125;==\"5\"</div><div class=\"line\">\t\tselected=\"selected\"&lt;/#if&gt; value=\"5\"&gt;核保通知&lt;/option&gt;</div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<p>【说明】：否则修改后台代码后，前端页面也要修改，设计模式的原则，应当是修改一处，其他全部变化。且 1，2…,5的含义可能会变化，不能从页面得知value和option的含义是否对应。</p>\n<h2 id=\"并发注意事项\"><a href=\"#并发注意事项\" class=\"headerlink\" title=\"并发注意事项\"></a>并发注意事项</h2><p>项目中会出现很多并发问题，要做到根据业务选择合适的并发解决方案，避免线程安全问题</p>\n<p>【强制】simpleDateFormat有并发问题，不能作为static类变量<br>【反例】：<br>这是我在某个项目模块中，发现的一段代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class XxxController&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/xxxx\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">xxxx</span><span class=\"params\">(String dateStr)</span></span>&#123;</div><div class=\"line\">\t\tXxxEntity xxxEntity = <span class=\"keyword\">new</span> XxxEntity();</div><div class=\"line\">\t\txxxEntity.setDate(simpleDateFormat.parse(dateStr));</div><div class=\"line\">\t\txxxDao.save(xxxEntity);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"xxx\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>【说明】SimpleDateFormat 是线程不安全的类，不能作为静态类变量给多线程并发访问。如果不了解多线程，可以将其作为实例变量，每次使用时都new一个出来使用。不过更推荐使用ThreadLocal来维护，减少new的开销。<br>【正例】一个使用ThreadLocal维护SimpleDateFormat的线程安全的日期转换类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcurrentDateUtil</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ThreadLocal&lt;DateFormat&gt; threadLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> DateFormat <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title\">parse</span><span class=\"params\">(String dateStr)</span> <span class=\"keyword\">throws</span> ParseException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> threadLocal.get().parse(dateStr);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">format</span><span class=\"params\">(Date date)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> threadLocal.get().format(date);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>【推荐】名称唯一性校验出现的线程安全问题<br>各个项目的admin模块在需求中经常会出现要求名称不能重复，即唯一性问题。通常在前台做ajax校验，后台使用<code>select count(1) from table_name where name=?</code>的方式查询数据库。这么做无可厚非，但是在极端的情况下，会出现并发问题。两个线程同时插入一条相同的name，如果没有做并发控制，会导致出现脏数据。如果仅仅是后台系统，那么没有必要加锁去避免，只需要对数据库加上唯一索引，并且再web层或者service层捕获数据异常即可。<br>【正例】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实体类添加唯一索引</span></div><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"mns_mail_template\"</span>,</div><div class=\"line\">        uniqueConstraints = &#123;<span class=\"meta\">@UniqueConstraint</span>(columnNames = &#123;<span class=\"string\">\"templateName\"</span>&#125;)&#125;</div><div class=\"line\">)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MailTemplate</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTemplate</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 模板名称</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Column</span>(columnDefinition = <span class=\"string\">\"varchar(160) comment '模板名称'\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String templateName;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//业务代码捕获异常</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = &#123;<span class=\"string\">\"/saveOrUpdate\"</span>&#125;, method = RequestMethod.POST)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AjaxResponseVo <span class=\"title\">saveOrUpdate</span><span class=\"params\">(MailTemplate mailTemplate)</span> </span>&#123;</div><div class=\"line\">        AjaxResponseVo ajaxResponseVo = <span class=\"keyword\">new</span> AjaxResponseVo(AjaxResponseVo.STATUS_CODE_SUCCESS, <span class=\"string\">\"操作成功\"</span>, <span class=\"string\">\"邮件模板定义\"</span>, AjaxResponseVo.CALLBACK_TYPE_CLOSE_CURRENT);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//管理端新增时初始化一些数据</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Lang.isEmpty(mailTemplate.getId())) &#123;</div><div class=\"line\">                mailTemplate.setValidStatus(MailTemplate.VALID_WAIT);</div><div class=\"line\">            &#125;</div><div class=\"line\">            mailTemplateService.save(mailTemplate);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DataIntegrityViolationException ce) &#123;</div><div class=\"line\">            ajaxResponseVo.setStatusCode(AjaxResponseVo.STATUS_CODE_ERROR);</div><div class=\"line\">            ajaxResponseVo.setMessage(<span class=\"string\">\"模板名称已经存在\"</span>);</div><div class=\"line\">            ajaxResponseVo.setCallbackType(<span class=\"keyword\">null</span>);</div><div class=\"line\">            logger.error(ce.getMessage());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            ajaxResponseVo.setStatusCode(AjaxResponseVo.STATUS_CODE_ERROR);</div><div class=\"line\">            ajaxResponseVo.setMessage(<span class=\"string\">\"操作失败!\"</span>);</div><div class=\"line\">            ajaxResponseVo.setCallbackType(<span class=\"keyword\">null</span>);</div><div class=\"line\">            logger.error(e.getMessage(), e);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> ajaxResponseVo;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>【说明】关于其他一些并发问题,如分布式锁，CAS，不仅仅是一篇文档能够讲解清楚的，需要对开发有很深的理解，我还记录了一些并发问题，仅供参考：<a href=\"http://blog.csdn.net/u013815546/article/details/56481842%20%E6%B5%85%E6%9E%90%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u013815546/article/details/56481842</a></p>\n<h2 id=\"moton使用注意事项\"><a href=\"#moton使用注意事项\" class=\"headerlink\" title=\"moton使用注意事项\"></a>moton使用注意事项</h2><p>【注意】包的扫描</p>\n<p>每个模块都要扫描自身的项目结构<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">mail-sms-admin:</span><span class=\"string\">application.yml</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">motan:</span></div><div class=\"line\"><span class=\"attr\">  client-group:</span> <span class=\"string\">sinosoftrpc</span></div><div class=\"line\"><span class=\"attr\">  client-access-log:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  server-group:</span> <span class=\"string\">sinosoftrpc</span></div><div class=\"line\"><span class=\"attr\">  server-access-log:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  export-port:</span> <span class=\"string\">$&#123;random.int[9001,9999]&#125;</span></div><div class=\"line\"><span class=\"attr\">  zookeeper-host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:2181</span></div><div class=\"line\"><span class=\"attr\">  annotaiong-package:</span> <span class=\"string\">sinosoftgz.message.admin</span></div></pre></td></tr></table></figure></p>\n<p>app模块由于将api-impl脱离出了自身的模块，通常还需要扫描api-impl的模块</p>\n<p>配置pom.xml依赖 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>sinosoftgz<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mail-sms-api-impl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>配置spring ioc扫描 AutoImportConfig.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ComponentScans</span>(&#123;</div><div class=\"line\">        <span class=\"meta\">@ComponentScan</span>(basePackages = &#123;<span class=\"string\">\"sinosoftgz.message.app\"</span>, <span class=\"string\">\"sinosoftgz.message.api\"</span>&#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>配置motan扫描 mail-sms-app:application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">motan:</span></div><div class=\"line\"><span class=\"attr\">  annotaiong-package:</span> <span class=\"string\">sinosoftgz.message.app,sinosoftgz.message.api</span></div><div class=\"line\"><span class=\"attr\">  client-group:</span> <span class=\"string\">sinosoftrpc</span></div><div class=\"line\"><span class=\"attr\">  client-access-log:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  server-group:</span> <span class=\"string\">sinosoftrpc</span></div><div class=\"line\"><span class=\"attr\">  server-access-log:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  export-port:</span> <span class=\"string\">$&#123;random.int[9001,9999]&#125;</span></div><div class=\"line\"><span class=\"attr\">  zookeeper-host:</span> <span class=\"attr\">localhost:2181</span></div></pre></td></tr></table></figure>\n<p>【注意】motan跨模块传输实体类时懒加载失效<br>遇到的时候注意一下，由于jpa，hibernate懒加载的问题，因为其内部使用动态代理去实现的懒加载，导致懒加载对象无法被正确的跨模块传输，此时需要进行深拷贝。<br>【正例】：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 深拷贝OrderMain对象，主要用于防止Hibernate序列化懒加载Session关闭问题</span></div><div class=\"line\"><span class=\"comment\">     * &lt;p/&gt;</span></div><div class=\"line\"><span class=\"comment\">     * //     * <span class=\"doctag\">@param</span> order</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> OrderMain <span class=\"title\">cpyOrder</span><span class=\"params\">(OrderMain from, OrderMain to)</span> </span>&#123;</div><div class=\"line\">        OrderMain orderMainNew = to == <span class=\"keyword\">null</span> ? <span class=\"keyword\">new</span> OrderMain() : to;</div><div class=\"line\">        Copys copys = Copys.create();</div><div class=\"line\">        List&lt;OrderItem&gt; orderItemList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        List&lt;SubOrder&gt; subOrders = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        List&lt;OrderGift&gt; orderGifts = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        List&lt;OrderMainAttr&gt; orderMainAttrs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        OrderItem orderItemTmp;</div><div class=\"line\">        SubOrder subOrderTmp;</div><div class=\"line\">        OrderGift orderGiftTmp;</div><div class=\"line\">        OrderMainAttr orderMainAttrTmp;</div><div class=\"line\">        copys.from(from).excludes(<span class=\"string\">\"orderItems\"</span>, <span class=\"string\">\"subOrders\"</span>, <span class=\"string\">\"orderGifts\"</span>, <span class=\"string\">\"orderAttrs\"</span>).to(orderMainNew).clear();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Lang.isEmpty(from.getOrderItems())) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (OrderItem i : from.getOrderItems()) &#123;</div><div class=\"line\">                orderItemTmp = <span class=\"keyword\">new</span> OrderItem();</div><div class=\"line\">                copys.from(i).excludes(<span class=\"string\">\"order\"</span>).to(orderItemTmp).clear();</div><div class=\"line\">                orderItemTmp.setOrder(orderMainNew);</div><div class=\"line\">                orderItemList.add(orderItemTmp);</div><div class=\"line\">            &#125;</div><div class=\"line\">            orderMainNew.setOrderItems(orderItemList);</div><div class=\"line\">        &#125;</div><div class=\"line\">        SubOrderItem subOrderItem;</div><div class=\"line\">        List&lt;SubOrderItem&gt; subOrderItemList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">if</span> (from.getSubOrders() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (SubOrder s : from.getSubOrders()) &#123;</div><div class=\"line\">                subOrderTmp = <span class=\"keyword\">new</span> SubOrder();</div><div class=\"line\">                copys.from(s).excludes(<span class=\"string\">\"order\"</span>, <span class=\"string\">\"subOrderItems\"</span>).to(subOrderTmp).clear();</div><div class=\"line\">                subOrderTmp.setOrder(from);</div><div class=\"line\">                <span class=\"keyword\">for</span> (SubOrderItem soi : s.getSubOrderItems()) &#123;</div><div class=\"line\">                    subOrderItem = <span class=\"keyword\">new</span> SubOrderItem();</div><div class=\"line\">                    copys.from(soi).excludes(<span class=\"string\">\"order\"</span>, <span class=\"string\">\"subOrder\"</span>, <span class=\"string\">\"orderItem\"</span>).to(subOrderItem).clear();</div><div class=\"line\">                    subOrderItem.setOrder(orderMainNew);</div><div class=\"line\">                    subOrderItem.setSubOrder(subOrderTmp);</div><div class=\"line\">                    subOrderItemList.add(subOrderItem);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (!Lang.isEmpty(soi.getOrderItem())) &#123;</div><div class=\"line\">                        <span class=\"keyword\">for</span> (OrderItem i : orderMainNew.getOrderItems()) &#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (i.getId().equals(soi.getOrderItem().getId())) &#123;</div><div class=\"line\">                                subOrderItem.setOrderItem(soi.getOrderItem());</div><div class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                                subOrderItem.setOrderItem(soi.getOrderItem());</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                subOrderTmp.setSubOrderItems(subOrderItemList);</div><div class=\"line\">                subOrders.add(subOrderTmp);</div><div class=\"line\">            &#125;</div><div class=\"line\">            orderMainNew.setSubOrders(subOrders);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (from.getOrderGifts() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (OrderGift og : from.getOrderGifts()) &#123;</div><div class=\"line\">                orderGiftTmp = <span class=\"keyword\">new</span> OrderGift();</div><div class=\"line\">              copys.from(og).excludes(<span class=\"string\">\"order\"</span>).to(orderGiftTmp).clear();</div><div class=\"line\">                orderGiftTmp.setOrder(orderMainNew);</div><div class=\"line\">                orderGifts.add(orderGiftTmp);</div><div class=\"line\">            &#125;</div><div class=\"line\">            orderMainNew.setOrderGifts(orderGifts);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (from.getOrderAttrs() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (OrderMainAttr attr : from.getOrderAttrs()) &#123;</div><div class=\"line\">                orderMainAttrTmp = <span class=\"keyword\">new</span> OrderMainAttr();</div><div class=\"line\">                copys.from(attr).excludes(<span class=\"string\">\"order\"</span>).to(orderMainAttrTmp).clear();</div><div class=\"line\">                orderMainAttrTmp.setOrder(orderMainNew);</div><div class=\"line\">                orderMainAttrs.add(orderMainAttrTmp);</div><div class=\"line\">            &#125;</div><div class=\"line\">            orderMainNew.setOrderAttrs(orderMainAttrs);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> orderMainNew;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"公用常量规范\"><a href=\"#公用常量规范\" class=\"headerlink\" title=\"公用常量规范\"></a>公用常量规范</h2><p>【强制】模块常量<br>模块自身公用的常量放置于模块的Constants 类中，以final static的方式声明<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Constants</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String birthdayPattern = <span class=\"string\">\"yyyy-MM-dd\"</span>; <span class=\"comment\">//生日格式</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String inputTimePattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>; <span class=\"comment\">//录入时间格式</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolicyType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String personal = <span class=\"string\">\"0\"</span>; <span class=\"comment\">//个单</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String group = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//团单</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsuredNature</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String naturePerson = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//自然人</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String artificialPerson = <span class=\"string\">\"0\"</span>; <span class=\"comment\">//法人</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsuredIdentity</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String myself = <span class=\"string\">\"0\"</span>; <span class=\"comment\">//本人</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JfeeFlag</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String noFeeFlag = <span class=\"string\">\"0\"</span>; <span class=\"comment\">//非见费标志</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String feeFlag = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//见费标志</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemKindFlag</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String mainRiskFlag = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//主险标志</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String additionalRiskFlag = <span class=\"string\">\"2\"</span>; <span class=\"comment\">//附加险标志</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String otherRiskFlag = <span class=\"string\">\"3\"</span>; <span class=\"comment\">//其它标志</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateAmountFlag</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String calculateFlag = <span class=\"string\">\"Y\"</span>; <span class=\"comment\">//计算保额标志</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String noCalculateFlag = <span class=\"string\">\"N\"</span>; <span class=\"comment\">//不计算保额标志</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LimitGrade</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String policyLevel = <span class=\"string\">\"1\"</span>; <span class=\"comment\">//限额/免赔保单级别</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String clauseLevel = <span class=\"string\">\"2\"</span>; <span class=\"comment\">//限额/免赔条款级别</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 批改类型</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * 命名规则：对象（可选）+行为</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EndorType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String collectivePolicyInsuredModify = <span class=\"string\">\"22\"</span>; <span class=\"comment\">//团单变更被保险人</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String collectivePolicyInsuredAdd = <span class=\"string\">\"Z1\"</span>; <span class=\"comment\">//团单批增被保险人</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String collectivePolicyInsuredRemove = <span class=\"string\">\"J1\"</span>; <span class=\"comment\">//团单批减被保险人</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String surrender = <span class=\"string\">\"04\"</span>; <span class=\"comment\">//全单退保</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String withdraw = <span class=\"string\">\"05\"</span>; <span class=\"comment\">//注销</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String insurancePeriodModify = <span class=\"string\">\"06\"</span>; <span class=\"comment\">//平移保险期限</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String applicantModify = <span class=\"string\">\"H01\"</span>; <span class=\"comment\">//更改投保人</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String customerModify = <span class=\"string\">\"50\"</span>; <span class=\"comment\">//变更客户信息</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String insuredModify = <span class=\"string\">\"29\"</span>; <span class=\"comment\">//变更被保人职业</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String individualPolicyBeneficiaryModify = <span class=\"string\">\"03\"</span>; <span class=\"comment\">//变更受益人信息</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String engageModify = <span class=\"string\">\"15\"</span>; <span class=\"comment\">//变更特别约定</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String individualPolicyInsuredModify = <span class=\"string\">\"77\"</span>;<span class=\"comment\">//个单变更被保人</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Constants类在一个限界上下文只能有一个，一个限界上下文包含了一整个业务模块（如policy-admin,policy-admin,policy-api,policy-model）<br>构成一个限界上下文</p>\n<p>在Constants类中使用静态内部类尽量细化到常量的归属，不要散放</p>\n<p>【强制】项目常量<br>项目公用的常量放置于util模块的GlobalContants类中，以内部类和final static的方式声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalContants</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 返回的状态</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseStatus</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SUCCESS = <span class=\"string\">\"success\"</span>;<span class=\"comment\">//成功</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ERROR = <span class=\"string\">\"error\"</span>;<span class=\"comment\">//错误</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">\t * 响应状态</span></div><div class=\"line\"><span class=\"comment\">\t */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseString</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String STATUS = <span class=\"string\">\"status\"</span>;<span class=\"comment\">//状态</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ERROR_CODE = <span class=\"string\">\"error\"</span>;<span class=\"comment\">// 错误代码</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MESSAGE = <span class=\"string\">\"message\"</span>;<span class=\"comment\">//消息</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DATA = <span class=\"string\">\"data\"</span>;<span class=\"comment\">//数据</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"领域模型规范\"><a href=\"#领域模型规范\" class=\"headerlink\" title=\"领域模型规范\"></a>领域模型规范</h2><h3 id=\"javabean规范\"><a href=\"#javabean规范\" class=\"headerlink\" title=\"javabean规范\"></a>javabean规范</h3><p>（一些像驼峰命名法之类通用的规范就不说了，强调一些可能会犯错的规范）<br>【强制】BigDecimal规范<br>【说明】业务实体类中的与金额相关的变量统一使用BigDecimal,四则运算采用BigDecimal的相关api进行，<br>做除法时需要额外注意保留精度的问题，否则可能会报异常，并且不易被测试出<br>【正例】<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">BigDecimal totalMoney = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"100.42\"</span>);</div><div class=\"line\">BigDecimal averageMoney = totalMoney.divide(<span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">\"22\"</span>),<span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<p>【强制】布尔类型规范<br>【说明】所有的布尔类型不允许以is开头，否则会导致部分序列化，hibernate框架出现解析异常。<br>【反例】<br>原来项目的BaseDomain中标记逻辑删除的字段,在部分场景下会出现问题<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Column</span>(name = <span class=\"string\">\"is_delete\"</span>)</div><div class=\"line\"><span class=\"keyword\">private</span> Boolean isDelete = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">getIsDelete</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> isDelete;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setIsDelete</span><span class=\"params\">(Boolean isDelete)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(deleteFlag)</div><div class=\"line\">        <span class=\"keyword\">this</span>.deleteDate = <span class=\"keyword\">new</span> Date();</div><div class=\"line\">    <span class=\"keyword\">this</span>.isDelete = isDelete;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>tips: 使用intellij idea的快捷键（for eclipse）alt+shift+r，<br>或者菜单栏Refactor-&gt;Rename，可以重构字段名称<br>【正例】<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Column</span>(name = <span class=\"string\">\"is_delete\"</span>)</div><div class=\"line\"><span class=\"keyword\">private</span> Boolean deleteFlag = <span class=\"keyword\">false</span>;</div></pre></td></tr></table></figure></p>\n<p>【推荐】装箱类型优于原生类型<br>在业务代码中，更加推荐使用装箱类型Integer Double Boolean…<br>【说明】在未设值的情况下，原生类型具有默认值，而装箱类型为null<br>以Boolean类型为例，如果使用boolean，那么在未复制时，无法得知其到底是被赋值成了false，<br>还是为赋值</p>\n<h2 id=\"其他常用的领域模型\"><a href=\"#其他常用的领域模型\" class=\"headerlink\" title=\"其他常用的领域模型\"></a>其他常用的领域模型</h2><p>首先理解各个常用的领域模型的含义：</p>\n<table>\n<thead>\n<tr>\n<th>领域模型</th>\n<th>全称</th>\n<th>中文含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DO</td>\n<td>Domain Object</td>\n<td>领域对象</td>\n</tr>\n<tr>\n<td>DTO</td>\n<td>Data Transfer Object</td>\n<td>数据传输对象</td>\n</tr>\n<tr>\n<td>VO</td>\n<td>View Object</td>\n<td>视图对象</td>\n</tr>\n</tbody>\n</table>\n<p>对于View Object，PO等等其他一些的对象不在此做要求，只说明一下常用的几个<br>DO就是我们最常用的数据库持久对象，是OOP对于现实中的抽象，一般使用orm框架映射到数据库<br>DTO这一层，目前我们的项目还没有投入使用，即将考虑投入使用，理论上来说，两个微服务模块是严禁共享数据库的<br>所以A模块要查询B模块的数据，需要使用B模块app层暴露出来的api来查询，其中B模块返回的实体，不能是直接从数据库中<br>查询出来的DO，而应该是DO转换而成的DTO。以及其他服务服务用语传输的变量，都叫做DTO<br>VO就是常存在于视图层模板渲染使用的实体类</p>\n<p>tips：DO最特殊的一点在于，它拥有主键，而DTO不应该包含数据库的主键</p>\n<p>【推荐】领域模型命名规范<br>【说明】由于DO这一层大家已经养成了习惯，不做要求了。DTO有些特殊，他常常与业务的传输对象相关，而不限于<br>以DTO结尾，如xxxQuery也可以是DTO对象。VO对象推荐以VO结尾。注意：不要命名为Vo,Dto。</p>"},{"title":"使用zipkin做分布式链路监控","date":"2017-06-11T18:51:51.000Z","_content":"\n# 介绍   \n* Zipkin 为一个分布式的调用链跟踪系统( distributed tracing system ) ,设计来源于 [google dapper paper](http://research.google.com/pubs/pub36356.html)\n*  [官方网站](http://zipkin.io/)\n\n# 快速入门\n\n - 安装方式一：使用zipkin官方提供的jar启动服务\n  zipkin官方提供了一个现成的使用springboot写的zipkin服务端，客户端的链路监控报告可以通过多种方式（下文会讲解具体的方式）向服务端发送报告。\n* 系统需要安装java8 \n* [下载地址](https://search.maven.org/remote_content?g=io.zipkin.java&a=zipkin-server&v=LATEST&c=exec)\n\n  配置详解\n  ![存储方式](http://img.blog.csdn.net/20170612021516652?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  查看源码可知其有4种持久化方式，本文选择使用最熟悉的mysql持久化链路调用信息。\n\n首先建立数据库：\n默认情况下 zipkin 运行时数据保存在内存中，重启数据会丢失\n[数据库脚本下载](https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql/src/main/resources/mysql.sql)\n\n查看与mysql storage相关的配置\n```java\n@ConfigurationProperties(\"zipkin.storage.mysql\")\npublic class ZipkinMySQLStorageProperties implements Serializable { // for Spark jobs\n  private static final long serialVersionUID = 0L;\n\n  private String host = \"localhost\";\n  private int port = 3306;\n  private String username;\n  private String password;\n  private String db = \"zipkin\";\n  private int maxActive = 10;\n  private boolean useSsl;\n\t...\n}\n```\n所以，我们使用mysql作为持久化策略，启动服务端的脚本也就有了\n```shell\njava -server -jar zipkin-server-1.26.0-exec.jar --zipkin.storage.type=mysql --zipkin.storage.mysql.host=localhost --zipkin.storage.mysql.port=3306 --zipkin.storage.mysql.username=root --zipkin.storage.mysql.password=root --zipkin.storage.mysql.db=zipkin\n```\n\n- 安装方式二\n  springcloud官方按照传输方式分成了三种启动服务端的方式：Sleuth with Zipkin via HTTP，Sleuth with Zipkin via Spring Cloud Stream，Spring Cloud Sleuth Stream Zipkin Collector。只需要添加相应的依赖，之后配置相应的注解，如`@EnableZipkinStreamServer`即可。具体配置参考[Spring Cloud官方文档](http://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/1.2.1.RELEASE/#_adding_to_the_project)\n\n项目中，我们使用第一种作为服务端的启动方式，使用mysql作为持久化方案\n\n<!-- more -->\n\n# 被监控项目配置\n\napplication.yml\n\n```yaml\nspring:\n  zipkin:\n\t#服务端地址\n    base-url: http://10.19.52.11:9411\n    #本项目服务名\n    service:\n      name: ${spring.application.name}\n  sleuth:\n\t#监控开关\n    enabled: true\n    #采样率\n    sampler:\n      percentage: 1\n```\nspringboot对zipkin的自动配置可以使得所有RequestMapping匹配到的endpoints得到监控，以及强化了restTemplate，对其加了一层拦截器，使得由他发起的http请求也同样被监控。\n\n# motan rpc调用监控\nMotan通过filter的SPI扩展机制支持OpenTracing，可以支持任何实现了OpenTracing标准的trace实现。使用OpenTracing需要以下步骤。\n\n1.引入filter-opentracing扩展\n```xml\n<dependency>\n     <groupId>com.weibo</groupId>\n     <artifactId>filter-opentracing</artifactId>\n     <version>release</version>\n</dependency>\n```\n\n2.如果第三方trace工具声明了io.opentracing.Tracer的SPI扩展，直接引入第三方trace的jar包即可。如果第三方没有声明，则转第三步。\n\n3.自定义一个TracerFactory实现TracerFactory接口，通过getTracer()来获取不同tracer实现。设置OpenTracingContext的tracerFactory为自定义的TracerFactory即可。\n\n\n项目中的具体配置MotanConfig.java：\n```java\n@Bean(name = \"motanServerBasicConfig\")\n    public BasicServiceConfigBean baseServiceConfig(@Value(\"${spring.sleuth.enabled:false}\") Boolean tracing\n    ) {\n        BasicServiceConfigBean config = new BasicServiceConfigBean();\n        ...\n        if(tracing){\n            config.setFilter(\"sleuth-tracing\");\n        }\n        ...\n        return config;\n    }\n\n\n@Bean\nSleuthTracingContext sleuthTracingContext(@Autowired(required = false)  org.springframework.cloud.sleuth.Tracer tracer){\n        SleuthTracingContext context = new SleuthTracingContext();\n        context.setTracerFactory(new SleuthTracerFactory() {\n            @Override\n            public org.springframework.cloud.sleuth.Tracer getTracer() {\n                return tracer;\n            }\n        });\n\n        return context;\n    }\n```\n\n# 数据查询\n具体的服务就不列出来了，为了演示依赖关系，service1使用restTemplate调用了service2,service2调用了service3，service4。\n还有一些现成的motan调用\n\n- **find a trace**\n  当应用正常启动后，可以通过 http://10.19.52.11:9411 查看管理端\n  ![这里写图片描述](http://img.blog.csdn.net/20170612033405237?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  项目已经成功被监控\n\n- **Dependencies**\n\nmotan依赖树：\n\n![这里写图片描述](http://img.blog.csdn.net/20170612033733992?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nhttp依赖树：\n\n![这里写图片描述](http://img.blog.csdn.net/20170612034022465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n","source":"_posts/使用zipkin做分布式链路监控.md","raw":"---\ntitle: 使用zipkin做分布式链路监控\ndate: 2017-06-12 02:51:51\ntags: \n- Zipkin\n- DevOps\ncategories: \n- DevOps\n---\n\n# 介绍   \n* Zipkin 为一个分布式的调用链跟踪系统( distributed tracing system ) ,设计来源于 [google dapper paper](http://research.google.com/pubs/pub36356.html)\n*  [官方网站](http://zipkin.io/)\n\n# 快速入门\n\n - 安装方式一：使用zipkin官方提供的jar启动服务\n  zipkin官方提供了一个现成的使用springboot写的zipkin服务端，客户端的链路监控报告可以通过多种方式（下文会讲解具体的方式）向服务端发送报告。\n* 系统需要安装java8 \n* [下载地址](https://search.maven.org/remote_content?g=io.zipkin.java&a=zipkin-server&v=LATEST&c=exec)\n\n  配置详解\n  ![存储方式](http://img.blog.csdn.net/20170612021516652?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  查看源码可知其有4种持久化方式，本文选择使用最熟悉的mysql持久化链路调用信息。\n\n首先建立数据库：\n默认情况下 zipkin 运行时数据保存在内存中，重启数据会丢失\n[数据库脚本下载](https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql/src/main/resources/mysql.sql)\n\n查看与mysql storage相关的配置\n```java\n@ConfigurationProperties(\"zipkin.storage.mysql\")\npublic class ZipkinMySQLStorageProperties implements Serializable { // for Spark jobs\n  private static final long serialVersionUID = 0L;\n\n  private String host = \"localhost\";\n  private int port = 3306;\n  private String username;\n  private String password;\n  private String db = \"zipkin\";\n  private int maxActive = 10;\n  private boolean useSsl;\n\t...\n}\n```\n所以，我们使用mysql作为持久化策略，启动服务端的脚本也就有了\n```shell\njava -server -jar zipkin-server-1.26.0-exec.jar --zipkin.storage.type=mysql --zipkin.storage.mysql.host=localhost --zipkin.storage.mysql.port=3306 --zipkin.storage.mysql.username=root --zipkin.storage.mysql.password=root --zipkin.storage.mysql.db=zipkin\n```\n\n- 安装方式二\n  springcloud官方按照传输方式分成了三种启动服务端的方式：Sleuth with Zipkin via HTTP，Sleuth with Zipkin via Spring Cloud Stream，Spring Cloud Sleuth Stream Zipkin Collector。只需要添加相应的依赖，之后配置相应的注解，如`@EnableZipkinStreamServer`即可。具体配置参考[Spring Cloud官方文档](http://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/1.2.1.RELEASE/#_adding_to_the_project)\n\n项目中，我们使用第一种作为服务端的启动方式，使用mysql作为持久化方案\n\n<!-- more -->\n\n# 被监控项目配置\n\napplication.yml\n\n```yaml\nspring:\n  zipkin:\n\t#服务端地址\n    base-url: http://10.19.52.11:9411\n    #本项目服务名\n    service:\n      name: ${spring.application.name}\n  sleuth:\n\t#监控开关\n    enabled: true\n    #采样率\n    sampler:\n      percentage: 1\n```\nspringboot对zipkin的自动配置可以使得所有RequestMapping匹配到的endpoints得到监控，以及强化了restTemplate，对其加了一层拦截器，使得由他发起的http请求也同样被监控。\n\n# motan rpc调用监控\nMotan通过filter的SPI扩展机制支持OpenTracing，可以支持任何实现了OpenTracing标准的trace实现。使用OpenTracing需要以下步骤。\n\n1.引入filter-opentracing扩展\n```xml\n<dependency>\n     <groupId>com.weibo</groupId>\n     <artifactId>filter-opentracing</artifactId>\n     <version>release</version>\n</dependency>\n```\n\n2.如果第三方trace工具声明了io.opentracing.Tracer的SPI扩展，直接引入第三方trace的jar包即可。如果第三方没有声明，则转第三步。\n\n3.自定义一个TracerFactory实现TracerFactory接口，通过getTracer()来获取不同tracer实现。设置OpenTracingContext的tracerFactory为自定义的TracerFactory即可。\n\n\n项目中的具体配置MotanConfig.java：\n```java\n@Bean(name = \"motanServerBasicConfig\")\n    public BasicServiceConfigBean baseServiceConfig(@Value(\"${spring.sleuth.enabled:false}\") Boolean tracing\n    ) {\n        BasicServiceConfigBean config = new BasicServiceConfigBean();\n        ...\n        if(tracing){\n            config.setFilter(\"sleuth-tracing\");\n        }\n        ...\n        return config;\n    }\n\n\n@Bean\nSleuthTracingContext sleuthTracingContext(@Autowired(required = false)  org.springframework.cloud.sleuth.Tracer tracer){\n        SleuthTracingContext context = new SleuthTracingContext();\n        context.setTracerFactory(new SleuthTracerFactory() {\n            @Override\n            public org.springframework.cloud.sleuth.Tracer getTracer() {\n                return tracer;\n            }\n        });\n\n        return context;\n    }\n```\n\n# 数据查询\n具体的服务就不列出来了，为了演示依赖关系，service1使用restTemplate调用了service2,service2调用了service3，service4。\n还有一些现成的motan调用\n\n- **find a trace**\n  当应用正常启动后，可以通过 http://10.19.52.11:9411 查看管理端\n  ![这里写图片描述](http://img.blog.csdn.net/20170612033405237?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  项目已经成功被监控\n\n- **Dependencies**\n\nmotan依赖树：\n\n![这里写图片描述](http://img.blog.csdn.net/20170612033733992?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nhttp依赖树：\n\n![这里写图片描述](http://img.blog.csdn.net/20170612034022465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n","slug":"使用zipkin做分布式链路监控","published":1,"updated":"2017-09-04T11:49:26.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zu80039twv7l4n6hsvh","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><ul>\n<li>Zipkin 为一个分布式的调用链跟踪系统( distributed tracing system ) ,设计来源于 <a href=\"http://research.google.com/pubs/pub36356.html\" target=\"_blank\" rel=\"external\">google dapper paper</a></li>\n<li><a href=\"http://zipkin.io/\" target=\"_blank\" rel=\"external\">官方网站</a></li>\n</ul>\n<h1 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h1><ul>\n<li><p>安装方式一：使用zipkin官方提供的jar启动服务<br>zipkin官方提供了一个现成的使用springboot写的zipkin服务端，客户端的链路监控报告可以通过多种方式（下文会讲解具体的方式）向服务端发送报告。</p>\n<ul>\n<li>系统需要安装java8 </li>\n<li><a href=\"https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec\" target=\"_blank\" rel=\"external\">下载地址</a></li>\n</ul>\n<p>配置详解<br><img src=\"http://img.blog.csdn.net/20170612021516652?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"存储方式\"><br>查看源码可知其有4种持久化方式，本文选择使用最熟悉的mysql持久化链路调用信息。</p>\n</li>\n</ul>\n<p>首先建立数据库：<br>默认情况下 zipkin 运行时数据保存在内存中，重启数据会丢失<br><a href=\"https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql/src/main/resources/mysql.sql\" target=\"_blank\" rel=\"external\">数据库脚本下载</a></p>\n<p>查看与mysql storage相关的配置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"zipkin.storage.mysql\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZipkinMySQLStorageProperties</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123; <span class=\"comment\">// for Spark jobs</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">0L</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> String host = <span class=\"string\">\"localhost\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port = <span class=\"number\">3306</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String username;</div><div class=\"line\">  <span class=\"keyword\">private</span> String password;</div><div class=\"line\">  <span class=\"keyword\">private</span> String db = <span class=\"string\">\"zipkin\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxActive = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> useSsl;</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>所以，我们使用mysql作为持久化策略，启动服务端的脚本也就有了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -server -jar zipkin-server-1.26.0-exec.jar --zipkin.storage.type=mysql --zipkin.storage.mysql.host=localhost --zipkin.storage.mysql.port=3306 --zipkin.storage.mysql.username=root --zipkin.storage.mysql.password=root --zipkin.storage.mysql.db=zipkin</div></pre></td></tr></table></figure></p>\n<ul>\n<li>安装方式二<br>springcloud官方按照传输方式分成了三种启动服务端的方式：Sleuth with Zipkin via HTTP，Sleuth with Zipkin via Spring Cloud Stream，Spring Cloud Sleuth Stream Zipkin Collector。只需要添加相应的依赖，之后配置相应的注解，如<code>@EnableZipkinStreamServer</code>即可。具体配置参考<a href=\"http://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/1.2.1.RELEASE/#_adding_to_the_project\" target=\"_blank\" rel=\"external\">Spring Cloud官方文档</a></li>\n</ul>\n<p>项目中，我们使用第一种作为服务端的启动方式，使用mysql作为持久化方案</p>\n<a id=\"more\"></a>\n<h1 id=\"被监控项目配置\"><a href=\"#被监控项目配置\" class=\"headerlink\" title=\"被监控项目配置\"></a>被监控项目配置</h1><p>application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  zipkin:</span></div><div class=\"line\">\t<span class=\"comment\">#服务端地址</span></div><div class=\"line\"><span class=\"attr\">    base-url:</span> <span class=\"attr\">http://10.19.52.11:9411</span></div><div class=\"line\">    <span class=\"comment\">#本项目服务名</span></div><div class=\"line\"><span class=\"attr\">    service:</span></div><div class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">$&#123;spring.application.name&#125;</span></div><div class=\"line\"><span class=\"attr\">  sleuth:</span></div><div class=\"line\">\t<span class=\"comment\">#监控开关</span></div><div class=\"line\"><span class=\"attr\">    enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"comment\">#采样率</span></div><div class=\"line\"><span class=\"attr\">    sampler:</span></div><div class=\"line\"><span class=\"attr\">      percentage:</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>springboot对zipkin的自动配置可以使得所有RequestMapping匹配到的endpoints得到监控，以及强化了restTemplate，对其加了一层拦截器，使得由他发起的http请求也同样被监控。</p>\n<h1 id=\"motan-rpc调用监控\"><a href=\"#motan-rpc调用监控\" class=\"headerlink\" title=\"motan rpc调用监控\"></a>motan rpc调用监控</h1><p>Motan通过filter的SPI扩展机制支持OpenTracing，可以支持任何实现了OpenTracing标准的trace实现。使用OpenTracing需要以下步骤。</p>\n<p>1.引入filter-opentracing扩展<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.weibo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>filter-opentracing<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>release<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>2.如果第三方trace工具声明了io.opentracing.Tracer的SPI扩展，直接引入第三方trace的jar包即可。如果第三方没有声明，则转第三步。</p>\n<p>3.自定义一个TracerFactory实现TracerFactory接口，通过getTracer()来获取不同tracer实现。设置OpenTracingContext的tracerFactory为自定义的TracerFactory即可。</p>\n<p>项目中的具体配置MotanConfig.java：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"motanServerBasicConfig\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BasicServiceConfigBean <span class=\"title\">baseServiceConfig</span><span class=\"params\">(@Value(<span class=\"string\">\"$&#123;spring.sleuth.enabled:false&#125;\"</span>)</span> Boolean tracing</span></div><div class=\"line\"><span class=\"function\">    ) </span>&#123;</div><div class=\"line\">        BasicServiceConfigBean config = <span class=\"keyword\">new</span> BasicServiceConfigBean();</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span>(tracing)&#123;</div><div class=\"line\">            config.setFilter(<span class=\"string\">\"sleuth-tracing\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> config;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"function\">SleuthTracingContext <span class=\"title\">sleuthTracingContext</span><span class=\"params\">(@Autowired(required = <span class=\"keyword\">false</span>)</span>  org.springframework.cloud.sleuth.Tracer tracer)</span>&#123;</div><div class=\"line\">        SleuthTracingContext context = <span class=\"keyword\">new</span> SleuthTracingContext();</div><div class=\"line\">        context.setTracerFactory(<span class=\"keyword\">new</span> SleuthTracerFactory() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"keyword\">public</span> org.springframework.cloud.sleuth.<span class=\"function\">Tracer <span class=\"title\">getTracer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> tracer;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> context;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"数据查询\"><a href=\"#数据查询\" class=\"headerlink\" title=\"数据查询\"></a>数据查询</h1><p>具体的服务就不列出来了，为了演示依赖关系，service1使用restTemplate调用了service2,service2调用了service3，service4。<br>还有一些现成的motan调用</p>\n<ul>\n<li><p><strong>find a trace</strong><br>当应用正常启动后，可以通过 <a href=\"http://10.19.52.11:9411\" target=\"_blank\" rel=\"external\">http://10.19.52.11:9411</a> 查看管理端<br><img src=\"http://img.blog.csdn.net/20170612033405237?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>项目已经成功被监控</p>\n</li>\n<li><p><strong>Dependencies</strong></p>\n</li>\n</ul>\n<p>motan依赖树：</p>\n<p><img src=\"http://img.blog.csdn.net/20170612033733992?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>http依赖树：</p>\n<p><img src=\"http://img.blog.csdn.net/20170612034022465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><ul>\n<li>Zipkin 为一个分布式的调用链跟踪系统( distributed tracing system ) ,设计来源于 <a href=\"http://research.google.com/pubs/pub36356.html\" target=\"_blank\" rel=\"external\">google dapper paper</a></li>\n<li><a href=\"http://zipkin.io/\" target=\"_blank\" rel=\"external\">官方网站</a></li>\n</ul>\n<h1 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h1><ul>\n<li><p>安装方式一：使用zipkin官方提供的jar启动服务<br>zipkin官方提供了一个现成的使用springboot写的zipkin服务端，客户端的链路监控报告可以通过多种方式（下文会讲解具体的方式）向服务端发送报告。</p>\n<ul>\n<li>系统需要安装java8 </li>\n<li><a href=\"https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec\" target=\"_blank\" rel=\"external\">下载地址</a></li>\n</ul>\n<p>配置详解<br><img src=\"http://img.blog.csdn.net/20170612021516652?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"存储方式\"><br>查看源码可知其有4种持久化方式，本文选择使用最熟悉的mysql持久化链路调用信息。</p>\n</li>\n</ul>\n<p>首先建立数据库：<br>默认情况下 zipkin 运行时数据保存在内存中，重启数据会丢失<br><a href=\"https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql/src/main/resources/mysql.sql\" target=\"_blank\" rel=\"external\">数据库脚本下载</a></p>\n<p>查看与mysql storage相关的配置<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"zipkin.storage.mysql\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZipkinMySQLStorageProperties</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123; <span class=\"comment\">// for Spark jobs</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">0L</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> String host = <span class=\"string\">\"localhost\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port = <span class=\"number\">3306</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> String username;</div><div class=\"line\">  <span class=\"keyword\">private</span> String password;</div><div class=\"line\">  <span class=\"keyword\">private</span> String db = <span class=\"string\">\"zipkin\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxActive = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> useSsl;</div><div class=\"line\">\t...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>所以，我们使用mysql作为持久化策略，启动服务端的脚本也就有了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -server -jar zipkin-server-1.26.0-exec.jar --zipkin.storage.type=mysql --zipkin.storage.mysql.host=localhost --zipkin.storage.mysql.port=3306 --zipkin.storage.mysql.username=root --zipkin.storage.mysql.password=root --zipkin.storage.mysql.db=zipkin</div></pre></td></tr></table></figure></p>\n<ul>\n<li>安装方式二<br>springcloud官方按照传输方式分成了三种启动服务端的方式：Sleuth with Zipkin via HTTP，Sleuth with Zipkin via Spring Cloud Stream，Spring Cloud Sleuth Stream Zipkin Collector。只需要添加相应的依赖，之后配置相应的注解，如<code>@EnableZipkinStreamServer</code>即可。具体配置参考<a href=\"http://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/1.2.1.RELEASE/#_adding_to_the_project\" target=\"_blank\" rel=\"external\">Spring Cloud官方文档</a></li>\n</ul>\n<p>项目中，我们使用第一种作为服务端的启动方式，使用mysql作为持久化方案</p>","more":"<h1 id=\"被监控项目配置\"><a href=\"#被监控项目配置\" class=\"headerlink\" title=\"被监控项目配置\"></a>被监控项目配置</h1><p>application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">spring:</span></div><div class=\"line\"><span class=\"attr\">  zipkin:</span></div><div class=\"line\">\t<span class=\"comment\">#服务端地址</span></div><div class=\"line\"><span class=\"attr\">    base-url:</span> <span class=\"attr\">http://10.19.52.11:9411</span></div><div class=\"line\">    <span class=\"comment\">#本项目服务名</span></div><div class=\"line\"><span class=\"attr\">    service:</span></div><div class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">$&#123;spring.application.name&#125;</span></div><div class=\"line\"><span class=\"attr\">  sleuth:</span></div><div class=\"line\">\t<span class=\"comment\">#监控开关</span></div><div class=\"line\"><span class=\"attr\">    enabled:</span> <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"comment\">#采样率</span></div><div class=\"line\"><span class=\"attr\">    sampler:</span></div><div class=\"line\"><span class=\"attr\">      percentage:</span> <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>springboot对zipkin的自动配置可以使得所有RequestMapping匹配到的endpoints得到监控，以及强化了restTemplate，对其加了一层拦截器，使得由他发起的http请求也同样被监控。</p>\n<h1 id=\"motan-rpc调用监控\"><a href=\"#motan-rpc调用监控\" class=\"headerlink\" title=\"motan rpc调用监控\"></a>motan rpc调用监控</h1><p>Motan通过filter的SPI扩展机制支持OpenTracing，可以支持任何实现了OpenTracing标准的trace实现。使用OpenTracing需要以下步骤。</p>\n<p>1.引入filter-opentracing扩展<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.weibo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>filter-opentracing<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>release<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>2.如果第三方trace工具声明了io.opentracing.Tracer的SPI扩展，直接引入第三方trace的jar包即可。如果第三方没有声明，则转第三步。</p>\n<p>3.自定义一个TracerFactory实现TracerFactory接口，通过getTracer()来获取不同tracer实现。设置OpenTracingContext的tracerFactory为自定义的TracerFactory即可。</p>\n<p>项目中的具体配置MotanConfig.java：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"motanServerBasicConfig\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BasicServiceConfigBean <span class=\"title\">baseServiceConfig</span><span class=\"params\">(@Value(<span class=\"string\">\"$&#123;spring.sleuth.enabled:false&#125;\"</span>)</span> Boolean tracing</span></div><div class=\"line\"><span class=\"function\">    ) </span>&#123;</div><div class=\"line\">        BasicServiceConfigBean config = <span class=\"keyword\">new</span> BasicServiceConfigBean();</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">if</span>(tracing)&#123;</div><div class=\"line\">            config.setFilter(<span class=\"string\">\"sleuth-tracing\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">return</span> config;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Bean</span></div><div class=\"line\"><span class=\"function\">SleuthTracingContext <span class=\"title\">sleuthTracingContext</span><span class=\"params\">(@Autowired(required = <span class=\"keyword\">false</span>)</span>  org.springframework.cloud.sleuth.Tracer tracer)</span>&#123;</div><div class=\"line\">        SleuthTracingContext context = <span class=\"keyword\">new</span> SleuthTracingContext();</div><div class=\"line\">        context.setTracerFactory(<span class=\"keyword\">new</span> SleuthTracerFactory() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"keyword\">public</span> org.springframework.cloud.sleuth.<span class=\"function\">Tracer <span class=\"title\">getTracer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> tracer;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> context;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"数据查询\"><a href=\"#数据查询\" class=\"headerlink\" title=\"数据查询\"></a>数据查询</h1><p>具体的服务就不列出来了，为了演示依赖关系，service1使用restTemplate调用了service2,service2调用了service3，service4。<br>还有一些现成的motan调用</p>\n<ul>\n<li><p><strong>find a trace</strong><br>当应用正常启动后，可以通过 <a href=\"http://10.19.52.11:9411\" target=\"_blank\" rel=\"external\">http://10.19.52.11:9411</a> 查看管理端<br><img src=\"http://img.blog.csdn.net/20170612033405237?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>项目已经成功被监控</p>\n</li>\n<li><p><strong>Dependencies</strong></p>\n</li>\n</ul>\n<p>motan依赖树：</p>\n<p><img src=\"http://img.blog.csdn.net/20170612033733992?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>http依赖树：</p>\n<p><img src=\"http://img.blog.csdn.net/20170612034022465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>"},{"title":"分布式限流","date":"2017-03-18T05:52:00.000Z","_content":"\n## 前言\n\n最近正在为本科论文的事感到心烦，一方面是在调研期间，发现大部分的本科论文都是以MVC为架构，如果是使用了java作为开发语言则又是千篇一律的在使用SSH，二方面是自己想就微服务，分布式方面写一篇论文，讲述一些技术点的实现，和一些中间件的使用，看到如八股文般的模板格式..不免让人望文生怯。退一步，投入模板化ssh-web项目的怀抱，落入俗套，可以省去自己不少时间，因为在外实习，琐事并不少；进一步，需要投入大量时间精力去研究，而且不成体系，没有论文参考。\n\n突然觉得写博客，比写论文爽多了，可以写自己想写的，记录自己最真实的想法。可能会逐渐将之前博客维护的自己的一些想法，纳入到本科论文中去。\n\n## 经典限流算法\n\n说回正题，补上之前分布式限流的实现。先介绍一些现有的限流方案。\n\n核心的算法主要就是四种：\nA类：计数器法，滑动窗口法\nB类：令牌桶法，漏桶法\n\n这里的四种算法通常都是在应用级别讨论的，这里不重复介绍这四种算法的实现思路了，只不过我人为的将他们分成了A，B两类。\n\n - A类算法，是否决式限流。即如果系统设定限流方案是1分钟允许100次调用，那么真实请求1分钟调用200次的话，意味着超出的100次调用，得到的是空结果或者调用频繁异常。\n\n - B类算法，是阻塞式限流。即如果系统设定限流方案是1分钟允许100次调用，那么真实请求1分钟调用200次的话，意味着超出的100次调用，会均匀安排到下一分钟返回。（当然B类算法，也可以立即返回失败，也可以达到否决式限流的效果）\n\nB类算法，如Guava包提供的RateLimiter，内部其实就是一个阻塞队列，达到阻塞限流的效果。然后分布式场景下，有一些思路悄悄的发生了变化。多个模块之间不能保证相互阻塞，共享的变量也不在一片内存空间中。为了使用阻塞限流的算法，我们不得不将统计流量放到redis一类的共享内存中，如果操作是一系列复合的操作，我们还不能使用redis自带的CAS操作(CAS操作只能保证单个操作的原子性)或者使用中间件级别的队列来阻塞操作，显示加分布式锁的开销又是非常的巨大。最终选择放弃阻塞式限流，而在分布式场景下，仅仅使用redis+lua脚本的方式来达到分布式-否决式限流的效果。redis执行lua脚本是一个单线程的行为，所以不需要显示加锁，这可以说避免了加锁导致的线程切换开销。\n\n## 锁的演变\n\n下面记录一下这个设计的演变过程。\n\n\n - 单体式应用中显示加锁\n  首先还是回到单体应用中对共享变量进行+1的例子。\n```java\n\tInteger count = 0;\n\n\t//sychronized锁\n\tpublic synchronized void synchronizedIncrement(){\n        count++;\n    }\n\n\t//juc中的lock\n\tLock lock = new ReentrantLock();\n\n    public void incrementByLock(){\n        lock.lock();\n        try{\n            count++;\n        }finally {\n            lock.unlock();\n        }\n\n    }\n```\n用synchronized或者lock同步的方式进行统计，当单位时间内到达限定次数后否决执行。限制：单体应用下有效，分布式场景失效，显示加锁，开销大。\n\n - 单体式应用中CAS操作\n\n```java\npublic AtomicInteger atomicInteger = new AtomicInteger(0);\n\npublic increamt(){\n\tatomicInteger.incrementAndGet();\n}\n```\n虽然没有显示加锁，但是CAS操作有一定的局限性，限流中不仅要对计数器进行+1，而且还要记录时间段，所以复合操作，还是无法避免加锁。\n\n-  分布式应用中显示加锁\n\n```java\nRedisDistributeLock lock = new RedisDistributeLock();\n\npublic void incrementByLock(){\n  lock.lock();\n  try{\n  \tcount++;\n  }finally {\n \t lock.unlock();\n  }\n\n}\n```\n分布式阻塞锁的实现，可以参考我之前的博客。虽然能达到多个模块之间的同步，但还是开销过大。不得已时才会考虑使用。\n\n-  redis+lua脚本限流（最终方案）\n\n```\nlocal key = KEYS[1] --限流KEY（一秒一个）\nlocal limit = tonumber(ARGV[1])        --限流大小\nlocal current = tonumber(redis.call('get', key) or \"0\")\nif current + 1 > limit then --如果超出限流大小\n    redis.call(\"INCRBY\", key,\"1\") -- 如果不需要统计真是访问量可以不加这行\n    return 0\nelse  --请求数+1，并设置2秒过期\n    redis.call(\"INCRBY\", key,\"1\")\n    if tonumber(ARGV[2]) > -1 then\n        redis.call(\"expire\", key,tonumber(ARGV[2])) --时间窗口最大时间后销毁键\n    end\n    return 1\nend\n```\nlua脚本返回值比较奇怪，用java客户端接受返回值，只能使用Long，没有去深究。这个脚本只需要传入key（url+时间戳/预设时间窗口大小），便可以实现限流。\n这里也贴下java中配套的工具类\n\n```\npackage sinosoftgz.apiGateway.utils;\n\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.script.RedisScript;\nimport org.springframework.util.Assert;\n\nimport java.util.Arrays;\n\n/**\n * Created by xujingfeng on 2017/3/13.\n * <p>\n * 基于redis lua脚本的线程安全的计数器限流方案\n * </p>\n */\npublic class RedisRateLimiter {\n\n    /**\n     * 限流访问的url\n     */\n    private String url;\n\n    /**\n     * 单位时间的大小,最大值为 Long.MAX_VALUE - 1,以秒为单位\n     */\n    final Long timeUnit;\n\n    /**\n     * 单位时间窗口内允许的访问次数\n     */\n    final Integer limit;\n\n    /**\n     * 需要传入一个lua script,莫名其妙redisTemplate返回值永远是个Long\n     */\n    private RedisScript<Long> redisScript;\n\n    private RedisTemplate redisTemplate;\n\n    /**\n     * 配置键是否会过期，\n     * true：可以用来做接口流量统计，用定时器去删除\n     * false：过期自动删除，时间窗口过小的话会导致键过多\n     */\n    private boolean isDurable = false;\n\n    public void setRedisScript(RedisScript<Long> redisScript) {\n        this.redisScript = redisScript;\n    }\n\n    public void setRedisTemplate(RedisTemplate redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public boolean isDurable() {\n        return isDurable;\n    }\n\n    public void setDurable(boolean durable) {\n        isDurable = durable;\n    }\n\n    public RedisRateLimiter(Integer limit, Long timeUnit) {\n        this.timeUnit = timeUnit;\n        Assert.isTrue(timeUnit < Long.MAX_VALUE - 1);\n        this.limit = limit;\n    }\n\n    public RedisRateLimiter(Integer limit, Long timeUnit, boolean isDurable) {\n        this(limit, timeUnit);\n        this.isDurable = isDurable;\n    }\n\n    public boolean acquire() {\n        return this.acquire(this.url);\n    }\n\n    public boolean acquire(String url) {\n        StringBuffer key = new StringBuffer();\n        key.append(\"rateLimiter\").append(\":\")\n                .append(url).append(\":\")\n                .append(System.currentTimeMillis() / 1000 / timeUnit);\n        Integer expire = limit + 1;\n        String convertExpire = isDurable ? \"-1\" : expire.toString();\n        return redisTemplate.execute(redisScript, Arrays.asList(key.toString()), limit.toString(), convertExpire).equals(1l);\n    }\n\n}\n\n```\n由此可以见，分布式场景下，一个小小的统计次数的需求，如果真想在分布式下做到最完善，需要花很大的精力。\n\n\n\n","source":"_posts/分布式限流.md","raw":"---\ntitle: 分布式限流\ndate: 2017-03-18 13:52:00\ntags: \n- redis\n- lua\ncategories: \n- 架构设计\n---\n\n## 前言\n\n最近正在为本科论文的事感到心烦，一方面是在调研期间，发现大部分的本科论文都是以MVC为架构，如果是使用了java作为开发语言则又是千篇一律的在使用SSH，二方面是自己想就微服务，分布式方面写一篇论文，讲述一些技术点的实现，和一些中间件的使用，看到如八股文般的模板格式..不免让人望文生怯。退一步，投入模板化ssh-web项目的怀抱，落入俗套，可以省去自己不少时间，因为在外实习，琐事并不少；进一步，需要投入大量时间精力去研究，而且不成体系，没有论文参考。\n\n突然觉得写博客，比写论文爽多了，可以写自己想写的，记录自己最真实的想法。可能会逐渐将之前博客维护的自己的一些想法，纳入到本科论文中去。\n\n## 经典限流算法\n\n说回正题，补上之前分布式限流的实现。先介绍一些现有的限流方案。\n\n核心的算法主要就是四种：\nA类：计数器法，滑动窗口法\nB类：令牌桶法，漏桶法\n\n这里的四种算法通常都是在应用级别讨论的，这里不重复介绍这四种算法的实现思路了，只不过我人为的将他们分成了A，B两类。\n\n - A类算法，是否决式限流。即如果系统设定限流方案是1分钟允许100次调用，那么真实请求1分钟调用200次的话，意味着超出的100次调用，得到的是空结果或者调用频繁异常。\n\n - B类算法，是阻塞式限流。即如果系统设定限流方案是1分钟允许100次调用，那么真实请求1分钟调用200次的话，意味着超出的100次调用，会均匀安排到下一分钟返回。（当然B类算法，也可以立即返回失败，也可以达到否决式限流的效果）\n\nB类算法，如Guava包提供的RateLimiter，内部其实就是一个阻塞队列，达到阻塞限流的效果。然后分布式场景下，有一些思路悄悄的发生了变化。多个模块之间不能保证相互阻塞，共享的变量也不在一片内存空间中。为了使用阻塞限流的算法，我们不得不将统计流量放到redis一类的共享内存中，如果操作是一系列复合的操作，我们还不能使用redis自带的CAS操作(CAS操作只能保证单个操作的原子性)或者使用中间件级别的队列来阻塞操作，显示加分布式锁的开销又是非常的巨大。最终选择放弃阻塞式限流，而在分布式场景下，仅仅使用redis+lua脚本的方式来达到分布式-否决式限流的效果。redis执行lua脚本是一个单线程的行为，所以不需要显示加锁，这可以说避免了加锁导致的线程切换开销。\n\n## 锁的演变\n\n下面记录一下这个设计的演变过程。\n\n\n - 单体式应用中显示加锁\n  首先还是回到单体应用中对共享变量进行+1的例子。\n```java\n\tInteger count = 0;\n\n\t//sychronized锁\n\tpublic synchronized void synchronizedIncrement(){\n        count++;\n    }\n\n\t//juc中的lock\n\tLock lock = new ReentrantLock();\n\n    public void incrementByLock(){\n        lock.lock();\n        try{\n            count++;\n        }finally {\n            lock.unlock();\n        }\n\n    }\n```\n用synchronized或者lock同步的方式进行统计，当单位时间内到达限定次数后否决执行。限制：单体应用下有效，分布式场景失效，显示加锁，开销大。\n\n - 单体式应用中CAS操作\n\n```java\npublic AtomicInteger atomicInteger = new AtomicInteger(0);\n\npublic increamt(){\n\tatomicInteger.incrementAndGet();\n}\n```\n虽然没有显示加锁，但是CAS操作有一定的局限性，限流中不仅要对计数器进行+1，而且还要记录时间段，所以复合操作，还是无法避免加锁。\n\n-  分布式应用中显示加锁\n\n```java\nRedisDistributeLock lock = new RedisDistributeLock();\n\npublic void incrementByLock(){\n  lock.lock();\n  try{\n  \tcount++;\n  }finally {\n \t lock.unlock();\n  }\n\n}\n```\n分布式阻塞锁的实现，可以参考我之前的博客。虽然能达到多个模块之间的同步，但还是开销过大。不得已时才会考虑使用。\n\n-  redis+lua脚本限流（最终方案）\n\n```\nlocal key = KEYS[1] --限流KEY（一秒一个）\nlocal limit = tonumber(ARGV[1])        --限流大小\nlocal current = tonumber(redis.call('get', key) or \"0\")\nif current + 1 > limit then --如果超出限流大小\n    redis.call(\"INCRBY\", key,\"1\") -- 如果不需要统计真是访问量可以不加这行\n    return 0\nelse  --请求数+1，并设置2秒过期\n    redis.call(\"INCRBY\", key,\"1\")\n    if tonumber(ARGV[2]) > -1 then\n        redis.call(\"expire\", key,tonumber(ARGV[2])) --时间窗口最大时间后销毁键\n    end\n    return 1\nend\n```\nlua脚本返回值比较奇怪，用java客户端接受返回值，只能使用Long，没有去深究。这个脚本只需要传入key（url+时间戳/预设时间窗口大小），便可以实现限流。\n这里也贴下java中配套的工具类\n\n```\npackage sinosoftgz.apiGateway.utils;\n\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.script.RedisScript;\nimport org.springframework.util.Assert;\n\nimport java.util.Arrays;\n\n/**\n * Created by xujingfeng on 2017/3/13.\n * <p>\n * 基于redis lua脚本的线程安全的计数器限流方案\n * </p>\n */\npublic class RedisRateLimiter {\n\n    /**\n     * 限流访问的url\n     */\n    private String url;\n\n    /**\n     * 单位时间的大小,最大值为 Long.MAX_VALUE - 1,以秒为单位\n     */\n    final Long timeUnit;\n\n    /**\n     * 单位时间窗口内允许的访问次数\n     */\n    final Integer limit;\n\n    /**\n     * 需要传入一个lua script,莫名其妙redisTemplate返回值永远是个Long\n     */\n    private RedisScript<Long> redisScript;\n\n    private RedisTemplate redisTemplate;\n\n    /**\n     * 配置键是否会过期，\n     * true：可以用来做接口流量统计，用定时器去删除\n     * false：过期自动删除，时间窗口过小的话会导致键过多\n     */\n    private boolean isDurable = false;\n\n    public void setRedisScript(RedisScript<Long> redisScript) {\n        this.redisScript = redisScript;\n    }\n\n    public void setRedisTemplate(RedisTemplate redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public boolean isDurable() {\n        return isDurable;\n    }\n\n    public void setDurable(boolean durable) {\n        isDurable = durable;\n    }\n\n    public RedisRateLimiter(Integer limit, Long timeUnit) {\n        this.timeUnit = timeUnit;\n        Assert.isTrue(timeUnit < Long.MAX_VALUE - 1);\n        this.limit = limit;\n    }\n\n    public RedisRateLimiter(Integer limit, Long timeUnit, boolean isDurable) {\n        this(limit, timeUnit);\n        this.isDurable = isDurable;\n    }\n\n    public boolean acquire() {\n        return this.acquire(this.url);\n    }\n\n    public boolean acquire(String url) {\n        StringBuffer key = new StringBuffer();\n        key.append(\"rateLimiter\").append(\":\")\n                .append(url).append(\":\")\n                .append(System.currentTimeMillis() / 1000 / timeUnit);\n        Integer expire = limit + 1;\n        String convertExpire = isDurable ? \"-1\" : expire.toString();\n        return redisTemplate.execute(redisScript, Arrays.asList(key.toString()), limit.toString(), convertExpire).equals(1l);\n    }\n\n}\n\n```\n由此可以见，分布式场景下，一个小小的统计次数的需求，如果真想在分布式下做到最完善，需要花很大的精力。\n\n\n\n","slug":"分布式限流","published":1,"updated":"2017-09-04T11:49:26.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zua003dtwv71wncjsr8","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近正在为本科论文的事感到心烦，一方面是在调研期间，发现大部分的本科论文都是以MVC为架构，如果是使用了java作为开发语言则又是千篇一律的在使用SSH，二方面是自己想就微服务，分布式方面写一篇论文，讲述一些技术点的实现，和一些中间件的使用，看到如八股文般的模板格式..不免让人望文生怯。退一步，投入模板化ssh-web项目的怀抱，落入俗套，可以省去自己不少时间，因为在外实习，琐事并不少；进一步，需要投入大量时间精力去研究，而且不成体系，没有论文参考。</p>\n<p>突然觉得写博客，比写论文爽多了，可以写自己想写的，记录自己最真实的想法。可能会逐渐将之前博客维护的自己的一些想法，纳入到本科论文中去。</p>\n<h2 id=\"经典限流算法\"><a href=\"#经典限流算法\" class=\"headerlink\" title=\"经典限流算法\"></a>经典限流算法</h2><p>说回正题，补上之前分布式限流的实现。先介绍一些现有的限流方案。</p>\n<p>核心的算法主要就是四种：<br>A类：计数器法，滑动窗口法<br>B类：令牌桶法，漏桶法</p>\n<p>这里的四种算法通常都是在应用级别讨论的，这里不重复介绍这四种算法的实现思路了，只不过我人为的将他们分成了A，B两类。</p>\n<ul>\n<li><p>A类算法，是否决式限流。即如果系统设定限流方案是1分钟允许100次调用，那么真实请求1分钟调用200次的话，意味着超出的100次调用，得到的是空结果或者调用频繁异常。</p>\n</li>\n<li><p>B类算法，是阻塞式限流。即如果系统设定限流方案是1分钟允许100次调用，那么真实请求1分钟调用200次的话，意味着超出的100次调用，会均匀安排到下一分钟返回。（当然B类算法，也可以立即返回失败，也可以达到否决式限流的效果）</p>\n</li>\n</ul>\n<p>B类算法，如Guava包提供的RateLimiter，内部其实就是一个阻塞队列，达到阻塞限流的效果。然后分布式场景下，有一些思路悄悄的发生了变化。多个模块之间不能保证相互阻塞，共享的变量也不在一片内存空间中。为了使用阻塞限流的算法，我们不得不将统计流量放到redis一类的共享内存中，如果操作是一系列复合的操作，我们还不能使用redis自带的CAS操作(CAS操作只能保证单个操作的原子性)或者使用中间件级别的队列来阻塞操作，显示加分布式锁的开销又是非常的巨大。最终选择放弃阻塞式限流，而在分布式场景下，仅仅使用redis+lua脚本的方式来达到分布式-否决式限流的效果。redis执行lua脚本是一个单线程的行为，所以不需要显示加锁，这可以说避免了加锁导致的线程切换开销。</p>\n<h2 id=\"锁的演变\"><a href=\"#锁的演变\" class=\"headerlink\" title=\"锁的演变\"></a>锁的演变</h2><p>下面记录一下这个设计的演变过程。</p>\n<ul>\n<li>单体式应用中显示加锁<br>首先还是回到单体应用中对共享变量进行+1的例子。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Integer count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//sychronized锁</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">synchronizedIncrement</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       count++;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//juc中的lock</span></div><div class=\"line\">Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">incrementByLock</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       lock.lock();</div><div class=\"line\">       <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">           count++;</div><div class=\"line\">       &#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           lock.unlock();</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>用synchronized或者lock同步的方式进行统计，当单位时间内到达限定次数后否决执行。限制：单体应用下有效，分布式场景失效，显示加锁，开销大。</p>\n<ul>\n<li>单体式应用中CAS操作</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> AtomicInteger atomicInteger = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">increamt</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tatomicInteger.incrementAndGet();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>虽然没有显示加锁，但是CAS操作有一定的局限性，限流中不仅要对计数器进行+1，而且还要记录时间段，所以复合操作，还是无法避免加锁。</p>\n<ul>\n<li>分布式应用中显示加锁</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">RedisDistributeLock lock = <span class=\"keyword\">new</span> RedisDistributeLock();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">incrementByLock</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  lock.lock();</div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">  \tcount++;</div><div class=\"line\">  &#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\"> \t lock.unlock();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分布式阻塞锁的实现，可以参考我之前的博客。虽然能达到多个模块之间的同步，但还是开销过大。不得已时才会考虑使用。</p>\n<ul>\n<li>redis+lua脚本限流（最终方案）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">local key = KEYS[1] --限流KEY（一秒一个）</div><div class=\"line\">local limit = tonumber(ARGV[1])        --限流大小</div><div class=\"line\">local current = tonumber(redis.call(&apos;get&apos;, key) or &quot;0&quot;)</div><div class=\"line\">if current + 1 &gt; limit then --如果超出限流大小</div><div class=\"line\">    redis.call(&quot;INCRBY&quot;, key,&quot;1&quot;) -- 如果不需要统计真是访问量可以不加这行</div><div class=\"line\">    return 0</div><div class=\"line\">else  --请求数+1，并设置2秒过期</div><div class=\"line\">    redis.call(&quot;INCRBY&quot;, key,&quot;1&quot;)</div><div class=\"line\">    if tonumber(ARGV[2]) &gt; -1 then</div><div class=\"line\">        redis.call(&quot;expire&quot;, key,tonumber(ARGV[2])) --时间窗口最大时间后销毁键</div><div class=\"line\">    end</div><div class=\"line\">    return 1</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>lua脚本返回值比较奇怪，用java客户端接受返回值，只能使用Long，没有去深究。这个脚本只需要传入key（url+时间戳/预设时间窗口大小），便可以实现限流。<br>这里也贴下java中配套的工具类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\">package sinosoftgz.apiGateway.utils;</div><div class=\"line\"></div><div class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</div><div class=\"line\">import org.springframework.data.redis.core.script.RedisScript;</div><div class=\"line\">import org.springframework.util.Assert;</div><div class=\"line\"></div><div class=\"line\">import java.util.Arrays;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by xujingfeng on 2017/3/13.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 基于redis lua脚本的线程安全的计数器限流方案</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> */</div><div class=\"line\">public class RedisRateLimiter &#123;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 限流访问的url</div><div class=\"line\">     */</div><div class=\"line\">    private String url;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 单位时间的大小,最大值为 Long.MAX_VALUE - 1,以秒为单位</div><div class=\"line\">     */</div><div class=\"line\">    final Long timeUnit;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 单位时间窗口内允许的访问次数</div><div class=\"line\">     */</div><div class=\"line\">    final Integer limit;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 需要传入一个lua script,莫名其妙redisTemplate返回值永远是个Long</div><div class=\"line\">     */</div><div class=\"line\">    private RedisScript&lt;Long&gt; redisScript;</div><div class=\"line\"></div><div class=\"line\">    private RedisTemplate redisTemplate;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 配置键是否会过期，</div><div class=\"line\">     * true：可以用来做接口流量统计，用定时器去删除</div><div class=\"line\">     * false：过期自动删除，时间窗口过小的话会导致键过多</div><div class=\"line\">     */</div><div class=\"line\">    private boolean isDurable = false;</div><div class=\"line\"></div><div class=\"line\">    public void setRedisScript(RedisScript&lt;Long&gt; redisScript) &#123;</div><div class=\"line\">        this.redisScript = redisScript;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setRedisTemplate(RedisTemplate redisTemplate) &#123;</div><div class=\"line\">        this.redisTemplate = redisTemplate;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getUrl() &#123;</div><div class=\"line\">        return url;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setUrl(String url) &#123;</div><div class=\"line\">        this.url = url;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean isDurable() &#123;</div><div class=\"line\">        return isDurable;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setDurable(boolean durable) &#123;</div><div class=\"line\">        isDurable = durable;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public RedisRateLimiter(Integer limit, Long timeUnit) &#123;</div><div class=\"line\">        this.timeUnit = timeUnit;</div><div class=\"line\">        Assert.isTrue(timeUnit &lt; Long.MAX_VALUE - 1);</div><div class=\"line\">        this.limit = limit;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public RedisRateLimiter(Integer limit, Long timeUnit, boolean isDurable) &#123;</div><div class=\"line\">        this(limit, timeUnit);</div><div class=\"line\">        this.isDurable = isDurable;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean acquire() &#123;</div><div class=\"line\">        return this.acquire(this.url);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean acquire(String url) &#123;</div><div class=\"line\">        StringBuffer key = new StringBuffer();</div><div class=\"line\">        key.append(&quot;rateLimiter&quot;).append(&quot;:&quot;)</div><div class=\"line\">                .append(url).append(&quot;:&quot;)</div><div class=\"line\">                .append(System.currentTimeMillis() / 1000 / timeUnit);</div><div class=\"line\">        Integer expire = limit + 1;</div><div class=\"line\">        String convertExpire = isDurable ? &quot;-1&quot; : expire.toString();</div><div class=\"line\">        return redisTemplate.execute(redisScript, Arrays.asList(key.toString()), limit.toString(), convertExpire).equals(1l);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由此可以见，分布式场景下，一个小小的统计次数的需求，如果真想在分布式下做到最完善，需要花很大的精力。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近正在为本科论文的事感到心烦，一方面是在调研期间，发现大部分的本科论文都是以MVC为架构，如果是使用了java作为开发语言则又是千篇一律的在使用SSH，二方面是自己想就微服务，分布式方面写一篇论文，讲述一些技术点的实现，和一些中间件的使用，看到如八股文般的模板格式..不免让人望文生怯。退一步，投入模板化ssh-web项目的怀抱，落入俗套，可以省去自己不少时间，因为在外实习，琐事并不少；进一步，需要投入大量时间精力去研究，而且不成体系，没有论文参考。</p>\n<p>突然觉得写博客，比写论文爽多了，可以写自己想写的，记录自己最真实的想法。可能会逐渐将之前博客维护的自己的一些想法，纳入到本科论文中去。</p>\n<h2 id=\"经典限流算法\"><a href=\"#经典限流算法\" class=\"headerlink\" title=\"经典限流算法\"></a>经典限流算法</h2><p>说回正题，补上之前分布式限流的实现。先介绍一些现有的限流方案。</p>\n<p>核心的算法主要就是四种：<br>A类：计数器法，滑动窗口法<br>B类：令牌桶法，漏桶法</p>\n<p>这里的四种算法通常都是在应用级别讨论的，这里不重复介绍这四种算法的实现思路了，只不过我人为的将他们分成了A，B两类。</p>\n<ul>\n<li><p>A类算法，是否决式限流。即如果系统设定限流方案是1分钟允许100次调用，那么真实请求1分钟调用200次的话，意味着超出的100次调用，得到的是空结果或者调用频繁异常。</p>\n</li>\n<li><p>B类算法，是阻塞式限流。即如果系统设定限流方案是1分钟允许100次调用，那么真实请求1分钟调用200次的话，意味着超出的100次调用，会均匀安排到下一分钟返回。（当然B类算法，也可以立即返回失败，也可以达到否决式限流的效果）</p>\n</li>\n</ul>\n<p>B类算法，如Guava包提供的RateLimiter，内部其实就是一个阻塞队列，达到阻塞限流的效果。然后分布式场景下，有一些思路悄悄的发生了变化。多个模块之间不能保证相互阻塞，共享的变量也不在一片内存空间中。为了使用阻塞限流的算法，我们不得不将统计流量放到redis一类的共享内存中，如果操作是一系列复合的操作，我们还不能使用redis自带的CAS操作(CAS操作只能保证单个操作的原子性)或者使用中间件级别的队列来阻塞操作，显示加分布式锁的开销又是非常的巨大。最终选择放弃阻塞式限流，而在分布式场景下，仅仅使用redis+lua脚本的方式来达到分布式-否决式限流的效果。redis执行lua脚本是一个单线程的行为，所以不需要显示加锁，这可以说避免了加锁导致的线程切换开销。</p>\n<h2 id=\"锁的演变\"><a href=\"#锁的演变\" class=\"headerlink\" title=\"锁的演变\"></a>锁的演变</h2><p>下面记录一下这个设计的演变过程。</p>\n<ul>\n<li>单体式应用中显示加锁<br>首先还是回到单体应用中对共享变量进行+1的例子。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">Integer count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//sychronized锁</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">synchronizedIncrement</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       count++;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//juc中的lock</span></div><div class=\"line\">Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">incrementByLock</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       lock.lock();</div><div class=\"line\">       <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">           count++;</div><div class=\"line\">       &#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">           lock.unlock();</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>用synchronized或者lock同步的方式进行统计，当单位时间内到达限定次数后否决执行。限制：单体应用下有效，分布式场景失效，显示加锁，开销大。</p>\n<ul>\n<li>单体式应用中CAS操作</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> AtomicInteger atomicInteger = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">increamt</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tatomicInteger.incrementAndGet();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>虽然没有显示加锁，但是CAS操作有一定的局限性，限流中不仅要对计数器进行+1，而且还要记录时间段，所以复合操作，还是无法避免加锁。</p>\n<ul>\n<li>分布式应用中显示加锁</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">RedisDistributeLock lock = <span class=\"keyword\">new</span> RedisDistributeLock();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">incrementByLock</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  lock.lock();</div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">  \tcount++;</div><div class=\"line\">  &#125;<span class=\"keyword\">finally</span> &#123;</div><div class=\"line\"> \t lock.unlock();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分布式阻塞锁的实现，可以参考我之前的博客。虽然能达到多个模块之间的同步，但还是开销过大。不得已时才会考虑使用。</p>\n<ul>\n<li>redis+lua脚本限流（最终方案）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">local key = KEYS[1] --限流KEY（一秒一个）</div><div class=\"line\">local limit = tonumber(ARGV[1])        --限流大小</div><div class=\"line\">local current = tonumber(redis.call(&apos;get&apos;, key) or &quot;0&quot;)</div><div class=\"line\">if current + 1 &gt; limit then --如果超出限流大小</div><div class=\"line\">    redis.call(&quot;INCRBY&quot;, key,&quot;1&quot;) -- 如果不需要统计真是访问量可以不加这行</div><div class=\"line\">    return 0</div><div class=\"line\">else  --请求数+1，并设置2秒过期</div><div class=\"line\">    redis.call(&quot;INCRBY&quot;, key,&quot;1&quot;)</div><div class=\"line\">    if tonumber(ARGV[2]) &gt; -1 then</div><div class=\"line\">        redis.call(&quot;expire&quot;, key,tonumber(ARGV[2])) --时间窗口最大时间后销毁键</div><div class=\"line\">    end</div><div class=\"line\">    return 1</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>lua脚本返回值比较奇怪，用java客户端接受返回值，只能使用Long，没有去深究。这个脚本只需要传入key（url+时间戳/预设时间窗口大小），便可以实现限流。<br>这里也贴下java中配套的工具类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\">package sinosoftgz.apiGateway.utils;</div><div class=\"line\"></div><div class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</div><div class=\"line\">import org.springframework.data.redis.core.script.RedisScript;</div><div class=\"line\">import org.springframework.util.Assert;</div><div class=\"line\"></div><div class=\"line\">import java.util.Arrays;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by xujingfeng on 2017/3/13.</div><div class=\"line\"> * &lt;p&gt;</div><div class=\"line\"> * 基于redis lua脚本的线程安全的计数器限流方案</div><div class=\"line\"> * &lt;/p&gt;</div><div class=\"line\"> */</div><div class=\"line\">public class RedisRateLimiter &#123;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 限流访问的url</div><div class=\"line\">     */</div><div class=\"line\">    private String url;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 单位时间的大小,最大值为 Long.MAX_VALUE - 1,以秒为单位</div><div class=\"line\">     */</div><div class=\"line\">    final Long timeUnit;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 单位时间窗口内允许的访问次数</div><div class=\"line\">     */</div><div class=\"line\">    final Integer limit;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 需要传入一个lua script,莫名其妙redisTemplate返回值永远是个Long</div><div class=\"line\">     */</div><div class=\"line\">    private RedisScript&lt;Long&gt; redisScript;</div><div class=\"line\"></div><div class=\"line\">    private RedisTemplate redisTemplate;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 配置键是否会过期，</div><div class=\"line\">     * true：可以用来做接口流量统计，用定时器去删除</div><div class=\"line\">     * false：过期自动删除，时间窗口过小的话会导致键过多</div><div class=\"line\">     */</div><div class=\"line\">    private boolean isDurable = false;</div><div class=\"line\"></div><div class=\"line\">    public void setRedisScript(RedisScript&lt;Long&gt; redisScript) &#123;</div><div class=\"line\">        this.redisScript = redisScript;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setRedisTemplate(RedisTemplate redisTemplate) &#123;</div><div class=\"line\">        this.redisTemplate = redisTemplate;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getUrl() &#123;</div><div class=\"line\">        return url;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setUrl(String url) &#123;</div><div class=\"line\">        this.url = url;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean isDurable() &#123;</div><div class=\"line\">        return isDurable;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setDurable(boolean durable) &#123;</div><div class=\"line\">        isDurable = durable;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public RedisRateLimiter(Integer limit, Long timeUnit) &#123;</div><div class=\"line\">        this.timeUnit = timeUnit;</div><div class=\"line\">        Assert.isTrue(timeUnit &lt; Long.MAX_VALUE - 1);</div><div class=\"line\">        this.limit = limit;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public RedisRateLimiter(Integer limit, Long timeUnit, boolean isDurable) &#123;</div><div class=\"line\">        this(limit, timeUnit);</div><div class=\"line\">        this.isDurable = isDurable;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean acquire() &#123;</div><div class=\"line\">        return this.acquire(this.url);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean acquire(String url) &#123;</div><div class=\"line\">        StringBuffer key = new StringBuffer();</div><div class=\"line\">        key.append(&quot;rateLimiter&quot;).append(&quot;:&quot;)</div><div class=\"line\">                .append(url).append(&quot;:&quot;)</div><div class=\"line\">                .append(System.currentTimeMillis() / 1000 / timeUnit);</div><div class=\"line\">        Integer expire = limit + 1;</div><div class=\"line\">        String convertExpire = isDurable ? &quot;-1&quot; : expire.toString();</div><div class=\"line\">        return redisTemplate.execute(redisScript, Arrays.asList(key.toString()), limit.toString(), convertExpire).equals(1l);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由此可以见，分布式场景下，一个小小的统计次数的需求，如果真想在分布式下做到最完善，需要花很大的精力。</p>\n"},{"title":"使用zkclient操作zookeeper的学习过程记录","date":"2016-08-16T07:52:52.000Z","_content":"\n\n\n前言\n--\n\n最近开发的分布式(使用motan)项目中使用zookeeper作为服务中心来提供注册服务(`@MotanService`)和发现服务(`@MotanRefer)`,虽然motan这个rpc框架对服务模块进行了很好的封装，但是以防以后会出现定制化的需求，以及对服务更好的监控，所以有必要了解一下zookeeper的基本知识和使用方法。关于zookeeper的知识点，网上很多的博客都已经介绍的很详尽了，我写这篇的博客的用意其实也就是将一些零散的却很精妙的博客整理出来，方便以后查阅。短篇以cp的方式，长篇的以url的方式。\n\nzookeeper是什么？\n-------------\n\n\n> ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。\n> ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。\n> ZooKeeper包含一个简单的原语集，提供Java和C的接口。 ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口。\n>\n> ----百度百科\n\n一开始看的云里雾里的，幸好我之前搞过一点hadoop，对他的生态体系有所了解，这才大概知道他想说什么。提炼几个关键词，并且加入我后面学习的理解，总结一下就是--\n\n> zookeeper是一个组件，需要安装客户端和服务端，一般用于解决分布式开发下的一些问题。化抽象为具体，你可以把整个zookeeper理解成一个树形数据结构，也可以理解为一个文件系统的结构，每个叶子节点都会携带一些信息(data)，并且也可能会携带一些操作(op)。分布式场景中，每一个客户端都可以访问到这些叶子节点，并且进行一些操作。我们所有使用zookeeper的场景几乎都是在CRUD某一个或者某些叶子节点，然后会触发对应的操作...即zookeeper本身可以理解为一个shareData。\n> ----来自于博主的口胡\n\nzookeeper怎么学？\n-------------\n学一个新的中间件的最好方法是先在脑子里面有一个想法：我为什么要学他，是想解决什么问题，他大概是个什么东西，我觉得打开思路的最好方式是看几篇博客(大多数情况你一开始看不懂，但是混个眼熟)，然后看视频，这里我自己是了解过了zookeeper原生的api之后看了[极客学院](http://www.jikexueyuan.com/course/zookeeper/)的视频\n\n<!-- more -->\n\nzkclient的使用\n-----------\n学完原生api之后一般我们不直接使用，类比redis的客户端jedis，再到spring提供的redisTemplate;类比jdbc到dbutils，再到orm框架。所以作为小白，我建议使用这个比较简单的客户端zkclient，当后期需求需要一些定制化需求时使用原生的api自己重写，或者使用更高级一点的其他客户端。\n\nzkclient我学完之后觉得非常轻量级，设计也很规范，大概可以参考以下的博客。\n[博客园-房继诺](http://www.cnblogs.com/f1194361820/p/5575206.html)\n原作者非常用心，里面给出了一张zkclient的uml类图，如下\n![这里写图片描述](http://img.blog.csdn.net/20170204020203065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n顺便也复习一下uml类图的知识，理解清楚图中用到的聚合，组合，关联，泛化，实现的箭头含义。uml建模没有学好的同学的移步这个[链接](http://justsee.iteye.com/blog/808799)，里面对应了java讲解，还算详细。\n掌握这个客户端之后，还需要补充一些注意点\n\n    1.  create方法:创建节点时,如果节点已经存在,仍然抛出NodeExistException,可是我期望它不在抛出此异常.\n    2.  retryUtilConnected: 如果向zookeeper请求数据时(create,delete,setData等),此时链接不可用,那么调用者将会被阻塞直到链接建立成功;不过我仍然需要一些方法是非阻塞的,如果链接不可用,则抛出异常,或者直接返回.\n    3.  create方法: 创建节点时,如果节点的父节点不存在,我期望同时也要创建父节点,而不是抛出异常.\n    4.  data监测: 我需要提供一个额外的功能来补充watch的不足,开启一个线程,间歇性的去zk server获取指定的path的data,并缓存起来..归因与watch可能丢失,以及它不能持续的反应znode数据的每一次变化,所以只能手动去同步获取.\n\n回到开始\n----\n这个时候看看你当初为啥要学习zookeeper，看看能不能解决你当时遇到的问题。如果你有兴趣，可以自己去试试zookeeper前面提到的那些可以实现的功能：分布式锁、选举、队列等等\n\n","source":"_posts/使用zkclient操作zookeeper的学习过程记录.md","raw":"---\ntitle: 使用zkclient操作zookeeper的学习过程记录\ndate: 2016-08-16 15:52:52\ntags: \n- zookeeper\ncategories: \n- JAVA\n---\n\n\n\n前言\n--\n\n最近开发的分布式(使用motan)项目中使用zookeeper作为服务中心来提供注册服务(`@MotanService`)和发现服务(`@MotanRefer)`,虽然motan这个rpc框架对服务模块进行了很好的封装，但是以防以后会出现定制化的需求，以及对服务更好的监控，所以有必要了解一下zookeeper的基本知识和使用方法。关于zookeeper的知识点，网上很多的博客都已经介绍的很详尽了，我写这篇的博客的用意其实也就是将一些零散的却很精妙的博客整理出来，方便以后查阅。短篇以cp的方式，长篇的以url的方式。\n\nzookeeper是什么？\n-------------\n\n\n> ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。\n> ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。\n> ZooKeeper包含一个简单的原语集，提供Java和C的接口。 ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口。\n>\n> ----百度百科\n\n一开始看的云里雾里的，幸好我之前搞过一点hadoop，对他的生态体系有所了解，这才大概知道他想说什么。提炼几个关键词，并且加入我后面学习的理解，总结一下就是--\n\n> zookeeper是一个组件，需要安装客户端和服务端，一般用于解决分布式开发下的一些问题。化抽象为具体，你可以把整个zookeeper理解成一个树形数据结构，也可以理解为一个文件系统的结构，每个叶子节点都会携带一些信息(data)，并且也可能会携带一些操作(op)。分布式场景中，每一个客户端都可以访问到这些叶子节点，并且进行一些操作。我们所有使用zookeeper的场景几乎都是在CRUD某一个或者某些叶子节点，然后会触发对应的操作...即zookeeper本身可以理解为一个shareData。\n> ----来自于博主的口胡\n\nzookeeper怎么学？\n-------------\n学一个新的中间件的最好方法是先在脑子里面有一个想法：我为什么要学他，是想解决什么问题，他大概是个什么东西，我觉得打开思路的最好方式是看几篇博客(大多数情况你一开始看不懂，但是混个眼熟)，然后看视频，这里我自己是了解过了zookeeper原生的api之后看了[极客学院](http://www.jikexueyuan.com/course/zookeeper/)的视频\n\n<!-- more -->\n\nzkclient的使用\n-----------\n学完原生api之后一般我们不直接使用，类比redis的客户端jedis，再到spring提供的redisTemplate;类比jdbc到dbutils，再到orm框架。所以作为小白，我建议使用这个比较简单的客户端zkclient，当后期需求需要一些定制化需求时使用原生的api自己重写，或者使用更高级一点的其他客户端。\n\nzkclient我学完之后觉得非常轻量级，设计也很规范，大概可以参考以下的博客。\n[博客园-房继诺](http://www.cnblogs.com/f1194361820/p/5575206.html)\n原作者非常用心，里面给出了一张zkclient的uml类图，如下\n![这里写图片描述](http://img.blog.csdn.net/20170204020203065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n顺便也复习一下uml类图的知识，理解清楚图中用到的聚合，组合，关联，泛化，实现的箭头含义。uml建模没有学好的同学的移步这个[链接](http://justsee.iteye.com/blog/808799)，里面对应了java讲解，还算详细。\n掌握这个客户端之后，还需要补充一些注意点\n\n    1.  create方法:创建节点时,如果节点已经存在,仍然抛出NodeExistException,可是我期望它不在抛出此异常.\n    2.  retryUtilConnected: 如果向zookeeper请求数据时(create,delete,setData等),此时链接不可用,那么调用者将会被阻塞直到链接建立成功;不过我仍然需要一些方法是非阻塞的,如果链接不可用,则抛出异常,或者直接返回.\n    3.  create方法: 创建节点时,如果节点的父节点不存在,我期望同时也要创建父节点,而不是抛出异常.\n    4.  data监测: 我需要提供一个额外的功能来补充watch的不足,开启一个线程,间歇性的去zk server获取指定的path的data,并缓存起来..归因与watch可能丢失,以及它不能持续的反应znode数据的每一次变化,所以只能手动去同步获取.\n\n回到开始\n----\n这个时候看看你当初为啥要学习zookeeper，看看能不能解决你当时遇到的问题。如果你有兴趣，可以自己去试试zookeeper前面提到的那些可以实现的功能：分布式锁、选举、队列等等\n\n","slug":"使用zkclient操作zookeeper的学习过程记录","published":1,"updated":"2017-09-04T11:49:26.386Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zue003gtwv73vue1uth","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近开发的分布式(使用motan)项目中使用zookeeper作为服务中心来提供注册服务(<code>@MotanService</code>)和发现服务(<code>@MotanRefer)</code>,虽然motan这个rpc框架对服务模块进行了很好的封装，但是以防以后会出现定制化的需求，以及对服务更好的监控，所以有必要了解一下zookeeper的基本知识和使用方法。关于zookeeper的知识点，网上很多的博客都已经介绍的很详尽了，我写这篇的博客的用意其实也就是将一些零散的却很精妙的博客整理出来，方便以后查阅。短篇以cp的方式，长篇的以url的方式。</p>\n<h2 id=\"zookeeper是什么？\"><a href=\"#zookeeper是什么？\" class=\"headerlink\" title=\"zookeeper是什么？\"></a>zookeeper是什么？</h2><blockquote>\n<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。<br>ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。<br>ZooKeeper包含一个简单的原语集，提供Java和C的接口。 ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口。</p>\n<p>—-百度百科</p>\n</blockquote>\n<p>一开始看的云里雾里的，幸好我之前搞过一点hadoop，对他的生态体系有所了解，这才大概知道他想说什么。提炼几个关键词，并且加入我后面学习的理解，总结一下就是–</p>\n<blockquote>\n<p>zookeeper是一个组件，需要安装客户端和服务端，一般用于解决分布式开发下的一些问题。化抽象为具体，你可以把整个zookeeper理解成一个树形数据结构，也可以理解为一个文件系统的结构，每个叶子节点都会携带一些信息(data)，并且也可能会携带一些操作(op)。分布式场景中，每一个客户端都可以访问到这些叶子节点，并且进行一些操作。我们所有使用zookeeper的场景几乎都是在CRUD某一个或者某些叶子节点，然后会触发对应的操作…即zookeeper本身可以理解为一个shareData。<br>—-来自于博主的口胡</p>\n</blockquote>\n<h2 id=\"zookeeper怎么学？\"><a href=\"#zookeeper怎么学？\" class=\"headerlink\" title=\"zookeeper怎么学？\"></a>zookeeper怎么学？</h2><p>学一个新的中间件的最好方法是先在脑子里面有一个想法：我为什么要学他，是想解决什么问题，他大概是个什么东西，我觉得打开思路的最好方式是看几篇博客(大多数情况你一开始看不懂，但是混个眼熟)，然后看视频，这里我自己是了解过了zookeeper原生的api之后看了<a href=\"http://www.jikexueyuan.com/course/zookeeper/\" target=\"_blank\" rel=\"external\">极客学院</a>的视频</p>\n<a id=\"more\"></a>\n<h2 id=\"zkclient的使用\"><a href=\"#zkclient的使用\" class=\"headerlink\" title=\"zkclient的使用\"></a>zkclient的使用</h2><p>学完原生api之后一般我们不直接使用，类比redis的客户端jedis，再到spring提供的redisTemplate;类比jdbc到dbutils，再到orm框架。所以作为小白，我建议使用这个比较简单的客户端zkclient，当后期需求需要一些定制化需求时使用原生的api自己重写，或者使用更高级一点的其他客户端。</p>\n<p>zkclient我学完之后觉得非常轻量级，设计也很规范，大概可以参考以下的博客。<br><a href=\"http://www.cnblogs.com/f1194361820/p/5575206.html\" target=\"_blank\" rel=\"external\">博客园-房继诺</a><br>原作者非常用心，里面给出了一张zkclient的uml类图，如下<br><img src=\"http://img.blog.csdn.net/20170204020203065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>顺便也复习一下uml类图的知识，理解清楚图中用到的聚合，组合，关联，泛化，实现的箭头含义。uml建模没有学好的同学的移步这个<a href=\"http://justsee.iteye.com/blog/808799\" target=\"_blank\" rel=\"external\">链接</a>，里面对应了java讲解，还算详细。<br>掌握这个客户端之后，还需要补充一些注意点</p>\n<pre><code>1.  create方法:创建节点时,如果节点已经存在,仍然抛出NodeExistException,可是我期望它不在抛出此异常.\n2.  retryUtilConnected: 如果向zookeeper请求数据时(create,delete,setData等),此时链接不可用,那么调用者将会被阻塞直到链接建立成功;不过我仍然需要一些方法是非阻塞的,如果链接不可用,则抛出异常,或者直接返回.\n3.  create方法: 创建节点时,如果节点的父节点不存在,我期望同时也要创建父节点,而不是抛出异常.\n4.  data监测: 我需要提供一个额外的功能来补充watch的不足,开启一个线程,间歇性的去zk server获取指定的path的data,并缓存起来..归因与watch可能丢失,以及它不能持续的反应znode数据的每一次变化,所以只能手动去同步获取.\n</code></pre><h2 id=\"回到开始\"><a href=\"#回到开始\" class=\"headerlink\" title=\"回到开始\"></a>回到开始</h2><p>这个时候看看你当初为啥要学习zookeeper，看看能不能解决你当时遇到的问题。如果你有兴趣，可以自己去试试zookeeper前面提到的那些可以实现的功能：分布式锁、选举、队列等等</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近开发的分布式(使用motan)项目中使用zookeeper作为服务中心来提供注册服务(<code>@MotanService</code>)和发现服务(<code>@MotanRefer)</code>,虽然motan这个rpc框架对服务模块进行了很好的封装，但是以防以后会出现定制化的需求，以及对服务更好的监控，所以有必要了解一下zookeeper的基本知识和使用方法。关于zookeeper的知识点，网上很多的博客都已经介绍的很详尽了，我写这篇的博客的用意其实也就是将一些零散的却很精妙的博客整理出来，方便以后查阅。短篇以cp的方式，长篇的以url的方式。</p>\n<h2 id=\"zookeeper是什么？\"><a href=\"#zookeeper是什么？\" class=\"headerlink\" title=\"zookeeper是什么？\"></a>zookeeper是什么？</h2><blockquote>\n<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。<br>ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。<br>ZooKeeper包含一个简单的原语集，提供Java和C的接口。 ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口。</p>\n<p>—-百度百科</p>\n</blockquote>\n<p>一开始看的云里雾里的，幸好我之前搞过一点hadoop，对他的生态体系有所了解，这才大概知道他想说什么。提炼几个关键词，并且加入我后面学习的理解，总结一下就是–</p>\n<blockquote>\n<p>zookeeper是一个组件，需要安装客户端和服务端，一般用于解决分布式开发下的一些问题。化抽象为具体，你可以把整个zookeeper理解成一个树形数据结构，也可以理解为一个文件系统的结构，每个叶子节点都会携带一些信息(data)，并且也可能会携带一些操作(op)。分布式场景中，每一个客户端都可以访问到这些叶子节点，并且进行一些操作。我们所有使用zookeeper的场景几乎都是在CRUD某一个或者某些叶子节点，然后会触发对应的操作…即zookeeper本身可以理解为一个shareData。<br>—-来自于博主的口胡</p>\n</blockquote>\n<h2 id=\"zookeeper怎么学？\"><a href=\"#zookeeper怎么学？\" class=\"headerlink\" title=\"zookeeper怎么学？\"></a>zookeeper怎么学？</h2><p>学一个新的中间件的最好方法是先在脑子里面有一个想法：我为什么要学他，是想解决什么问题，他大概是个什么东西，我觉得打开思路的最好方式是看几篇博客(大多数情况你一开始看不懂，但是混个眼熟)，然后看视频，这里我自己是了解过了zookeeper原生的api之后看了<a href=\"http://www.jikexueyuan.com/course/zookeeper/\" target=\"_blank\" rel=\"external\">极客学院</a>的视频</p>","more":"<h2 id=\"zkclient的使用\"><a href=\"#zkclient的使用\" class=\"headerlink\" title=\"zkclient的使用\"></a>zkclient的使用</h2><p>学完原生api之后一般我们不直接使用，类比redis的客户端jedis，再到spring提供的redisTemplate;类比jdbc到dbutils，再到orm框架。所以作为小白，我建议使用这个比较简单的客户端zkclient，当后期需求需要一些定制化需求时使用原生的api自己重写，或者使用更高级一点的其他客户端。</p>\n<p>zkclient我学完之后觉得非常轻量级，设计也很规范，大概可以参考以下的博客。<br><a href=\"http://www.cnblogs.com/f1194361820/p/5575206.html\" target=\"_blank\" rel=\"external\">博客园-房继诺</a><br>原作者非常用心，里面给出了一张zkclient的uml类图，如下<br><img src=\"http://img.blog.csdn.net/20170204020203065?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>顺便也复习一下uml类图的知识，理解清楚图中用到的聚合，组合，关联，泛化，实现的箭头含义。uml建模没有学好的同学的移步这个<a href=\"http://justsee.iteye.com/blog/808799\" target=\"_blank\" rel=\"external\">链接</a>，里面对应了java讲解，还算详细。<br>掌握这个客户端之后，还需要补充一些注意点</p>\n<pre><code>1.  create方法:创建节点时,如果节点已经存在,仍然抛出NodeExistException,可是我期望它不在抛出此异常.\n2.  retryUtilConnected: 如果向zookeeper请求数据时(create,delete,setData等),此时链接不可用,那么调用者将会被阻塞直到链接建立成功;不过我仍然需要一些方法是非阻塞的,如果链接不可用,则抛出异常,或者直接返回.\n3.  create方法: 创建节点时,如果节点的父节点不存在,我期望同时也要创建父节点,而不是抛出异常.\n4.  data监测: 我需要提供一个额外的功能来补充watch的不足,开启一个线程,间歇性的去zk server获取指定的path的data,并缓存起来..归因与watch可能丢失,以及它不能持续的反应znode数据的每一次变化,所以只能手动去同步获取.\n</code></pre><h2 id=\"回到开始\"><a href=\"#回到开始\" class=\"headerlink\" title=\"回到开始\"></a>回到开始</h2><p>这个时候看看你当初为啥要学习zookeeper，看看能不能解决你当时遇到的问题。如果你有兴趣，可以自己去试试zookeeper前面提到的那些可以实现的功能：分布式锁、选举、队列等等</p>"},{"title":"博客搬家","date":"2017-08-22T08:38:44.000Z","banner":"/css/images/banner/1.jpg","_content":"\n\n\n陆陆续续，写博客已经写了有4年多了，之前一直在CSDN维护博客（[博客旧址](http://blog.csdn.net/u013815546)），最近有了点空余时间，使用hexo搭了这个博客，的确比CSDN清爽多了，首先感谢@程序猿DD推荐的icarus模板，国人开发的一个hexo模板，插件支持可能不是很完善，但是样式非常让人喜欢。\n\n作为一个前端弱渣，搭建博客的过程还是遇到了不少的困难。原先是打算直接使用github个人主页作为博客地址，hexo对git有很好的支持，源代码和博客静态页面都托管在了github，master分支放静态页面，hexo分支放源文件。可惜的是国内坑爹的网速,github.io的访问速度不尽如人意（github.com倒还好），于是在宇泽学妹@ntzyz的帮助下，搞了github的hook，本地提交到github时，代理服务器自动向master分支拉取页面，同时设置反向代理和https。由于hexo是静态文件搭建的博客，这种方式可以说是非常合适的。所以，国内的朋友浏览本博客可以直接访问[https://www.cnkirito.moe](https://www.cnkirito.moe)，如果有国外代理的朋友可以直接访问我的github个人主页[https://lexburner.github.io](https://lexburner.github.io)。\n\n目前博客功能还不算完善，缺少评论，分享，和一些小插件，以后逐渐完善，不过不影响主要功能。以后这儿就作为我主要更新博客的地方了！","source":"_posts/博客搬家.md","raw":"---\ntitle: 博客搬家\ndate: 2017-08-22 16:38:44\ncategories:\n- 技术杂谈\nbanner: /css/images/banner/1.jpg\n---\n\n\n\n陆陆续续，写博客已经写了有4年多了，之前一直在CSDN维护博客（[博客旧址](http://blog.csdn.net/u013815546)），最近有了点空余时间，使用hexo搭了这个博客，的确比CSDN清爽多了，首先感谢@程序猿DD推荐的icarus模板，国人开发的一个hexo模板，插件支持可能不是很完善，但是样式非常让人喜欢。\n\n作为一个前端弱渣，搭建博客的过程还是遇到了不少的困难。原先是打算直接使用github个人主页作为博客地址，hexo对git有很好的支持，源代码和博客静态页面都托管在了github，master分支放静态页面，hexo分支放源文件。可惜的是国内坑爹的网速,github.io的访问速度不尽如人意（github.com倒还好），于是在宇泽学妹@ntzyz的帮助下，搞了github的hook，本地提交到github时，代理服务器自动向master分支拉取页面，同时设置反向代理和https。由于hexo是静态文件搭建的博客，这种方式可以说是非常合适的。所以，国内的朋友浏览本博客可以直接访问[https://www.cnkirito.moe](https://www.cnkirito.moe)，如果有国外代理的朋友可以直接访问我的github个人主页[https://lexburner.github.io](https://lexburner.github.io)。\n\n目前博客功能还不算完善，缺少评论，分享，和一些小插件，以后逐渐完善，不过不影响主要功能。以后这儿就作为我主要更新博客的地方了！","slug":"博客搬家","published":1,"updated":"2017-09-04T11:49:26.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zui003ktwv7jfls638e","content":"<p>陆陆续续，写博客已经写了有4年多了，之前一直在CSDN维护博客（<a href=\"http://blog.csdn.net/u013815546\" target=\"_blank\" rel=\"external\">博客旧址</a>），最近有了点空余时间，使用hexo搭了这个博客，的确比CSDN清爽多了，首先感谢@程序猿DD推荐的icarus模板，国人开发的一个hexo模板，插件支持可能不是很完善，但是样式非常让人喜欢。</p>\n<p>作为一个前端弱渣，搭建博客的过程还是遇到了不少的困难。原先是打算直接使用github个人主页作为博客地址，hexo对git有很好的支持，源代码和博客静态页面都托管在了github，master分支放静态页面，hexo分支放源文件。可惜的是国内坑爹的网速,github.io的访问速度不尽如人意（github.com倒还好），于是在宇泽学妹@ntzyz的帮助下，搞了github的hook，本地提交到github时，代理服务器自动向master分支拉取页面，同时设置反向代理和https。由于hexo是静态文件搭建的博客，这种方式可以说是非常合适的。所以，国内的朋友浏览本博客可以直接访问<a href=\"https://www.cnkirito.moe\" target=\"_blank\" rel=\"external\">https://www.cnkirito.moe</a>，如果有国外代理的朋友可以直接访问我的github个人主页<a href=\"https://lexburner.github.io\">https://lexburner.github.io</a>。</p>\n<p>目前博客功能还不算完善，缺少评论，分享，和一些小插件，以后逐渐完善，不过不影响主要功能。以后这儿就作为我主要更新博客的地方了！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>陆陆续续，写博客已经写了有4年多了，之前一直在CSDN维护博客（<a href=\"http://blog.csdn.net/u013815546\" target=\"_blank\" rel=\"external\">博客旧址</a>），最近有了点空余时间，使用hexo搭了这个博客，的确比CSDN清爽多了，首先感谢@程序猿DD推荐的icarus模板，国人开发的一个hexo模板，插件支持可能不是很完善，但是样式非常让人喜欢。</p>\n<p>作为一个前端弱渣，搭建博客的过程还是遇到了不少的困难。原先是打算直接使用github个人主页作为博客地址，hexo对git有很好的支持，源代码和博客静态页面都托管在了github，master分支放静态页面，hexo分支放源文件。可惜的是国内坑爹的网速,github.io的访问速度不尽如人意（github.com倒还好），于是在宇泽学妹@ntzyz的帮助下，搞了github的hook，本地提交到github时，代理服务器自动向master分支拉取页面，同时设置反向代理和https。由于hexo是静态文件搭建的博客，这种方式可以说是非常合适的。所以，国内的朋友浏览本博客可以直接访问<a href=\"https://www.cnkirito.moe\" target=\"_blank\" rel=\"external\">https://www.cnkirito.moe</a>，如果有国外代理的朋友可以直接访问我的github个人主页<a href=\"https://lexburner.github.io\">https://lexburner.github.io</a>。</p>\n<p>目前博客功能还不算完善，缺少评论，分享，和一些小插件，以后逐渐完善，不过不影响主要功能。以后这儿就作为我主要更新博客的地方了！</p>\n"},{"title":"使用JPA实现乐观锁","date":"2016-08-16T07:52:52.000Z","_content":"\n\n\n乐观锁的概念就不再赘述了，不了解的朋友请自行百度谷歌之，今天主要说的是在项目中如何使用乐观锁，做成一个小demo。\n\n持久层使用jpa时，默认提供了一个注解`@Version`先看看源码怎么描述这个注解的\n\n```java\n@Target({ METHOD, FIELD })\n@Retention(RUNTIME)\npublic @interface Version {\n}\n```\n简单来说就是用一个version字段来充当乐观锁的作用。\n先来设计实体类\n\n```java\n/**\n * Created by xujingfeng on 2017/1/30.\n */\n@Entity\n@Table(name = \"t_student\")\npublic class Student {\n\n    @Id\n    @GenericGenerator(name = \"PKUUID\", strategy = \"uuid2\")\n    @GeneratedValue(generator = \"PKUUID\")\n    @Column(length = 36)\n    private String id;\n\n    @Version\n    private int version;\n\n    private String name;\n\n    //getter()...\n    //setter()...\n}\n```\n<!-- more -->\n\nDao层\n\n```java\n/**\n * Created by xujingfeng on 2017/1/30.\n */\npublic interface StudentDao extends JpaRepository<Student,String>{\n\n    @Query(\"update Student set name=?1 where id=?2\")\n    @Modifying\n    @Transactional\n    int updateNameById(String name,String id);\n}\n```\nController层充当单元测试的作用，通过访问一个requestMapping来触发我们想要测试的方法。\n\n```java\n/**\n * Created by xujingfeng on 2017/1/30.\n */\n@Controller\npublic class StudentController {\n\n    @Autowired\n    StudentDao studentDao;\n\n    @RequestMapping(\"student.html\")\n    @ResponseBody\n    public String student(){\n        Student student = new Student();\n        student.setName(\"xujingfeng\");\n        studentDao.save(student);\n        return \"student\";\n    }\n\n    @RequestMapping(\"testVersion.html\")\n    @ResponseBody\n    public String testVersion() throws InterruptedException {\n        Student student = studentDao.findOne(\"6ed16acc-61df-4a66-add9-d17c88b69755\");\n        student.setName(\"xuxuan\");\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                studentDao.findOne(\"6ed16acc-61df-4a66-add9-d17c88b69755\");\n                student.setName(\"xuxuanInThread\");\n                studentDao.save(student);\n            }\n        }).start();\n        Thread.sleep(1000);\n        studentDao.save(student);\n        return \"testVersion\";\n    }\n\n\n    @RequestMapping(\"updateNameById.html\")\n    @ResponseBody\n    public String updateNameById(){\n        studentDao.updateNameById(\"xuxuan2\",\"6ed16acc-61df-4a66-add9-d17c88b69755\");\n        return \"updateNameById\";\n    }\n\n\n}\n```\n这里面三个方法，主要是我们想用来测试的三个注意点。\n第一个方法`student.html`我们想看看springdata如何对version字段进行增长的。就不贴图了，直接给结论，对于添加了`@Version`的注解，我们不需要手动去控制，每一次save操作会在原来的基础上+1，如果初始为null，则springdata自动设置其为0。\n第二个方法`testVersion.html`是乐观锁的核心，当多个线程并发访问同一行记录时，添加了`@Version`乐观锁之后，程序会进行怎么样的控制呢？\n\n```\norg.hibernate.StaleObjectStateException: Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [com.example.jpa.Student#6ed16acc-61df-4a66-add9-d17c88b69755]\n```\n异常信息如上，主线程和新线程获取了同一行记录，并且新线程优先提交了事务，版本号一致，修改成功。等到了主线程再想save提交事务时，便得到一个版本号不一致的异常，那么在项目开发中就应该自己捕获这个异常根据业务内容做对应处理，是重试还是放弃etc...\n\n第三个方法，`updateNameById.html`是想强调一下，`@Query`中的`update`，`delete`操作是不会触发springdata的相关代理操作的，而是转化为原生sql的方式，所以在项目中使用时也要注意这点。\n\n总结\n--\n乐观锁，用在一些敏感业务数据上，而其本身的修饰：乐观，代表的含义便是相信大多数场景下version是一致的。但是从业务角度出发又要保证数据的严格一致性，避免脏读等问题，使用的场景需要斟酌。记得前面一片博文简单介绍了一下行级锁的概念，其实本质上和乐观锁都是想要再数据库层面加锁控制并发，那么什么时候该用乐观锁，行级锁，什么时候得在程序级别加同步锁，又要根据具体的业务场景去判断。找到能够满足自己项目需求的方案，找到性能和可靠性的平衡点，才是一个程序员的价值所在。\n\n","source":"_posts/使用JPA实现乐观锁.md","raw":"---\ntitle: 使用JPA实现乐观锁\ndate: 2016-08-16 15:52:52\ntags: \n- 多线程\n- 数据库\ncategories: \n- JAVA\n---\n\n\n\n乐观锁的概念就不再赘述了，不了解的朋友请自行百度谷歌之，今天主要说的是在项目中如何使用乐观锁，做成一个小demo。\n\n持久层使用jpa时，默认提供了一个注解`@Version`先看看源码怎么描述这个注解的\n\n```java\n@Target({ METHOD, FIELD })\n@Retention(RUNTIME)\npublic @interface Version {\n}\n```\n简单来说就是用一个version字段来充当乐观锁的作用。\n先来设计实体类\n\n```java\n/**\n * Created by xujingfeng on 2017/1/30.\n */\n@Entity\n@Table(name = \"t_student\")\npublic class Student {\n\n    @Id\n    @GenericGenerator(name = \"PKUUID\", strategy = \"uuid2\")\n    @GeneratedValue(generator = \"PKUUID\")\n    @Column(length = 36)\n    private String id;\n\n    @Version\n    private int version;\n\n    private String name;\n\n    //getter()...\n    //setter()...\n}\n```\n<!-- more -->\n\nDao层\n\n```java\n/**\n * Created by xujingfeng on 2017/1/30.\n */\npublic interface StudentDao extends JpaRepository<Student,String>{\n\n    @Query(\"update Student set name=?1 where id=?2\")\n    @Modifying\n    @Transactional\n    int updateNameById(String name,String id);\n}\n```\nController层充当单元测试的作用，通过访问一个requestMapping来触发我们想要测试的方法。\n\n```java\n/**\n * Created by xujingfeng on 2017/1/30.\n */\n@Controller\npublic class StudentController {\n\n    @Autowired\n    StudentDao studentDao;\n\n    @RequestMapping(\"student.html\")\n    @ResponseBody\n    public String student(){\n        Student student = new Student();\n        student.setName(\"xujingfeng\");\n        studentDao.save(student);\n        return \"student\";\n    }\n\n    @RequestMapping(\"testVersion.html\")\n    @ResponseBody\n    public String testVersion() throws InterruptedException {\n        Student student = studentDao.findOne(\"6ed16acc-61df-4a66-add9-d17c88b69755\");\n        student.setName(\"xuxuan\");\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                studentDao.findOne(\"6ed16acc-61df-4a66-add9-d17c88b69755\");\n                student.setName(\"xuxuanInThread\");\n                studentDao.save(student);\n            }\n        }).start();\n        Thread.sleep(1000);\n        studentDao.save(student);\n        return \"testVersion\";\n    }\n\n\n    @RequestMapping(\"updateNameById.html\")\n    @ResponseBody\n    public String updateNameById(){\n        studentDao.updateNameById(\"xuxuan2\",\"6ed16acc-61df-4a66-add9-d17c88b69755\");\n        return \"updateNameById\";\n    }\n\n\n}\n```\n这里面三个方法，主要是我们想用来测试的三个注意点。\n第一个方法`student.html`我们想看看springdata如何对version字段进行增长的。就不贴图了，直接给结论，对于添加了`@Version`的注解，我们不需要手动去控制，每一次save操作会在原来的基础上+1，如果初始为null，则springdata自动设置其为0。\n第二个方法`testVersion.html`是乐观锁的核心，当多个线程并发访问同一行记录时，添加了`@Version`乐观锁之后，程序会进行怎么样的控制呢？\n\n```\norg.hibernate.StaleObjectStateException: Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [com.example.jpa.Student#6ed16acc-61df-4a66-add9-d17c88b69755]\n```\n异常信息如上，主线程和新线程获取了同一行记录，并且新线程优先提交了事务，版本号一致，修改成功。等到了主线程再想save提交事务时，便得到一个版本号不一致的异常，那么在项目开发中就应该自己捕获这个异常根据业务内容做对应处理，是重试还是放弃etc...\n\n第三个方法，`updateNameById.html`是想强调一下，`@Query`中的`update`，`delete`操作是不会触发springdata的相关代理操作的，而是转化为原生sql的方式，所以在项目中使用时也要注意这点。\n\n总结\n--\n乐观锁，用在一些敏感业务数据上，而其本身的修饰：乐观，代表的含义便是相信大多数场景下version是一致的。但是从业务角度出发又要保证数据的严格一致性，避免脏读等问题，使用的场景需要斟酌。记得前面一片博文简单介绍了一下行级锁的概念，其实本质上和乐观锁都是想要再数据库层面加锁控制并发，那么什么时候该用乐观锁，行级锁，什么时候得在程序级别加同步锁，又要根据具体的业务场景去判断。找到能够满足自己项目需求的方案，找到性能和可靠性的平衡点，才是一个程序员的价值所在。\n\n","slug":"使用JPA实现乐观锁","published":1,"updated":"2017-09-04T11:49:26.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zuk003ntwv7nbkrm45v","content":"<p>乐观锁的概念就不再赘述了，不了解的朋友请自行百度谷歌之，今天主要说的是在项目中如何使用乐观锁，做成一个小demo。</p>\n<p>持久层使用jpa时，默认提供了一个注解<code>@Version</code>先看看源码怎么描述这个注解的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(&#123; METHOD, FIELD &#125;)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Version &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单来说就是用一个version字段来充当乐观锁的作用。<br>先来设计实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by xujingfeng on 2017/1/30.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"t_student\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Id</span></div><div class=\"line\">    <span class=\"meta\">@GenericGenerator</span>(name = <span class=\"string\">\"PKUUID\"</span>, strategy = <span class=\"string\">\"uuid2\"</span>)</div><div class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(generator = <span class=\"string\">\"PKUUID\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">36</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Version</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> version;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//getter()...</span></div><div class=\"line\">    <span class=\"comment\">//setter()...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>Dao层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by xujingfeng on 2017/1/30.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StudentDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Student</span>,<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Query</span>(<span class=\"string\">\"update Student set name=?1 where id=?2\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Modifying</span></div><div class=\"line\">    <span class=\"meta\">@Transactional</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updateNameById</span><span class=\"params\">(String name,String id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Controller层充当单元测试的作用，通过访问一个requestMapping来触发我们想要测试的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by xujingfeng on 2017/1/30.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    StudentDao studentDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"student.html\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">student</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        Student student = <span class=\"keyword\">new</span> Student();</div><div class=\"line\">        student.setName(<span class=\"string\">\"xujingfeng\"</span>);</div><div class=\"line\">        studentDao.save(student);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"student\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"testVersion.html\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testVersion</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">        Student student = studentDao.findOne(<span class=\"string\">\"6ed16acc-61df-4a66-add9-d17c88b69755\"</span>);</div><div class=\"line\">        student.setName(<span class=\"string\">\"xuxuan\"</span>);</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                studentDao.findOne(<span class=\"string\">\"6ed16acc-61df-4a66-add9-d17c88b69755\"</span>);</div><div class=\"line\">                student.setName(<span class=\"string\">\"xuxuanInThread\"</span>);</div><div class=\"line\">                studentDao.save(student);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">        studentDao.save(student);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"testVersion\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"updateNameById.html\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">updateNameById</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        studentDao.updateNameById(<span class=\"string\">\"xuxuan2\"</span>,<span class=\"string\">\"6ed16acc-61df-4a66-add9-d17c88b69755\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"updateNameById\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里面三个方法，主要是我们想用来测试的三个注意点。<br>第一个方法<code>student.html</code>我们想看看springdata如何对version字段进行增长的。就不贴图了，直接给结论，对于添加了<code>@Version</code>的注解，我们不需要手动去控制，每一次save操作会在原来的基础上+1，如果初始为null，则springdata自动设置其为0。<br>第二个方法<code>testVersion.html</code>是乐观锁的核心，当多个线程并发访问同一行记录时，添加了<code>@Version</code>乐观锁之后，程序会进行怎么样的控制呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.hibernate.StaleObjectStateException: Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [com.example.jpa.Student#6ed16acc-61df-4a66-add9-d17c88b69755]</div></pre></td></tr></table></figure>\n<p>异常信息如上，主线程和新线程获取了同一行记录，并且新线程优先提交了事务，版本号一致，修改成功。等到了主线程再想save提交事务时，便得到一个版本号不一致的异常，那么在项目开发中就应该自己捕获这个异常根据业务内容做对应处理，是重试还是放弃etc…</p>\n<p>第三个方法，<code>updateNameById.html</code>是想强调一下，<code>@Query</code>中的<code>update</code>，<code>delete</code>操作是不会触发springdata的相关代理操作的，而是转化为原生sql的方式，所以在项目中使用时也要注意这点。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>乐观锁，用在一些敏感业务数据上，而其本身的修饰：乐观，代表的含义便是相信大多数场景下version是一致的。但是从业务角度出发又要保证数据的严格一致性，避免脏读等问题，使用的场景需要斟酌。记得前面一片博文简单介绍了一下行级锁的概念，其实本质上和乐观锁都是想要再数据库层面加锁控制并发，那么什么时候该用乐观锁，行级锁，什么时候得在程序级别加同步锁，又要根据具体的业务场景去判断。找到能够满足自己项目需求的方案，找到性能和可靠性的平衡点，才是一个程序员的价值所在。</p>\n","site":{"data":{}},"excerpt":"<p>乐观锁的概念就不再赘述了，不了解的朋友请自行百度谷歌之，今天主要说的是在项目中如何使用乐观锁，做成一个小demo。</p>\n<p>持久层使用jpa时，默认提供了一个注解<code>@Version</code>先看看源码怎么描述这个注解的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(&#123; METHOD, FIELD &#125;)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Version &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单来说就是用一个version字段来充当乐观锁的作用。<br>先来设计实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by xujingfeng on 2017/1/30.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"meta\">@Entity</span></div><div class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"t_student\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Id</span></div><div class=\"line\">    <span class=\"meta\">@GenericGenerator</span>(name = <span class=\"string\">\"PKUUID\"</span>, strategy = <span class=\"string\">\"uuid2\"</span>)</div><div class=\"line\">    <span class=\"meta\">@GeneratedValue</span>(generator = <span class=\"string\">\"PKUUID\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">36</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String id;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Version</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> version;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//getter()...</span></div><div class=\"line\">    <span class=\"comment\">//setter()...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<p>Dao层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by xujingfeng on 2017/1/30.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StudentDao</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">Student</span>,<span class=\"title\">String</span>&gt;</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Query</span>(<span class=\"string\">\"update Student set name=?1 where id=?2\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Modifying</span></div><div class=\"line\">    <span class=\"meta\">@Transactional</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updateNameById</span><span class=\"params\">(String name,String id)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Controller层充当单元测试的作用，通过访问一个requestMapping来触发我们想要测试的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by xujingfeng on 2017/1/30.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    StudentDao studentDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"student.html\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">student</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        Student student = <span class=\"keyword\">new</span> Student();</div><div class=\"line\">        student.setName(<span class=\"string\">\"xujingfeng\"</span>);</div><div class=\"line\">        studentDao.save(student);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"student\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"testVersion.html\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testVersion</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">        Student student = studentDao.findOne(<span class=\"string\">\"6ed16acc-61df-4a66-add9-d17c88b69755\"</span>);</div><div class=\"line\">        student.setName(<span class=\"string\">\"xuxuan\"</span>);</div><div class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                studentDao.findOne(<span class=\"string\">\"6ed16acc-61df-4a66-add9-d17c88b69755\"</span>);</div><div class=\"line\">                student.setName(<span class=\"string\">\"xuxuanInThread\"</span>);</div><div class=\"line\">                studentDao.save(student);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">        studentDao.save(student);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"testVersion\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"updateNameById.html\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">updateNameById</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        studentDao.updateNameById(<span class=\"string\">\"xuxuan2\"</span>,<span class=\"string\">\"6ed16acc-61df-4a66-add9-d17c88b69755\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"updateNameById\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里面三个方法，主要是我们想用来测试的三个注意点。<br>第一个方法<code>student.html</code>我们想看看springdata如何对version字段进行增长的。就不贴图了，直接给结论，对于添加了<code>@Version</code>的注解，我们不需要手动去控制，每一次save操作会在原来的基础上+1，如果初始为null，则springdata自动设置其为0。<br>第二个方法<code>testVersion.html</code>是乐观锁的核心，当多个线程并发访问同一行记录时，添加了<code>@Version</code>乐观锁之后，程序会进行怎么样的控制呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.hibernate.StaleObjectStateException: Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [com.example.jpa.Student#6ed16acc-61df-4a66-add9-d17c88b69755]</div></pre></td></tr></table></figure>\n<p>异常信息如上，主线程和新线程获取了同一行记录，并且新线程优先提交了事务，版本号一致，修改成功。等到了主线程再想save提交事务时，便得到一个版本号不一致的异常，那么在项目开发中就应该自己捕获这个异常根据业务内容做对应处理，是重试还是放弃etc…</p>\n<p>第三个方法，<code>updateNameById.html</code>是想强调一下，<code>@Query</code>中的<code>update</code>，<code>delete</code>操作是不会触发springdata的相关代理操作的，而是转化为原生sql的方式，所以在项目中使用时也要注意这点。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>乐观锁，用在一些敏感业务数据上，而其本身的修饰：乐观，代表的含义便是相信大多数场景下version是一致的。但是从业务角度出发又要保证数据的严格一致性，避免脏读等问题，使用的场景需要斟酌。记得前面一片博文简单介绍了一下行级锁的概念，其实本质上和乐观锁都是想要再数据库层面加锁控制并发，那么什么时候该用乐观锁，行级锁，什么时候得在程序级别加同步锁，又要根据具体的业务场景去判断。找到能够满足自己项目需求的方案，找到性能和可靠性的平衡点，才是一个程序员的价值所在。</p>"},{"title":"对于Spring Cloud Feign入门示例的一点思考","date":"2017-08-03T09:40:16.000Z","_content":"\n\n\n## Spring Cloud Feign\n\nSpring Cloud Feign是一套基于Netflix Feign实现的声明式服务调用客户端。它使得编写Web服务客户端变得更加简单。我们只需要通过创建接口并用注解来配置它既可完成对Web服务接口的绑定。它具备可插拔的注解支持，包括Feign注解、JAX-RS注解。它也支持可插拔的编码器和解码器。Spring Cloud Feign还扩展了对Spring MVC注解的支持，同时还整合了Ribbon和Eureka来提供均衡负载的HTTP客户端实现。\n\n分布式应用早在十几年前就开始出现，各自的应用运行在各自的tomcat，jboss一类的容器中，他们之间的相互调用变成了一种远程调用，而实现远程调用的方式很多。按照协议划分，可以有RPC，Webservice，http。不同的框架也对他们有了各自的实现，如dubbo(x)，motan就都是RPC框架，本文所要讲解的Feign便可以理解为一种http框架，用于分布式服务之间通过Http进行接口交互。说他是框架，有点过了，可以理解为一个http工具，只不过在spring cloud全家桶的体系中，它比httpclient，okhttp，retrofit这些http工具都要强大的多。\n\n## 入门\n\n先用一个简单的例子，看看如何在项目中使用Feign。示例项目使用maven多module构建，采用springcloud的Dalston.SR1版本\n\n<!-- more -->\n\n```xml\n<dependencyManagement>\n     <dependencies>\n         <dependency>\n             <groupId>org.springframework.cloud</groupId>\n             <artifactId>spring-cloud-dependencies</artifactId>\n             <version>Dalston.SR1</version>\n             <type>pom</type>\n             <scope>import</scope>\n         </dependency>\n     </dependencies>\n </dependencyManagement>\n```\n\n### 服务提供方\n在本例子中，使用两个应用模块，展示分布式应用中如何进行接口交互。`restful-provider`担任服务提供方，`restful-consumer`担任服务消费者。\n\n\n-  `restful-provider`新建一个module`restful-provider-app`,模块中只需要写一个`CalculateController.java`即可\n\n   ​\n   ```java\n   @RestController\n   @RequestMapping(\"/api\")\n   public class CalculateController {\n\n       @PostMapping(\"/add\")\n       public Integer add(@RequestParam Integer a,@RequestParam Integer b){\n           return a+b;\n       }\n\n       @PostMapping(\"/subtract\")\n       public Integer subtract(@RequestParam Integer a,@RequestParam Integer b){\n           return a-b;\n       }\n\n   }\n   ```\n- 配置文件application.yml：\n\n   ```yaml\n   server:\n     port: 7070\n   ```\n\n 一个服务端就写好了，提供两个计算服务的接口，可以通过http访问\n\n### 服务消费方\n\n- 使用Feign编写消费方，在restful-consumer项目中，我们将接口的定义和消费者应用分成两个module，`restful-consumer-api-definition`和`restful-consumer-app`。\n\n- 在接口定义模块中，只有一个Feign接口：\n\n\n   ```java\n   @FeignClient(value = \"calculate\",path = \"/api\")\n   public interface CalculateApi {\n   \t@PostMapping(path = \"/add\")\n       Integer add(@RequestParam(\"a\") Integer a,@RequestParam(\"b\") Integer b);\n\n       @PostMapping(path = \"/subtract\")\n       Integer subtract(@RequestParam(\"a\") Integer a,@RequestParam(\"b\") Integer b);\n\n   }\n   ```\n   tip：@RequestParam中的参数值不能省略，否则会出现错误\n\n-  `restful-consumer-app`依赖上面的`restful-consumer-api-definition`模块，并且启用Feign代理，自动生成一个远程调用。\n  启动类配置：\n\n  ```java\n  @EnableFeignClients(basePackages = {\"sinosoftsh.consumer.api\"})\n  @SpringBootApplication\n  public class ConsumerApp {\n\n      public static void main(String []args){\n          SpringApplication.run(ConsumerApp.class,args);\n      }\n\n  }\n  ```\n  使用`@EnableFeignClients(basePackages = {\"sinosoftsh.consumer.api\"})`扫描接口类所在的包，spring的容器中才会有代理实现类。\n\n- 不要忘记配置消费者的相关属性，在application.yml中\n\n\n   ```yaml\n   server:\n     port: 7080\n   ribbon:\n     eureka:\n      enabled: false\n\n   calculate:\n     ribbon:\n       listOfServers: localhost:7070\n\n   logging:\n     level:\n       org.apache.http: trace\n   ```\n\n   在CalculateApi 接口的定义中，我们使用了一个calculate作为服务名称，必须要在配置文件中配置calculate所在的ip地址才行，由于本文只是作为一个示例，所以没有使用注册中心，在配置中禁用了eureka。最后一行的日志配置，可以发现其实Feign内部其实使用的是现成的http工具：httpclient，okhttp3，可以通过配置替换实现\n\n- 整体的项目结构如下：\n  <center>\n  ![这里写图片描述](http://img.blog.csdn.net/20170803170857775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  </center>\n  <center>图一 第一种依赖关系结构</center>\n\n- 再编写一个单元测试类，验证一下Feign是否被正确的配置了\n\n\n   ```java\n   @RestController\n   public class ConsumerController {\n   \t@Autowired\n       CalculateApi calculateApi;\n\n       @RequestMapping(\"/test\")\n       public String test() {\n           Integer result = calculateApi.add(1, 2);\n           System.out.println(\"the result is \" + result);\n           return \"success\";\n       }\n\n   }\n   ```\n\n## 思考\n回顾一下我们入门实例，服务提供方使用的是一个RestController暴露计算服务，服务消费方使用http工具（Feign）进行远程调用，这再清晰不过了，也是符合软件设计的，因为Feign接口的定义是存在于消费方，所以是真正的松耦合。但是习惯了使用rpc共享接口的设计，我们也可以将接口定义在服务提供方，这样做的好处是，服务可能被多个消费者使用，不需要每个消费者都定义一次Feign接口。\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20170803171756343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n</center>\n<center>图2 第二种依赖关系结构</center>\n在`restful-provider`创建一个`restful-provider-api-definition`模块，将`CalculateApi.java`的定义迁移到服务提供方，相应的`restful-provider-app`也可以进行改造：\n\n```java\n@RestController\n@RequestMapping(\"/api\")\npublic class CalculateController implements CalculateApi{\n\n//    @PostMapping(\"/add\")\n    @Override\n    public Integer add(@RequestParam Integer a,@RequestParam Integer b){\n        return a+b;\n    }\n\n//    @PostMapping(\"/subtract\")\n    @Override\n    public Integer subtract(@RequestParam Integer a,@RequestParam Integer b){\n        return a-b;\n    }\n\n}\n```\n\n因为接口的定义和服务提供方现在在一个限界上下文中，接口的定义同时也宣告了应该提供什么样的服务，所以直接继承CalculateApi。这里的理解比较绕，现在的设计中，CalculateApi在服务消费者和服务提供者中的定位是不一样的，服务消费者需要在启动类扫描CalculateApi所在的包，生成代理对象，远程调用；而在服务提供方则一定不能扫描CalculateApi所在的包，否则会污染容器中的CalculateApi实现类，要知道，CalculateController 之上有一个`@RestController`注解，意味着已经有一个本地代理实现了，我们也可以在服务提供方注入CalculateApi，便是进行的本地调用了，这符合我们的初衷：我自己的提供的服务，本地当然可以调用。在服务提供方的启动类上要额外注意@ComponentScan，@EnableFeignClients的扫描。\n\n这样，当我们有多个消费者，只需要让他们配置Feign，并且引入服务提供方的接口定义，扫描，即可进行远程调用。有点类似于RPC的共享接口。\n\n## 设计原则\nrestful设计以语言无关，松耦合的优势著称。在Spring Cloud Feign的相关文档中有这样的描述：\n>It is generally not advisable to share an interface between a server and a client. It introduces tight coupling, and also actually doesn’t work with Spring MVC in its current form (method parameter mapping is not inherited).\n\n不建议使用上述改进后的共享接口的方式，并且警告我们，springmvc的注解在Feign接口中的定义和实现类中是不可继承的。关于这点，仁者见仁，智者见智。我们现在项目依旧是采用共享接口的方式，这样可以使得开发变得便捷，多个消费者不需要重复定义。\n\n下面是关于耦合和共享接口的一些讨论：\n\n```\nhttps://github.com/spring-cloud/spring-cloud-netflix/issues/951\nhttps://github.com/spring-cloud/spring-cloud-netflix/issues/659\nhttps://github.com/spring-cloud/spring-cloud-netflix/issues/646\nhttps://jmnarloch.wordpress.com/2015/08/19/spring-cloud-designing-feign-client/\n```\n\n\n\n## 注意事项\n\n- 当接口定义中出现了实体类时，需要使用@RequestBody注解。多个实体类，则需要用一个大的vo对其进行包裹，要时刻记住，Feign接口最终是会转换成一次http请求。\n\n- 接口定义中的注解和实现类中的注解要分别写一次，不能继承。\n\n- Feign调用一般配合eureka等注册中心使用，并且在客户端可以支持Hystrix机制，本文为了讲解共享接口这一设计，所以重心放在了Feign上，实际开发中，这些spring cloud的其他组件通常配套使用。\n\n- 对http深入理解，在使用Feign时可以事半功倍。\n\n","source":"_posts/对于Spring Cloud Feign入门示例的一点思考.md","raw":"---\ntitle: 对于Spring Cloud Feign入门示例的一点思考\ndate: 2017-08-03 17:40:16\ntags: \n- Spring Cloud\ncategories: \n- Spring Cloud\n---\n\n\n\n## Spring Cloud Feign\n\nSpring Cloud Feign是一套基于Netflix Feign实现的声明式服务调用客户端。它使得编写Web服务客户端变得更加简单。我们只需要通过创建接口并用注解来配置它既可完成对Web服务接口的绑定。它具备可插拔的注解支持，包括Feign注解、JAX-RS注解。它也支持可插拔的编码器和解码器。Spring Cloud Feign还扩展了对Spring MVC注解的支持，同时还整合了Ribbon和Eureka来提供均衡负载的HTTP客户端实现。\n\n分布式应用早在十几年前就开始出现，各自的应用运行在各自的tomcat，jboss一类的容器中，他们之间的相互调用变成了一种远程调用，而实现远程调用的方式很多。按照协议划分，可以有RPC，Webservice，http。不同的框架也对他们有了各自的实现，如dubbo(x)，motan就都是RPC框架，本文所要讲解的Feign便可以理解为一种http框架，用于分布式服务之间通过Http进行接口交互。说他是框架，有点过了，可以理解为一个http工具，只不过在spring cloud全家桶的体系中，它比httpclient，okhttp，retrofit这些http工具都要强大的多。\n\n## 入门\n\n先用一个简单的例子，看看如何在项目中使用Feign。示例项目使用maven多module构建，采用springcloud的Dalston.SR1版本\n\n<!-- more -->\n\n```xml\n<dependencyManagement>\n     <dependencies>\n         <dependency>\n             <groupId>org.springframework.cloud</groupId>\n             <artifactId>spring-cloud-dependencies</artifactId>\n             <version>Dalston.SR1</version>\n             <type>pom</type>\n             <scope>import</scope>\n         </dependency>\n     </dependencies>\n </dependencyManagement>\n```\n\n### 服务提供方\n在本例子中，使用两个应用模块，展示分布式应用中如何进行接口交互。`restful-provider`担任服务提供方，`restful-consumer`担任服务消费者。\n\n\n-  `restful-provider`新建一个module`restful-provider-app`,模块中只需要写一个`CalculateController.java`即可\n\n   ​\n   ```java\n   @RestController\n   @RequestMapping(\"/api\")\n   public class CalculateController {\n\n       @PostMapping(\"/add\")\n       public Integer add(@RequestParam Integer a,@RequestParam Integer b){\n           return a+b;\n       }\n\n       @PostMapping(\"/subtract\")\n       public Integer subtract(@RequestParam Integer a,@RequestParam Integer b){\n           return a-b;\n       }\n\n   }\n   ```\n- 配置文件application.yml：\n\n   ```yaml\n   server:\n     port: 7070\n   ```\n\n 一个服务端就写好了，提供两个计算服务的接口，可以通过http访问\n\n### 服务消费方\n\n- 使用Feign编写消费方，在restful-consumer项目中，我们将接口的定义和消费者应用分成两个module，`restful-consumer-api-definition`和`restful-consumer-app`。\n\n- 在接口定义模块中，只有一个Feign接口：\n\n\n   ```java\n   @FeignClient(value = \"calculate\",path = \"/api\")\n   public interface CalculateApi {\n   \t@PostMapping(path = \"/add\")\n       Integer add(@RequestParam(\"a\") Integer a,@RequestParam(\"b\") Integer b);\n\n       @PostMapping(path = \"/subtract\")\n       Integer subtract(@RequestParam(\"a\") Integer a,@RequestParam(\"b\") Integer b);\n\n   }\n   ```\n   tip：@RequestParam中的参数值不能省略，否则会出现错误\n\n-  `restful-consumer-app`依赖上面的`restful-consumer-api-definition`模块，并且启用Feign代理，自动生成一个远程调用。\n  启动类配置：\n\n  ```java\n  @EnableFeignClients(basePackages = {\"sinosoftsh.consumer.api\"})\n  @SpringBootApplication\n  public class ConsumerApp {\n\n      public static void main(String []args){\n          SpringApplication.run(ConsumerApp.class,args);\n      }\n\n  }\n  ```\n  使用`@EnableFeignClients(basePackages = {\"sinosoftsh.consumer.api\"})`扫描接口类所在的包，spring的容器中才会有代理实现类。\n\n- 不要忘记配置消费者的相关属性，在application.yml中\n\n\n   ```yaml\n   server:\n     port: 7080\n   ribbon:\n     eureka:\n      enabled: false\n\n   calculate:\n     ribbon:\n       listOfServers: localhost:7070\n\n   logging:\n     level:\n       org.apache.http: trace\n   ```\n\n   在CalculateApi 接口的定义中，我们使用了一个calculate作为服务名称，必须要在配置文件中配置calculate所在的ip地址才行，由于本文只是作为一个示例，所以没有使用注册中心，在配置中禁用了eureka。最后一行的日志配置，可以发现其实Feign内部其实使用的是现成的http工具：httpclient，okhttp3，可以通过配置替换实现\n\n- 整体的项目结构如下：\n  <center>\n  ![这里写图片描述](http://img.blog.csdn.net/20170803170857775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  </center>\n  <center>图一 第一种依赖关系结构</center>\n\n- 再编写一个单元测试类，验证一下Feign是否被正确的配置了\n\n\n   ```java\n   @RestController\n   public class ConsumerController {\n   \t@Autowired\n       CalculateApi calculateApi;\n\n       @RequestMapping(\"/test\")\n       public String test() {\n           Integer result = calculateApi.add(1, 2);\n           System.out.println(\"the result is \" + result);\n           return \"success\";\n       }\n\n   }\n   ```\n\n## 思考\n回顾一下我们入门实例，服务提供方使用的是一个RestController暴露计算服务，服务消费方使用http工具（Feign）进行远程调用，这再清晰不过了，也是符合软件设计的，因为Feign接口的定义是存在于消费方，所以是真正的松耦合。但是习惯了使用rpc共享接口的设计，我们也可以将接口定义在服务提供方，这样做的好处是，服务可能被多个消费者使用，不需要每个消费者都定义一次Feign接口。\n<center>\n![这里写图片描述](http://img.blog.csdn.net/20170803171756343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n</center>\n<center>图2 第二种依赖关系结构</center>\n在`restful-provider`创建一个`restful-provider-api-definition`模块，将`CalculateApi.java`的定义迁移到服务提供方，相应的`restful-provider-app`也可以进行改造：\n\n```java\n@RestController\n@RequestMapping(\"/api\")\npublic class CalculateController implements CalculateApi{\n\n//    @PostMapping(\"/add\")\n    @Override\n    public Integer add(@RequestParam Integer a,@RequestParam Integer b){\n        return a+b;\n    }\n\n//    @PostMapping(\"/subtract\")\n    @Override\n    public Integer subtract(@RequestParam Integer a,@RequestParam Integer b){\n        return a-b;\n    }\n\n}\n```\n\n因为接口的定义和服务提供方现在在一个限界上下文中，接口的定义同时也宣告了应该提供什么样的服务，所以直接继承CalculateApi。这里的理解比较绕，现在的设计中，CalculateApi在服务消费者和服务提供者中的定位是不一样的，服务消费者需要在启动类扫描CalculateApi所在的包，生成代理对象，远程调用；而在服务提供方则一定不能扫描CalculateApi所在的包，否则会污染容器中的CalculateApi实现类，要知道，CalculateController 之上有一个`@RestController`注解，意味着已经有一个本地代理实现了，我们也可以在服务提供方注入CalculateApi，便是进行的本地调用了，这符合我们的初衷：我自己的提供的服务，本地当然可以调用。在服务提供方的启动类上要额外注意@ComponentScan，@EnableFeignClients的扫描。\n\n这样，当我们有多个消费者，只需要让他们配置Feign，并且引入服务提供方的接口定义，扫描，即可进行远程调用。有点类似于RPC的共享接口。\n\n## 设计原则\nrestful设计以语言无关，松耦合的优势著称。在Spring Cloud Feign的相关文档中有这样的描述：\n>It is generally not advisable to share an interface between a server and a client. It introduces tight coupling, and also actually doesn’t work with Spring MVC in its current form (method parameter mapping is not inherited).\n\n不建议使用上述改进后的共享接口的方式，并且警告我们，springmvc的注解在Feign接口中的定义和实现类中是不可继承的。关于这点，仁者见仁，智者见智。我们现在项目依旧是采用共享接口的方式，这样可以使得开发变得便捷，多个消费者不需要重复定义。\n\n下面是关于耦合和共享接口的一些讨论：\n\n```\nhttps://github.com/spring-cloud/spring-cloud-netflix/issues/951\nhttps://github.com/spring-cloud/spring-cloud-netflix/issues/659\nhttps://github.com/spring-cloud/spring-cloud-netflix/issues/646\nhttps://jmnarloch.wordpress.com/2015/08/19/spring-cloud-designing-feign-client/\n```\n\n\n\n## 注意事项\n\n- 当接口定义中出现了实体类时，需要使用@RequestBody注解。多个实体类，则需要用一个大的vo对其进行包裹，要时刻记住，Feign接口最终是会转换成一次http请求。\n\n- 接口定义中的注解和实现类中的注解要分别写一次，不能继承。\n\n- Feign调用一般配合eureka等注册中心使用，并且在客户端可以支持Hystrix机制，本文为了讲解共享接口这一设计，所以重心放在了Feign上，实际开发中，这些spring cloud的其他组件通常配套使用。\n\n- 对http深入理解，在使用Feign时可以事半功倍。\n\n","slug":"对于Spring Cloud Feign入门示例的一点思考","published":1,"updated":"2017-09-04T11:49:26.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zum003rtwv7ik24qgsf","content":"<h2 id=\"Spring-Cloud-Feign\"><a href=\"#Spring-Cloud-Feign\" class=\"headerlink\" title=\"Spring Cloud Feign\"></a>Spring Cloud Feign</h2><p>Spring Cloud Feign是一套基于Netflix Feign实现的声明式服务调用客户端。它使得编写Web服务客户端变得更加简单。我们只需要通过创建接口并用注解来配置它既可完成对Web服务接口的绑定。它具备可插拔的注解支持，包括Feign注解、JAX-RS注解。它也支持可插拔的编码器和解码器。Spring Cloud Feign还扩展了对Spring MVC注解的支持，同时还整合了Ribbon和Eureka来提供均衡负载的HTTP客户端实现。</p>\n<p>分布式应用早在十几年前就开始出现，各自的应用运行在各自的tomcat，jboss一类的容器中，他们之间的相互调用变成了一种远程调用，而实现远程调用的方式很多。按照协议划分，可以有RPC，Webservice，http。不同的框架也对他们有了各自的实现，如dubbo(x)，motan就都是RPC框架，本文所要讲解的Feign便可以理解为一种http框架，用于分布式服务之间通过Http进行接口交互。说他是框架，有点过了，可以理解为一个http工具，只不过在spring cloud全家桶的体系中，它比httpclient，okhttp，retrofit这些http工具都要强大的多。</p>\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p>先用一个简单的例子，看看如何在项目中使用Feign。示例项目使用maven多module构建，采用springcloud的Dalston.SR1版本</p>\n<a id=\"more\"></a>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Dalston.SR1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"服务提供方\"><a href=\"#服务提供方\" class=\"headerlink\" title=\"服务提供方\"></a>服务提供方</h3><p>在本例子中，使用两个应用模块，展示分布式应用中如何进行接口交互。<code>restful-provider</code>担任服务提供方，<code>restful-consumer</code>担任服务消费者。</p>\n<ul>\n<li><p><code>restful-provider</code>新建一个module<code>restful-provider-app</code>,模块中只需要写一个<code>CalculateController.java</code>即可</p>\n<p>​</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/add\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">add</span><span class=\"params\">(@RequestParam Integer a,@RequestParam Integer b)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a+b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/subtract\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">subtract</span><span class=\"params\">(@RequestParam Integer a,@RequestParam Integer b)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a-b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件application.yml：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">7070</span></div></pre></td></tr></table></figure>\n<p>一个服务端就写好了，提供两个计算服务的接口，可以通过http访问</p>\n</li>\n</ul>\n<h3 id=\"服务消费方\"><a href=\"#服务消费方\" class=\"headerlink\" title=\"服务消费方\"></a>服务消费方</h3><ul>\n<li><p>使用Feign编写消费方，在restful-consumer项目中，我们将接口的定义和消费者应用分成两个module，<code>restful-consumer-api-definition</code>和<code>restful-consumer-app</code>。</p>\n</li>\n<li><p>在接口定义模块中，只有一个Feign接口：</p>\n</li>\n</ul>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(value = <span class=\"string\">\"calculate\"</span>,path = <span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CalculateApi</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@PostMapping</span>(path = <span class=\"string\">\"/add\"</span>)</div><div class=\"line\">    <span class=\"function\">Integer <span class=\"title\">add</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"a\"</span>)</span> Integer a,@<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"b\"</span>)</span> Integer b)</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PostMapping</span>(path = <span class=\"string\">\"/subtract\"</span>)</div><div class=\"line\">    <span class=\"function\">Integer <span class=\"title\">subtract</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"a\"</span>)</span> Integer a,@<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"b\"</span>)</span> Integer b)</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>   tip：@RequestParam中的参数值不能省略，否则会出现错误</p>\n<ul>\n<li><p><code>restful-consumer-app</code>依赖上面的<code>restful-consumer-api-definition</code>模块，并且启用Feign代理，自动生成一个远程调用。<br>启动类配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableFeignClients</span>(basePackages = &#123;<span class=\"string\">\"sinosoftsh.consumer.api\"</span>&#125;)</div><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerApp</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span>&#123;</div><div class=\"line\">        SpringApplication.run(ConsumerApp.class,args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用<code>@EnableFeignClients(basePackages = {&quot;sinosoftsh.consumer.api&quot;})</code>扫描接口类所在的包，spring的容器中才会有代理实现类。</p>\n</li>\n<li><p>不要忘记配置消费者的相关属性，在application.yml中</p>\n</li>\n</ul>\n   <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">7080</span></div><div class=\"line\"><span class=\"attr\">ribbon:</span></div><div class=\"line\"><span class=\"attr\">  eureka:</span></div><div class=\"line\"><span class=\"attr\">   enabled:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">calculate:</span></div><div class=\"line\"><span class=\"attr\">  ribbon:</span></div><div class=\"line\"><span class=\"attr\">    listOfServers:</span> <span class=\"attr\">localhost:7070</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">logging:</span></div><div class=\"line\"><span class=\"attr\">  level:</span></div><div class=\"line\">    <span class=\"string\">org.apache.http:</span> <span class=\"string\">trace</span></div></pre></td></tr></table></figure>\n<p>   在CalculateApi 接口的定义中，我们使用了一个calculate作为服务名称，必须要在配置文件中配置calculate所在的ip地址才行，由于本文只是作为一个示例，所以没有使用注册中心，在配置中禁用了eureka。最后一行的日志配置，可以发现其实Feign内部其实使用的是现成的http工具：httpclient，okhttp3，可以通过配置替换实现</p>\n<ul>\n<li><p>整体的项目结构如下：</p>\n<center><br><img src=\"http://img.blog.csdn.net/20170803170857775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br></center><br><center>图一 第一种依赖关系结构</center>\n</li>\n<li><p>再编写一个单元测试类，验证一下Feign是否被正确的配置了</p>\n</li>\n</ul>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerController</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">    CalculateApi calculateApi;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Integer result = calculateApi.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"the result is \"</span> + result);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>回顾一下我们入门实例，服务提供方使用的是一个RestController暴露计算服务，服务消费方使用http工具（Feign）进行远程调用，这再清晰不过了，也是符合软件设计的，因为Feign接口的定义是存在于消费方，所以是真正的松耦合。但是习惯了使用rpc共享接口的设计，我们也可以将接口定义在服务提供方，这样做的好处是，服务可能被多个消费者使用，不需要每个消费者都定义一次Feign接口。</p>\n<p><center><br><img src=\"http://img.blog.csdn.net/20170803171756343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br></center></p>\n<p><center>图2 第二种依赖关系结构</center><br>在<code>restful-provider</code>创建一个<code>restful-provider-api-definition</code>模块，将<code>CalculateApi.java</code>的定义迁移到服务提供方，相应的<code>restful-provider-app</code>也可以进行改造：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateController</span> <span class=\"keyword\">implements</span> <span class=\"title\">CalculateApi</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    @PostMapping(\"/add\")</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">add</span><span class=\"params\">(@RequestParam Integer a,@RequestParam Integer b)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a+b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    @PostMapping(\"/subtract\")</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">subtract</span><span class=\"params\">(@RequestParam Integer a,@RequestParam Integer b)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a-b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为接口的定义和服务提供方现在在一个限界上下文中，接口的定义同时也宣告了应该提供什么样的服务，所以直接继承CalculateApi。这里的理解比较绕，现在的设计中，CalculateApi在服务消费者和服务提供者中的定位是不一样的，服务消费者需要在启动类扫描CalculateApi所在的包，生成代理对象，远程调用；而在服务提供方则一定不能扫描CalculateApi所在的包，否则会污染容器中的CalculateApi实现类，要知道，CalculateController 之上有一个<code>@RestController</code>注解，意味着已经有一个本地代理实现了，我们也可以在服务提供方注入CalculateApi，便是进行的本地调用了，这符合我们的初衷：我自己的提供的服务，本地当然可以调用。在服务提供方的启动类上要额外注意@ComponentScan，@EnableFeignClients的扫描。</p>\n<p>这样，当我们有多个消费者，只需要让他们配置Feign，并且引入服务提供方的接口定义，扫描，即可进行远程调用。有点类似于RPC的共享接口。</p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><p>restful设计以语言无关，松耦合的优势著称。在Spring Cloud Feign的相关文档中有这样的描述：</p>\n<blockquote>\n<p>It is generally not advisable to share an interface between a server and a client. It introduces tight coupling, and also actually doesn’t work with Spring MVC in its current form (method parameter mapping is not inherited).</p>\n</blockquote>\n<p>不建议使用上述改进后的共享接口的方式，并且警告我们，springmvc的注解在Feign接口中的定义和实现类中是不可继承的。关于这点，仁者见仁，智者见智。我们现在项目依旧是采用共享接口的方式，这样可以使得开发变得便捷，多个消费者不需要重复定义。</p>\n<p>下面是关于耦合和共享接口的一些讨论：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/spring-cloud/spring-cloud-netflix/issues/951</div><div class=\"line\">https://github.com/spring-cloud/spring-cloud-netflix/issues/659</div><div class=\"line\">https://github.com/spring-cloud/spring-cloud-netflix/issues/646</div><div class=\"line\">https://jmnarloch.wordpress.com/2015/08/19/spring-cloud-designing-feign-client/</div></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li><p>当接口定义中出现了实体类时，需要使用@RequestBody注解。多个实体类，则需要用一个大的vo对其进行包裹，要时刻记住，Feign接口最终是会转换成一次http请求。</p>\n</li>\n<li><p>接口定义中的注解和实现类中的注解要分别写一次，不能继承。</p>\n</li>\n<li><p>Feign调用一般配合eureka等注册中心使用，并且在客户端可以支持Hystrix机制，本文为了讲解共享接口这一设计，所以重心放在了Feign上，实际开发中，这些spring cloud的其他组件通常配套使用。</p>\n</li>\n<li><p>对http深入理解，在使用Feign时可以事半功倍。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Spring-Cloud-Feign\"><a href=\"#Spring-Cloud-Feign\" class=\"headerlink\" title=\"Spring Cloud Feign\"></a>Spring Cloud Feign</h2><p>Spring Cloud Feign是一套基于Netflix Feign实现的声明式服务调用客户端。它使得编写Web服务客户端变得更加简单。我们只需要通过创建接口并用注解来配置它既可完成对Web服务接口的绑定。它具备可插拔的注解支持，包括Feign注解、JAX-RS注解。它也支持可插拔的编码器和解码器。Spring Cloud Feign还扩展了对Spring MVC注解的支持，同时还整合了Ribbon和Eureka来提供均衡负载的HTTP客户端实现。</p>\n<p>分布式应用早在十几年前就开始出现，各自的应用运行在各自的tomcat，jboss一类的容器中，他们之间的相互调用变成了一种远程调用，而实现远程调用的方式很多。按照协议划分，可以有RPC，Webservice，http。不同的框架也对他们有了各自的实现，如dubbo(x)，motan就都是RPC框架，本文所要讲解的Feign便可以理解为一种http框架，用于分布式服务之间通过Http进行接口交互。说他是框架，有点过了，可以理解为一个http工具，只不过在spring cloud全家桶的体系中，它比httpclient，okhttp，retrofit这些http工具都要强大的多。</p>\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p>先用一个简单的例子，看看如何在项目中使用Feign。示例项目使用maven多module构建，采用springcloud的Dalston.SR1版本</p>","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Dalston.SR1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"服务提供方\"><a href=\"#服务提供方\" class=\"headerlink\" title=\"服务提供方\"></a>服务提供方</h3><p>在本例子中，使用两个应用模块，展示分布式应用中如何进行接口交互。<code>restful-provider</code>担任服务提供方，<code>restful-consumer</code>担任服务消费者。</p>\n<ul>\n<li><p><code>restful-provider</code>新建一个module<code>restful-provider-app</code>,模块中只需要写一个<code>CalculateController.java</code>即可</p>\n<p>​</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/add\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">add</span><span class=\"params\">(@RequestParam Integer a,@RequestParam Integer b)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a+b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/subtract\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">subtract</span><span class=\"params\">(@RequestParam Integer a,@RequestParam Integer b)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a-b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置文件application.yml：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">7070</span></div></pre></td></tr></table></figure>\n<p>一个服务端就写好了，提供两个计算服务的接口，可以通过http访问</p>\n</li>\n</ul>\n<h3 id=\"服务消费方\"><a href=\"#服务消费方\" class=\"headerlink\" title=\"服务消费方\"></a>服务消费方</h3><ul>\n<li><p>使用Feign编写消费方，在restful-consumer项目中，我们将接口的定义和消费者应用分成两个module，<code>restful-consumer-api-definition</code>和<code>restful-consumer-app</code>。</p>\n</li>\n<li><p>在接口定义模块中，只有一个Feign接口：</p>\n</li>\n</ul>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@FeignClient</span>(value = <span class=\"string\">\"calculate\"</span>,path = <span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CalculateApi</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@PostMapping</span>(path = <span class=\"string\">\"/add\"</span>)</div><div class=\"line\">    <span class=\"function\">Integer <span class=\"title\">add</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"a\"</span>)</span> Integer a,@<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"b\"</span>)</span> Integer b)</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@PostMapping</span>(path = <span class=\"string\">\"/subtract\"</span>)</div><div class=\"line\">    <span class=\"function\">Integer <span class=\"title\">subtract</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"a\"</span>)</span> Integer a,@<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"b\"</span>)</span> Integer b)</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>   tip：@RequestParam中的参数值不能省略，否则会出现错误</p>\n<ul>\n<li><p><code>restful-consumer-app</code>依赖上面的<code>restful-consumer-api-definition</code>模块，并且启用Feign代理，自动生成一个远程调用。<br>启动类配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@EnableFeignClients</span>(basePackages = &#123;<span class=\"string\">\"sinosoftsh.consumer.api\"</span>&#125;)</div><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerApp</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span>&#123;</div><div class=\"line\">        SpringApplication.run(ConsumerApp.class,args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用<code>@EnableFeignClients(basePackages = {&quot;sinosoftsh.consumer.api&quot;})</code>扫描接口类所在的包，spring的容器中才会有代理实现类。</p>\n</li>\n<li><p>不要忘记配置消费者的相关属性，在application.yml中</p>\n</li>\n</ul>\n   <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">server:</span></div><div class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">7080</span></div><div class=\"line\"><span class=\"attr\">ribbon:</span></div><div class=\"line\"><span class=\"attr\">  eureka:</span></div><div class=\"line\"><span class=\"attr\">   enabled:</span> <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">calculate:</span></div><div class=\"line\"><span class=\"attr\">  ribbon:</span></div><div class=\"line\"><span class=\"attr\">    listOfServers:</span> <span class=\"attr\">localhost:7070</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">logging:</span></div><div class=\"line\"><span class=\"attr\">  level:</span></div><div class=\"line\">    <span class=\"string\">org.apache.http:</span> <span class=\"string\">trace</span></div></pre></td></tr></table></figure>\n<p>   在CalculateApi 接口的定义中，我们使用了一个calculate作为服务名称，必须要在配置文件中配置calculate所在的ip地址才行，由于本文只是作为一个示例，所以没有使用注册中心，在配置中禁用了eureka。最后一行的日志配置，可以发现其实Feign内部其实使用的是现成的http工具：httpclient，okhttp3，可以通过配置替换实现</p>\n<ul>\n<li><p>整体的项目结构如下：</p>\n<center><br><img src=\"http://img.blog.csdn.net/20170803170857775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br></center><br><center>图一 第一种依赖关系结构</center>\n</li>\n<li><p>再编写一个单元测试类，验证一下Feign是否被正确的配置了</p>\n</li>\n</ul>\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerController</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">    CalculateApi calculateApi;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Integer result = calculateApi.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"the result is \"</span> + result);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>回顾一下我们入门实例，服务提供方使用的是一个RestController暴露计算服务，服务消费方使用http工具（Feign）进行远程调用，这再清晰不过了，也是符合软件设计的，因为Feign接口的定义是存在于消费方，所以是真正的松耦合。但是习惯了使用rpc共享接口的设计，我们也可以将接口定义在服务提供方，这样做的好处是，服务可能被多个消费者使用，不需要每个消费者都定义一次Feign接口。</p>\n<p><center><br><img src=\"http://img.blog.csdn.net/20170803171756343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br></center></p>\n<p><center>图2 第二种依赖关系结构</center><br>在<code>restful-provider</code>创建一个<code>restful-provider-api-definition</code>模块，将<code>CalculateApi.java</code>的定义迁移到服务提供方，相应的<code>restful-provider-app</code>也可以进行改造：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/api\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculateController</span> <span class=\"keyword\">implements</span> <span class=\"title\">CalculateApi</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    @PostMapping(\"/add\")</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">add</span><span class=\"params\">(@RequestParam Integer a,@RequestParam Integer b)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a+b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    @PostMapping(\"/subtract\")</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">subtract</span><span class=\"params\">(@RequestParam Integer a,@RequestParam Integer b)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a-b;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为接口的定义和服务提供方现在在一个限界上下文中，接口的定义同时也宣告了应该提供什么样的服务，所以直接继承CalculateApi。这里的理解比较绕，现在的设计中，CalculateApi在服务消费者和服务提供者中的定位是不一样的，服务消费者需要在启动类扫描CalculateApi所在的包，生成代理对象，远程调用；而在服务提供方则一定不能扫描CalculateApi所在的包，否则会污染容器中的CalculateApi实现类，要知道，CalculateController 之上有一个<code>@RestController</code>注解，意味着已经有一个本地代理实现了，我们也可以在服务提供方注入CalculateApi，便是进行的本地调用了，这符合我们的初衷：我自己的提供的服务，本地当然可以调用。在服务提供方的启动类上要额外注意@ComponentScan，@EnableFeignClients的扫描。</p>\n<p>这样，当我们有多个消费者，只需要让他们配置Feign，并且引入服务提供方的接口定义，扫描，即可进行远程调用。有点类似于RPC的共享接口。</p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><p>restful设计以语言无关，松耦合的优势著称。在Spring Cloud Feign的相关文档中有这样的描述：</p>\n<blockquote>\n<p>It is generally not advisable to share an interface between a server and a client. It introduces tight coupling, and also actually doesn’t work with Spring MVC in its current form (method parameter mapping is not inherited).</p>\n</blockquote>\n<p>不建议使用上述改进后的共享接口的方式，并且警告我们，springmvc的注解在Feign接口中的定义和实现类中是不可继承的。关于这点，仁者见仁，智者见智。我们现在项目依旧是采用共享接口的方式，这样可以使得开发变得便捷，多个消费者不需要重复定义。</p>\n<p>下面是关于耦合和共享接口的一些讨论：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/spring-cloud/spring-cloud-netflix/issues/951</div><div class=\"line\">https://github.com/spring-cloud/spring-cloud-netflix/issues/659</div><div class=\"line\">https://github.com/spring-cloud/spring-cloud-netflix/issues/646</div><div class=\"line\">https://jmnarloch.wordpress.com/2015/08/19/spring-cloud-designing-feign-client/</div></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li><p>当接口定义中出现了实体类时，需要使用@RequestBody注解。多个实体类，则需要用一个大的vo对其进行包裹，要时刻记住，Feign接口最终是会转换成一次http请求。</p>\n</li>\n<li><p>接口定义中的注解和实现类中的注解要分别写一次，不能继承。</p>\n</li>\n<li><p>Feign调用一般配合eureka等注册中心使用，并且在客户端可以支持Hystrix机制，本文为了讲解共享接口这一设计，所以重心放在了Feign上，实际开发中，这些spring cloud的其他组件通常配套使用。</p>\n</li>\n<li><p>对http深入理解，在使用Feign时可以事半功倍。</p>\n</li>\n</ul>"},{"title":"浅析项目中的并发","date":"2017-02-22T03:31:52.000Z","_content":"\n\n\n前言\n--\n\n控制并发的方法很多，我之前的两篇博客都有过介绍，从最基础的synchronized，juc中的lock，到数据库的行级锁，乐观锁，悲观锁，再到中间件级别的redis，zookeeper分布式锁。今天主要想讲的主题是“根据并发出现的具体业务场景，使用合理的控制并发手段”。\n\n什么是并发\n-----\n由一个大家都了解的例子引入我们今天的主题：并发\n\n```java\npublic class Demo1 {\n\n    public Integer count = 0;\n\n    public static void main(String[] args) {\n        final Demo1 demo1 = new Demo1();\n        Executor executor = Executors.newFixedThreadPool(10);\n        for(int i=0;i<1000;i++){\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    demo1.count++;\n                }\n            });\n        }\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"final count value:\"+demo1.count);\n    }\n}\n\nconsole:\nfinal count value:973\n```\n这个过程中，类变量count就是共享资源，而++操作并不是线程安全的，而多个线程去对count执行++操作，并没有happens-before原则保障执行的先后顺序，导致了最终结果并不是想要的1000\n\n<!-- more -->\n\n下面，我们把并发中的共享资源从类变量转移到数据库中。\n先来看看使用框架的情况，以JPA为例（充血模型）\n\n```java\n@Component\npublic class Demo2 {\n\n    @Autowired\n    TestNumDao testNumDao;\n\n    @Transactional\n    public void test(){\n        TestNum testNum = testNumDao.findOne(\"1\");\n        testNum.setCount(testNum.getCount()+1);\n        testNumDao.save(testNum);\n    }\n\n}\ncontroller:\n\t@Autowired\n    Demo2 demo2;\n\n    @RequestMapping(\"test\")\n    @ResponseBody\n    public String test(){\n        Executor executor = Executors.newFixedThreadPool(10);\n        for(int i=0;i<1000;i++){\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    demo2.test();\n                }\n            });\n        }\n        return \"test\";\n    }\n```\n数据库的记录\n\n| id   | count |\n| ---- | ----- |\n| 1    | 344   |\n\n初窥门径的程序员会认为事务最基本的ACID中便包含了原子性，但是事务的原子性和今天所讲的并发中的原子操作仅仅是名词上有点类似。而有点经验的程序员都能知道这中间发生了什么（下面细说），这只是暴露了项目中并发问题的冰山一角。\n\n改成直接用sql如何呢（贫血模型）？\n\n```java\n@RequestMapping(\"testSql\")\n    @ResponseBody\n    public String testSql() throws InterruptedException {\n        final CountDownLatch countDownLatch = new CountDownLatch(1000);\n        long start = System.currentTimeMillis();\n        Executor executor = Executors.newFixedThreadPool(10);\n        for(int i=0;i<1000;i++){\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    jdbcTemplate.execute(\"update test_num set count = count + 1 where id = '1'\");\n                    countDownLatch.countDown();\n                }\n            });\n        }\n        countDownLatch.await();\n        long costTime =System.currentTimeMillis() - start;\n        System.out.println(\"共花费：\"+costTime+\" s\");\n        return \"testSql\";\n    }\n```\n数据库结果： count ： 1000 达到了预期效果\n这个例子我顺便记录了耗时,控制台打印:共花费：113 ms\n简单对比一下二，三两个例子，都是想对数据库的count进行+1操作，唯一的区别就是，后者的+1计算发生在数据库，而前者的计算依赖于事先查出来的值，并且计算发生在程序的内存中。而现在大部分的ORM框架的兴起，导致了写第二种代码的程序员变多，不注意并发的话，就会出现问题。下面我们来看看具体的业务场景。\n\n业务场景\n----\n\n  1.  修改个人信息\n  2.  修改商品信息\n  3.  扣除账户余额，扣减库存\n\n\n业务场景分析\n------\n第一个场景，互联网如此众多的用户修改个人信息，这算不算并发？答案是：算也不算。\n算，从程序员角度来看，每一个用户请求进来，都是调用的同一个修改入口，具体一点，就是映射到controller层的同一个requestMapping，所以一定是并发的。\n不算，虽然程序是并发的，但是从用户角度来分析，每个人只可以修改自己的信息，所以，不同用户的操作其实是隔离的，所以不算“并发”。这也是为什么很多开发者，在日常开发中一直不注意并发控制，却也没有发生太大问题的原因，大多数初级程序员开发的还都是CRM，OA，CMS系统。\n\n回到我们的并发，第一种业务场景，是可以使用如上模式的，对于一条用户数据的修改，我们允许程序员读取数据到内存中，内存计算修改（耗时操作），提交更改，提交事务。\n\n```java\n//Transaction start\nUser user = userDao.findById(\"1\");\nuser.setName(\"newName\");\nuser.setAge(user.getAge()+1);\n...//其他耗时操作\nuserDao.save(user);\n//Transaction commit\n```\n\n这个场景变现为：几乎不存在并发，不需要控制，场景乐观。\n\n为了严谨，也可以选择控制并发，但我觉得这需要交给写这段代码的同事，让他自由发挥。第二个场景已经有所不同了，同样是修改一个记录，但是系统中可能有多个操作员来维护，此时，商品数据表现为一个共享数据，所以存在微弱的并发，通常表现为数据的脏读，例如操作员A，B同时对一个商品信息维护，我们希望只能有一个操作员修改成功，另外一个操作员得到错误提示（该商品信息已经发生变化），否则，两个人都以为自己修改成功了，但是其实只有一个人完成了操作，另一个人的操作被覆盖了。\n\n这个场景表现为：存在并发，需要控制，允许失败，场景乐观。\n\n通常我建议这种场景使用乐观锁，即在商品属性添加一个`version`字段标记修改的版本，这样两个操作员拿到同一个版本号，第一个操作员修改成功后版本号变化，另一个操作员的修改就会失败了。\n\n```java\nclass Goods{\n\t@Version\n\tint version;\n}\n\n//Transaction start\ntry{\n\tGoods goods = goodsDao.findById(\"1\");\n\tgoods.setName(\"newName\");\n\tgoods.setPrice(goods.getPrice()+100.00);\n\t...//其他耗时操作\n\tgoodsDao.save(goods);\n}catch(org.hibernate.StaleObjectStateException e){\n\t//返回给前台\n}\n\n//Transaction commit\n```\nspringdata配合jpa可以自动捕获version异常，也可以自动手动对比。\n\n第三个场景\n这个场景表现为：存在频繁的并发，需要控制，不允许失败，场景悲观。\n\n**强调一下，本例不应该使用在项目中，只是为了举例而设置的一个场景，因为这种贫血模型无法满足复杂的业务场景，而且依靠单机事务来保证一致性，并发性能和可扩展性能不好。**\n\n一个秒杀场景，大量请求在短时间涌入，是不可能像第二种场景一样，100个并发请求，一个成功，其他99个全部异常的。\n\n设计方案应该达到的效果是：有足够库存时，允许并发，库存到0时，之后的请求全部失败；有足够金额时，允许并发，金额不够支付时立刻告知余额不足。\n\n可以利用数据库的行级锁，\n`update set balance = balance - money where userId = ? and balance >= money;` \n`update stock = stock - number where goodsId = ? and stock >= number ;`  然后在后台 查看返回值是否影响行数为1，判断请求是否成功，利用数据库保证并发。\n\n需要补充一点，我这里所讲的秒杀，并不是指双11那种级别的秒杀，那需要多层架构去控制并发，前端拦截，负载均衡....不能仅仅依赖于数据库的，会导致严重的性能问题。为了留一下一个直观的感受，这里对比一下oracle，mysql的两个主流存储引擎：innodb，myisam的性能问题。\n```\noracle:\n10000个线程共计1000000次并发请求：共花费：101017 ms =>101s\ninnodb:\n10000个线程共计1000000次并发请求：共花费：550330 ms =>550s\nmyisam:\n10000个线程共计1000000次并发请求：共花费：75802 ms =>75s\n```\n可见，如果真正有大量请求到达数据库，光是依靠数据库解决并发是不现实的，所以仅仅只用数据库来做保障而不是完全依赖。需要根据业务场景选择合适的控制并发手段。\n\n后续，待补充\n--\n分布式锁控制并发...\n浅析队列在并发场景中的地位...\n\n\n\n","source":"_posts/浅析项目中的并发.md","raw":"---\ntitle: 浅析项目中的并发\ndate: 2017-02-22 11:31:52\ntags: \n- 多线程\n- JAVA\ncategories: \n- 架构设计\n---\n\n\n\n前言\n--\n\n控制并发的方法很多，我之前的两篇博客都有过介绍，从最基础的synchronized，juc中的lock，到数据库的行级锁，乐观锁，悲观锁，再到中间件级别的redis，zookeeper分布式锁。今天主要想讲的主题是“根据并发出现的具体业务场景，使用合理的控制并发手段”。\n\n什么是并发\n-----\n由一个大家都了解的例子引入我们今天的主题：并发\n\n```java\npublic class Demo1 {\n\n    public Integer count = 0;\n\n    public static void main(String[] args) {\n        final Demo1 demo1 = new Demo1();\n        Executor executor = Executors.newFixedThreadPool(10);\n        for(int i=0;i<1000;i++){\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    demo1.count++;\n                }\n            });\n        }\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        System.out.println(\"final count value:\"+demo1.count);\n    }\n}\n\nconsole:\nfinal count value:973\n```\n这个过程中，类变量count就是共享资源，而++操作并不是线程安全的，而多个线程去对count执行++操作，并没有happens-before原则保障执行的先后顺序，导致了最终结果并不是想要的1000\n\n<!-- more -->\n\n下面，我们把并发中的共享资源从类变量转移到数据库中。\n先来看看使用框架的情况，以JPA为例（充血模型）\n\n```java\n@Component\npublic class Demo2 {\n\n    @Autowired\n    TestNumDao testNumDao;\n\n    @Transactional\n    public void test(){\n        TestNum testNum = testNumDao.findOne(\"1\");\n        testNum.setCount(testNum.getCount()+1);\n        testNumDao.save(testNum);\n    }\n\n}\ncontroller:\n\t@Autowired\n    Demo2 demo2;\n\n    @RequestMapping(\"test\")\n    @ResponseBody\n    public String test(){\n        Executor executor = Executors.newFixedThreadPool(10);\n        for(int i=0;i<1000;i++){\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    demo2.test();\n                }\n            });\n        }\n        return \"test\";\n    }\n```\n数据库的记录\n\n| id   | count |\n| ---- | ----- |\n| 1    | 344   |\n\n初窥门径的程序员会认为事务最基本的ACID中便包含了原子性，但是事务的原子性和今天所讲的并发中的原子操作仅仅是名词上有点类似。而有点经验的程序员都能知道这中间发生了什么（下面细说），这只是暴露了项目中并发问题的冰山一角。\n\n改成直接用sql如何呢（贫血模型）？\n\n```java\n@RequestMapping(\"testSql\")\n    @ResponseBody\n    public String testSql() throws InterruptedException {\n        final CountDownLatch countDownLatch = new CountDownLatch(1000);\n        long start = System.currentTimeMillis();\n        Executor executor = Executors.newFixedThreadPool(10);\n        for(int i=0;i<1000;i++){\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    jdbcTemplate.execute(\"update test_num set count = count + 1 where id = '1'\");\n                    countDownLatch.countDown();\n                }\n            });\n        }\n        countDownLatch.await();\n        long costTime =System.currentTimeMillis() - start;\n        System.out.println(\"共花费：\"+costTime+\" s\");\n        return \"testSql\";\n    }\n```\n数据库结果： count ： 1000 达到了预期效果\n这个例子我顺便记录了耗时,控制台打印:共花费：113 ms\n简单对比一下二，三两个例子，都是想对数据库的count进行+1操作，唯一的区别就是，后者的+1计算发生在数据库，而前者的计算依赖于事先查出来的值，并且计算发生在程序的内存中。而现在大部分的ORM框架的兴起，导致了写第二种代码的程序员变多，不注意并发的话，就会出现问题。下面我们来看看具体的业务场景。\n\n业务场景\n----\n\n  1.  修改个人信息\n  2.  修改商品信息\n  3.  扣除账户余额，扣减库存\n\n\n业务场景分析\n------\n第一个场景，互联网如此众多的用户修改个人信息，这算不算并发？答案是：算也不算。\n算，从程序员角度来看，每一个用户请求进来，都是调用的同一个修改入口，具体一点，就是映射到controller层的同一个requestMapping，所以一定是并发的。\n不算，虽然程序是并发的，但是从用户角度来分析，每个人只可以修改自己的信息，所以，不同用户的操作其实是隔离的，所以不算“并发”。这也是为什么很多开发者，在日常开发中一直不注意并发控制，却也没有发生太大问题的原因，大多数初级程序员开发的还都是CRM，OA，CMS系统。\n\n回到我们的并发，第一种业务场景，是可以使用如上模式的，对于一条用户数据的修改，我们允许程序员读取数据到内存中，内存计算修改（耗时操作），提交更改，提交事务。\n\n```java\n//Transaction start\nUser user = userDao.findById(\"1\");\nuser.setName(\"newName\");\nuser.setAge(user.getAge()+1);\n...//其他耗时操作\nuserDao.save(user);\n//Transaction commit\n```\n\n这个场景变现为：几乎不存在并发，不需要控制，场景乐观。\n\n为了严谨，也可以选择控制并发，但我觉得这需要交给写这段代码的同事，让他自由发挥。第二个场景已经有所不同了，同样是修改一个记录，但是系统中可能有多个操作员来维护，此时，商品数据表现为一个共享数据，所以存在微弱的并发，通常表现为数据的脏读，例如操作员A，B同时对一个商品信息维护，我们希望只能有一个操作员修改成功，另外一个操作员得到错误提示（该商品信息已经发生变化），否则，两个人都以为自己修改成功了，但是其实只有一个人完成了操作，另一个人的操作被覆盖了。\n\n这个场景表现为：存在并发，需要控制，允许失败，场景乐观。\n\n通常我建议这种场景使用乐观锁，即在商品属性添加一个`version`字段标记修改的版本，这样两个操作员拿到同一个版本号，第一个操作员修改成功后版本号变化，另一个操作员的修改就会失败了。\n\n```java\nclass Goods{\n\t@Version\n\tint version;\n}\n\n//Transaction start\ntry{\n\tGoods goods = goodsDao.findById(\"1\");\n\tgoods.setName(\"newName\");\n\tgoods.setPrice(goods.getPrice()+100.00);\n\t...//其他耗时操作\n\tgoodsDao.save(goods);\n}catch(org.hibernate.StaleObjectStateException e){\n\t//返回给前台\n}\n\n//Transaction commit\n```\nspringdata配合jpa可以自动捕获version异常，也可以自动手动对比。\n\n第三个场景\n这个场景表现为：存在频繁的并发，需要控制，不允许失败，场景悲观。\n\n**强调一下，本例不应该使用在项目中，只是为了举例而设置的一个场景，因为这种贫血模型无法满足复杂的业务场景，而且依靠单机事务来保证一致性，并发性能和可扩展性能不好。**\n\n一个秒杀场景，大量请求在短时间涌入，是不可能像第二种场景一样，100个并发请求，一个成功，其他99个全部异常的。\n\n设计方案应该达到的效果是：有足够库存时，允许并发，库存到0时，之后的请求全部失败；有足够金额时，允许并发，金额不够支付时立刻告知余额不足。\n\n可以利用数据库的行级锁，\n`update set balance = balance - money where userId = ? and balance >= money;` \n`update stock = stock - number where goodsId = ? and stock >= number ;`  然后在后台 查看返回值是否影响行数为1，判断请求是否成功，利用数据库保证并发。\n\n需要补充一点，我这里所讲的秒杀，并不是指双11那种级别的秒杀，那需要多层架构去控制并发，前端拦截，负载均衡....不能仅仅依赖于数据库的，会导致严重的性能问题。为了留一下一个直观的感受，这里对比一下oracle，mysql的两个主流存储引擎：innodb，myisam的性能问题。\n```\noracle:\n10000个线程共计1000000次并发请求：共花费：101017 ms =>101s\ninnodb:\n10000个线程共计1000000次并发请求：共花费：550330 ms =>550s\nmyisam:\n10000个线程共计1000000次并发请求：共花费：75802 ms =>75s\n```\n可见，如果真正有大量请求到达数据库，光是依靠数据库解决并发是不现实的，所以仅仅只用数据库来做保障而不是完全依赖。需要根据业务场景选择合适的控制并发手段。\n\n后续，待补充\n--\n分布式锁控制并发...\n浅析队列在并发场景中的地位...\n\n\n\n","slug":"浅析项目中的并发","published":1,"updated":"2017-09-04T11:49:26.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zun003utwv7auw7eb7k","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>控制并发的方法很多，我之前的两篇博客都有过介绍，从最基础的synchronized，juc中的lock，到数据库的行级锁，乐观锁，悲观锁，再到中间件级别的redis，zookeeper分布式锁。今天主要想讲的主题是“根据并发出现的具体业务场景，使用合理的控制并发手段”。</p>\n<h2 id=\"什么是并发\"><a href=\"#什么是并发\" class=\"headerlink\" title=\"什么是并发\"></a>什么是并发</h2><p>由一个大家都了解的例子引入我们今天的主题：并发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Integer count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Demo1 demo1 = <span class=\"keyword\">new</span> Demo1();</div><div class=\"line\">        Executor executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</div><div class=\"line\">            executor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    demo1.count++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Thread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"final count value:\"</span>+demo1.count);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console:</div><div class=\"line\"><span class=\"keyword\">final</span> count value:<span class=\"number\">973</span></div></pre></td></tr></table></figure>\n<p>这个过程中，类变量count就是共享资源，而++操作并不是线程安全的，而多个线程去对count执行++操作，并没有happens-before原则保障执行的先后顺序，导致了最终结果并不是想要的1000</p>\n<a id=\"more\"></a>\n<p>下面，我们把并发中的共享资源从类变量转移到数据库中。<br>先来看看使用框架的情况，以JPA为例（充血模型）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    TestNumDao testNumDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Transactional</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        TestNum testNum = testNumDao.findOne(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">        testNum.setCount(testNum.getCount()+<span class=\"number\">1</span>);</div><div class=\"line\">        testNumDao.save(testNum);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">controller:</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">    Demo2 demo2;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        Executor executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</div><div class=\"line\">            executor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    demo2.test();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"test\"</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>数据库的记录</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>344</td>\n</tr>\n</tbody>\n</table>\n<p>初窥门径的程序员会认为事务最基本的ACID中便包含了原子性，但是事务的原子性和今天所讲的并发中的原子操作仅仅是名词上有点类似。而有点经验的程序员都能知道这中间发生了什么（下面细说），这只是暴露了项目中并发问题的冰山一角。</p>\n<p>改成直接用sql如何呢（贫血模型）？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"testSql\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testSql</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1000</span>);</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        Executor executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</div><div class=\"line\">            executor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    jdbcTemplate.execute(<span class=\"string\">\"update test_num set count = count + 1 where id = '1'\"</span>);</div><div class=\"line\">                    countDownLatch.countDown();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        countDownLatch.await();</div><div class=\"line\">        <span class=\"keyword\">long</span> costTime =System.currentTimeMillis() - start;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"共花费：\"</span>+costTime+<span class=\"string\">\" s\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"testSql\"</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>数据库结果： count ： 1000 达到了预期效果<br>这个例子我顺便记录了耗时,控制台打印:共花费：113 ms<br>简单对比一下二，三两个例子，都是想对数据库的count进行+1操作，唯一的区别就是，后者的+1计算发生在数据库，而前者的计算依赖于事先查出来的值，并且计算发生在程序的内存中。而现在大部分的ORM框架的兴起，导致了写第二种代码的程序员变多，不注意并发的话，就会出现问题。下面我们来看看具体的业务场景。</p>\n<h2 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h2><ol>\n<li>修改个人信息</li>\n<li>修改商品信息</li>\n<li>扣除账户余额，扣减库存</li>\n</ol>\n<h2 id=\"业务场景分析\"><a href=\"#业务场景分析\" class=\"headerlink\" title=\"业务场景分析\"></a>业务场景分析</h2><p>第一个场景，互联网如此众多的用户修改个人信息，这算不算并发？答案是：算也不算。<br>算，从程序员角度来看，每一个用户请求进来，都是调用的同一个修改入口，具体一点，就是映射到controller层的同一个requestMapping，所以一定是并发的。<br>不算，虽然程序是并发的，但是从用户角度来分析，每个人只可以修改自己的信息，所以，不同用户的操作其实是隔离的，所以不算“并发”。这也是为什么很多开发者，在日常开发中一直不注意并发控制，却也没有发生太大问题的原因，大多数初级程序员开发的还都是CRM，OA，CMS系统。</p>\n<p>回到我们的并发，第一种业务场景，是可以使用如上模式的，对于一条用户数据的修改，我们允许程序员读取数据到内存中，内存计算修改（耗时操作），提交更改，提交事务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Transaction start</span></div><div class=\"line\">User user = userDao.findById(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">user.setName(<span class=\"string\">\"newName\"</span>);</div><div class=\"line\">user.setAge(user.getAge()+<span class=\"number\">1</span>);</div><div class=\"line\">...<span class=\"comment\">//其他耗时操作</span></div><div class=\"line\">userDao.save(user);</div><div class=\"line\"><span class=\"comment\">//Transaction commit</span></div></pre></td></tr></table></figure>\n<p>这个场景变现为：几乎不存在并发，不需要控制，场景乐观。</p>\n<p>为了严谨，也可以选择控制并发，但我觉得这需要交给写这段代码的同事，让他自由发挥。第二个场景已经有所不同了，同样是修改一个记录，但是系统中可能有多个操作员来维护，此时，商品数据表现为一个共享数据，所以存在微弱的并发，通常表现为数据的脏读，例如操作员A，B同时对一个商品信息维护，我们希望只能有一个操作员修改成功，另外一个操作员得到错误提示（该商品信息已经发生变化），否则，两个人都以为自己修改成功了，但是其实只有一个人完成了操作，另一个人的操作被覆盖了。</p>\n<p>这个场景表现为：存在并发，需要控制，允许失败，场景乐观。</p>\n<p>通常我建议这种场景使用乐观锁，即在商品属性添加一个<code>version</code>字段标记修改的版本，这样两个操作员拿到同一个版本号，第一个操作员修改成功后版本号变化，另一个操作员的修改就会失败了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Goods</span></span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Version</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> version;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Transaction start</span></div><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\tGoods goods = goodsDao.findById(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\tgoods.setName(<span class=\"string\">\"newName\"</span>);</div><div class=\"line\">\tgoods.setPrice(goods.getPrice()+<span class=\"number\">100.00</span>);</div><div class=\"line\">\t...<span class=\"comment\">//其他耗时操作</span></div><div class=\"line\">\tgoodsDao.save(goods);</div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(org.hibernate.StaleObjectStateException e)&#123;</div><div class=\"line\">\t<span class=\"comment\">//返回给前台</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Transaction commit</span></div></pre></td></tr></table></figure>\n<p>springdata配合jpa可以自动捕获version异常，也可以自动手动对比。</p>\n<p>第三个场景<br>这个场景表现为：存在频繁的并发，需要控制，不允许失败，场景悲观。</p>\n<p><strong>强调一下，本例不应该使用在项目中，只是为了举例而设置的一个场景，因为这种贫血模型无法满足复杂的业务场景，而且依靠单机事务来保证一致性，并发性能和可扩展性能不好。</strong></p>\n<p>一个秒杀场景，大量请求在短时间涌入，是不可能像第二种场景一样，100个并发请求，一个成功，其他99个全部异常的。</p>\n<p>设计方案应该达到的效果是：有足够库存时，允许并发，库存到0时，之后的请求全部失败；有足够金额时，允许并发，金额不够支付时立刻告知余额不足。</p>\n<p>可以利用数据库的行级锁，<br><code>update set balance = balance - money where userId = ? and balance &gt;= money;</code><br><code>update stock = stock - number where goodsId = ? and stock &gt;= number ;</code>  然后在后台 查看返回值是否影响行数为1，判断请求是否成功，利用数据库保证并发。</p>\n<p>需要补充一点，我这里所讲的秒杀，并不是指双11那种级别的秒杀，那需要多层架构去控制并发，前端拦截，负载均衡….不能仅仅依赖于数据库的，会导致严重的性能问题。为了留一下一个直观的感受，这里对比一下oracle，mysql的两个主流存储引擎：innodb，myisam的性能问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">oracle:</div><div class=\"line\">10000个线程共计1000000次并发请求：共花费：101017 ms =&gt;101s</div><div class=\"line\">innodb:</div><div class=\"line\">10000个线程共计1000000次并发请求：共花费：550330 ms =&gt;550s</div><div class=\"line\">myisam:</div><div class=\"line\">10000个线程共计1000000次并发请求：共花费：75802 ms =&gt;75s</div></pre></td></tr></table></figure></p>\n<p>可见，如果真正有大量请求到达数据库，光是依靠数据库解决并发是不现实的，所以仅仅只用数据库来做保障而不是完全依赖。需要根据业务场景选择合适的控制并发手段。</p>\n<h2 id=\"后续，待补充\"><a href=\"#后续，待补充\" class=\"headerlink\" title=\"后续，待补充\"></a>后续，待补充</h2><p>分布式锁控制并发…<br>浅析队列在并发场景中的地位…</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>控制并发的方法很多，我之前的两篇博客都有过介绍，从最基础的synchronized，juc中的lock，到数据库的行级锁，乐观锁，悲观锁，再到中间件级别的redis，zookeeper分布式锁。今天主要想讲的主题是“根据并发出现的具体业务场景，使用合理的控制并发手段”。</p>\n<h2 id=\"什么是并发\"><a href=\"#什么是并发\" class=\"headerlink\" title=\"什么是并发\"></a>什么是并发</h2><p>由一个大家都了解的例子引入我们今天的主题：并发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo1</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Integer count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Demo1 demo1 = <span class=\"keyword\">new</span> Demo1();</div><div class=\"line\">        Executor executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</div><div class=\"line\">            executor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    demo1.count++;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Thread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"final count value:\"</span>+demo1.count);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">console:</div><div class=\"line\"><span class=\"keyword\">final</span> count value:<span class=\"number\">973</span></div></pre></td></tr></table></figure>\n<p>这个过程中，类变量count就是共享资源，而++操作并不是线程安全的，而多个线程去对count执行++操作，并没有happens-before原则保障执行的先后顺序，导致了最终结果并不是想要的1000</p>","more":"<p>下面，我们把并发中的共享资源从类变量转移到数据库中。<br>先来看看使用框架的情况，以JPA为例（充血模型）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo2</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    TestNumDao testNumDao;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Transactional</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        TestNum testNum = testNumDao.findOne(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">        testNum.setCount(testNum.getCount()+<span class=\"number\">1</span>);</div><div class=\"line\">        testNumDao.save(testNum);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">controller:</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">    Demo2 demo2;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"test\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        Executor executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</div><div class=\"line\">            executor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    demo2.test();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"test\"</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>数据库的记录</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>344</td>\n</tr>\n</tbody>\n</table>\n<p>初窥门径的程序员会认为事务最基本的ACID中便包含了原子性，但是事务的原子性和今天所讲的并发中的原子操作仅仅是名词上有点类似。而有点经验的程序员都能知道这中间发生了什么（下面细说），这只是暴露了项目中并发问题的冰山一角。</p>\n<p>改成直接用sql如何呢（贫血模型）？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"testSql\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ResponseBody</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testSql</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1000</span>);</div><div class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">        Executor executor = Executors.newFixedThreadPool(<span class=\"number\">10</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</div><div class=\"line\">            executor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    jdbcTemplate.execute(<span class=\"string\">\"update test_num set count = count + 1 where id = '1'\"</span>);</div><div class=\"line\">                    countDownLatch.countDown();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        countDownLatch.await();</div><div class=\"line\">        <span class=\"keyword\">long</span> costTime =System.currentTimeMillis() - start;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"共花费：\"</span>+costTime+<span class=\"string\">\" s\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"testSql\"</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>数据库结果： count ： 1000 达到了预期效果<br>这个例子我顺便记录了耗时,控制台打印:共花费：113 ms<br>简单对比一下二，三两个例子，都是想对数据库的count进行+1操作，唯一的区别就是，后者的+1计算发生在数据库，而前者的计算依赖于事先查出来的值，并且计算发生在程序的内存中。而现在大部分的ORM框架的兴起，导致了写第二种代码的程序员变多，不注意并发的话，就会出现问题。下面我们来看看具体的业务场景。</p>\n<h2 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h2><ol>\n<li>修改个人信息</li>\n<li>修改商品信息</li>\n<li>扣除账户余额，扣减库存</li>\n</ol>\n<h2 id=\"业务场景分析\"><a href=\"#业务场景分析\" class=\"headerlink\" title=\"业务场景分析\"></a>业务场景分析</h2><p>第一个场景，互联网如此众多的用户修改个人信息，这算不算并发？答案是：算也不算。<br>算，从程序员角度来看，每一个用户请求进来，都是调用的同一个修改入口，具体一点，就是映射到controller层的同一个requestMapping，所以一定是并发的。<br>不算，虽然程序是并发的，但是从用户角度来分析，每个人只可以修改自己的信息，所以，不同用户的操作其实是隔离的，所以不算“并发”。这也是为什么很多开发者，在日常开发中一直不注意并发控制，却也没有发生太大问题的原因，大多数初级程序员开发的还都是CRM，OA，CMS系统。</p>\n<p>回到我们的并发，第一种业务场景，是可以使用如上模式的，对于一条用户数据的修改，我们允许程序员读取数据到内存中，内存计算修改（耗时操作），提交更改，提交事务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Transaction start</span></div><div class=\"line\">User user = userDao.findById(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">user.setName(<span class=\"string\">\"newName\"</span>);</div><div class=\"line\">user.setAge(user.getAge()+<span class=\"number\">1</span>);</div><div class=\"line\">...<span class=\"comment\">//其他耗时操作</span></div><div class=\"line\">userDao.save(user);</div><div class=\"line\"><span class=\"comment\">//Transaction commit</span></div></pre></td></tr></table></figure>\n<p>这个场景变现为：几乎不存在并发，不需要控制，场景乐观。</p>\n<p>为了严谨，也可以选择控制并发，但我觉得这需要交给写这段代码的同事，让他自由发挥。第二个场景已经有所不同了，同样是修改一个记录，但是系统中可能有多个操作员来维护，此时，商品数据表现为一个共享数据，所以存在微弱的并发，通常表现为数据的脏读，例如操作员A，B同时对一个商品信息维护，我们希望只能有一个操作员修改成功，另外一个操作员得到错误提示（该商品信息已经发生变化），否则，两个人都以为自己修改成功了，但是其实只有一个人完成了操作，另一个人的操作被覆盖了。</p>\n<p>这个场景表现为：存在并发，需要控制，允许失败，场景乐观。</p>\n<p>通常我建议这种场景使用乐观锁，即在商品属性添加一个<code>version</code>字段标记修改的版本，这样两个操作员拿到同一个版本号，第一个操作员修改成功后版本号变化，另一个操作员的修改就会失败了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Goods</span></span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Version</span></div><div class=\"line\">\t<span class=\"keyword\">int</span> version;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Transaction start</span></div><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\tGoods goods = goodsDao.findById(<span class=\"string\">\"1\"</span>);</div><div class=\"line\">\tgoods.setName(<span class=\"string\">\"newName\"</span>);</div><div class=\"line\">\tgoods.setPrice(goods.getPrice()+<span class=\"number\">100.00</span>);</div><div class=\"line\">\t...<span class=\"comment\">//其他耗时操作</span></div><div class=\"line\">\tgoodsDao.save(goods);</div><div class=\"line\">&#125;<span class=\"keyword\">catch</span>(org.hibernate.StaleObjectStateException e)&#123;</div><div class=\"line\">\t<span class=\"comment\">//返回给前台</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Transaction commit</span></div></pre></td></tr></table></figure>\n<p>springdata配合jpa可以自动捕获version异常，也可以自动手动对比。</p>\n<p>第三个场景<br>这个场景表现为：存在频繁的并发，需要控制，不允许失败，场景悲观。</p>\n<p><strong>强调一下，本例不应该使用在项目中，只是为了举例而设置的一个场景，因为这种贫血模型无法满足复杂的业务场景，而且依靠单机事务来保证一致性，并发性能和可扩展性能不好。</strong></p>\n<p>一个秒杀场景，大量请求在短时间涌入，是不可能像第二种场景一样，100个并发请求，一个成功，其他99个全部异常的。</p>\n<p>设计方案应该达到的效果是：有足够库存时，允许并发，库存到0时，之后的请求全部失败；有足够金额时，允许并发，金额不够支付时立刻告知余额不足。</p>\n<p>可以利用数据库的行级锁，<br><code>update set balance = balance - money where userId = ? and balance &gt;= money;</code><br><code>update stock = stock - number where goodsId = ? and stock &gt;= number ;</code>  然后在后台 查看返回值是否影响行数为1，判断请求是否成功，利用数据库保证并发。</p>\n<p>需要补充一点，我这里所讲的秒杀，并不是指双11那种级别的秒杀，那需要多层架构去控制并发，前端拦截，负载均衡….不能仅仅依赖于数据库的，会导致严重的性能问题。为了留一下一个直观的感受，这里对比一下oracle，mysql的两个主流存储引擎：innodb，myisam的性能问题。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">oracle:</div><div class=\"line\">10000个线程共计1000000次并发请求：共花费：101017 ms =&gt;101s</div><div class=\"line\">innodb:</div><div class=\"line\">10000个线程共计1000000次并发请求：共花费：550330 ms =&gt;550s</div><div class=\"line\">myisam:</div><div class=\"line\">10000个线程共计1000000次并发请求：共花费：75802 ms =&gt;75s</div></pre></td></tr></table></figure></p>\n<p>可见，如果真正有大量请求到达数据库，光是依靠数据库解决并发是不现实的，所以仅仅只用数据库来做保障而不是完全依赖。需要根据业务场景选择合适的控制并发手段。</p>\n<h2 id=\"后续，待补充\"><a href=\"#后续，待补充\" class=\"headerlink\" title=\"后续，待补充\"></a>后续，待补充</h2><p>分布式锁控制并发…<br>浅析队列在并发场景中的地位…</p>"},{"title":"简单了解RPC实现原理","date":"2017-02-10T07:11:52.000Z","_content":"\n\n\n时下很多企业应用更新换代到分布式，一篇文章了解什么是RPC。\n原作者梁飞，在此记录下他非常简洁的rpc实现思路。\n\n<!-- more -->\n\n## 核心框架类\n\n```java\n/*\n * Copyright 2011 Alibaba.com All right reserved. This software is the\n * confidential and proprietary information of Alibaba.com (\"Confidential\n * Information\"). You shall not disclose such Confidential Information and shall\n * use it only in accordance with the terms of the license agreement you entered\n * into with Alibaba.com.\n */\npackage com.alibaba.study.rpc.framework;\n\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n/**\n * RpcFramework\n * \n * @author william.liangf\n */\npublic class RpcFramework {\n\n    /**\n     * 暴露服务\n     * \n     * @param service 服务实现\n     * @param port 服务端口\n     * @throws Exception\n     */\n    public static void export(final Object service, int port) throws Exception {\n        if (service == null)\n            throw new IllegalArgumentException(\"service instance == null\");\n        if (port <= 0 || port > 65535)\n            throw new IllegalArgumentException(\"Invalid port \" + port);\n        System.out.println(\"Export service \" + service.getClass().getName() + \" on port \" + port);\n        ServerSocket server = new ServerSocket(port);\n        for(;;) {\n            try {\n                final Socket socket = server.accept();\n                new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        try {\n                            try {\n                                ObjectInputStream input = new ObjectInputStream(socket.getInputStream());\n                                try {\n                                    String methodName = input.readUTF();\n                                    Class<?>[] parameterTypes = (Class<?>[])input.readObject();\n                                    Object[] arguments = (Object[])input.readObject();\n                                    ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n                                    try {\n                                        Method method = service.getClass().getMethod(methodName, parameterTypes);\n                                        Object result = method.invoke(service, arguments);\n                                        output.writeObject(result);\n                                    } catch (Throwable t) {\n                                        output.writeObject(t);\n                                    } finally {\n                                        output.close();\n                                    }\n                                } finally {\n                                    input.close();\n                                }\n                            } finally {\n                                socket.close();\n                            }\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }).start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * 引用服务\n     * \n     * @param <T> 接口泛型\n     * @param interfaceClass 接口类型\n     * @param host 服务器主机名\n     * @param port 服务器端口\n     * @return 远程服务\n     * @throws Exception\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T refer(final Class<T> interfaceClass, final String host, final int port) throws Exception {\n        if (interfaceClass == null)\n            throw new IllegalArgumentException(\"Interface class == null\");\n        if (! interfaceClass.isInterface())\n            throw new IllegalArgumentException(\"The \" + interfaceClass.getName() + \" must be interface class!\");\n        if (host == null || host.length() == 0)\n            throw new IllegalArgumentException(\"Host == null!\");\n        if (port <= 0 || port > 65535)\n            throw new IllegalArgumentException(\"Invalid port \" + port);\n        System.out.println(\"Get remote service \" + interfaceClass.getName() + \" from server \" + host + \":\" + port);\n        return (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(), new Class<?>[] {interfaceClass}, new InvocationHandler() {\n            public Object invoke(Object proxy, Method method, Object[] arguments) throws Throwable {\n                Socket socket = new Socket(host, port);\n                try {\n                    ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n                    try {\n                        output.writeUTF(method.getName());\n                        output.writeObject(method.getParameterTypes());\n                        output.writeObject(arguments);\n                        ObjectInputStream input = new ObjectInputStream(socket.getInputStream());\n                        try {\n                            Object result = input.readObject();\n                            if (result instanceof Throwable) {\n                                throw (Throwable) result;\n                            }\n                            return result;\n                        } finally {\n                            input.close();\n                        }\n                    } finally {\n                        output.close();\n                    }\n                } finally {\n                    socket.close();\n                }\n            }\n        });\n    }\n\n}\n```\n\n## 定义服务接口\n\n```java\n/*\n * Copyright 2011 Alibaba.com All right reserved. This software is the\n * confidential and proprietary information of Alibaba.com (\"Confidential\n * Information\"). You shall not disclose such Confidential Information and shall\n * use it only in accordance with the terms of the license agreement you entered\n * into with Alibaba.com.\n */\npackage com.alibaba.study.rpc.test;\n\n/**\n * HelloService\n * \n * @author william.liangf\n */\npublic interface HelloService {\n\n    String hello(String name);\n\n}\n```\n\n## 实现服务\n\n```java\n/*\n * Copyright 2011 Alibaba.com All right reserved. This software is the\n * confidential and proprietary information of Alibaba.com (\"Confidential\n * Information\"). You shall not disclose such Confidential Information and shall\n * use it only in accordance with the terms of the license agreement you entered\n * into with Alibaba.com.\n */\npackage com.alibaba.study.rpc.test;\n\n/**\n * HelloServiceImpl\n * \n * @author william.liangf\n */\npublic class HelloServiceImpl implements HelloService {\n\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n\n}\n```\n\n## 暴露服务\n\n```java\n/*\n * Copyright 2011 Alibaba.com All right reserved. This software is the\n * confidential and proprietary information of Alibaba.com (\"Confidential\n * Information\"). You shall not disclose such Confidential Information and shall\n * use it only in accordance with the terms of the license agreement you entered\n * into with Alibaba.com.\n */\npackage com.alibaba.study.rpc.test;\n\nimport com.alibaba.study.rpc.framework.RpcFramework;\n\n/**\n * RpcProvider\n * \n * @author william.liangf\n */\npublic class RpcProvider {\n\n    public static void main(String[] args) throws Exception {\n        HelloService service = new HelloServiceImpl();\n        RpcFramework.export(service, 1234);\n    }\n\n}\n```\n\n## 引用服务\n\n```java\n/*\n * Copyright 2011 Alibaba.com All right reserved. This software is the\n * confidential and proprietary information of Alibaba.com (\"Confidential\n * Information\"). You shall not disclose such Confidential Information and shall\n * use it only in accordance with the terms of the license agreement you entered\n * into with Alibaba.com.\n */\npackage com.alibaba.study.rpc.test;\n\nimport com.alibaba.study.rpc.framework.RpcFramework;\n\n/**\n * RpcConsumer\n * \n * @author william.liangf\n */\npublic class RpcConsumer {\n    \n    public static void main(String[] args) throws Exception {\n        HelloService service = RpcFramework.refer(HelloService.class, \"127.0.0.1\", 1234);\n        for (int i = 0; i < Integer.MAX_VALUE; i ++) {\n            String hello = service.hello(\"World\" + i);\n            System.out.println(hello);\n            Thread.sleep(1000);\n        }\n    }\n    \n}\n```\n\n## 总结\n\n这个简单的例子的实现思路是使用阻塞的socket IO流来进行server和client的通信，也就是rpc应用中服务提供方和服务消费方。并且是端对端的，用端口号来直接进行通信。方法的远程调用使用的是jdk的动态代理，参数的序列化也是使用的最简单的objectStream。\n\n真实的rpc框架会对上面的实现方式进行替换，采用更快更稳定，更高可用易扩展，更适宜分布式场景的中间件，技术来替换。例如使用netty的nio特性达到非阻塞的通信，使用zookeeper统一管理服务注册与发现，解决了端对端不灵活的劣势。代理方式有cglib字节码技术。序列化方式有hession2，fastjson等等。不过梁飞大大的博客使用原生的jdk api就展现给各位读者一个生动形象的rpc demo，实在是强。rpc框架解决的不仅仅是技术层面的实现，还考虑到了rpc调用中的诸多问题，重试机制，超时配置...这些就需要去了解成熟的rpc框架是如果考虑这些问题的了。\n\n推荐一个轻量级的rpc框架：motan。weibo团队在github开源的一个rpc框架，有相应的文档，用起来感觉比dubbo要轻量级，易上手。\n\n","source":"_posts/简单了解RPC实现原理.md","raw":"---\ntitle: 简单了解RPC实现原理\ndate: 2017-02-10 15:11:52\ntags: \n- RPC\ncategories: \n- 架构设计\n---\n\n\n\n时下很多企业应用更新换代到分布式，一篇文章了解什么是RPC。\n原作者梁飞，在此记录下他非常简洁的rpc实现思路。\n\n<!-- more -->\n\n## 核心框架类\n\n```java\n/*\n * Copyright 2011 Alibaba.com All right reserved. This software is the\n * confidential and proprietary information of Alibaba.com (\"Confidential\n * Information\"). You shall not disclose such Confidential Information and shall\n * use it only in accordance with the terms of the license agreement you entered\n * into with Alibaba.com.\n */\npackage com.alibaba.study.rpc.framework;\n\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n/**\n * RpcFramework\n * \n * @author william.liangf\n */\npublic class RpcFramework {\n\n    /**\n     * 暴露服务\n     * \n     * @param service 服务实现\n     * @param port 服务端口\n     * @throws Exception\n     */\n    public static void export(final Object service, int port) throws Exception {\n        if (service == null)\n            throw new IllegalArgumentException(\"service instance == null\");\n        if (port <= 0 || port > 65535)\n            throw new IllegalArgumentException(\"Invalid port \" + port);\n        System.out.println(\"Export service \" + service.getClass().getName() + \" on port \" + port);\n        ServerSocket server = new ServerSocket(port);\n        for(;;) {\n            try {\n                final Socket socket = server.accept();\n                new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        try {\n                            try {\n                                ObjectInputStream input = new ObjectInputStream(socket.getInputStream());\n                                try {\n                                    String methodName = input.readUTF();\n                                    Class<?>[] parameterTypes = (Class<?>[])input.readObject();\n                                    Object[] arguments = (Object[])input.readObject();\n                                    ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n                                    try {\n                                        Method method = service.getClass().getMethod(methodName, parameterTypes);\n                                        Object result = method.invoke(service, arguments);\n                                        output.writeObject(result);\n                                    } catch (Throwable t) {\n                                        output.writeObject(t);\n                                    } finally {\n                                        output.close();\n                                    }\n                                } finally {\n                                    input.close();\n                                }\n                            } finally {\n                                socket.close();\n                            }\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }).start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * 引用服务\n     * \n     * @param <T> 接口泛型\n     * @param interfaceClass 接口类型\n     * @param host 服务器主机名\n     * @param port 服务器端口\n     * @return 远程服务\n     * @throws Exception\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T refer(final Class<T> interfaceClass, final String host, final int port) throws Exception {\n        if (interfaceClass == null)\n            throw new IllegalArgumentException(\"Interface class == null\");\n        if (! interfaceClass.isInterface())\n            throw new IllegalArgumentException(\"The \" + interfaceClass.getName() + \" must be interface class!\");\n        if (host == null || host.length() == 0)\n            throw new IllegalArgumentException(\"Host == null!\");\n        if (port <= 0 || port > 65535)\n            throw new IllegalArgumentException(\"Invalid port \" + port);\n        System.out.println(\"Get remote service \" + interfaceClass.getName() + \" from server \" + host + \":\" + port);\n        return (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(), new Class<?>[] {interfaceClass}, new InvocationHandler() {\n            public Object invoke(Object proxy, Method method, Object[] arguments) throws Throwable {\n                Socket socket = new Socket(host, port);\n                try {\n                    ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n                    try {\n                        output.writeUTF(method.getName());\n                        output.writeObject(method.getParameterTypes());\n                        output.writeObject(arguments);\n                        ObjectInputStream input = new ObjectInputStream(socket.getInputStream());\n                        try {\n                            Object result = input.readObject();\n                            if (result instanceof Throwable) {\n                                throw (Throwable) result;\n                            }\n                            return result;\n                        } finally {\n                            input.close();\n                        }\n                    } finally {\n                        output.close();\n                    }\n                } finally {\n                    socket.close();\n                }\n            }\n        });\n    }\n\n}\n```\n\n## 定义服务接口\n\n```java\n/*\n * Copyright 2011 Alibaba.com All right reserved. This software is the\n * confidential and proprietary information of Alibaba.com (\"Confidential\n * Information\"). You shall not disclose such Confidential Information and shall\n * use it only in accordance with the terms of the license agreement you entered\n * into with Alibaba.com.\n */\npackage com.alibaba.study.rpc.test;\n\n/**\n * HelloService\n * \n * @author william.liangf\n */\npublic interface HelloService {\n\n    String hello(String name);\n\n}\n```\n\n## 实现服务\n\n```java\n/*\n * Copyright 2011 Alibaba.com All right reserved. This software is the\n * confidential and proprietary information of Alibaba.com (\"Confidential\n * Information\"). You shall not disclose such Confidential Information and shall\n * use it only in accordance with the terms of the license agreement you entered\n * into with Alibaba.com.\n */\npackage com.alibaba.study.rpc.test;\n\n/**\n * HelloServiceImpl\n * \n * @author william.liangf\n */\npublic class HelloServiceImpl implements HelloService {\n\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n\n}\n```\n\n## 暴露服务\n\n```java\n/*\n * Copyright 2011 Alibaba.com All right reserved. This software is the\n * confidential and proprietary information of Alibaba.com (\"Confidential\n * Information\"). You shall not disclose such Confidential Information and shall\n * use it only in accordance with the terms of the license agreement you entered\n * into with Alibaba.com.\n */\npackage com.alibaba.study.rpc.test;\n\nimport com.alibaba.study.rpc.framework.RpcFramework;\n\n/**\n * RpcProvider\n * \n * @author william.liangf\n */\npublic class RpcProvider {\n\n    public static void main(String[] args) throws Exception {\n        HelloService service = new HelloServiceImpl();\n        RpcFramework.export(service, 1234);\n    }\n\n}\n```\n\n## 引用服务\n\n```java\n/*\n * Copyright 2011 Alibaba.com All right reserved. This software is the\n * confidential and proprietary information of Alibaba.com (\"Confidential\n * Information\"). You shall not disclose such Confidential Information and shall\n * use it only in accordance with the terms of the license agreement you entered\n * into with Alibaba.com.\n */\npackage com.alibaba.study.rpc.test;\n\nimport com.alibaba.study.rpc.framework.RpcFramework;\n\n/**\n * RpcConsumer\n * \n * @author william.liangf\n */\npublic class RpcConsumer {\n    \n    public static void main(String[] args) throws Exception {\n        HelloService service = RpcFramework.refer(HelloService.class, \"127.0.0.1\", 1234);\n        for (int i = 0; i < Integer.MAX_VALUE; i ++) {\n            String hello = service.hello(\"World\" + i);\n            System.out.println(hello);\n            Thread.sleep(1000);\n        }\n    }\n    \n}\n```\n\n## 总结\n\n这个简单的例子的实现思路是使用阻塞的socket IO流来进行server和client的通信，也就是rpc应用中服务提供方和服务消费方。并且是端对端的，用端口号来直接进行通信。方法的远程调用使用的是jdk的动态代理，参数的序列化也是使用的最简单的objectStream。\n\n真实的rpc框架会对上面的实现方式进行替换，采用更快更稳定，更高可用易扩展，更适宜分布式场景的中间件，技术来替换。例如使用netty的nio特性达到非阻塞的通信，使用zookeeper统一管理服务注册与发现，解决了端对端不灵活的劣势。代理方式有cglib字节码技术。序列化方式有hession2，fastjson等等。不过梁飞大大的博客使用原生的jdk api就展现给各位读者一个生动形象的rpc demo，实在是强。rpc框架解决的不仅仅是技术层面的实现，还考虑到了rpc调用中的诸多问题，重试机制，超时配置...这些就需要去了解成熟的rpc框架是如果考虑这些问题的了。\n\n推荐一个轻量级的rpc框架：motan。weibo团队在github开源的一个rpc框架，有相应的文档，用起来感觉比dubbo要轻量级，易上手。\n\n","slug":"简单了解RPC实现原理","published":1,"updated":"2017-09-04T11:49:26.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zup003xtwv7dkioon62","content":"<p>时下很多企业应用更新换代到分布式，一篇文章了解什么是RPC。<br>原作者梁飞，在此记录下他非常简洁的rpc实现思路。</p>\n<a id=\"more\"></a>\n<h2 id=\"核心框架类\"><a href=\"#核心框架类\" class=\"headerlink\" title=\"核心框架类\"></a>核心框架类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Copyright 2011 Alibaba.com All right reserved. This software is the</span></div><div class=\"line\"><span class=\"comment\"> * confidential and proprietary information of Alibaba.com (\"Confidential</span></div><div class=\"line\"><span class=\"comment\"> * Information\"). You shall not disclose such Confidential Information and shall</span></div><div class=\"line\"><span class=\"comment\"> * use it only in accordance with the terms of the license agreement you entered</span></div><div class=\"line\"><span class=\"comment\"> * into with Alibaba.com.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.study.rpc.framework;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * RpcFramework</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> william.liangf</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RpcFramework</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 暴露服务</span></div><div class=\"line\"><span class=\"comment\">     * </span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> service 服务实现</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> port 服务端口</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">export</span><span class=\"params\">(<span class=\"keyword\">final</span> Object service, <span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (service == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"service instance == null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (port &lt;= <span class=\"number\">0</span> || port &gt; <span class=\"number\">65535</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Invalid port \"</span> + port);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Export service \"</span> + service.getClass().getName() + <span class=\"string\">\" on port \"</span> + port);</div><div class=\"line\">        ServerSocket server = <span class=\"keyword\">new</span> ServerSocket(port);</div><div class=\"line\">        <span class=\"keyword\">for</span>(;;) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> Socket socket = server.accept();</div><div class=\"line\">                <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                                ObjectInputStream input = <span class=\"keyword\">new</span> ObjectInputStream(socket.getInputStream());</div><div class=\"line\">                                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                                    String methodName = input.readUTF();</div><div class=\"line\">                                    Class&lt;?&gt;[] parameterTypes = (Class&lt;?&gt;[])input.readObject();</div><div class=\"line\">                                    Object[] arguments = (Object[])input.readObject();</div><div class=\"line\">                                    ObjectOutputStream output = <span class=\"keyword\">new</span> ObjectOutputStream(socket.getOutputStream());</div><div class=\"line\">                                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                                        Method method = service.getClass().getMethod(methodName, parameterTypes);</div><div class=\"line\">                                        Object result = method.invoke(service, arguments);</div><div class=\"line\">                                        output.writeObject(result);</div><div class=\"line\">                                    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</div><div class=\"line\">                                        output.writeObject(t);</div><div class=\"line\">                                    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                                        output.close();</div><div class=\"line\">                                    &#125;</div><div class=\"line\">                                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                                    input.close();</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                                socket.close();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;).start();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 引用服务</span></div><div class=\"line\"><span class=\"comment\">     * </span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt; 接口泛型</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> interfaceClass 接口类型</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> host 服务器主机名</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> port 服务器端口</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 远程服务</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">refer</span><span class=\"params\">(<span class=\"keyword\">final</span> Class&lt;T&gt; interfaceClass, <span class=\"keyword\">final</span> String host, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (interfaceClass == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Interface class == null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (! interfaceClass.isInterface())</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The \"</span> + interfaceClass.getName() + <span class=\"string\">\" must be interface class!\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (host == <span class=\"keyword\">null</span> || host.length() == <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Host == null!\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (port &lt;= <span class=\"number\">0</span> || port &gt; <span class=\"number\">65535</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Invalid port \"</span> + port);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Get remote service \"</span> + interfaceClass.getName() + <span class=\"string\">\" from server \"</span> + host + <span class=\"string\">\":\"</span> + port);</div><div class=\"line\">        <span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(), <span class=\"keyword\">new</span> Class&lt;?&gt;[] &#123;interfaceClass&#125;, <span class=\"keyword\">new</span> InvocationHandler() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] arguments)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">                Socket socket = <span class=\"keyword\">new</span> Socket(host, port);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    ObjectOutputStream output = <span class=\"keyword\">new</span> ObjectOutputStream(socket.getOutputStream());</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        output.writeUTF(method.getName());</div><div class=\"line\">                        output.writeObject(method.getParameterTypes());</div><div class=\"line\">                        output.writeObject(arguments);</div><div class=\"line\">                        ObjectInputStream input = <span class=\"keyword\">new</span> ObjectInputStream(socket.getInputStream());</div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            Object result = input.readObject();</div><div class=\"line\">                            <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> Throwable) &#123;</div><div class=\"line\">                                <span class=\"keyword\">throw</span> (Throwable) result;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            <span class=\"keyword\">return</span> result;</div><div class=\"line\">                        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                            input.close();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                        output.close();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    socket.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"定义服务接口\"><a href=\"#定义服务接口\" class=\"headerlink\" title=\"定义服务接口\"></a>定义服务接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Copyright 2011 Alibaba.com All right reserved. This software is the</span></div><div class=\"line\"><span class=\"comment\"> * confidential and proprietary information of Alibaba.com (\"Confidential</span></div><div class=\"line\"><span class=\"comment\"> * Information\"). You shall not disclose such Confidential Information and shall</span></div><div class=\"line\"><span class=\"comment\"> * use it only in accordance with the terms of the license agreement you entered</span></div><div class=\"line\"><span class=\"comment\"> * into with Alibaba.com.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.study.rpc.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * HelloService</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> william.liangf</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">hello</span><span class=\"params\">(String name)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"实现服务\"><a href=\"#实现服务\" class=\"headerlink\" title=\"实现服务\"></a>实现服务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Copyright 2011 Alibaba.com All right reserved. This software is the</span></div><div class=\"line\"><span class=\"comment\"> * confidential and proprietary information of Alibaba.com (\"Confidential</span></div><div class=\"line\"><span class=\"comment\"> * Information\"). You shall not disclose such Confidential Information and shall</span></div><div class=\"line\"><span class=\"comment\"> * use it only in accordance with the terms of the license agreement you entered</span></div><div class=\"line\"><span class=\"comment\"> * into with Alibaba.com.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.study.rpc.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * HelloServiceImpl</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> william.liangf</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \"</span> + name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"暴露服务\"><a href=\"#暴露服务\" class=\"headerlink\" title=\"暴露服务\"></a>暴露服务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Copyright 2011 Alibaba.com All right reserved. This software is the</span></div><div class=\"line\"><span class=\"comment\"> * confidential and proprietary information of Alibaba.com (\"Confidential</span></div><div class=\"line\"><span class=\"comment\"> * Information\"). You shall not disclose such Confidential Information and shall</span></div><div class=\"line\"><span class=\"comment\"> * use it only in accordance with the terms of the license agreement you entered</span></div><div class=\"line\"><span class=\"comment\"> * into with Alibaba.com.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.study.rpc.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.alibaba.study.rpc.framework.RpcFramework;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * RpcProvider</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> william.liangf</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RpcProvider</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        HelloService service = <span class=\"keyword\">new</span> HelloServiceImpl();</div><div class=\"line\">        RpcFramework.export(service, <span class=\"number\">1234</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"引用服务\"><a href=\"#引用服务\" class=\"headerlink\" title=\"引用服务\"></a>引用服务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Copyright 2011 Alibaba.com All right reserved. This software is the</span></div><div class=\"line\"><span class=\"comment\"> * confidential and proprietary information of Alibaba.com (\"Confidential</span></div><div class=\"line\"><span class=\"comment\"> * Information\"). You shall not disclose such Confidential Information and shall</span></div><div class=\"line\"><span class=\"comment\"> * use it only in accordance with the terms of the license agreement you entered</span></div><div class=\"line\"><span class=\"comment\"> * into with Alibaba.com.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.study.rpc.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.alibaba.study.rpc.framework.RpcFramework;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * RpcConsumer</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> william.liangf</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RpcConsumer</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        HelloService service = RpcFramework.refer(HelloService.class, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">1234</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Integer.MAX_VALUE; i ++) &#123;</div><div class=\"line\">            String hello = service.hello(<span class=\"string\">\"World\"</span> + i);</div><div class=\"line\">            System.out.println(hello);</div><div class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个简单的例子的实现思路是使用阻塞的socket IO流来进行server和client的通信，也就是rpc应用中服务提供方和服务消费方。并且是端对端的，用端口号来直接进行通信。方法的远程调用使用的是jdk的动态代理，参数的序列化也是使用的最简单的objectStream。</p>\n<p>真实的rpc框架会对上面的实现方式进行替换，采用更快更稳定，更高可用易扩展，更适宜分布式场景的中间件，技术来替换。例如使用netty的nio特性达到非阻塞的通信，使用zookeeper统一管理服务注册与发现，解决了端对端不灵活的劣势。代理方式有cglib字节码技术。序列化方式有hession2，fastjson等等。不过梁飞大大的博客使用原生的jdk api就展现给各位读者一个生动形象的rpc demo，实在是强。rpc框架解决的不仅仅是技术层面的实现，还考虑到了rpc调用中的诸多问题，重试机制，超时配置…这些就需要去了解成熟的rpc框架是如果考虑这些问题的了。</p>\n<p>推荐一个轻量级的rpc框架：motan。weibo团队在github开源的一个rpc框架，有相应的文档，用起来感觉比dubbo要轻量级，易上手。</p>\n","site":{"data":{}},"excerpt":"<p>时下很多企业应用更新换代到分布式，一篇文章了解什么是RPC。<br>原作者梁飞，在此记录下他非常简洁的rpc实现思路。</p>","more":"<h2 id=\"核心框架类\"><a href=\"#核心框架类\" class=\"headerlink\" title=\"核心框架类\"></a>核心框架类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Copyright 2011 Alibaba.com All right reserved. This software is the</span></div><div class=\"line\"><span class=\"comment\"> * confidential and proprietary information of Alibaba.com (\"Confidential</span></div><div class=\"line\"><span class=\"comment\"> * Information\"). You shall not disclose such Confidential Information and shall</span></div><div class=\"line\"><span class=\"comment\"> * use it only in accordance with the terms of the license agreement you entered</span></div><div class=\"line\"><span class=\"comment\"> * into with Alibaba.com.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.study.rpc.framework;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * RpcFramework</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> william.liangf</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RpcFramework</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 暴露服务</span></div><div class=\"line\"><span class=\"comment\">     * </span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> service 服务实现</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> port 服务端口</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">export</span><span class=\"params\">(<span class=\"keyword\">final</span> Object service, <span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (service == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"service instance == null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (port &lt;= <span class=\"number\">0</span> || port &gt; <span class=\"number\">65535</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Invalid port \"</span> + port);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Export service \"</span> + service.getClass().getName() + <span class=\"string\">\" on port \"</span> + port);</div><div class=\"line\">        ServerSocket server = <span class=\"keyword\">new</span> ServerSocket(port);</div><div class=\"line\">        <span class=\"keyword\">for</span>(;;) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> Socket socket = server.accept();</div><div class=\"line\">                <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                                ObjectInputStream input = <span class=\"keyword\">new</span> ObjectInputStream(socket.getInputStream());</div><div class=\"line\">                                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                                    String methodName = input.readUTF();</div><div class=\"line\">                                    Class&lt;?&gt;[] parameterTypes = (Class&lt;?&gt;[])input.readObject();</div><div class=\"line\">                                    Object[] arguments = (Object[])input.readObject();</div><div class=\"line\">                                    ObjectOutputStream output = <span class=\"keyword\">new</span> ObjectOutputStream(socket.getOutputStream());</div><div class=\"line\">                                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                                        Method method = service.getClass().getMethod(methodName, parameterTypes);</div><div class=\"line\">                                        Object result = method.invoke(service, arguments);</div><div class=\"line\">                                        output.writeObject(result);</div><div class=\"line\">                                    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</div><div class=\"line\">                                        output.writeObject(t);</div><div class=\"line\">                                    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                                        output.close();</div><div class=\"line\">                                    &#125;</div><div class=\"line\">                                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                                    input.close();</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                                socket.close();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                            e.printStackTrace();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;).start();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * 引用服务</span></div><div class=\"line\"><span class=\"comment\">     * </span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt; 接口泛型</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> interfaceClass 接口类型</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> host 服务器主机名</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> port 服务器端口</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 远程服务</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">refer</span><span class=\"params\">(<span class=\"keyword\">final</span> Class&lt;T&gt; interfaceClass, <span class=\"keyword\">final</span> String host, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> port)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (interfaceClass == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Interface class == null\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (! interfaceClass.isInterface())</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"The \"</span> + interfaceClass.getName() + <span class=\"string\">\" must be interface class!\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (host == <span class=\"keyword\">null</span> || host.length() == <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Host == null!\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (port &lt;= <span class=\"number\">0</span> || port &gt; <span class=\"number\">65535</span>)</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Invalid port \"</span> + port);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Get remote service \"</span> + interfaceClass.getName() + <span class=\"string\">\" from server \"</span> + host + <span class=\"string\">\":\"</span> + port);</div><div class=\"line\">        <span class=\"keyword\">return</span> (T) Proxy.newProxyInstance(interfaceClass.getClassLoader(), <span class=\"keyword\">new</span> Class&lt;?&gt;[] &#123;interfaceClass&#125;, <span class=\"keyword\">new</span> InvocationHandler() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] arguments)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">                Socket socket = <span class=\"keyword\">new</span> Socket(host, port);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    ObjectOutputStream output = <span class=\"keyword\">new</span> ObjectOutputStream(socket.getOutputStream());</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        output.writeUTF(method.getName());</div><div class=\"line\">                        output.writeObject(method.getParameterTypes());</div><div class=\"line\">                        output.writeObject(arguments);</div><div class=\"line\">                        ObjectInputStream input = <span class=\"keyword\">new</span> ObjectInputStream(socket.getInputStream());</div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                            Object result = input.readObject();</div><div class=\"line\">                            <span class=\"keyword\">if</span> (result <span class=\"keyword\">instanceof</span> Throwable) &#123;</div><div class=\"line\">                                <span class=\"keyword\">throw</span> (Throwable) result;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            <span class=\"keyword\">return</span> result;</div><div class=\"line\">                        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                            input.close();</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                        output.close();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    socket.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"定义服务接口\"><a href=\"#定义服务接口\" class=\"headerlink\" title=\"定义服务接口\"></a>定义服务接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Copyright 2011 Alibaba.com All right reserved. This software is the</span></div><div class=\"line\"><span class=\"comment\"> * confidential and proprietary information of Alibaba.com (\"Confidential</span></div><div class=\"line\"><span class=\"comment\"> * Information\"). You shall not disclose such Confidential Information and shall</span></div><div class=\"line\"><span class=\"comment\"> * use it only in accordance with the terms of the license agreement you entered</span></div><div class=\"line\"><span class=\"comment\"> * into with Alibaba.com.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.study.rpc.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * HelloService</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> william.liangf</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">hello</span><span class=\"params\">(String name)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"实现服务\"><a href=\"#实现服务\" class=\"headerlink\" title=\"实现服务\"></a>实现服务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Copyright 2011 Alibaba.com All right reserved. This software is the</span></div><div class=\"line\"><span class=\"comment\"> * confidential and proprietary information of Alibaba.com (\"Confidential</span></div><div class=\"line\"><span class=\"comment\"> * Information\"). You shall not disclose such Confidential Information and shall</span></div><div class=\"line\"><span class=\"comment\"> * use it only in accordance with the terms of the license agreement you entered</span></div><div class=\"line\"><span class=\"comment\"> * into with Alibaba.com.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.study.rpc.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * HelloServiceImpl</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> william.liangf</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Hello \"</span> + name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"暴露服务\"><a href=\"#暴露服务\" class=\"headerlink\" title=\"暴露服务\"></a>暴露服务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Copyright 2011 Alibaba.com All right reserved. This software is the</span></div><div class=\"line\"><span class=\"comment\"> * confidential and proprietary information of Alibaba.com (\"Confidential</span></div><div class=\"line\"><span class=\"comment\"> * Information\"). You shall not disclose such Confidential Information and shall</span></div><div class=\"line\"><span class=\"comment\"> * use it only in accordance with the terms of the license agreement you entered</span></div><div class=\"line\"><span class=\"comment\"> * into with Alibaba.com.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.study.rpc.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.alibaba.study.rpc.framework.RpcFramework;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * RpcProvider</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> william.liangf</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RpcProvider</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        HelloService service = <span class=\"keyword\">new</span> HelloServiceImpl();</div><div class=\"line\">        RpcFramework.export(service, <span class=\"number\">1234</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"引用服务\"><a href=\"#引用服务\" class=\"headerlink\" title=\"引用服务\"></a>引用服务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Copyright 2011 Alibaba.com All right reserved. This software is the</span></div><div class=\"line\"><span class=\"comment\"> * confidential and proprietary information of Alibaba.com (\"Confidential</span></div><div class=\"line\"><span class=\"comment\"> * Information\"). You shall not disclose such Confidential Information and shall</span></div><div class=\"line\"><span class=\"comment\"> * use it only in accordance with the terms of the license agreement you entered</span></div><div class=\"line\"><span class=\"comment\"> * into with Alibaba.com.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.alibaba.study.rpc.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.alibaba.study.rpc.framework.RpcFramework;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * RpcConsumer</span></div><div class=\"line\"><span class=\"comment\"> * </span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> william.liangf</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RpcConsumer</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        HelloService service = RpcFramework.refer(HelloService.class, <span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">1234</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Integer.MAX_VALUE; i ++) &#123;</div><div class=\"line\">            String hello = service.hello(<span class=\"string\">\"World\"</span> + i);</div><div class=\"line\">            System.out.println(hello);</div><div class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个简单的例子的实现思路是使用阻塞的socket IO流来进行server和client的通信，也就是rpc应用中服务提供方和服务消费方。并且是端对端的，用端口号来直接进行通信。方法的远程调用使用的是jdk的动态代理，参数的序列化也是使用的最简单的objectStream。</p>\n<p>真实的rpc框架会对上面的实现方式进行替换，采用更快更稳定，更高可用易扩展，更适宜分布式场景的中间件，技术来替换。例如使用netty的nio特性达到非阻塞的通信，使用zookeeper统一管理服务注册与发现，解决了端对端不灵活的劣势。代理方式有cglib字节码技术。序列化方式有hession2，fastjson等等。不过梁飞大大的博客使用原生的jdk api就展现给各位读者一个生动形象的rpc demo，实在是强。rpc框架解决的不仅仅是技术层面的实现，还考虑到了rpc调用中的诸多问题，重试机制，超时配置…这些就需要去了解成熟的rpc框架是如果考虑这些问题的了。</p>\n<p>推荐一个轻量级的rpc框架：motan。weibo团队在github开源的一个rpc框架，有相应的文档，用起来感觉比dubbo要轻量级，易上手。</p>"},{"title":"浅析java内存模型（JMM）","date":"2017-02-24T05:07:52.000Z","_content":"\n## 并发编程模型的分类\n\n在并发编程中，我们需要处理两个关键问题：线程之间如何通信及线程之间如何同步（这里的线程是指并发执行的活动实体）。通信是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。\n\n在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。\n\n同步是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。\n\nJava的并发采用的是共享内存模型，Java线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。如果编写多线程程序的Java程序员不理解隐式进行的线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题。\n\n## Java内存模型的抽象\n\n在java中，所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享（本文使用“共享变量”这个术语代指实例域，静态域和数组元素）。局部变量（Local variables），方法定义参数（java语言规范称之为formal method parameters）和异常处理器参数（exception handler parameters）不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。\n\nJava线程之间的通信由Java内存模型（本文简称为JMM）控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java内存模型的抽象示意图如下：\n\n![img](http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/11.png)\n\n从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：\n\n1. 首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。\n2. 然后，线程B到主内存中去读取线程A之前已更新过的共享变量。\n\n下面通过示意图来说明这两个步骤：\n\n![img](http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/22.png)\n\n如上图所示，本地内存A和B有主内存中共享变量x的副本。假设初始时，这三个内存中的x值都为0。线程A在执行时，把更新后的x值（假设值为1）临时存放在自己的本地内存A中。当线程A和线程B需要通信时，线程A首先会把自己本地内存中修改后的x值刷新到主内存中，此时主内存中的x值变为了1。随后，线程B到主内存中去读取线程A更新后的x值，此时线程B的本地内存的x值也变为了1。\n\n从整体来看，这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证。\n\n## 重排序\n\n在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：\n\n1. 编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。\n2. 指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。\n3. 内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。\n\n从java源代码到最终实际执行的指令序列，会分别经历下面三种重排序：\n\n![img](http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/33.png)\n\n上述的1属于编译器重排序，2和3属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM的处理器重排序规则会要求java编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel称之为memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。\n\nJMM属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。\n\n## 处理器重排序与内存屏障指令\n\n现代的处理器使用写缓冲区来临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等待向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，可以减少对内存总线的占用。虽然写缓冲区有这么多好处，但每个处理器上的写缓冲区，仅仅对它所在的处理器可见。这个特性会对内存操作的执行顺序产生重要的影响：处理器对内存的读/写操作的执行顺序，不一定与内存实际发生的读/写操作顺序一致！为了具体说明，请看下面示例：\n\n| Processor A                          | Processor B            |\n| ------------------------------------ | ---------------------- |\n| a = 1; //A1x = b; //A2               | b = 2; //B1y = a; //B2 |\n| 初始状态：a = b = 0处理器允许执行后得到结果：x = y = 0 |                        |\n\n假设处理器A和处理器B按程序的顺序并行执行内存访问，最终却可能得到x = y = 0的结果。具体的原因如下图所示：\n\n![img](http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/44.png)\n\n这里处理器A和处理器B可以同时把共享变量写入自己的写缓冲区（A1，B1），然后从内存中读取另一个共享变量（A2，B2），最后才把自己写缓存区中保存的脏数据刷新到内存中（A3，B3）。当以这种时序执行时，程序就可以得到x = y = 0的结果。\n\n从内存操作实际发生的顺序来看，直到处理器A执行A3来刷新自己的写缓存区，写操作A1才算真正执行了。虽然处理器A执行内存操作的顺序为：A1->A2，但内存操作实际发生的顺序却是：A2->A1。此时，处理器A的内存操作顺序被重排序了（处理器B的情况和处理器A一样，这里就不赘述了）。\n\n这里的关键是，由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写-读操做重排序。\n\n下面是常见处理器允许的重排序类型的列表：\n\n|           | Load-Load | Load-Store | Store-Store | Store-Load | 数据依赖 |\n| --------- | --------- | ---------- | ----------- | ---------- | ---- |\n| sparc-TSO | N         | N          | N           | Y          | N    |\n| x86       | N         | N          | N           | Y          | N    |\n| ia64      | Y         | Y          | Y           | Y          | N    |\n| PowerPC   | Y         | Y          | Y           | Y          | N    |\n\n上表单元格中的“N”表示处理器不允许两个操作重排序，“Y”表示允许重排序。\n\n从上表我们可以看出：常见的处理器都允许Store-Load重排序；常见的处理器都不允许对存在数据依赖的操作做重排序。sparc-TSO和x86拥有相对较强的处理器内存模型，它们仅允许对写-读操作做重排序（因为它们都使用了写缓冲区）。\n\n※注1：sparc-TSO是指以TSO(Total Store Order)内存模型运行时，sparc处理器的特性。\n\n※注2：上表中的x86包括x64及AMD64。\n\n※注3：由于ARM处理器的内存模型与PowerPC处理器的内存模型非常类似，本文将忽略它。\n\n※注4：数据依赖性后文会专门说明。\n\n为了保证内存可见性，java编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM把内存屏障指令分为下列四类：\n\n| 屏障类型                | 指令示例                       | 说明                                       |\n| ------------------- | -------------------------- | ---------------------------------------- |\n| LoadLoad Barriers   | Load1; LoadLoad; Load2     | 确保Load1数据的装载，之前于Load2及所有后续装载指令的装载。       |\n| StoreStore Barriers | Store1; StoreStore; Store2 | 确保Store1数据对其他处理器可见（刷新到内存），之前于Store2及所有后续存储指令的存储。 |\n| LoadStore Barriers  | Load1; LoadStore; Store2   | 确保Load1数据装载，之前于Store2及所有后续的存储指令刷新到内存。    |\n| StoreLoad Barriers  | Store1; StoreLoad; Load2   | 确保Store1数据对其他处理器变得可见（指刷新到内存），之前于Load2及所有后续装载指令的装载。StoreLoad Barriers会使该屏障之前的所有内存访问指令（存储和装载指令）完成之后，才执行该屏障之后的内存访问指令。 |\n\nStoreLoad Barriers是一个“全能型”的屏障，它同时具有其他三个屏障的效果。现代的多处理器大都支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（buffer fully flush）。\n\n## happens-before\n\n从JDK5开始，java使用新的JSR -133内存模型（本文除非特别说明，针对的都是JSR- 133内存模型）。JSR-133提出了happens-before的概念，通过这个概念来阐述操作之间的内存可见性。如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。 与程序员密切相关的happens-before规则如下：\n\n- 程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。\n- 监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。\n- volatile变量规则：对一个volatile域的写，happens- before 于任意后续对这个volatile域的读。\n- 传递性：如果A happens- before B，且B happens- before C，那么A happens- before C。\n\n注意，两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行！happens-before仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前（the first is visible to and ordered before the second）。happens- before的定义很微妙，后文会具体说明happens-before为什么要这么定义。\n\nhappens-before与JMM的关系如下图所示：\n\n![img](http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/55.png)\n\n如上图所示，一个happens-before规则通常对应于多个编译器重排序规则和处理器重排序规则。对于java程序员来说，happens-before规则简单易懂，它避免程序员为了理解JMM提供的内存可见性保证而去学习复杂的重排序规则以及这些规则的具体实现。\n\n[原文地址](http://www.infoq.com/cn/articles/java-memory-model-1?utm_source=infoq&utm_medium=related_content_link&utm_campaign=relatedContent_articles_clk)","source":"_posts/浅析java内存模型（JMM）.md","raw":"---\ntitle: 浅析java内存模型（JMM）\ndate: 2017-02-24 13:07:52\ntags: \n- JMM\n- JAVA\ncategories: \n- JAVA\n---\n\n## 并发编程模型的分类\n\n在并发编程中，我们需要处理两个关键问题：线程之间如何通信及线程之间如何同步（这里的线程是指并发执行的活动实体）。通信是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。\n\n在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。\n\n同步是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。\n\nJava的并发采用的是共享内存模型，Java线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。如果编写多线程程序的Java程序员不理解隐式进行的线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题。\n\n## Java内存模型的抽象\n\n在java中，所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享（本文使用“共享变量”这个术语代指实例域，静态域和数组元素）。局部变量（Local variables），方法定义参数（java语言规范称之为formal method parameters）和异常处理器参数（exception handler parameters）不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。\n\nJava线程之间的通信由Java内存模型（本文简称为JMM）控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java内存模型的抽象示意图如下：\n\n![img](http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/11.png)\n\n从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：\n\n1. 首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。\n2. 然后，线程B到主内存中去读取线程A之前已更新过的共享变量。\n\n下面通过示意图来说明这两个步骤：\n\n![img](http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/22.png)\n\n如上图所示，本地内存A和B有主内存中共享变量x的副本。假设初始时，这三个内存中的x值都为0。线程A在执行时，把更新后的x值（假设值为1）临时存放在自己的本地内存A中。当线程A和线程B需要通信时，线程A首先会把自己本地内存中修改后的x值刷新到主内存中，此时主内存中的x值变为了1。随后，线程B到主内存中去读取线程A更新后的x值，此时线程B的本地内存的x值也变为了1。\n\n从整体来看，这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证。\n\n## 重排序\n\n在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：\n\n1. 编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。\n2. 指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。\n3. 内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。\n\n从java源代码到最终实际执行的指令序列，会分别经历下面三种重排序：\n\n![img](http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/33.png)\n\n上述的1属于编译器重排序，2和3属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM的处理器重排序规则会要求java编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel称之为memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。\n\nJMM属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。\n\n## 处理器重排序与内存屏障指令\n\n现代的处理器使用写缓冲区来临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等待向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，可以减少对内存总线的占用。虽然写缓冲区有这么多好处，但每个处理器上的写缓冲区，仅仅对它所在的处理器可见。这个特性会对内存操作的执行顺序产生重要的影响：处理器对内存的读/写操作的执行顺序，不一定与内存实际发生的读/写操作顺序一致！为了具体说明，请看下面示例：\n\n| Processor A                          | Processor B            |\n| ------------------------------------ | ---------------------- |\n| a = 1; //A1x = b; //A2               | b = 2; //B1y = a; //B2 |\n| 初始状态：a = b = 0处理器允许执行后得到结果：x = y = 0 |                        |\n\n假设处理器A和处理器B按程序的顺序并行执行内存访问，最终却可能得到x = y = 0的结果。具体的原因如下图所示：\n\n![img](http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/44.png)\n\n这里处理器A和处理器B可以同时把共享变量写入自己的写缓冲区（A1，B1），然后从内存中读取另一个共享变量（A2，B2），最后才把自己写缓存区中保存的脏数据刷新到内存中（A3，B3）。当以这种时序执行时，程序就可以得到x = y = 0的结果。\n\n从内存操作实际发生的顺序来看，直到处理器A执行A3来刷新自己的写缓存区，写操作A1才算真正执行了。虽然处理器A执行内存操作的顺序为：A1->A2，但内存操作实际发生的顺序却是：A2->A1。此时，处理器A的内存操作顺序被重排序了（处理器B的情况和处理器A一样，这里就不赘述了）。\n\n这里的关键是，由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写-读操做重排序。\n\n下面是常见处理器允许的重排序类型的列表：\n\n|           | Load-Load | Load-Store | Store-Store | Store-Load | 数据依赖 |\n| --------- | --------- | ---------- | ----------- | ---------- | ---- |\n| sparc-TSO | N         | N          | N           | Y          | N    |\n| x86       | N         | N          | N           | Y          | N    |\n| ia64      | Y         | Y          | Y           | Y          | N    |\n| PowerPC   | Y         | Y          | Y           | Y          | N    |\n\n上表单元格中的“N”表示处理器不允许两个操作重排序，“Y”表示允许重排序。\n\n从上表我们可以看出：常见的处理器都允许Store-Load重排序；常见的处理器都不允许对存在数据依赖的操作做重排序。sparc-TSO和x86拥有相对较强的处理器内存模型，它们仅允许对写-读操作做重排序（因为它们都使用了写缓冲区）。\n\n※注1：sparc-TSO是指以TSO(Total Store Order)内存模型运行时，sparc处理器的特性。\n\n※注2：上表中的x86包括x64及AMD64。\n\n※注3：由于ARM处理器的内存模型与PowerPC处理器的内存模型非常类似，本文将忽略它。\n\n※注4：数据依赖性后文会专门说明。\n\n为了保证内存可见性，java编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM把内存屏障指令分为下列四类：\n\n| 屏障类型                | 指令示例                       | 说明                                       |\n| ------------------- | -------------------------- | ---------------------------------------- |\n| LoadLoad Barriers   | Load1; LoadLoad; Load2     | 确保Load1数据的装载，之前于Load2及所有后续装载指令的装载。       |\n| StoreStore Barriers | Store1; StoreStore; Store2 | 确保Store1数据对其他处理器可见（刷新到内存），之前于Store2及所有后续存储指令的存储。 |\n| LoadStore Barriers  | Load1; LoadStore; Store2   | 确保Load1数据装载，之前于Store2及所有后续的存储指令刷新到内存。    |\n| StoreLoad Barriers  | Store1; StoreLoad; Load2   | 确保Store1数据对其他处理器变得可见（指刷新到内存），之前于Load2及所有后续装载指令的装载。StoreLoad Barriers会使该屏障之前的所有内存访问指令（存储和装载指令）完成之后，才执行该屏障之后的内存访问指令。 |\n\nStoreLoad Barriers是一个“全能型”的屏障，它同时具有其他三个屏障的效果。现代的多处理器大都支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（buffer fully flush）。\n\n## happens-before\n\n从JDK5开始，java使用新的JSR -133内存模型（本文除非特别说明，针对的都是JSR- 133内存模型）。JSR-133提出了happens-before的概念，通过这个概念来阐述操作之间的内存可见性。如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。 与程序员密切相关的happens-before规则如下：\n\n- 程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。\n- 监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。\n- volatile变量规则：对一个volatile域的写，happens- before 于任意后续对这个volatile域的读。\n- 传递性：如果A happens- before B，且B happens- before C，那么A happens- before C。\n\n注意，两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行！happens-before仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前（the first is visible to and ordered before the second）。happens- before的定义很微妙，后文会具体说明happens-before为什么要这么定义。\n\nhappens-before与JMM的关系如下图所示：\n\n![img](http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/55.png)\n\n如上图所示，一个happens-before规则通常对应于多个编译器重排序规则和处理器重排序规则。对于java程序员来说，happens-before规则简单易懂，它避免程序员为了理解JMM提供的内存可见性保证而去学习复杂的重排序规则以及这些规则的具体实现。\n\n[原文地址](http://www.infoq.com/cn/articles/java-memory-model-1?utm_source=infoq&utm_medium=related_content_link&utm_campaign=relatedContent_articles_clk)","slug":"浅析java内存模型（JMM）","published":1,"updated":"2017-09-04T11:49:26.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zur0041twv7diobilb5","content":"<h2 id=\"并发编程模型的分类\"><a href=\"#并发编程模型的分类\" class=\"headerlink\" title=\"并发编程模型的分类\"></a>并发编程模型的分类</h2><p>在并发编程中，我们需要处理两个关键问题：线程之间如何通信及线程之间如何同步（这里的线程是指并发执行的活动实体）。通信是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。</p>\n<p>在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。</p>\n<p>同步是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。</p>\n<p>Java的并发采用的是共享内存模型，Java线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。如果编写多线程程序的Java程序员不理解隐式进行的线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题。</p>\n<h2 id=\"Java内存模型的抽象\"><a href=\"#Java内存模型的抽象\" class=\"headerlink\" title=\"Java内存模型的抽象\"></a>Java内存模型的抽象</h2><p>在java中，所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享（本文使用“共享变量”这个术语代指实例域，静态域和数组元素）。局部变量（Local variables），方法定义参数（java语言规范称之为formal method parameters）和异常处理器参数（exception handler parameters）不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。</p>\n<p>Java线程之间的通信由Java内存模型（本文简称为JMM）控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java内存模型的抽象示意图如下：</p>\n<p><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/11.png\" alt=\"img\"></p>\n<p>从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：</p>\n<ol>\n<li>首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。</li>\n<li>然后，线程B到主内存中去读取线程A之前已更新过的共享变量。</li>\n</ol>\n<p>下面通过示意图来说明这两个步骤：</p>\n<p><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/22.png\" alt=\"img\"></p>\n<p>如上图所示，本地内存A和B有主内存中共享变量x的副本。假设初始时，这三个内存中的x值都为0。线程A在执行时，把更新后的x值（假设值为1）临时存放在自己的本地内存A中。当线程A和线程B需要通信时，线程A首先会把自己本地内存中修改后的x值刷新到主内存中，此时主内存中的x值变为了1。随后，线程B到主内存中去读取线程A更新后的x值，此时线程B的本地内存的x值也变为了1。</p>\n<p>从整体来看，这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证。</p>\n<h2 id=\"重排序\"><a href=\"#重排序\" class=\"headerlink\" title=\"重排序\"></a>重排序</h2><p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：</p>\n<ol>\n<li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li>\n<li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li>\n<li>内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li>\n</ol>\n<p>从java源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</p>\n<p><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/33.png\" alt=\"img\"></p>\n<p>上述的1属于编译器重排序，2和3属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM的处理器重排序规则会要求java编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel称之为memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。</p>\n<p>JMM属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。</p>\n<h2 id=\"处理器重排序与内存屏障指令\"><a href=\"#处理器重排序与内存屏障指令\" class=\"headerlink\" title=\"处理器重排序与内存屏障指令\"></a>处理器重排序与内存屏障指令</h2><p>现代的处理器使用写缓冲区来临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等待向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，可以减少对内存总线的占用。虽然写缓冲区有这么多好处，但每个处理器上的写缓冲区，仅仅对它所在的处理器可见。这个特性会对内存操作的执行顺序产生重要的影响：处理器对内存的读/写操作的执行顺序，不一定与内存实际发生的读/写操作顺序一致！为了具体说明，请看下面示例：</p>\n<table>\n<thead>\n<tr>\n<th>Processor A</th>\n<th>Processor B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a = 1; //A1x = b; //A2</td>\n<td>b = 2; //B1y = a; //B2</td>\n</tr>\n<tr>\n<td>初始状态：a = b = 0处理器允许执行后得到结果：x = y = 0</td>\n</tr>\n</tbody>\n</table>\n<p>假设处理器A和处理器B按程序的顺序并行执行内存访问，最终却可能得到x = y = 0的结果。具体的原因如下图所示：</p>\n<p><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/44.png\" alt=\"img\"></p>\n<p>这里处理器A和处理器B可以同时把共享变量写入自己的写缓冲区（A1，B1），然后从内存中读取另一个共享变量（A2，B2），最后才把自己写缓存区中保存的脏数据刷新到内存中（A3，B3）。当以这种时序执行时，程序就可以得到x = y = 0的结果。</p>\n<p>从内存操作实际发生的顺序来看，直到处理器A执行A3来刷新自己的写缓存区，写操作A1才算真正执行了。虽然处理器A执行内存操作的顺序为：A1-&gt;A2，但内存操作实际发生的顺序却是：A2-&gt;A1。此时，处理器A的内存操作顺序被重排序了（处理器B的情况和处理器A一样，这里就不赘述了）。</p>\n<p>这里的关键是，由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写-读操做重排序。</p>\n<p>下面是常见处理器允许的重排序类型的列表：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Load-Load</th>\n<th>Load-Store</th>\n<th>Store-Store</th>\n<th>Store-Load</th>\n<th>数据依赖</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sparc-TSO</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>x86</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>ia64</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>PowerPC</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n</tbody>\n</table>\n<p>上表单元格中的“N”表示处理器不允许两个操作重排序，“Y”表示允许重排序。</p>\n<p>从上表我们可以看出：常见的处理器都允许Store-Load重排序；常见的处理器都不允许对存在数据依赖的操作做重排序。sparc-TSO和x86拥有相对较强的处理器内存模型，它们仅允许对写-读操作做重排序（因为它们都使用了写缓冲区）。</p>\n<p>※注1：sparc-TSO是指以TSO(Total Store Order)内存模型运行时，sparc处理器的特性。</p>\n<p>※注2：上表中的x86包括x64及AMD64。</p>\n<p>※注3：由于ARM处理器的内存模型与PowerPC处理器的内存模型非常类似，本文将忽略它。</p>\n<p>※注4：数据依赖性后文会专门说明。</p>\n<p>为了保证内存可见性，java编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM把内存屏障指令分为下列四类：</p>\n<table>\n<thead>\n<tr>\n<th>屏障类型</th>\n<th>指令示例</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LoadLoad Barriers</td>\n<td>Load1; LoadLoad; Load2</td>\n<td>确保Load1数据的装载，之前于Load2及所有后续装载指令的装载。</td>\n</tr>\n<tr>\n<td>StoreStore Barriers</td>\n<td>Store1; StoreStore; Store2</td>\n<td>确保Store1数据对其他处理器可见（刷新到内存），之前于Store2及所有后续存储指令的存储。</td>\n</tr>\n<tr>\n<td>LoadStore Barriers</td>\n<td>Load1; LoadStore; Store2</td>\n<td>确保Load1数据装载，之前于Store2及所有后续的存储指令刷新到内存。</td>\n</tr>\n<tr>\n<td>StoreLoad Barriers</td>\n<td>Store1; StoreLoad; Load2</td>\n<td>确保Store1数据对其他处理器变得可见（指刷新到内存），之前于Load2及所有后续装载指令的装载。StoreLoad Barriers会使该屏障之前的所有内存访问指令（存储和装载指令）完成之后，才执行该屏障之后的内存访问指令。</td>\n</tr>\n</tbody>\n</table>\n<p>StoreLoad Barriers是一个“全能型”的屏障，它同时具有其他三个屏障的效果。现代的多处理器大都支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（buffer fully flush）。</p>\n<h2 id=\"happens-before\"><a href=\"#happens-before\" class=\"headerlink\" title=\"happens-before\"></a>happens-before</h2><p>从JDK5开始，java使用新的JSR -133内存模型（本文除非特别说明，针对的都是JSR- 133内存模型）。JSR-133提出了happens-before的概念，通过这个概念来阐述操作之间的内存可见性。如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。 与程序员密切相关的happens-before规则如下：</p>\n<ul>\n<li>程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。</li>\n<li>监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。</li>\n<li>volatile变量规则：对一个volatile域的写，happens- before 于任意后续对这个volatile域的读。</li>\n<li>传递性：如果A happens- before B，且B happens- before C，那么A happens- before C。</li>\n</ul>\n<p>注意，两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行！happens-before仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前（the first is visible to and ordered before the second）。happens- before的定义很微妙，后文会具体说明happens-before为什么要这么定义。</p>\n<p>happens-before与JMM的关系如下图所示：</p>\n<p><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/55.png\" alt=\"img\"></p>\n<p>如上图所示，一个happens-before规则通常对应于多个编译器重排序规则和处理器重排序规则。对于java程序员来说，happens-before规则简单易懂，它避免程序员为了理解JMM提供的内存可见性保证而去学习复杂的重排序规则以及这些规则的具体实现。</p>\n<p><a href=\"http://www.infoq.com/cn/articles/java-memory-model-1?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"并发编程模型的分类\"><a href=\"#并发编程模型的分类\" class=\"headerlink\" title=\"并发编程模型的分类\"></a>并发编程模型的分类</h2><p>在并发编程中，我们需要处理两个关键问题：线程之间如何通信及线程之间如何同步（这里的线程是指并发执行的活动实体）。通信是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。</p>\n<p>在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。</p>\n<p>同步是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。</p>\n<p>Java的并发采用的是共享内存模型，Java线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。如果编写多线程程序的Java程序员不理解隐式进行的线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题。</p>\n<h2 id=\"Java内存模型的抽象\"><a href=\"#Java内存模型的抽象\" class=\"headerlink\" title=\"Java内存模型的抽象\"></a>Java内存模型的抽象</h2><p>在java中，所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享（本文使用“共享变量”这个术语代指实例域，静态域和数组元素）。局部变量（Local variables），方法定义参数（java语言规范称之为formal method parameters）和异常处理器参数（exception handler parameters）不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。</p>\n<p>Java线程之间的通信由Java内存模型（本文简称为JMM）控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。Java内存模型的抽象示意图如下：</p>\n<p><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/11.png\" alt=\"img\"></p>\n<p>从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：</p>\n<ol>\n<li>首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。</li>\n<li>然后，线程B到主内存中去读取线程A之前已更新过的共享变量。</li>\n</ol>\n<p>下面通过示意图来说明这两个步骤：</p>\n<p><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/22.png\" alt=\"img\"></p>\n<p>如上图所示，本地内存A和B有主内存中共享变量x的副本。假设初始时，这三个内存中的x值都为0。线程A在执行时，把更新后的x值（假设值为1）临时存放在自己的本地内存A中。当线程A和线程B需要通信时，线程A首先会把自己本地内存中修改后的x值刷新到主内存中，此时主内存中的x值变为了1。随后，线程B到主内存中去读取线程A更新后的x值，此时线程B的本地内存的x值也变为了1。</p>\n<p>从整体来看，这两个步骤实质上是线程A在向线程B发送消息，而且这个通信过程必须要经过主内存。JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保证。</p>\n<h2 id=\"重排序\"><a href=\"#重排序\" class=\"headerlink\" title=\"重排序\"></a>重排序</h2><p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：</p>\n<ol>\n<li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li>\n<li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li>\n<li>内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li>\n</ol>\n<p>从java源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</p>\n<p><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/33.png\" alt=\"img\"></p>\n<p>上述的1属于编译器重排序，2和3属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM的处理器重排序规则会要求java编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel称之为memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。</p>\n<p>JMM属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。</p>\n<h2 id=\"处理器重排序与内存屏障指令\"><a href=\"#处理器重排序与内存屏障指令\" class=\"headerlink\" title=\"处理器重排序与内存屏障指令\"></a>处理器重排序与内存屏障指令</h2><p>现代的处理器使用写缓冲区来临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等待向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，可以减少对内存总线的占用。虽然写缓冲区有这么多好处，但每个处理器上的写缓冲区，仅仅对它所在的处理器可见。这个特性会对内存操作的执行顺序产生重要的影响：处理器对内存的读/写操作的执行顺序，不一定与内存实际发生的读/写操作顺序一致！为了具体说明，请看下面示例：</p>\n<table>\n<thead>\n<tr>\n<th>Processor A</th>\n<th>Processor B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a = 1; //A1x = b; //A2</td>\n<td>b = 2; //B1y = a; //B2</td>\n</tr>\n<tr>\n<td>初始状态：a = b = 0处理器允许执行后得到结果：x = y = 0</td>\n</tr>\n</tbody>\n</table>\n<p>假设处理器A和处理器B按程序的顺序并行执行内存访问，最终却可能得到x = y = 0的结果。具体的原因如下图所示：</p>\n<p><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/44.png\" alt=\"img\"></p>\n<p>这里处理器A和处理器B可以同时把共享变量写入自己的写缓冲区（A1，B1），然后从内存中读取另一个共享变量（A2，B2），最后才把自己写缓存区中保存的脏数据刷新到内存中（A3，B3）。当以这种时序执行时，程序就可以得到x = y = 0的结果。</p>\n<p>从内存操作实际发生的顺序来看，直到处理器A执行A3来刷新自己的写缓存区，写操作A1才算真正执行了。虽然处理器A执行内存操作的顺序为：A1-&gt;A2，但内存操作实际发生的顺序却是：A2-&gt;A1。此时，处理器A的内存操作顺序被重排序了（处理器B的情况和处理器A一样，这里就不赘述了）。</p>\n<p>这里的关键是，由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写-读操做重排序。</p>\n<p>下面是常见处理器允许的重排序类型的列表：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Load-Load</th>\n<th>Load-Store</th>\n<th>Store-Store</th>\n<th>Store-Load</th>\n<th>数据依赖</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sparc-TSO</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>x86</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>ia64</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>PowerPC</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n</tbody>\n</table>\n<p>上表单元格中的“N”表示处理器不允许两个操作重排序，“Y”表示允许重排序。</p>\n<p>从上表我们可以看出：常见的处理器都允许Store-Load重排序；常见的处理器都不允许对存在数据依赖的操作做重排序。sparc-TSO和x86拥有相对较强的处理器内存模型，它们仅允许对写-读操作做重排序（因为它们都使用了写缓冲区）。</p>\n<p>※注1：sparc-TSO是指以TSO(Total Store Order)内存模型运行时，sparc处理器的特性。</p>\n<p>※注2：上表中的x86包括x64及AMD64。</p>\n<p>※注3：由于ARM处理器的内存模型与PowerPC处理器的内存模型非常类似，本文将忽略它。</p>\n<p>※注4：数据依赖性后文会专门说明。</p>\n<p>为了保证内存可见性，java编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM把内存屏障指令分为下列四类：</p>\n<table>\n<thead>\n<tr>\n<th>屏障类型</th>\n<th>指令示例</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LoadLoad Barriers</td>\n<td>Load1; LoadLoad; Load2</td>\n<td>确保Load1数据的装载，之前于Load2及所有后续装载指令的装载。</td>\n</tr>\n<tr>\n<td>StoreStore Barriers</td>\n<td>Store1; StoreStore; Store2</td>\n<td>确保Store1数据对其他处理器可见（刷新到内存），之前于Store2及所有后续存储指令的存储。</td>\n</tr>\n<tr>\n<td>LoadStore Barriers</td>\n<td>Load1; LoadStore; Store2</td>\n<td>确保Load1数据装载，之前于Store2及所有后续的存储指令刷新到内存。</td>\n</tr>\n<tr>\n<td>StoreLoad Barriers</td>\n<td>Store1; StoreLoad; Load2</td>\n<td>确保Store1数据对其他处理器变得可见（指刷新到内存），之前于Load2及所有后续装载指令的装载。StoreLoad Barriers会使该屏障之前的所有内存访问指令（存储和装载指令）完成之后，才执行该屏障之后的内存访问指令。</td>\n</tr>\n</tbody>\n</table>\n<p>StoreLoad Barriers是一个“全能型”的屏障，它同时具有其他三个屏障的效果。现代的多处理器大都支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（buffer fully flush）。</p>\n<h2 id=\"happens-before\"><a href=\"#happens-before\" class=\"headerlink\" title=\"happens-before\"></a>happens-before</h2><p>从JDK5开始，java使用新的JSR -133内存模型（本文除非特别说明，针对的都是JSR- 133内存模型）。JSR-133提出了happens-before的概念，通过这个概念来阐述操作之间的内存可见性。如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。 与程序员密切相关的happens-before规则如下：</p>\n<ul>\n<li>程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。</li>\n<li>监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。</li>\n<li>volatile变量规则：对一个volatile域的写，happens- before 于任意后续对这个volatile域的读。</li>\n<li>传递性：如果A happens- before B，且B happens- before C，那么A happens- before C。</li>\n</ul>\n<p>注意，两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行！happens-before仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前（the first is visible to and ordered before the second）。happens- before的定义很微妙，后文会具体说明happens-before为什么要这么定义。</p>\n<p>happens-before与JMM的关系如下图所示：</p>\n<p><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170221-0307u1/resource/articles/java-memory-model-1/zh/resources/55.png\" alt=\"img\"></p>\n<p>如上图所示，一个happens-before规则通常对应于多个编译器重排序规则和处理器重排序规则。对于java程序员来说，happens-before规则简单易懂，它避免程序员为了理解JMM提供的内存可见性保证而去学习复杂的重排序规则以及这些规则的具体实现。</p>\n<p><a href=\"http://www.infoq.com/cn/articles/java-memory-model-1?utm_source=infoq&amp;utm_medium=related_content_link&amp;utm_campaign=relatedContent_articles_clk\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n"},{"title":"聊聊IT行业应届生求职","date":"2017-02-19T16:57:52.000Z","_content":"\n\n\n前言\n--\n回首大三下的暑假，那时候刚开始出来找实习，如今已经即将进入大四下学期，恍惚间，已经过去了8，9个月。写这篇文章的初衷就是想结合自己的经验给即将要出来找工作的应届生一些建议，想当初自己刚出来时，也得到过热心学长的教导，权当一种传递吧。\n\n个人经历\n----\n坐标上海，目前在一家IT软件公司从事电子商务，金融保险类的网站开发，主要使用的语言是JAVA。从任职的3-4个月起，开始担任项目小组长协同项目经理进行开发。期间由于技术总监常驻广州的原因，我兼任了上海分部这一块的面试工作，主要负责技术部分的面试（TMD工资却没涨T__T）。所以对广大来面试者的水平，以及公司想要的人才都有了更深的了解；有了面试经验后，一些观念也有了转变。\n\n面试杂谈\n--\n大四肯定很多人想出来找实习，但是又完全没有任何经验，这就很尴尬了，我先来说一些一定要注意的点。\n\n - 不要乱投简历，现在互联网上有很多培训机构，中介机构，打着招聘的牌子，背后却干着培训的勾当。通常是对一些基础不太好的同学进行技术面试，对他们的信心造成碾压，而后，提出培训后入职的建议。通常这类公司就是通过这种手段去拉人培训，招人根本不是初衷。所以，要问清楚公司的情况，有必要面试之前先去百度搜一搜公司的基本情况和评价。\n - 紧接着上面那点，可以通过一些业界信誉比较高的app或者网站去筛选公司。如BOSS直聘，拉钩，51job，前程无忧...特别是前面两个，是专门给程序员招聘使用的，针对性很强，对自己能力有了解的同学也可以量力而行，挑选适合自己的岗位。\n - 投简历之前搞清楚公司的性质。IT行业目前大方向就分为两类：软件公司，互联网公司。我当初刚进公司的时候甲方乙方都搞不清楚，大家可能一下子也不知道这两种公司性质有什么区别。可以参照知乎这个问题的讨论https://www.zhihu.com/question/20274106/answer/40996303，简单来说同样的能力：软件公司轻松，钱少；互联网公司累，钱多。软件公司中又有外企，民营，国资等划分，工作性质又分为外包，自营...外包又分为人力外包和项目外包...互联网公司一说，大家肯定都知道BAT，京东，谷歌...还有一个层面的划分就是，软件公司大多提供的是服务，互联网公司通常都有自己的产品，不过这么说不够严谨，权当个参考吧。\n\n<!-- more -->\n\n下面说一说这么多公司，怎么挑选适合自己的岗位。有很多的参考项，个人的能力，期望的工作地点以及地域的工资水准，未来的职业规划，房价，~~对象~~，水土气候，人脉等等诸多因素。本人是干java的，所以就以java求职来做例子，其他职业，专业请结合自己的专业知识做好对比即可。全部以上海为准，上海的起薪大概是2.8K左右，这叫基本工资，其他城市，例如无锡，苏州，大概在2.3k左右，视经济发展程度而定，先有个大概了解。\n\n下面来看看具体招聘需求\nA类：\n\n> Java 6K-12K\n> 职位描述\n>\n> 人品过硬。 \n> 愿意追随项目长期发展。 \n> 有能力。 有阅历。 有学历。 \n> 符合PSD原则，即出身贫寒、渴望成功、聪明机智。 \n\n不需要我吐槽了吧，这种明明是招技术岗，却对技术没有要求的，估计能骗一些小白去面试，只有技术一无所知，才会退而去要求人品，试想一下，你啥都不会，也只能要求你人品过关了。\n\nB类：\n\n职位描述\n\n> 任职要求： \n> 1) 大专或以上学历，计算机相关专业，1-3年以上软件开发经验； \n> 2) 熟练掌握Java开发技术，j2ee平台的核心技术的原理：jsp、ajax、servlet，jdbc等； \n> 3) 熟练掌握一种主流数据库：MySQL/sql,server/oracle/DB2，熟悉一种应用服务器的配置：tomcat/jboss/weblogic/websphere； \n> 4) 熟悉和理解Java开发各层次框架，如struts、spring、hiberate等，掌握基本Web前台技术； \n> 5) 热爱开发工作，具备良好的程序开发驾驭能力，需求分析把握能力； \n> 6)  好的沟通和解能力，善于团队合作，逻辑思维强，能够独立思考。\n\n此文我是想写给应届生的，1-3年的工作经验没那么恐怖，大多数情况下，你的能力够了，公司不会跟你较真，用年限压你，所以看到自己技术水平能够达到，资历却不符合的岗位，也可以尝试着投一投。\n这类公司其实已经算是对技术有了要求了，而且技术细节都明确了出来，但是，看到只对jsp，servlet这些技术有所要求，明眼人都知道，这是在招初级开发，了解一点框架，懂计算机基础，这样的新手，公司还是可以接受的，上海这边针对可以独立开发的应届生，或者培训班出来可以直接上手的非科班生：软件公司，实习开价大概在4-5k，转正开价大概在7-8k；互联网公司实习大概在5-6k，转正开价9-10k起步。985/211或者能力不错能够入职的高校生，在互联网名企的开价，就以阿里为例，我了解到的情况大概是12k*14 or 12*16。这里都是说一个上海地区价格，不适用与全国。北京的情况是IT非常发达，很多互联网公司都在北京，而上海，深圳，广州其次，注意，上海是金融之都，并非IT之都。\n\nC类 ：\n\n> Java工程师 13K-21K\n> 任职资格\n>\n> 1)大学本科或以上学历，计算机相关专业； \n> 2)熟练掌握core java以及主流java框架，\n> 3)熟悉HTML5、CSS3、JAVASCRIPT、JQUERY等前端技术；\n> 4)熟练掌握面向对象的设计原则，熟悉JAVA设计模式，具备一定的系统架构设计能力； \n> 5)熟悉常用的互联网相关技术产品和中间件，例如redis，elasticSearch，activeMq，Dubbo等；\n> 6)能够带领开发小组独立完成产品功能的模块设计和研发；\n> 7)熟悉面向服务的开发，有大型互联网项目的开发/设计经验优先；\n> 8)较强的上进心和求知欲，善于学习和运用新知识，善于沟通和逻辑表达，有强烈的团队意识和执行力。\n\n没找到特别适合本科生的描述，简单概括下这类公司，按照招聘要求来说吧。\n对计算机专业做要求，说明希望应聘者的专业素质有所保障，懂得基本的操作系统原理，数据结构，编译原理...因为这些都是本科期间必学的。\n对core java有掌握，说明是要招java岗位，基础必须牢固。\n前端知识有所了解，说明要懂得如果跟前端人员交互，不是完全的服务端开发\n设计模式和架构，说明不是要招只能够写增删改查的业务人员，更希望是那种能驱动团队的人才\n一系列中间件的要求说明企业比较正规，跟的上互联网的步伐，通常这类公司的技术总监是比较厉害的，发展前景不错\ndubbo一出来，说明该公司还是搞得分布式框架，微服务架构，对程序员的要求更上了一个档次\n\n综合来看，具备以上素质的人当然配得上高一点的工资。\n\n简历\n--\n简历不要弄虚作假，什么东西是自己做的，什么东西不是自己做的，面试官一句话就能问出来。我面试过的很多人把自己的项目技能写的天花乱坠，随便问一个东西，都不能说个所以然出来，你还写了干嘛，徒增尴尬。\n\n简历不要写与应聘岗位相差太大的描述，如果写了，也要能自圆其说，为什么体现出了自己的才能。我看过一个应聘JAVA后端的“人才”写着有普通话证书，来，我现场让你说一段绕口令？还有诸如“参加XXX比赛，虽然没得奖，但是自己得到了锻炼”之类的话，真的有必要写在简历上面吗？\n\n真是没得写的，可以说一说自己大学里面参加的活动体现出怎么样的能力，自己的优异表现，学分绩点，专业课程知识等等。要是实在一无可写...算了，那还是写普通话证书吧。\n\n有项目经验，比赛经历，专业技能证书，英语考级证书的务必要写上（排名分先后）。都是应届生吗，注意一些技巧，如果你其他方面很突出，但是英语不行，只过了4级，那就别写英语4级了，因为会暴露你没有过6级。用其他证书掩盖过去。这不是欺骗，而是扬长避短。\n\n简历得体大方，模板到处有，关于应届生求职简历的事，可以到知乎好好看看。\n\n公司的诉求\n-----\n普通公司找人，一是看人的基础水平符不符合岗位需求，二是看人的素质符不符合团队的理念，再者就是追求一个性价比。\n\n不是说你能力够了我就要招你，有些时候，公司就是要招基础的业务人员，你技术太厉害，要价太高，完全没必要招你。一个公司的垂直分层，必然是金字塔结构。所以讲究一个对号入座，搞清楚自己的能力，搞清楚自己想要什么样的一份岗位，投简历之前好好看看岗位的描述，公司的诉求。\n\n我面了前前后后也快30多个人了，有很多培训班出来的非科班生，很多应届或者一年经验的人，985/211也有，工作了12年的人也有，说实话，能力也就这样，能力很强的人要么出国了，要么内推进了名企，我就只能从我接触到的这些人，说出一些看法。资历在我看来不是很重要，仅仅作为一个参考的位面，好几个工作了3-4年的人我感觉好不如咱们应届生，不追求技术的突破，一直干着增删改查操作，问一些JAVA基础性的知识又一无所知，要价有得太低，体现出对自己的不自信，有得太高，不清楚自己的定位，入职率很低。再加上现在公司都是对分布式架构的开发，需要的从业者的素质越来越高。整个互联网的趋势也是如此，没有什么人是突然就变得很厉害的，我司技术总监拥有着这么厉害的技术，在我所知也是靠着毕业后依旧数年如一日的对技术的热忱追求。所以，特别是IT互联网行业，更希望找到的，是有一颗学习的心，具备终身学习能力的人，以应对日新月异的互联网技术变更。\n\n最后\n--\n大多数人还是需要有自己的思考，此文谨代表个人看法供大家参考。\n\n\n\n\n\n\n\n","source":"_posts/聊聊IT行业应届生求职.md","raw":"---\ntitle: 聊聊IT行业应届生求职\ndate: 2017-02-20 00:57:52\ntags: \n- 技术杂谈\n- 求职\ncategories: \n- 技术杂谈\n---\n\n\n\n前言\n--\n回首大三下的暑假，那时候刚开始出来找实习，如今已经即将进入大四下学期，恍惚间，已经过去了8，9个月。写这篇文章的初衷就是想结合自己的经验给即将要出来找工作的应届生一些建议，想当初自己刚出来时，也得到过热心学长的教导，权当一种传递吧。\n\n个人经历\n----\n坐标上海，目前在一家IT软件公司从事电子商务，金融保险类的网站开发，主要使用的语言是JAVA。从任职的3-4个月起，开始担任项目小组长协同项目经理进行开发。期间由于技术总监常驻广州的原因，我兼任了上海分部这一块的面试工作，主要负责技术部分的面试（TMD工资却没涨T__T）。所以对广大来面试者的水平，以及公司想要的人才都有了更深的了解；有了面试经验后，一些观念也有了转变。\n\n面试杂谈\n--\n大四肯定很多人想出来找实习，但是又完全没有任何经验，这就很尴尬了，我先来说一些一定要注意的点。\n\n - 不要乱投简历，现在互联网上有很多培训机构，中介机构，打着招聘的牌子，背后却干着培训的勾当。通常是对一些基础不太好的同学进行技术面试，对他们的信心造成碾压，而后，提出培训后入职的建议。通常这类公司就是通过这种手段去拉人培训，招人根本不是初衷。所以，要问清楚公司的情况，有必要面试之前先去百度搜一搜公司的基本情况和评价。\n - 紧接着上面那点，可以通过一些业界信誉比较高的app或者网站去筛选公司。如BOSS直聘，拉钩，51job，前程无忧...特别是前面两个，是专门给程序员招聘使用的，针对性很强，对自己能力有了解的同学也可以量力而行，挑选适合自己的岗位。\n - 投简历之前搞清楚公司的性质。IT行业目前大方向就分为两类：软件公司，互联网公司。我当初刚进公司的时候甲方乙方都搞不清楚，大家可能一下子也不知道这两种公司性质有什么区别。可以参照知乎这个问题的讨论https://www.zhihu.com/question/20274106/answer/40996303，简单来说同样的能力：软件公司轻松，钱少；互联网公司累，钱多。软件公司中又有外企，民营，国资等划分，工作性质又分为外包，自营...外包又分为人力外包和项目外包...互联网公司一说，大家肯定都知道BAT，京东，谷歌...还有一个层面的划分就是，软件公司大多提供的是服务，互联网公司通常都有自己的产品，不过这么说不够严谨，权当个参考吧。\n\n<!-- more -->\n\n下面说一说这么多公司，怎么挑选适合自己的岗位。有很多的参考项，个人的能力，期望的工作地点以及地域的工资水准，未来的职业规划，房价，~~对象~~，水土气候，人脉等等诸多因素。本人是干java的，所以就以java求职来做例子，其他职业，专业请结合自己的专业知识做好对比即可。全部以上海为准，上海的起薪大概是2.8K左右，这叫基本工资，其他城市，例如无锡，苏州，大概在2.3k左右，视经济发展程度而定，先有个大概了解。\n\n下面来看看具体招聘需求\nA类：\n\n> Java 6K-12K\n> 职位描述\n>\n> 人品过硬。 \n> 愿意追随项目长期发展。 \n> 有能力。 有阅历。 有学历。 \n> 符合PSD原则，即出身贫寒、渴望成功、聪明机智。 \n\n不需要我吐槽了吧，这种明明是招技术岗，却对技术没有要求的，估计能骗一些小白去面试，只有技术一无所知，才会退而去要求人品，试想一下，你啥都不会，也只能要求你人品过关了。\n\nB类：\n\n职位描述\n\n> 任职要求： \n> 1) 大专或以上学历，计算机相关专业，1-3年以上软件开发经验； \n> 2) 熟练掌握Java开发技术，j2ee平台的核心技术的原理：jsp、ajax、servlet，jdbc等； \n> 3) 熟练掌握一种主流数据库：MySQL/sql,server/oracle/DB2，熟悉一种应用服务器的配置：tomcat/jboss/weblogic/websphere； \n> 4) 熟悉和理解Java开发各层次框架，如struts、spring、hiberate等，掌握基本Web前台技术； \n> 5) 热爱开发工作，具备良好的程序开发驾驭能力，需求分析把握能力； \n> 6)  好的沟通和解能力，善于团队合作，逻辑思维强，能够独立思考。\n\n此文我是想写给应届生的，1-3年的工作经验没那么恐怖，大多数情况下，你的能力够了，公司不会跟你较真，用年限压你，所以看到自己技术水平能够达到，资历却不符合的岗位，也可以尝试着投一投。\n这类公司其实已经算是对技术有了要求了，而且技术细节都明确了出来，但是，看到只对jsp，servlet这些技术有所要求，明眼人都知道，这是在招初级开发，了解一点框架，懂计算机基础，这样的新手，公司还是可以接受的，上海这边针对可以独立开发的应届生，或者培训班出来可以直接上手的非科班生：软件公司，实习开价大概在4-5k，转正开价大概在7-8k；互联网公司实习大概在5-6k，转正开价9-10k起步。985/211或者能力不错能够入职的高校生，在互联网名企的开价，就以阿里为例，我了解到的情况大概是12k*14 or 12*16。这里都是说一个上海地区价格，不适用与全国。北京的情况是IT非常发达，很多互联网公司都在北京，而上海，深圳，广州其次，注意，上海是金融之都，并非IT之都。\n\nC类 ：\n\n> Java工程师 13K-21K\n> 任职资格\n>\n> 1)大学本科或以上学历，计算机相关专业； \n> 2)熟练掌握core java以及主流java框架，\n> 3)熟悉HTML5、CSS3、JAVASCRIPT、JQUERY等前端技术；\n> 4)熟练掌握面向对象的设计原则，熟悉JAVA设计模式，具备一定的系统架构设计能力； \n> 5)熟悉常用的互联网相关技术产品和中间件，例如redis，elasticSearch，activeMq，Dubbo等；\n> 6)能够带领开发小组独立完成产品功能的模块设计和研发；\n> 7)熟悉面向服务的开发，有大型互联网项目的开发/设计经验优先；\n> 8)较强的上进心和求知欲，善于学习和运用新知识，善于沟通和逻辑表达，有强烈的团队意识和执行力。\n\n没找到特别适合本科生的描述，简单概括下这类公司，按照招聘要求来说吧。\n对计算机专业做要求，说明希望应聘者的专业素质有所保障，懂得基本的操作系统原理，数据结构，编译原理...因为这些都是本科期间必学的。\n对core java有掌握，说明是要招java岗位，基础必须牢固。\n前端知识有所了解，说明要懂得如果跟前端人员交互，不是完全的服务端开发\n设计模式和架构，说明不是要招只能够写增删改查的业务人员，更希望是那种能驱动团队的人才\n一系列中间件的要求说明企业比较正规，跟的上互联网的步伐，通常这类公司的技术总监是比较厉害的，发展前景不错\ndubbo一出来，说明该公司还是搞得分布式框架，微服务架构，对程序员的要求更上了一个档次\n\n综合来看，具备以上素质的人当然配得上高一点的工资。\n\n简历\n--\n简历不要弄虚作假，什么东西是自己做的，什么东西不是自己做的，面试官一句话就能问出来。我面试过的很多人把自己的项目技能写的天花乱坠，随便问一个东西，都不能说个所以然出来，你还写了干嘛，徒增尴尬。\n\n简历不要写与应聘岗位相差太大的描述，如果写了，也要能自圆其说，为什么体现出了自己的才能。我看过一个应聘JAVA后端的“人才”写着有普通话证书，来，我现场让你说一段绕口令？还有诸如“参加XXX比赛，虽然没得奖，但是自己得到了锻炼”之类的话，真的有必要写在简历上面吗？\n\n真是没得写的，可以说一说自己大学里面参加的活动体现出怎么样的能力，自己的优异表现，学分绩点，专业课程知识等等。要是实在一无可写...算了，那还是写普通话证书吧。\n\n有项目经验，比赛经历，专业技能证书，英语考级证书的务必要写上（排名分先后）。都是应届生吗，注意一些技巧，如果你其他方面很突出，但是英语不行，只过了4级，那就别写英语4级了，因为会暴露你没有过6级。用其他证书掩盖过去。这不是欺骗，而是扬长避短。\n\n简历得体大方，模板到处有，关于应届生求职简历的事，可以到知乎好好看看。\n\n公司的诉求\n-----\n普通公司找人，一是看人的基础水平符不符合岗位需求，二是看人的素质符不符合团队的理念，再者就是追求一个性价比。\n\n不是说你能力够了我就要招你，有些时候，公司就是要招基础的业务人员，你技术太厉害，要价太高，完全没必要招你。一个公司的垂直分层，必然是金字塔结构。所以讲究一个对号入座，搞清楚自己的能力，搞清楚自己想要什么样的一份岗位，投简历之前好好看看岗位的描述，公司的诉求。\n\n我面了前前后后也快30多个人了，有很多培训班出来的非科班生，很多应届或者一年经验的人，985/211也有，工作了12年的人也有，说实话，能力也就这样，能力很强的人要么出国了，要么内推进了名企，我就只能从我接触到的这些人，说出一些看法。资历在我看来不是很重要，仅仅作为一个参考的位面，好几个工作了3-4年的人我感觉好不如咱们应届生，不追求技术的突破，一直干着增删改查操作，问一些JAVA基础性的知识又一无所知，要价有得太低，体现出对自己的不自信，有得太高，不清楚自己的定位，入职率很低。再加上现在公司都是对分布式架构的开发，需要的从业者的素质越来越高。整个互联网的趋势也是如此，没有什么人是突然就变得很厉害的，我司技术总监拥有着这么厉害的技术，在我所知也是靠着毕业后依旧数年如一日的对技术的热忱追求。所以，特别是IT互联网行业，更希望找到的，是有一颗学习的心，具备终身学习能力的人，以应对日新月异的互联网技术变更。\n\n最后\n--\n大多数人还是需要有自己的思考，此文谨代表个人看法供大家参考。\n\n\n\n\n\n\n\n","slug":"聊聊IT行业应届生求职","published":1,"updated":"2017-09-04T11:49:26.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zuv0044twv7bsfv3fox","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>回首大三下的暑假，那时候刚开始出来找实习，如今已经即将进入大四下学期，恍惚间，已经过去了8，9个月。写这篇文章的初衷就是想结合自己的经验给即将要出来找工作的应届生一些建议，想当初自己刚出来时，也得到过热心学长的教导，权当一种传递吧。</p>\n<h2 id=\"个人经历\"><a href=\"#个人经历\" class=\"headerlink\" title=\"个人经历\"></a>个人经历</h2><p>坐标上海，目前在一家IT软件公司从事电子商务，金融保险类的网站开发，主要使用的语言是JAVA。从任职的3-4个月起，开始担任项目小组长协同项目经理进行开发。期间由于技术总监常驻广州的原因，我兼任了上海分部这一块的面试工作，主要负责技术部分的面试（TMD工资却没涨T__T）。所以对广大来面试者的水平，以及公司想要的人才都有了更深的了解；有了面试经验后，一些观念也有了转变。</p>\n<h2 id=\"面试杂谈\"><a href=\"#面试杂谈\" class=\"headerlink\" title=\"面试杂谈\"></a>面试杂谈</h2><p>大四肯定很多人想出来找实习，但是又完全没有任何经验，这就很尴尬了，我先来说一些一定要注意的点。</p>\n<ul>\n<li>不要乱投简历，现在互联网上有很多培训机构，中介机构，打着招聘的牌子，背后却干着培训的勾当。通常是对一些基础不太好的同学进行技术面试，对他们的信心造成碾压，而后，提出培训后入职的建议。通常这类公司就是通过这种手段去拉人培训，招人根本不是初衷。所以，要问清楚公司的情况，有必要面试之前先去百度搜一搜公司的基本情况和评价。</li>\n<li>紧接着上面那点，可以通过一些业界信誉比较高的app或者网站去筛选公司。如BOSS直聘，拉钩，51job，前程无忧…特别是前面两个，是专门给程序员招聘使用的，针对性很强，对自己能力有了解的同学也可以量力而行，挑选适合自己的岗位。</li>\n<li>投简历之前搞清楚公司的性质。IT行业目前大方向就分为两类：软件公司，互联网公司。我当初刚进公司的时候甲方乙方都搞不清楚，大家可能一下子也不知道这两种公司性质有什么区别。可以参照知乎这个问题的讨论<a href=\"https://www.zhihu.com/question/20274106/answer/40996303，简单来说同样的能力：软件公司轻松，钱少；互联网公司累，钱多。软件公司中又有外企，民营，国资等划分，工作性质又分为外包，自营...外包又分为人力外包和项目外包...互联网公司一说，大家肯定都知道BAT，京东，谷歌...还有一个层面的划分就是，软件公司大多提供的是服务，互联网公司通常都有自己的产品，不过这么说不够严谨，权当个参考吧。\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/20274106/answer/40996303，简单来说同样的能力：软件公司轻松，钱少；互联网公司累，钱多。软件公司中又有外企，民营，国资等划分，工作性质又分为外包，自营...外包又分为人力外包和项目外包...互联网公司一说，大家肯定都知道BAT，京东，谷歌...还有一个层面的划分就是，软件公司大多提供的是服务，互联网公司通常都有自己的产品，不过这么说不够严谨，权当个参考吧。</a></li>\n</ul>\n<a id=\"more\"></a>\n<p>下面说一说这么多公司，怎么挑选适合自己的岗位。有很多的参考项，个人的能力，期望的工作地点以及地域的工资水准，未来的职业规划，房价，<del>对象</del>，水土气候，人脉等等诸多因素。本人是干java的，所以就以java求职来做例子，其他职业，专业请结合自己的专业知识做好对比即可。全部以上海为准，上海的起薪大概是2.8K左右，这叫基本工资，其他城市，例如无锡，苏州，大概在2.3k左右，视经济发展程度而定，先有个大概了解。</p>\n<p>下面来看看具体招聘需求<br>A类：</p>\n<blockquote>\n<p>Java 6K-12K<br>职位描述</p>\n<p>人品过硬。<br>愿意追随项目长期发展。<br>有能力。 有阅历。 有学历。<br>符合PSD原则，即出身贫寒、渴望成功、聪明机智。 </p>\n</blockquote>\n<p>不需要我吐槽了吧，这种明明是招技术岗，却对技术没有要求的，估计能骗一些小白去面试，只有技术一无所知，才会退而去要求人品，试想一下，你啥都不会，也只能要求你人品过关了。</p>\n<p>B类：</p>\n<p>职位描述</p>\n<blockquote>\n<p>任职要求：<br>1) 大专或以上学历，计算机相关专业，1-3年以上软件开发经验；<br>2) 熟练掌握Java开发技术，j2ee平台的核心技术的原理：jsp、ajax、servlet，jdbc等；<br>3) 熟练掌握一种主流数据库：MySQL/sql,server/oracle/DB2，熟悉一种应用服务器的配置：tomcat/jboss/weblogic/websphere；<br>4) 熟悉和理解Java开发各层次框架，如struts、spring、hiberate等，掌握基本Web前台技术；<br>5) 热爱开发工作，具备良好的程序开发驾驭能力，需求分析把握能力；<br>6)  好的沟通和解能力，善于团队合作，逻辑思维强，能够独立思考。</p>\n</blockquote>\n<p>此文我是想写给应届生的，1-3年的工作经验没那么恐怖，大多数情况下，你的能力够了，公司不会跟你较真，用年限压你，所以看到自己技术水平能够达到，资历却不符合的岗位，也可以尝试着投一投。<br>这类公司其实已经算是对技术有了要求了，而且技术细节都明确了出来，但是，看到只对jsp，servlet这些技术有所要求，明眼人都知道，这是在招初级开发，了解一点框架，懂计算机基础，这样的新手，公司还是可以接受的，上海这边针对可以独立开发的应届生，或者培训班出来可以直接上手的非科班生：软件公司，实习开价大概在4-5k，转正开价大概在7-8k；互联网公司实习大概在5-6k，转正开价9-10k起步。985/211或者能力不错能够入职的高校生，在互联网名企的开价，就以阿里为例，我了解到的情况大概是12k<em>14 or 12</em>16。这里都是说一个上海地区价格，不适用与全国。北京的情况是IT非常发达，很多互联网公司都在北京，而上海，深圳，广州其次，注意，上海是金融之都，并非IT之都。</p>\n<p>C类 ：</p>\n<blockquote>\n<p>Java工程师 13K-21K<br>任职资格</p>\n<p>1)大学本科或以上学历，计算机相关专业；<br>2)熟练掌握core java以及主流java框架，<br>3)熟悉HTML5、CSS3、JAVASCRIPT、JQUERY等前端技术；<br>4)熟练掌握面向对象的设计原则，熟悉JAVA设计模式，具备一定的系统架构设计能力；<br>5)熟悉常用的互联网相关技术产品和中间件，例如redis，elasticSearch，activeMq，Dubbo等；<br>6)能够带领开发小组独立完成产品功能的模块设计和研发；<br>7)熟悉面向服务的开发，有大型互联网项目的开发/设计经验优先；<br>8)较强的上进心和求知欲，善于学习和运用新知识，善于沟通和逻辑表达，有强烈的团队意识和执行力。</p>\n</blockquote>\n<p>没找到特别适合本科生的描述，简单概括下这类公司，按照招聘要求来说吧。<br>对计算机专业做要求，说明希望应聘者的专业素质有所保障，懂得基本的操作系统原理，数据结构，编译原理…因为这些都是本科期间必学的。<br>对core java有掌握，说明是要招java岗位，基础必须牢固。<br>前端知识有所了解，说明要懂得如果跟前端人员交互，不是完全的服务端开发<br>设计模式和架构，说明不是要招只能够写增删改查的业务人员，更希望是那种能驱动团队的人才<br>一系列中间件的要求说明企业比较正规，跟的上互联网的步伐，通常这类公司的技术总监是比较厉害的，发展前景不错<br>dubbo一出来，说明该公司还是搞得分布式框架，微服务架构，对程序员的要求更上了一个档次</p>\n<p>综合来看，具备以上素质的人当然配得上高一点的工资。</p>\n<h2 id=\"简历\"><a href=\"#简历\" class=\"headerlink\" title=\"简历\"></a>简历</h2><p>简历不要弄虚作假，什么东西是自己做的，什么东西不是自己做的，面试官一句话就能问出来。我面试过的很多人把自己的项目技能写的天花乱坠，随便问一个东西，都不能说个所以然出来，你还写了干嘛，徒增尴尬。</p>\n<p>简历不要写与应聘岗位相差太大的描述，如果写了，也要能自圆其说，为什么体现出了自己的才能。我看过一个应聘JAVA后端的“人才”写着有普通话证书，来，我现场让你说一段绕口令？还有诸如“参加XXX比赛，虽然没得奖，但是自己得到了锻炼”之类的话，真的有必要写在简历上面吗？</p>\n<p>真是没得写的，可以说一说自己大学里面参加的活动体现出怎么样的能力，自己的优异表现，学分绩点，专业课程知识等等。要是实在一无可写…算了，那还是写普通话证书吧。</p>\n<p>有项目经验，比赛经历，专业技能证书，英语考级证书的务必要写上（排名分先后）。都是应届生吗，注意一些技巧，如果你其他方面很突出，但是英语不行，只过了4级，那就别写英语4级了，因为会暴露你没有过6级。用其他证书掩盖过去。这不是欺骗，而是扬长避短。</p>\n<p>简历得体大方，模板到处有，关于应届生求职简历的事，可以到知乎好好看看。</p>\n<h2 id=\"公司的诉求\"><a href=\"#公司的诉求\" class=\"headerlink\" title=\"公司的诉求\"></a>公司的诉求</h2><p>普通公司找人，一是看人的基础水平符不符合岗位需求，二是看人的素质符不符合团队的理念，再者就是追求一个性价比。</p>\n<p>不是说你能力够了我就要招你，有些时候，公司就是要招基础的业务人员，你技术太厉害，要价太高，完全没必要招你。一个公司的垂直分层，必然是金字塔结构。所以讲究一个对号入座，搞清楚自己的能力，搞清楚自己想要什么样的一份岗位，投简历之前好好看看岗位的描述，公司的诉求。</p>\n<p>我面了前前后后也快30多个人了，有很多培训班出来的非科班生，很多应届或者一年经验的人，985/211也有，工作了12年的人也有，说实话，能力也就这样，能力很强的人要么出国了，要么内推进了名企，我就只能从我接触到的这些人，说出一些看法。资历在我看来不是很重要，仅仅作为一个参考的位面，好几个工作了3-4年的人我感觉好不如咱们应届生，不追求技术的突破，一直干着增删改查操作，问一些JAVA基础性的知识又一无所知，要价有得太低，体现出对自己的不自信，有得太高，不清楚自己的定位，入职率很低。再加上现在公司都是对分布式架构的开发，需要的从业者的素质越来越高。整个互联网的趋势也是如此，没有什么人是突然就变得很厉害的，我司技术总监拥有着这么厉害的技术，在我所知也是靠着毕业后依旧数年如一日的对技术的热忱追求。所以，特别是IT互联网行业，更希望找到的，是有一颗学习的心，具备终身学习能力的人，以应对日新月异的互联网技术变更。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>大多数人还是需要有自己的思考，此文谨代表个人看法供大家参考。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>回首大三下的暑假，那时候刚开始出来找实习，如今已经即将进入大四下学期，恍惚间，已经过去了8，9个月。写这篇文章的初衷就是想结合自己的经验给即将要出来找工作的应届生一些建议，想当初自己刚出来时，也得到过热心学长的教导，权当一种传递吧。</p>\n<h2 id=\"个人经历\"><a href=\"#个人经历\" class=\"headerlink\" title=\"个人经历\"></a>个人经历</h2><p>坐标上海，目前在一家IT软件公司从事电子商务，金融保险类的网站开发，主要使用的语言是JAVA。从任职的3-4个月起，开始担任项目小组长协同项目经理进行开发。期间由于技术总监常驻广州的原因，我兼任了上海分部这一块的面试工作，主要负责技术部分的面试（TMD工资却没涨T__T）。所以对广大来面试者的水平，以及公司想要的人才都有了更深的了解；有了面试经验后，一些观念也有了转变。</p>\n<h2 id=\"面试杂谈\"><a href=\"#面试杂谈\" class=\"headerlink\" title=\"面试杂谈\"></a>面试杂谈</h2><p>大四肯定很多人想出来找实习，但是又完全没有任何经验，这就很尴尬了，我先来说一些一定要注意的点。</p>\n<ul>\n<li>不要乱投简历，现在互联网上有很多培训机构，中介机构，打着招聘的牌子，背后却干着培训的勾当。通常是对一些基础不太好的同学进行技术面试，对他们的信心造成碾压，而后，提出培训后入职的建议。通常这类公司就是通过这种手段去拉人培训，招人根本不是初衷。所以，要问清楚公司的情况，有必要面试之前先去百度搜一搜公司的基本情况和评价。</li>\n<li>紧接着上面那点，可以通过一些业界信誉比较高的app或者网站去筛选公司。如BOSS直聘，拉钩，51job，前程无忧…特别是前面两个，是专门给程序员招聘使用的，针对性很强，对自己能力有了解的同学也可以量力而行，挑选适合自己的岗位。</li>\n<li>投简历之前搞清楚公司的性质。IT行业目前大方向就分为两类：软件公司，互联网公司。我当初刚进公司的时候甲方乙方都搞不清楚，大家可能一下子也不知道这两种公司性质有什么区别。可以参照知乎这个问题的讨论<a href=\"https://www.zhihu.com/question/20274106/answer/40996303，简单来说同样的能力：软件公司轻松，钱少；互联网公司累，钱多。软件公司中又有外企，民营，国资等划分，工作性质又分为外包，自营...外包又分为人力外包和项目外包...互联网公司一说，大家肯定都知道BAT，京东，谷歌...还有一个层面的划分就是，软件公司大多提供的是服务，互联网公司通常都有自己的产品，不过这么说不够严谨，权当个参考吧。\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/20274106/answer/40996303，简单来说同样的能力：软件公司轻松，钱少；互联网公司累，钱多。软件公司中又有外企，民营，国资等划分，工作性质又分为外包，自营...外包又分为人力外包和项目外包...互联网公司一说，大家肯定都知道BAT，京东，谷歌...还有一个层面的划分就是，软件公司大多提供的是服务，互联网公司通常都有自己的产品，不过这么说不够严谨，权当个参考吧。</a></li>\n</ul>","more":"<p>下面说一说这么多公司，怎么挑选适合自己的岗位。有很多的参考项，个人的能力，期望的工作地点以及地域的工资水准，未来的职业规划，房价，<del>对象</del>，水土气候，人脉等等诸多因素。本人是干java的，所以就以java求职来做例子，其他职业，专业请结合自己的专业知识做好对比即可。全部以上海为准，上海的起薪大概是2.8K左右，这叫基本工资，其他城市，例如无锡，苏州，大概在2.3k左右，视经济发展程度而定，先有个大概了解。</p>\n<p>下面来看看具体招聘需求<br>A类：</p>\n<blockquote>\n<p>Java 6K-12K<br>职位描述</p>\n<p>人品过硬。<br>愿意追随项目长期发展。<br>有能力。 有阅历。 有学历。<br>符合PSD原则，即出身贫寒、渴望成功、聪明机智。 </p>\n</blockquote>\n<p>不需要我吐槽了吧，这种明明是招技术岗，却对技术没有要求的，估计能骗一些小白去面试，只有技术一无所知，才会退而去要求人品，试想一下，你啥都不会，也只能要求你人品过关了。</p>\n<p>B类：</p>\n<p>职位描述</p>\n<blockquote>\n<p>任职要求：<br>1) 大专或以上学历，计算机相关专业，1-3年以上软件开发经验；<br>2) 熟练掌握Java开发技术，j2ee平台的核心技术的原理：jsp、ajax、servlet，jdbc等；<br>3) 熟练掌握一种主流数据库：MySQL/sql,server/oracle/DB2，熟悉一种应用服务器的配置：tomcat/jboss/weblogic/websphere；<br>4) 熟悉和理解Java开发各层次框架，如struts、spring、hiberate等，掌握基本Web前台技术；<br>5) 热爱开发工作，具备良好的程序开发驾驭能力，需求分析把握能力；<br>6)  好的沟通和解能力，善于团队合作，逻辑思维强，能够独立思考。</p>\n</blockquote>\n<p>此文我是想写给应届生的，1-3年的工作经验没那么恐怖，大多数情况下，你的能力够了，公司不会跟你较真，用年限压你，所以看到自己技术水平能够达到，资历却不符合的岗位，也可以尝试着投一投。<br>这类公司其实已经算是对技术有了要求了，而且技术细节都明确了出来，但是，看到只对jsp，servlet这些技术有所要求，明眼人都知道，这是在招初级开发，了解一点框架，懂计算机基础，这样的新手，公司还是可以接受的，上海这边针对可以独立开发的应届生，或者培训班出来可以直接上手的非科班生：软件公司，实习开价大概在4-5k，转正开价大概在7-8k；互联网公司实习大概在5-6k，转正开价9-10k起步。985/211或者能力不错能够入职的高校生，在互联网名企的开价，就以阿里为例，我了解到的情况大概是12k<em>14 or 12</em>16。这里都是说一个上海地区价格，不适用与全国。北京的情况是IT非常发达，很多互联网公司都在北京，而上海，深圳，广州其次，注意，上海是金融之都，并非IT之都。</p>\n<p>C类 ：</p>\n<blockquote>\n<p>Java工程师 13K-21K<br>任职资格</p>\n<p>1)大学本科或以上学历，计算机相关专业；<br>2)熟练掌握core java以及主流java框架，<br>3)熟悉HTML5、CSS3、JAVASCRIPT、JQUERY等前端技术；<br>4)熟练掌握面向对象的设计原则，熟悉JAVA设计模式，具备一定的系统架构设计能力；<br>5)熟悉常用的互联网相关技术产品和中间件，例如redis，elasticSearch，activeMq，Dubbo等；<br>6)能够带领开发小组独立完成产品功能的模块设计和研发；<br>7)熟悉面向服务的开发，有大型互联网项目的开发/设计经验优先；<br>8)较强的上进心和求知欲，善于学习和运用新知识，善于沟通和逻辑表达，有强烈的团队意识和执行力。</p>\n</blockquote>\n<p>没找到特别适合本科生的描述，简单概括下这类公司，按照招聘要求来说吧。<br>对计算机专业做要求，说明希望应聘者的专业素质有所保障，懂得基本的操作系统原理，数据结构，编译原理…因为这些都是本科期间必学的。<br>对core java有掌握，说明是要招java岗位，基础必须牢固。<br>前端知识有所了解，说明要懂得如果跟前端人员交互，不是完全的服务端开发<br>设计模式和架构，说明不是要招只能够写增删改查的业务人员，更希望是那种能驱动团队的人才<br>一系列中间件的要求说明企业比较正规，跟的上互联网的步伐，通常这类公司的技术总监是比较厉害的，发展前景不错<br>dubbo一出来，说明该公司还是搞得分布式框架，微服务架构，对程序员的要求更上了一个档次</p>\n<p>综合来看，具备以上素质的人当然配得上高一点的工资。</p>\n<h2 id=\"简历\"><a href=\"#简历\" class=\"headerlink\" title=\"简历\"></a>简历</h2><p>简历不要弄虚作假，什么东西是自己做的，什么东西不是自己做的，面试官一句话就能问出来。我面试过的很多人把自己的项目技能写的天花乱坠，随便问一个东西，都不能说个所以然出来，你还写了干嘛，徒增尴尬。</p>\n<p>简历不要写与应聘岗位相差太大的描述，如果写了，也要能自圆其说，为什么体现出了自己的才能。我看过一个应聘JAVA后端的“人才”写着有普通话证书，来，我现场让你说一段绕口令？还有诸如“参加XXX比赛，虽然没得奖，但是自己得到了锻炼”之类的话，真的有必要写在简历上面吗？</p>\n<p>真是没得写的，可以说一说自己大学里面参加的活动体现出怎么样的能力，自己的优异表现，学分绩点，专业课程知识等等。要是实在一无可写…算了，那还是写普通话证书吧。</p>\n<p>有项目经验，比赛经历，专业技能证书，英语考级证书的务必要写上（排名分先后）。都是应届生吗，注意一些技巧，如果你其他方面很突出，但是英语不行，只过了4级，那就别写英语4级了，因为会暴露你没有过6级。用其他证书掩盖过去。这不是欺骗，而是扬长避短。</p>\n<p>简历得体大方，模板到处有，关于应届生求职简历的事，可以到知乎好好看看。</p>\n<h2 id=\"公司的诉求\"><a href=\"#公司的诉求\" class=\"headerlink\" title=\"公司的诉求\"></a>公司的诉求</h2><p>普通公司找人，一是看人的基础水平符不符合岗位需求，二是看人的素质符不符合团队的理念，再者就是追求一个性价比。</p>\n<p>不是说你能力够了我就要招你，有些时候，公司就是要招基础的业务人员，你技术太厉害，要价太高，完全没必要招你。一个公司的垂直分层，必然是金字塔结构。所以讲究一个对号入座，搞清楚自己的能力，搞清楚自己想要什么样的一份岗位，投简历之前好好看看岗位的描述，公司的诉求。</p>\n<p>我面了前前后后也快30多个人了，有很多培训班出来的非科班生，很多应届或者一年经验的人，985/211也有，工作了12年的人也有，说实话，能力也就这样，能力很强的人要么出国了，要么内推进了名企，我就只能从我接触到的这些人，说出一些看法。资历在我看来不是很重要，仅仅作为一个参考的位面，好几个工作了3-4年的人我感觉好不如咱们应届生，不追求技术的突破，一直干着增删改查操作，问一些JAVA基础性的知识又一无所知，要价有得太低，体现出对自己的不自信，有得太高，不清楚自己的定位，入职率很低。再加上现在公司都是对分布式架构的开发，需要的从业者的素质越来越高。整个互联网的趋势也是如此，没有什么人是突然就变得很厉害的，我司技术总监拥有着这么厉害的技术，在我所知也是靠着毕业后依旧数年如一日的对技术的热忱追求。所以，特别是IT互联网行业，更希望找到的，是有一颗学习的心，具备终身学习能力的人，以应对日新月异的互联网技术变更。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>大多数人还是需要有自己的思考，此文谨代表个人看法供大家参考。</p>"},{"title":"解析Spring中的ResponseBody和RequestBody","date":"2017-08-30T04:44:21.000Z","_content":"\nspring，restful，前后端分离这些关键词都是大家耳熟能详的关键词了，一般spring常常需要与前端、第三方使用JSON，XML等形式进行交互，你也一定不会对@RequestBody和@ResponseBody这两个注解感到陌生。\n\n## @ResponseBody的使用\n\n由于@ResponseBody和@RequestBody的内部实现是同样的原理（封装请求和封装响应），所以本文以@ResponseBody为主要入手点，理解清楚任何一者，都可以同时掌握另一者。\n\n如果想要从spring获得一个json形式返回值，操作起来是非常容易的。首先定义一个实体类:\n\n```java\npublic class Book {\n    private Integer id;\n    private String bookName;\n}\n```\n\n接着定义一个后端端点：\n\n```java\n@RestController\npublic class BookController {\n\n    @GetMapping(value = \"/book/{bookId}\")\n    public Book getBook(@PathVariable(\"bookId\") Integer bookId) {\n        return new Book(bookId, \"book\" + bookId);\n    }\n\n}\n```\n\n在RestController中，相当于给所有的xxxMapping端点都添加了@ResponseBody注解，不返回视图，只返回数据。使用http工具访问这个后端端点`localhost:8080/book/2`，便可以得到如下的响应：\n\n```json\n{\n    \"id\": 2,\n    \"bookName\": \"book2\"\n}\n```\n\n这是一个最简单的返回JSON对象的使用示例了，相信这样的代码很多人在项目中都写过。\n\n## 添加XML解析\n\n如果我们需要将Book对象以XML的形式返回，该如何操作呢？这也很简单，给Book对象添加@XmlRootElement注解，让spring内部能够解析XML对象。\n\n```java\n@XmlRootElement\npublic class Book {\n    private Integer id;\n    private String bookName;\n}\n```\n\n在我们未对web层的BookController做任何改动之前，尝试访问`localhost:8080/book/2`时，会发现得到的结果仍然是前面的JSON对象。这也能够理解，因为Book对象如今既可以被解析为XML，也可以被解析为JSON，我们隐隐察觉这背后有一定的解析顺序关系，但不着急，先看看如何让RestController返回XML解析结果。\n\n方法1 http客户端指定接收的返回结果类型\n\nhttp协议中，可以给请求头添加Accept属性，笔者常用的http客户端是idea自带的Test RESTful Web Service以及chrome的插件Postman。简单的调试，前者基本可以满足我们大多数的需求，而这里为了给大家更直观的体验，笔者使用了Postman。以code形式展示：\n\n```http\nGET /book/2 HTTP/1.1\nHost: localhost:8080\nAccept: application/xml\n```\n\n响应内容如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<book>\n    <bookName>book2</bookName>\n    <id>2</id>\n</book>\n```\n\n方法2 在RestController后端端点中指定返回类型\n\n修改后的RestController如下所示\n\n```java\n@RestController\npublic class BookController {\n\n    @GetMapping(value = \"/book/{bookId}\", produces = {\"application/xml\"})\n    public Book getBook(@PathVariable(\"bookId\") Integer bookId) {\n        return new Book(bookId, \"book\" + bookId);\n    }\n\n}\n```\n\n此时即使将请求中的`Accept: application/xml`去除，依旧可以返回上述的XML结果。\n\n通常情况下，我们的服务端返回的形式一般是固定的，即限定了是JSON，XML中的一种，不建议依赖于客户端添加Accept的信息，而是在服务端限定produces类型。\n\n## 详解Accpect与produces\n\nAccpect包含在http协议的请求头中，其本身代表着客户端发起请求时，期望返回的响应结果的媒体类型。如果服务端可能返回多个媒体类型，则可以通过Accpect指定具体的类型。\n\nproduces是Spring为我们提供的注解参数，代表着服务端能够支持返回的媒体类型，我们注意到produces后跟随的是一个数组类型，也就意味着服务端支持多种媒体类型的响应。\n\n在上一节中，我们未显示指定produces值时，其实就隐式的表明，支持XML形式，JSON形式的媒体类型响应。从实验结果，我们也可以看出，当请求未指定Accpect，响应未指定produces时，具体采用何种形式返回是有Spring控制的。在接口交互时，最良好的对接方式，当然是客户端指定Accpect，服务端指定produces，这样可以避免模棱两可的请求响应，避免出现意想不到的对接结果。\n\n## 详解ContentType与consumes\n\n恰恰和Accpect&produces相反，这两个参数是与用于限制请求的。理解了前两者的含义，这两个参数可以举一反三理解清楚。\n\nContentType包含在http协议的请求头中，其本身代表着客户端发起请求时，告知服务端自己的请求媒体类型是什么。\n\nconsumes是Spring为我们提供的注解参数，代表着服务端能够支持处理的请求媒体类型，同样是一个数组，意味着服务端支持多种媒体类型的请求。一般而言，consumes与produces对请求响应媒体类型起到的限制作用，我们给他一个专有名词：窄化。\n\n## http请求响应媒体类型一览\n\n上面描述的4个属性：Accpect与produces，ContentType与consumes究竟有哪些类型与之对应呢？我只将常用的一些列举了出来：\n\n| 媒体类型                               | 含义         |\n| ---------------------------------- | ---------- |\n| text/html                          | HTML格式     |\n| text/plain                         | 纯文本格式      |\n| text/xml, application/xml          | XML数据格式    |\n| application/json                   | JSON数据格式   |\n| image/gif                          | gif图片格式    |\n| image/png                          | png图片格式    |\n| application/octet-stream           | 二进制流数据     |\n| application/ x-www-form-urlencoded | form表单数据   |\n| multipart/form-data                | 含文件的form表单 |\n\n其中有几个类型值得一说，web开发中我们常用的提交表单操作，其默认的媒体类型就是application/ x-www-form-urlencoded，而当表单中包含文件时，大家估计都踩过坑，需要将enctype=multipart/form-data设置在form参数中。text/html也就是常见的网页了，json与xml常用于数据交互，其他不再赘述。\n\n而在JAVA中，提供了MediaType这样的抽象，来与http的媒体类型进行对应。‘/’之前的名词，如text，application被称为类型（type），‘/’之后被称为子类型(subType)。\n\n## 详解HttpMessageConverter\n\n我们想要搞懂Spring到底如何完成众多实体类等复杂类型的数据转换以及与媒体类型的对应，就必须要搞懂HttpMessageConverter这个顶级接口：\n\n```java\npublic interface HttpMessageConverter<T> {\n    boolean canRead(Class<?> var1, MediaType var2);\n\n    boolean canWrite(Class<?> var1, MediaType var2);\n\n    List<MediaType> getSupportedMediaTypes();\n\n    T read(Class<? extends T> var1, HttpInputMessage var2) throws IOException, HttpMessageNotReadableException;\n\n    void write(T var1, MediaType var2, HttpOutputMessage var3) throws IOException, HttpMessageNotWritableException;\n}\n```\n\n大致能看出Spring的处理思路。下面的流程图可以更好方便我们的理解：\n\n![HttpMessageConverter运转流程](/css/images/post/httpMessageConveter.png)\n\n对于添加了@RequestBody和@ResponseBody注解的后端端点，都会经历由HttpMessageConverter进行的数据转换的过程。而在Spring启动之初，就已经有一些默认的转换器被注册了。通过在`RequestResponseBodyMethodProcessor` 中打断点，我们可以获取到一个converters列表：\n\n![内置转换器列表](/css/images/post/converters.png)\n\n源码方面不做过多的解读，有兴趣的朋友可以研究一下`RequestResponseBodyMethodProcessor` 中的handleReturnValue方法，包含了转换的核心实现。\n\n## 自定义HttpMessageConverter\n\n前面已经提及了消息转换器是通过判断媒体类型来调用响应的转换类的，不禁引发了我们的思考，如果我们遇到了不常用的MediaType，或者自定义的MediaType，又想要使用Spring的@RequestBody，@ResponseBody注解，该如何添加代码呢？下面我们通过自定义一个HttpMessageConverter来了解Spring内部的转换过程。\n\n先定义我们的需求，自定一个MediaType：application/toString，当返回一个带有@ResponseBody注解的实体类时，将该实体类的ToString作为响应内容。\n\n1 首先重写Book的ToString方法，方便后期效果展示\n\n```java\n@Override\npublic String toString() {\n    return \"~~~Book{\" +\n            \"id=\" + id +\n            \", bookName='\" + bookName + '\\'' +\n            \"}~~~\";\n}\n```\n\n2 编写自定义的消息转换器\n\n```java\npublic class ToStringHttpMessageConverter extends AbstractHttpMessageConverter<Object> {\n\n    public ToStringHttpMessageConverter() {\n        super(new MediaType(\"application\", \"toString\", Charset.forName(\"UTF-8\")));// <1>\n    }\n\n    @Override\n    protected boolean supports(Class<?> clazz) {\n        return true;\n    }\n\n    //从请求体封装数据 对应RequestBody 用String接收\n    @Override\n    protected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {\n        return StreamUtils.copyToString(inputMessage.getBody(), Charset.forName(\"UTF-8\"));\n    }\n\n    //从响应体封装数据 对应ResponseBody\n    @Override\n    protected void writeInternal(Object o, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {\n        String result = o.toString();//<2>\n        outputMessage.getBody().write(result.getBytes());\n    }\n}\n```\n\n<1> 此处指定了支持的媒体类型\n\n<2> 调用类的ToString方法，将结果写入到输出流中\n\n3 配置自定义的消息转换器\n\n```java\n@Configuration\npublic class WebMvcConfig extends WebMvcConfigurerAdapter{\n\n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.add(new ToStringHttpMessageConverter());\n    }\n}\n```\n\n4 配置后端端点，指定生产类型\n\n```java\n@RestController\npublic class BookController {\n\n    @GetMapping(value = \"/book/{bookId}\",produces = {\"application/toString\",\"application/json\",\"application/xml\"})\n    public Book getBook(@PathVariable(\"bookId\") Integer bookId) {\n        return new Book(bookId, \"book\" + bookId);\n    }\n}\n```\n\n此处只是为了演示，添加了三个生产类型，我们的后端端点可以支持输出三种类型，而具体输出哪一者，则依赖客户端的Accept指定。\n\n5 客户端请求\n\n```http\nGET /book/2 HTTP/1.1\nHost: localhost:8080\nAccept: application/toString\n```\n\n响应结果如下：\n\n```\n​~~~Book{id=2, bookName='book2'}~~~\n```\n\n此时，你可以任意指定Accept的类型，即可获得不同形式的Book返回结果，可以是application/toString，application/json，application/xml，都会对应各自的HttpMessageConverter。\n\n","source":"_posts/解析Spring中的ResponseBody和RequestBody.md","raw":"---\ntitle: 解析Spring中的ResponseBody和RequestBody\ndate: 2017-08-30 12:44:21\ntags: Spring\ncategories: Spring\n---\n\nspring，restful，前后端分离这些关键词都是大家耳熟能详的关键词了，一般spring常常需要与前端、第三方使用JSON，XML等形式进行交互，你也一定不会对@RequestBody和@ResponseBody这两个注解感到陌生。\n\n## @ResponseBody的使用\n\n由于@ResponseBody和@RequestBody的内部实现是同样的原理（封装请求和封装响应），所以本文以@ResponseBody为主要入手点，理解清楚任何一者，都可以同时掌握另一者。\n\n如果想要从spring获得一个json形式返回值，操作起来是非常容易的。首先定义一个实体类:\n\n```java\npublic class Book {\n    private Integer id;\n    private String bookName;\n}\n```\n\n接着定义一个后端端点：\n\n```java\n@RestController\npublic class BookController {\n\n    @GetMapping(value = \"/book/{bookId}\")\n    public Book getBook(@PathVariable(\"bookId\") Integer bookId) {\n        return new Book(bookId, \"book\" + bookId);\n    }\n\n}\n```\n\n在RestController中，相当于给所有的xxxMapping端点都添加了@ResponseBody注解，不返回视图，只返回数据。使用http工具访问这个后端端点`localhost:8080/book/2`，便可以得到如下的响应：\n\n```json\n{\n    \"id\": 2,\n    \"bookName\": \"book2\"\n}\n```\n\n这是一个最简单的返回JSON对象的使用示例了，相信这样的代码很多人在项目中都写过。\n\n## 添加XML解析\n\n如果我们需要将Book对象以XML的形式返回，该如何操作呢？这也很简单，给Book对象添加@XmlRootElement注解，让spring内部能够解析XML对象。\n\n```java\n@XmlRootElement\npublic class Book {\n    private Integer id;\n    private String bookName;\n}\n```\n\n在我们未对web层的BookController做任何改动之前，尝试访问`localhost:8080/book/2`时，会发现得到的结果仍然是前面的JSON对象。这也能够理解，因为Book对象如今既可以被解析为XML，也可以被解析为JSON，我们隐隐察觉这背后有一定的解析顺序关系，但不着急，先看看如何让RestController返回XML解析结果。\n\n方法1 http客户端指定接收的返回结果类型\n\nhttp协议中，可以给请求头添加Accept属性，笔者常用的http客户端是idea自带的Test RESTful Web Service以及chrome的插件Postman。简单的调试，前者基本可以满足我们大多数的需求，而这里为了给大家更直观的体验，笔者使用了Postman。以code形式展示：\n\n```http\nGET /book/2 HTTP/1.1\nHost: localhost:8080\nAccept: application/xml\n```\n\n响应内容如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<book>\n    <bookName>book2</bookName>\n    <id>2</id>\n</book>\n```\n\n方法2 在RestController后端端点中指定返回类型\n\n修改后的RestController如下所示\n\n```java\n@RestController\npublic class BookController {\n\n    @GetMapping(value = \"/book/{bookId}\", produces = {\"application/xml\"})\n    public Book getBook(@PathVariable(\"bookId\") Integer bookId) {\n        return new Book(bookId, \"book\" + bookId);\n    }\n\n}\n```\n\n此时即使将请求中的`Accept: application/xml`去除，依旧可以返回上述的XML结果。\n\n通常情况下，我们的服务端返回的形式一般是固定的，即限定了是JSON，XML中的一种，不建议依赖于客户端添加Accept的信息，而是在服务端限定produces类型。\n\n## 详解Accpect与produces\n\nAccpect包含在http协议的请求头中，其本身代表着客户端发起请求时，期望返回的响应结果的媒体类型。如果服务端可能返回多个媒体类型，则可以通过Accpect指定具体的类型。\n\nproduces是Spring为我们提供的注解参数，代表着服务端能够支持返回的媒体类型，我们注意到produces后跟随的是一个数组类型，也就意味着服务端支持多种媒体类型的响应。\n\n在上一节中，我们未显示指定produces值时，其实就隐式的表明，支持XML形式，JSON形式的媒体类型响应。从实验结果，我们也可以看出，当请求未指定Accpect，响应未指定produces时，具体采用何种形式返回是有Spring控制的。在接口交互时，最良好的对接方式，当然是客户端指定Accpect，服务端指定produces，这样可以避免模棱两可的请求响应，避免出现意想不到的对接结果。\n\n## 详解ContentType与consumes\n\n恰恰和Accpect&produces相反，这两个参数是与用于限制请求的。理解了前两者的含义，这两个参数可以举一反三理解清楚。\n\nContentType包含在http协议的请求头中，其本身代表着客户端发起请求时，告知服务端自己的请求媒体类型是什么。\n\nconsumes是Spring为我们提供的注解参数，代表着服务端能够支持处理的请求媒体类型，同样是一个数组，意味着服务端支持多种媒体类型的请求。一般而言，consumes与produces对请求响应媒体类型起到的限制作用，我们给他一个专有名词：窄化。\n\n## http请求响应媒体类型一览\n\n上面描述的4个属性：Accpect与produces，ContentType与consumes究竟有哪些类型与之对应呢？我只将常用的一些列举了出来：\n\n| 媒体类型                               | 含义         |\n| ---------------------------------- | ---------- |\n| text/html                          | HTML格式     |\n| text/plain                         | 纯文本格式      |\n| text/xml, application/xml          | XML数据格式    |\n| application/json                   | JSON数据格式   |\n| image/gif                          | gif图片格式    |\n| image/png                          | png图片格式    |\n| application/octet-stream           | 二进制流数据     |\n| application/ x-www-form-urlencoded | form表单数据   |\n| multipart/form-data                | 含文件的form表单 |\n\n其中有几个类型值得一说，web开发中我们常用的提交表单操作，其默认的媒体类型就是application/ x-www-form-urlencoded，而当表单中包含文件时，大家估计都踩过坑，需要将enctype=multipart/form-data设置在form参数中。text/html也就是常见的网页了，json与xml常用于数据交互，其他不再赘述。\n\n而在JAVA中，提供了MediaType这样的抽象，来与http的媒体类型进行对应。‘/’之前的名词，如text，application被称为类型（type），‘/’之后被称为子类型(subType)。\n\n## 详解HttpMessageConverter\n\n我们想要搞懂Spring到底如何完成众多实体类等复杂类型的数据转换以及与媒体类型的对应，就必须要搞懂HttpMessageConverter这个顶级接口：\n\n```java\npublic interface HttpMessageConverter<T> {\n    boolean canRead(Class<?> var1, MediaType var2);\n\n    boolean canWrite(Class<?> var1, MediaType var2);\n\n    List<MediaType> getSupportedMediaTypes();\n\n    T read(Class<? extends T> var1, HttpInputMessage var2) throws IOException, HttpMessageNotReadableException;\n\n    void write(T var1, MediaType var2, HttpOutputMessage var3) throws IOException, HttpMessageNotWritableException;\n}\n```\n\n大致能看出Spring的处理思路。下面的流程图可以更好方便我们的理解：\n\n![HttpMessageConverter运转流程](/css/images/post/httpMessageConveter.png)\n\n对于添加了@RequestBody和@ResponseBody注解的后端端点，都会经历由HttpMessageConverter进行的数据转换的过程。而在Spring启动之初，就已经有一些默认的转换器被注册了。通过在`RequestResponseBodyMethodProcessor` 中打断点，我们可以获取到一个converters列表：\n\n![内置转换器列表](/css/images/post/converters.png)\n\n源码方面不做过多的解读，有兴趣的朋友可以研究一下`RequestResponseBodyMethodProcessor` 中的handleReturnValue方法，包含了转换的核心实现。\n\n## 自定义HttpMessageConverter\n\n前面已经提及了消息转换器是通过判断媒体类型来调用响应的转换类的，不禁引发了我们的思考，如果我们遇到了不常用的MediaType，或者自定义的MediaType，又想要使用Spring的@RequestBody，@ResponseBody注解，该如何添加代码呢？下面我们通过自定义一个HttpMessageConverter来了解Spring内部的转换过程。\n\n先定义我们的需求，自定一个MediaType：application/toString，当返回一个带有@ResponseBody注解的实体类时，将该实体类的ToString作为响应内容。\n\n1 首先重写Book的ToString方法，方便后期效果展示\n\n```java\n@Override\npublic String toString() {\n    return \"~~~Book{\" +\n            \"id=\" + id +\n            \", bookName='\" + bookName + '\\'' +\n            \"}~~~\";\n}\n```\n\n2 编写自定义的消息转换器\n\n```java\npublic class ToStringHttpMessageConverter extends AbstractHttpMessageConverter<Object> {\n\n    public ToStringHttpMessageConverter() {\n        super(new MediaType(\"application\", \"toString\", Charset.forName(\"UTF-8\")));// <1>\n    }\n\n    @Override\n    protected boolean supports(Class<?> clazz) {\n        return true;\n    }\n\n    //从请求体封装数据 对应RequestBody 用String接收\n    @Override\n    protected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {\n        return StreamUtils.copyToString(inputMessage.getBody(), Charset.forName(\"UTF-8\"));\n    }\n\n    //从响应体封装数据 对应ResponseBody\n    @Override\n    protected void writeInternal(Object o, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {\n        String result = o.toString();//<2>\n        outputMessage.getBody().write(result.getBytes());\n    }\n}\n```\n\n<1> 此处指定了支持的媒体类型\n\n<2> 调用类的ToString方法，将结果写入到输出流中\n\n3 配置自定义的消息转换器\n\n```java\n@Configuration\npublic class WebMvcConfig extends WebMvcConfigurerAdapter{\n\n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.add(new ToStringHttpMessageConverter());\n    }\n}\n```\n\n4 配置后端端点，指定生产类型\n\n```java\n@RestController\npublic class BookController {\n\n    @GetMapping(value = \"/book/{bookId}\",produces = {\"application/toString\",\"application/json\",\"application/xml\"})\n    public Book getBook(@PathVariable(\"bookId\") Integer bookId) {\n        return new Book(bookId, \"book\" + bookId);\n    }\n}\n```\n\n此处只是为了演示，添加了三个生产类型，我们的后端端点可以支持输出三种类型，而具体输出哪一者，则依赖客户端的Accept指定。\n\n5 客户端请求\n\n```http\nGET /book/2 HTTP/1.1\nHost: localhost:8080\nAccept: application/toString\n```\n\n响应结果如下：\n\n```\n​~~~Book{id=2, bookName='book2'}~~~\n```\n\n此时，你可以任意指定Accept的类型，即可获得不同形式的Book返回结果，可以是application/toString，application/json，application/xml，都会对应各自的HttpMessageConverter。\n\n","slug":"解析Spring中的ResponseBody和RequestBody","published":1,"updated":"2017-09-04T11:49:26.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zuz0048twv7w1svex1i","content":"<p>spring，restful，前后端分离这些关键词都是大家耳熟能详的关键词了，一般spring常常需要与前端、第三方使用JSON，XML等形式进行交互，你也一定不会对@RequestBody和@ResponseBody这两个注解感到陌生。</p>\n<h2 id=\"ResponseBody的使用\"><a href=\"#ResponseBody的使用\" class=\"headerlink\" title=\"@ResponseBody的使用\"></a>@ResponseBody的使用</h2><p>由于@ResponseBody和@RequestBody的内部实现是同样的原理（封装请求和封装响应），所以本文以@ResponseBody为主要入手点，理解清楚任何一者，都可以同时掌握另一者。</p>\n<p>如果想要从spring获得一个json形式返回值，操作起来是非常容易的。首先定义一个实体类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer id;</div><div class=\"line\">    <span class=\"keyword\">private</span> String bookName;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接着定义一个后端端点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/book/&#123;bookId&#125;\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">getBook</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"bookId\"</span>)</span> Integer bookId) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book(bookId, <span class=\"string\">\"book\"</span> + bookId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在RestController中，相当于给所有的xxxMapping端点都添加了@ResponseBody注解，不返回视图，只返回数据。使用http工具访问这个后端端点<code>localhost:8080/book/2</code>，便可以得到如下的响应：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"bookName\"</span>: <span class=\"string\">\"book2\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是一个最简单的返回JSON对象的使用示例了，相信这样的代码很多人在项目中都写过。</p>\n<h2 id=\"添加XML解析\"><a href=\"#添加XML解析\" class=\"headerlink\" title=\"添加XML解析\"></a>添加XML解析</h2><p>如果我们需要将Book对象以XML的形式返回，该如何操作呢？这也很简单，给Book对象添加@XmlRootElement注解，让spring内部能够解析XML对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@XmlRootElement</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer id;</div><div class=\"line\">    <span class=\"keyword\">private</span> String bookName;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在我们未对web层的BookController做任何改动之前，尝试访问<code>localhost:8080/book/2</code>时，会发现得到的结果仍然是前面的JSON对象。这也能够理解，因为Book对象如今既可以被解析为XML，也可以被解析为JSON，我们隐隐察觉这背后有一定的解析顺序关系，但不着急，先看看如何让RestController返回XML解析结果。</p>\n<p>方法1 http客户端指定接收的返回结果类型</p>\n<p>http协议中，可以给请求头添加Accept属性，笔者常用的http客户端是idea自带的Test RESTful Web Service以及chrome的插件Postman。简单的调试，前者基本可以满足我们大多数的需求，而这里为了给大家更直观的体验，笔者使用了Postman。以code形式展示：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/book/2</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: localhost:8080</div><div class=\"line\"><span class=\"attribute\">Accept</span>: application/xml</div></pre></td></tr></table></figure>\n<p>响应内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">book</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bookName</span>&gt;</span>book2<span class=\"tag\">&lt;/<span class=\"name\">bookName</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>方法2 在RestController后端端点中指定返回类型</p>\n<p>修改后的RestController如下所示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/book/&#123;bookId&#125;\"</span>, produces = &#123;<span class=\"string\">\"application/xml\"</span>&#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">getBook</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"bookId\"</span>)</span> Integer bookId) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book(bookId, <span class=\"string\">\"book\"</span> + bookId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时即使将请求中的<code>Accept: application/xml</code>去除，依旧可以返回上述的XML结果。</p>\n<p>通常情况下，我们的服务端返回的形式一般是固定的，即限定了是JSON，XML中的一种，不建议依赖于客户端添加Accept的信息，而是在服务端限定produces类型。</p>\n<h2 id=\"详解Accpect与produces\"><a href=\"#详解Accpect与produces\" class=\"headerlink\" title=\"详解Accpect与produces\"></a>详解Accpect与produces</h2><p>Accpect包含在http协议的请求头中，其本身代表着客户端发起请求时，期望返回的响应结果的媒体类型。如果服务端可能返回多个媒体类型，则可以通过Accpect指定具体的类型。</p>\n<p>produces是Spring为我们提供的注解参数，代表着服务端能够支持返回的媒体类型，我们注意到produces后跟随的是一个数组类型，也就意味着服务端支持多种媒体类型的响应。</p>\n<p>在上一节中，我们未显示指定produces值时，其实就隐式的表明，支持XML形式，JSON形式的媒体类型响应。从实验结果，我们也可以看出，当请求未指定Accpect，响应未指定produces时，具体采用何种形式返回是有Spring控制的。在接口交互时，最良好的对接方式，当然是客户端指定Accpect，服务端指定produces，这样可以避免模棱两可的请求响应，避免出现意想不到的对接结果。</p>\n<h2 id=\"详解ContentType与consumes\"><a href=\"#详解ContentType与consumes\" class=\"headerlink\" title=\"详解ContentType与consumes\"></a>详解ContentType与consumes</h2><p>恰恰和Accpect&amp;produces相反，这两个参数是与用于限制请求的。理解了前两者的含义，这两个参数可以举一反三理解清楚。</p>\n<p>ContentType包含在http协议的请求头中，其本身代表着客户端发起请求时，告知服务端自己的请求媒体类型是什么。</p>\n<p>consumes是Spring为我们提供的注解参数，代表着服务端能够支持处理的请求媒体类型，同样是一个数组，意味着服务端支持多种媒体类型的请求。一般而言，consumes与produces对请求响应媒体类型起到的限制作用，我们给他一个专有名词：窄化。</p>\n<h2 id=\"http请求响应媒体类型一览\"><a href=\"#http请求响应媒体类型一览\" class=\"headerlink\" title=\"http请求响应媒体类型一览\"></a>http请求响应媒体类型一览</h2><p>上面描述的4个属性：Accpect与produces，ContentType与consumes究竟有哪些类型与之对应呢？我只将常用的一些列举了出来：</p>\n<table>\n<thead>\n<tr>\n<th>媒体类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text/html</td>\n<td>HTML格式</td>\n</tr>\n<tr>\n<td>text/plain</td>\n<td>纯文本格式</td>\n</tr>\n<tr>\n<td>text/xml, application/xml</td>\n<td>XML数据格式</td>\n</tr>\n<tr>\n<td>application/json</td>\n<td>JSON数据格式</td>\n</tr>\n<tr>\n<td>image/gif</td>\n<td>gif图片格式</td>\n</tr>\n<tr>\n<td>image/png</td>\n<td>png图片格式</td>\n</tr>\n<tr>\n<td>application/octet-stream</td>\n<td>二进制流数据</td>\n</tr>\n<tr>\n<td>application/ x-www-form-urlencoded</td>\n<td>form表单数据</td>\n</tr>\n<tr>\n<td>multipart/form-data</td>\n<td>含文件的form表单</td>\n</tr>\n</tbody>\n</table>\n<p>其中有几个类型值得一说，web开发中我们常用的提交表单操作，其默认的媒体类型就是application/ x-www-form-urlencoded，而当表单中包含文件时，大家估计都踩过坑，需要将enctype=multipart/form-data设置在form参数中。text/html也就是常见的网页了，json与xml常用于数据交互，其他不再赘述。</p>\n<p>而在JAVA中，提供了MediaType这样的抽象，来与http的媒体类型进行对应。‘/’之前的名词，如text，application被称为类型（type），‘/’之后被称为子类型(subType)。</p>\n<h2 id=\"详解HttpMessageConverter\"><a href=\"#详解HttpMessageConverter\" class=\"headerlink\" title=\"详解HttpMessageConverter\"></a>详解HttpMessageConverter</h2><p>我们想要搞懂Spring到底如何完成众多实体类等复杂类型的数据转换以及与媒体类型的对应，就必须要搞懂HttpMessageConverter这个顶级接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HttpMessageConverter</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">canRead</span><span class=\"params\">(Class&lt;?&gt; var1, MediaType var2)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">canWrite</span><span class=\"params\">(Class&lt;?&gt; var1, MediaType var2)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">List&lt;MediaType&gt; <span class=\"title\">getSupportedMediaTypes</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">(Class&lt;? extends T&gt; var1, HttpInputMessage var2)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(T var1, MediaType var2, HttpOutputMessage var3)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大致能看出Spring的处理思路。下面的流程图可以更好方便我们的理解：</p>\n<p><img src=\"/css/images/post/httpMessageConveter.png\" alt=\"HttpMessageConverter运转流程\"></p>\n<p>对于添加了@RequestBody和@ResponseBody注解的后端端点，都会经历由HttpMessageConverter进行的数据转换的过程。而在Spring启动之初，就已经有一些默认的转换器被注册了。通过在<code>RequestResponseBodyMethodProcessor</code> 中打断点，我们可以获取到一个converters列表：</p>\n<p><img src=\"/css/images/post/converters.png\" alt=\"内置转换器列表\"></p>\n<p>源码方面不做过多的解读，有兴趣的朋友可以研究一下<code>RequestResponseBodyMethodProcessor</code> 中的handleReturnValue方法，包含了转换的核心实现。</p>\n<h2 id=\"自定义HttpMessageConverter\"><a href=\"#自定义HttpMessageConverter\" class=\"headerlink\" title=\"自定义HttpMessageConverter\"></a>自定义HttpMessageConverter</h2><p>前面已经提及了消息转换器是通过判断媒体类型来调用响应的转换类的，不禁引发了我们的思考，如果我们遇到了不常用的MediaType，或者自定义的MediaType，又想要使用Spring的@RequestBody，@ResponseBody注解，该如何添加代码呢？下面我们通过自定义一个HttpMessageConverter来了解Spring内部的转换过程。</p>\n<p>先定义我们的需求，自定一个MediaType：application/toString，当返回一个带有@ResponseBody注解的实体类时，将该实体类的ToString作为响应内容。</p>\n<p>1 首先重写Book的ToString方法，方便后期效果展示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"~~~Book&#123;\"</span> +</div><div class=\"line\">            <span class=\"string\">\"id=\"</span> + id +</div><div class=\"line\">            <span class=\"string\">\", bookName='\"</span> + bookName + <span class=\"string\">'\\''</span> +</div><div class=\"line\">            <span class=\"string\">\"&#125;~~~\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2 编写自定义的消息转换器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToStringHttpMessageConverter</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHttpMessageConverter</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ToStringHttpMessageConverter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> MediaType(<span class=\"string\">\"application\"</span>, <span class=\"string\">\"toString\"</span>, Charset.forName(<span class=\"string\">\"UTF-8\"</span>)));<span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//从请求体封装数据 对应RequestBody 用String接收</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">readInternal</span><span class=\"params\">(Class&lt;?&gt; clazz, HttpInputMessage inputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> StreamUtils.copyToString(inputMessage.getBody(), Charset.forName(<span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//从响应体封装数据 对应ResponseBody</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">writeInternal</span><span class=\"params\">(Object o, HttpOutputMessage outputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</div><div class=\"line\">        String result = o.toString();<span class=\"comment\">//&lt;2&gt;</span></div><div class=\"line\">        outputMessage.getBody().write(result.getBytes());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> 此处指定了支持的媒体类型</1></p>\n<p><2> 调用类的ToString方法，将结果写入到输出流中</2></p>\n<p>3 配置自定义的消息转换器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</div><div class=\"line\">        converters.add(<span class=\"keyword\">new</span> ToStringHttpMessageConverter());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4 配置后端端点，指定生产类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/book/&#123;bookId&#125;\"</span>,produces = &#123;<span class=\"string\">\"application/toString\"</span>,<span class=\"string\">\"application/json\"</span>,<span class=\"string\">\"application/xml\"</span>&#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">getBook</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"bookId\"</span>)</span> Integer bookId) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book(bookId, <span class=\"string\">\"book\"</span> + bookId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此处只是为了演示，添加了三个生产类型，我们的后端端点可以支持输出三种类型，而具体输出哪一者，则依赖客户端的Accept指定。</p>\n<p>5 客户端请求</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/book/2</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: localhost:8080</div><div class=\"line\"><span class=\"attribute\">Accept</span>: application/toString</div></pre></td></tr></table></figure>\n<p>响应结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">​~~~Book&#123;id=2, bookName=&apos;book2&apos;&#125;~~~</div></pre></td></tr></table></figure>\n<p>此时，你可以任意指定Accept的类型，即可获得不同形式的Book返回结果，可以是application/toString，application/json，application/xml，都会对应各自的HttpMessageConverter。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>spring，restful，前后端分离这些关键词都是大家耳熟能详的关键词了，一般spring常常需要与前端、第三方使用JSON，XML等形式进行交互，你也一定不会对@RequestBody和@ResponseBody这两个注解感到陌生。</p>\n<h2 id=\"ResponseBody的使用\"><a href=\"#ResponseBody的使用\" class=\"headerlink\" title=\"@ResponseBody的使用\"></a>@ResponseBody的使用</h2><p>由于@ResponseBody和@RequestBody的内部实现是同样的原理（封装请求和封装响应），所以本文以@ResponseBody为主要入手点，理解清楚任何一者，都可以同时掌握另一者。</p>\n<p>如果想要从spring获得一个json形式返回值，操作起来是非常容易的。首先定义一个实体类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer id;</div><div class=\"line\">    <span class=\"keyword\">private</span> String bookName;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接着定义一个后端端点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/book/&#123;bookId&#125;\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">getBook</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"bookId\"</span>)</span> Integer bookId) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book(bookId, <span class=\"string\">\"book\"</span> + bookId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在RestController中，相当于给所有的xxxMapping端点都添加了@ResponseBody注解，不返回视图，只返回数据。使用http工具访问这个后端端点<code>localhost:8080/book/2</code>，便可以得到如下的响应：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"attr\">\"bookName\"</span>: <span class=\"string\">\"book2\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是一个最简单的返回JSON对象的使用示例了，相信这样的代码很多人在项目中都写过。</p>\n<h2 id=\"添加XML解析\"><a href=\"#添加XML解析\" class=\"headerlink\" title=\"添加XML解析\"></a>添加XML解析</h2><p>如果我们需要将Book对象以XML的形式返回，该如何操作呢？这也很简单，给Book对象添加@XmlRootElement注解，让spring内部能够解析XML对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@XmlRootElement</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer id;</div><div class=\"line\">    <span class=\"keyword\">private</span> String bookName;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在我们未对web层的BookController做任何改动之前，尝试访问<code>localhost:8080/book/2</code>时，会发现得到的结果仍然是前面的JSON对象。这也能够理解，因为Book对象如今既可以被解析为XML，也可以被解析为JSON，我们隐隐察觉这背后有一定的解析顺序关系，但不着急，先看看如何让RestController返回XML解析结果。</p>\n<p>方法1 http客户端指定接收的返回结果类型</p>\n<p>http协议中，可以给请求头添加Accept属性，笔者常用的http客户端是idea自带的Test RESTful Web Service以及chrome的插件Postman。简单的调试，前者基本可以满足我们大多数的需求，而这里为了给大家更直观的体验，笔者使用了Postman。以code形式展示：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/book/2</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: localhost:8080</div><div class=\"line\"><span class=\"attribute\">Accept</span>: application/xml</div></pre></td></tr></table></figure>\n<p>响应内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">book</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bookName</span>&gt;</span>book2<span class=\"tag\">&lt;/<span class=\"name\">bookName</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">book</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>方法2 在RestController后端端点中指定返回类型</p>\n<p>修改后的RestController如下所示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/book/&#123;bookId&#125;\"</span>, produces = &#123;<span class=\"string\">\"application/xml\"</span>&#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">getBook</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"bookId\"</span>)</span> Integer bookId) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book(bookId, <span class=\"string\">\"book\"</span> + bookId);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时即使将请求中的<code>Accept: application/xml</code>去除，依旧可以返回上述的XML结果。</p>\n<p>通常情况下，我们的服务端返回的形式一般是固定的，即限定了是JSON，XML中的一种，不建议依赖于客户端添加Accept的信息，而是在服务端限定produces类型。</p>\n<h2 id=\"详解Accpect与produces\"><a href=\"#详解Accpect与produces\" class=\"headerlink\" title=\"详解Accpect与produces\"></a>详解Accpect与produces</h2><p>Accpect包含在http协议的请求头中，其本身代表着客户端发起请求时，期望返回的响应结果的媒体类型。如果服务端可能返回多个媒体类型，则可以通过Accpect指定具体的类型。</p>\n<p>produces是Spring为我们提供的注解参数，代表着服务端能够支持返回的媒体类型，我们注意到produces后跟随的是一个数组类型，也就意味着服务端支持多种媒体类型的响应。</p>\n<p>在上一节中，我们未显示指定produces值时，其实就隐式的表明，支持XML形式，JSON形式的媒体类型响应。从实验结果，我们也可以看出，当请求未指定Accpect，响应未指定produces时，具体采用何种形式返回是有Spring控制的。在接口交互时，最良好的对接方式，当然是客户端指定Accpect，服务端指定produces，这样可以避免模棱两可的请求响应，避免出现意想不到的对接结果。</p>\n<h2 id=\"详解ContentType与consumes\"><a href=\"#详解ContentType与consumes\" class=\"headerlink\" title=\"详解ContentType与consumes\"></a>详解ContentType与consumes</h2><p>恰恰和Accpect&amp;produces相反，这两个参数是与用于限制请求的。理解了前两者的含义，这两个参数可以举一反三理解清楚。</p>\n<p>ContentType包含在http协议的请求头中，其本身代表着客户端发起请求时，告知服务端自己的请求媒体类型是什么。</p>\n<p>consumes是Spring为我们提供的注解参数，代表着服务端能够支持处理的请求媒体类型，同样是一个数组，意味着服务端支持多种媒体类型的请求。一般而言，consumes与produces对请求响应媒体类型起到的限制作用，我们给他一个专有名词：窄化。</p>\n<h2 id=\"http请求响应媒体类型一览\"><a href=\"#http请求响应媒体类型一览\" class=\"headerlink\" title=\"http请求响应媒体类型一览\"></a>http请求响应媒体类型一览</h2><p>上面描述的4个属性：Accpect与produces，ContentType与consumes究竟有哪些类型与之对应呢？我只将常用的一些列举了出来：</p>\n<table>\n<thead>\n<tr>\n<th>媒体类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>text/html</td>\n<td>HTML格式</td>\n</tr>\n<tr>\n<td>text/plain</td>\n<td>纯文本格式</td>\n</tr>\n<tr>\n<td>text/xml, application/xml</td>\n<td>XML数据格式</td>\n</tr>\n<tr>\n<td>application/json</td>\n<td>JSON数据格式</td>\n</tr>\n<tr>\n<td>image/gif</td>\n<td>gif图片格式</td>\n</tr>\n<tr>\n<td>image/png</td>\n<td>png图片格式</td>\n</tr>\n<tr>\n<td>application/octet-stream</td>\n<td>二进制流数据</td>\n</tr>\n<tr>\n<td>application/ x-www-form-urlencoded</td>\n<td>form表单数据</td>\n</tr>\n<tr>\n<td>multipart/form-data</td>\n<td>含文件的form表单</td>\n</tr>\n</tbody>\n</table>\n<p>其中有几个类型值得一说，web开发中我们常用的提交表单操作，其默认的媒体类型就是application/ x-www-form-urlencoded，而当表单中包含文件时，大家估计都踩过坑，需要将enctype=multipart/form-data设置在form参数中。text/html也就是常见的网页了，json与xml常用于数据交互，其他不再赘述。</p>\n<p>而在JAVA中，提供了MediaType这样的抽象，来与http的媒体类型进行对应。‘/’之前的名词，如text，application被称为类型（type），‘/’之后被称为子类型(subType)。</p>\n<h2 id=\"详解HttpMessageConverter\"><a href=\"#详解HttpMessageConverter\" class=\"headerlink\" title=\"详解HttpMessageConverter\"></a>详解HttpMessageConverter</h2><p>我们想要搞懂Spring到底如何完成众多实体类等复杂类型的数据转换以及与媒体类型的对应，就必须要搞懂HttpMessageConverter这个顶级接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HttpMessageConverter</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">canRead</span><span class=\"params\">(Class&lt;?&gt; var1, MediaType var2)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">canWrite</span><span class=\"params\">(Class&lt;?&gt; var1, MediaType var2)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">List&lt;MediaType&gt; <span class=\"title\">getSupportedMediaTypes</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">(Class&lt;? extends T&gt; var1, HttpInputMessage var2)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(T var1, MediaType var2, HttpOutputMessage var3)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大致能看出Spring的处理思路。下面的流程图可以更好方便我们的理解：</p>\n<p><img src=\"/css/images/post/httpMessageConveter.png\" alt=\"HttpMessageConverter运转流程\"></p>\n<p>对于添加了@RequestBody和@ResponseBody注解的后端端点，都会经历由HttpMessageConverter进行的数据转换的过程。而在Spring启动之初，就已经有一些默认的转换器被注册了。通过在<code>RequestResponseBodyMethodProcessor</code> 中打断点，我们可以获取到一个converters列表：</p>\n<p><img src=\"/css/images/post/converters.png\" alt=\"内置转换器列表\"></p>\n<p>源码方面不做过多的解读，有兴趣的朋友可以研究一下<code>RequestResponseBodyMethodProcessor</code> 中的handleReturnValue方法，包含了转换的核心实现。</p>\n<h2 id=\"自定义HttpMessageConverter\"><a href=\"#自定义HttpMessageConverter\" class=\"headerlink\" title=\"自定义HttpMessageConverter\"></a>自定义HttpMessageConverter</h2><p>前面已经提及了消息转换器是通过判断媒体类型来调用响应的转换类的，不禁引发了我们的思考，如果我们遇到了不常用的MediaType，或者自定义的MediaType，又想要使用Spring的@RequestBody，@ResponseBody注解，该如何添加代码呢？下面我们通过自定义一个HttpMessageConverter来了解Spring内部的转换过程。</p>\n<p>先定义我们的需求，自定一个MediaType：application/toString，当返回一个带有@ResponseBody注解的实体类时，将该实体类的ToString作为响应内容。</p>\n<p>1 首先重写Book的ToString方法，方便后期效果展示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"~~~Book&#123;\"</span> +</div><div class=\"line\">            <span class=\"string\">\"id=\"</span> + id +</div><div class=\"line\">            <span class=\"string\">\", bookName='\"</span> + bookName + <span class=\"string\">'\\''</span> +</div><div class=\"line\">            <span class=\"string\">\"&#125;~~~\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2 编写自定义的消息转换器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToStringHttpMessageConverter</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHttpMessageConverter</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ToStringHttpMessageConverter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> MediaType(<span class=\"string\">\"application\"</span>, <span class=\"string\">\"toString\"</span>, Charset.forName(<span class=\"string\">\"UTF-8\"</span>)));<span class=\"comment\">// &lt;1&gt;</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//从请求体封装数据 对应RequestBody 用String接收</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">readInternal</span><span class=\"params\">(Class&lt;?&gt; clazz, HttpInputMessage inputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> StreamUtils.copyToString(inputMessage.getBody(), Charset.forName(<span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//从响应体封装数据 对应ResponseBody</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">writeInternal</span><span class=\"params\">(Object o, HttpOutputMessage outputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</div><div class=\"line\">        String result = o.toString();<span class=\"comment\">//&lt;2&gt;</span></div><div class=\"line\">        outputMessage.getBody().write(result.getBytes());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> 此处指定了支持的媒体类型</1></p>\n<p><2> 调用类的ToString方法，将结果写入到输出流中</2></p>\n<p>3 配置自定义的消息转换器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</div><div class=\"line\">        converters.add(<span class=\"keyword\">new</span> ToStringHttpMessageConverter());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>4 配置后端端点，指定生产类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@GetMapping</span>(value = <span class=\"string\">\"/book/&#123;bookId&#125;\"</span>,produces = &#123;<span class=\"string\">\"application/toString\"</span>,<span class=\"string\">\"application/json\"</span>,<span class=\"string\">\"application/xml\"</span>&#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Book <span class=\"title\">getBook</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"bookId\"</span>)</span> Integer bookId) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Book(bookId, <span class=\"string\">\"book\"</span> + bookId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此处只是为了演示，添加了三个生产类型，我们的后端端点可以支持输出三种类型，而具体输出哪一者，则依赖客户端的Accept指定。</p>\n<p>5 客户端请求</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/book/2</span> HTTP/1.1</div><div class=\"line\"><span class=\"attribute\">Host</span>: localhost:8080</div><div class=\"line\"><span class=\"attribute\">Accept</span>: application/toString</div></pre></td></tr></table></figure>\n<p>响应结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">​~~~Book&#123;id=2, bookName=&apos;book2&apos;&#125;~~~</div></pre></td></tr></table></figure>\n<p>此时，你可以任意指定Accept的类型，即可获得不同形式的Book返回结果，可以是application/toString，application/json，application/xml，都会对应各自的HttpMessageConverter。</p>\n"},{"title":"使用spring validation完成数据后端校验","date":"2017-08-16T07:52:52.000Z","_content":"\n\n## 前言\n\n数据的校验是交互式网站一个不可或缺的功能，前端的js校验可以涵盖大部分的校验职责，如用户名唯一性，生日格式，邮箱格式校验等等常用的校验。但是为了避免用户绕过浏览器，使用http工具直接向后端请求一些违法数据，服务端的数据校验也是必要的，可以防止脏数据落到数据库中，如果数据库中出现一个非法的邮箱格式，也会让运维人员头疼不已。我在之前保险产品研发过程中，系统对数据校验要求比较严格且追求可变性及效率，曾使用drools作为规则引擎，兼任了校验的功能。而在一般的应用，可以使用本文将要介绍的validation来对数据进行校验。\n\n简述JSR303/JSR-349，hibernate validation，spring validation之间的关系。JSR303是一项标准,JSR-349是其的升级版本，添加了一些新特性，他们规定一些校验规范即校验注解，如@Null，@NotNull，@Pattern，他们位于javax.validation.constraints包下，只提供规范不提供实现。而hibernate validation是对这个规范的实践（不要将hibernate和数据库orm框架联系在一起），他提供了相应的实现，并增加了一些其他校验注解，如@Email，@Length，@Range等等，他们位于org.hibernate.validator.constraints包下。而万能的spring为了给开发者提供便捷，对hibernate validation进行了二次封装，显示校验validated bean时，你可以使用spring validation或者hibernate validation，而spring validation另一个特性，便是其在springmvc模块中添加了自动校验，并将校验信息封装进了特定的类中。这无疑便捷了我们的web开发。本文主要介绍在springmvc中自动校验的机制。\n\n<!-- more -->\n\n## 引入依赖\n\n我们使用maven构建springboot应用来进行demo演示。\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n我们只需要引入spring-boot-starter-web依赖即可，如果查看其子依赖，可以发现如下的依赖：\n\n```xml\n<dependency>\n\t<groupId>org.hibernate</groupId>\n\t<artifactId>hibernate-validator</artifactId>\n</dependency>\n<dependency>\n\t<groupId>com.fasterxml.jackson.core</groupId>\n\t<artifactId>jackson-databind</artifactId>\n</dependency>\n```\n\n验证了我之前的描述，web模块使用了hibernate-validation，并且databind模块也提供了相应的数据绑定功能。\n\n## 构建启动类\n\n无需添加其他注解，一个典型的启动类\n​\t\n```java\n@SpringBootApplication\npublic class ValidateApp {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ValidateApp.class, args);\n    }\n}\n```\n\n## 创建需要被校验的实体类\n\n\n```java\npublic class Foo {    \n    @NotBlank\n    private String name;\n\n    @Min(18)\n    private Integer age;\n\n    @Pattern(regexp = \"^1(3|4|5|7|8)\\\\d{9}$\",message = \"手机号码格式错误\")\n    @NotBlank(message = \"手机号码不能为空\")\n    private String phone;\n\n    @Email(message = \"邮箱格式错误\")\n    private String email;\n    \n    //... getter setter\n\n}\n```\n使用一些比较常用的校验注解，还是比较浅显易懂的，字段上的注解名称即可推断出校验内容，每一个注解都包含了message字段，用于校验失败时作为提示信息，特殊的校验注解，如Pattern（正则校验），还可以自己添加正则表达式。\n\n## 在@Controller中校验数据\n\nspringmvc为我们提供了自动封装表单参数的功能，一个添加了参数校验的典型controller如下所示。\n\n```java\n@Controller\npublic class FooController {\n\n    @RequestMapping(\"/foo\")\n    public String foo(@Validated Foo foo <1>, BindingResult bindingResult <2>) {\n        if(bindingResult.hasErrors()){\n            for (FieldError fieldError : bindingResult.getFieldErrors()) {\n                //...\n            }\n            return \"fail\";\n        }\n        return \"success\";\n    }\n\n}\n```\n值得注意的地方：\n\n<1> 参数Foo前需要加上@Validated注解，表明需要spring对其进行校验，而校验的信息会存放到其后的BindingResult中。注意，必须相邻，如果有多个参数需要校验，形式可以如下。foo(@Validated Foo foo, BindingResult  fooBindingResult ，@Validated Bar bar, BindingResult  barBindingResult);即一个校验类对应一个校验结果。\n\n<2> 校验结果会被自动填充，在controller中可以根据业务逻辑来决定具体的操作，如跳转到错误页面。\n\n一个最基本的校验就完成了，总结下框架已经提供了哪些校验：\n**JSR提供的校验注解**:\n```java\n@Null   被注释的元素必须为 null    \n@NotNull    被注释的元素必须不为 null    \n@AssertTrue     被注释的元素必须为 true    \n@AssertFalse    被注释的元素必须为 false    \n@Min(value)     被注释的元素必须是一个数字，其值必须大于等于指定的最小值    \n@Max(value)     被注释的元素必须是一个数字，其值必须小于等于指定的最大值    \n@DecimalMin(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值    \n@DecimalMax(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值    \n@Size(max=, min=)   被注释的元素的大小必须在指定的范围内    \n@Digits (integer, fraction)     被注释的元素必须是一个数字，其值必须在可接受的范围内    \n@Past   被注释的元素必须是一个过去的日期    \n@Future     被注释的元素必须是一个将来的日期    \n@Pattern(regex=,flag=)  被注释的元素必须符合指定的正则表达式    \n```\n\n**Hibernate Validator提供的校验注解**：\n\n\n```java\n@NotBlank(message =)   验证字符串非null，且长度必须大于0    \n@Email  被注释的元素必须是电子邮箱地址    \n@Length(min=,max=)  被注释的字符串的大小必须在指定的范围内    \n@NotEmpty   被注释的字符串的必须非空    \n@Range(min=,max=,message=)  被注释的元素必须在合适的范围内\n```\n\n## 校验实验\n\n我们对上面实现的校验入口进行一次测试请求：\n访问 `http://localhost:8080/foo?name=xujingfeng&email=000&age=19` 可以得到如下的debug信息：\n\n![这里写图片描述](http://img.blog.csdn.net/20170816154850724?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n实验告诉我们，校验结果起了作用。并且，可以发现当发生多个错误，spring validation不会在第一个错误发生后立即停止，而是继续试错，告诉我们所有的错误。debug可以查看到更多丰富的错误信息，这些都是spring validation为我们提供的便捷特性，基本适用于大多数场景。\n\n你可能不满足于简单的校验特性，下面进行一些补充。\n\n## 分组校验\n\n如果同一个类，在不同的使用场景下有不同的校验规则，那么可以使用分组校验。未成年人是不能喝酒的，而在其他场景下我们不做特殊的限制，这个需求如何体现同一个实体，不同的校验规则呢？\n\n改写注解，添加分组：\n\n\n```java\nClass Foo{\n\t@Min(value = 18,groups = {Adult.class})\n\tprivate Integer age;\n\t\n\tpublic interface Adult{}\n\t\n\tpublic interface Minor{}\n}\n```\n\n这样表明，只有在Adult分组下，18岁的限制才会起作用。\n\nController层改写：\n\n```java\n@RequestMapping(\"/drink\")\npublic String drink(@Validated({Foo.Adult.class}) Foo foo, BindingResult bindingResult) {\n    if(bindingResult.hasErrors()){\n        for (FieldError fieldError : bindingResult.getFieldErrors()) {\n            //...\n        }\n        return \"fail\";\n    }\n    return \"success\";\n}\n\n@RequestMapping(\"/live\")\npublic String live(@Validated Foo foo, BindingResult bindingResult) {\n    if(bindingResult.hasErrors()){\n        for (FieldError fieldError : bindingResult.getFieldErrors()) {\n            //...\n        }\n        return \"fail\";\n    }\n    return \"success\";\n}\n```\n\ndrink方法限定需要进行Adult校验，而live方法则不做限制。\n\n## 自定义校验\n\n业务需求总是比框架提供的这些简单校验要复杂的多，我们可以自定义校验来满足我们的需求。自定义spring validation非常简单，主要分为两步。\n\n1 自定义校验注解\n我们尝试添加一个“字符串不能包含空格”的限制。\n\n```java\n@Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER})\n@Retention(RUNTIME)\n@Documented\n@Constraint(validatedBy = {CannotHaveBlankValidator.class})<1>\npublic @interface CannotHaveBlank {\n\n    //默认错误消息\n    String message() default \"不能包含空格\";\n\n    //分组\n    Class<?>[] groups() default {};\n\n    //负载\n    Class<? extends Payload>[] payload() default {};\n\n    //指定多个时使用\n    @Target({FIELD, METHOD, PARAMETER, ANNOTATION_TYPE})\n    @Retention(RUNTIME)\n    @Documented\n    @interface List {\n        CannotHaveBlank[] value();\n    }\n\n}\n```\n\n我们不需要关注太多东西，使用spring validation的原则便是便捷我们的开发，例如payload，List ，groups，都可以忽略。\n\n<1> 自定义注解中指定了这个注解真正的验证者类。\n\n2 编写真正的校验者类\n\n\n```java\npublic class CannotHaveBlankValidator implements <1> ConstraintValidator<CannotHaveBlank, String> {\n\n\t@Override\n    public void initialize(CannotHaveBlank constraintAnnotation) {\n    }\n    \n    @Override\n    public boolean isValid(String value, ConstraintValidatorContext context <2>) {\n        //null时不进行校验\n        if (value != null && value.contains(\" \")) {\n\t        <3>\n            //获取默认提示信息\n            String defaultConstraintMessageTemplate = context.getDefaultConstraintMessageTemplate();\n            System.out.println(\"default message :\" + defaultConstraintMessageTemplate);\n            //禁用默认提示信息\n            context.disableDefaultConstraintViolation();\n            //设置提示语\n            context.buildConstraintViolationWithTemplate(\"can not contains blank\").addConstraintViolation();\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n<1>  所有的验证者都需要实现ConstraintValidator接口，它的接口也很形象，包含一个初始化事件方法，和一个判断是否合法的方法。\n\n\n```java\npublic interface ConstraintValidator<A extends Annotation, T> {\n\tvoid initialize(A constraintAnnotation);\n\t\tboolean isValid(T value, ConstraintValidatorContext context);\n}\n```\n\n\n<2> ConstraintValidatorContext 这个上下文包含了认证中所有的信息，我们可以利用这个上下文实现获取默认错误提示信息，禁用错误提示信息，改写错误提示信息等操作。\n\n<3> 一些典型校验操作，或许可以对你产生启示作用。\n\n值得注意的一点是，自定义注解可以用在`METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER`之上，ConstraintValidator的第二个泛型参数T，是需要被校验的类型。\n\n## 手动校验\n\n可能在某些场景下需要我们手动校验，即使用校验器对需要被校验的实体发起validate，同步获得校验结果。理论上我们既可以使用Hibernate Validation提供Validator，也可以使用Spring对其的封装。在spring构建的项目中，提倡使用经过spring封装过后的方法，这里两种方法都介绍下：\n\n**Hibernate Validation**：\n\n```java\nFoo foo = new Foo();\nfoo.setAge(22);\nfoo.setEmail(\"000\");\nValidatorFactory vf = Validation.buildDefaultValidatorFactory();\nValidator validator = vf.getValidator();\nSet<ConstraintViolation<Foo>> set = validator.validate(foo);\nfor (ConstraintViolation<Foo> constraintViolation : set) {\n    System.out.println(constraintViolation.getMessage());\n}\n```\n\n由于依赖了Hibernate Validation框架，我们需要调用Hibernate相关的工厂方法来获取validator实例，从而校验。\n\n在spring framework文档的Validation相关章节，可以看到如下的描述：\n\n>Spring provides full support for the Bean Validation API. This includes convenient support for bootstrapping a JSR-303/JSR-349 Bean Validation provider as a Spring bean. This allows for a javax.validation.ValidatorFactory or javax.validation.Validator to be injected wherever validation is needed in your application. Use the LocalValidatorFactoryBean to configure a default Validator as a Spring bean:\n\n> bean id=\"validator\"  class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"\n\n>The basic configuration above will trigger Bean Validation to initialize using its default bootstrap mechanism. A JSR-303/JSR-349 provider, such as Hibernate Validator, is expected to be present in the classpath and will be detected automatically.\t\n\n上面这段话主要描述了spring对validation全面支持JSR-303、JSR-349的标准，并且封装了LocalValidatorFactoryBean作为validator的实现。值得一提的是，这个类的责任其实是非常重大的，他兼容了spring的validation体系和hibernate的validation体系，也可以被开发者直接调用，代替上述的从工厂方法中获取的hibernate validator。由于我们使用了springboot，会触发web模块的自动配置，LocalValidatorFactoryBean已经成为了Validator的默认实现，使用时只需要自动注入即可。\n\n```java\n@Autowired\nValidator globalValidator; <1>\n\n@RequestMapping(\"/validate\")\npublic String validate() {\n    Foo foo = new Foo();\n    foo.setAge(22);\n    foo.setEmail(\"000\");\n\n    Set<ConstraintViolation<Foo>> set = globalValidator.validate(foo);<2>\n    for (ConstraintViolation<Foo> constraintViolation : set) {\n        System.out.println(constraintViolation.getMessage());\n    }\n\n    return \"success\";\n}\n```\n\n<1> 真正使用过Validator接口的读者会发现有两个接口，一个是位于javax.validation包下，另一个位于org.springframework.validation包下，注意我们这里使用的是前者javax.validation，后者是spring自己内置的校验接口，LocalValidatorFactoryBean同时实现了这两个接口。\n\n<2> 此处校验接口最终的实现类便是LocalValidatorFactoryBean。\n\n## 基于方法校验\n\n```java\n@RestController\n@Validated <1>\npublic class BarController {\n\n    @RequestMapping(\"/bar\")\n    public @NotBlank <2> String bar(@Min(18) Integer age <3>) {\n        System.out.println(\"age : \" + age);\n        return \"\";\n    }\n\n    @ExceptionHandler(ConstraintViolationException.class)\n    public Map handleConstraintViolationException(ConstraintViolationException cve){\n        Set<ConstraintViolation<?>> cves = cve.getConstraintViolations();<4>\n        for (ConstraintViolation<?> constraintViolation : cves) {\n            System.out.println(constraintViolation.getMessage());\n        }\n        Map map = new HashMap();\n        map.put(\"errorCode\",500);\n        return map;\n    }\n\n}\n```\n\n<1> 为类添加@Validated注解\n\n<2> <3> 校验方法的返回值和入参\n\n<4> 添加一个异常处理器，可以获得没有通过校验的属性相关信息\n\n基于方法的校验，个人不推荐使用，感觉和项目结合的不是很好。\n\n## 使用校验框架的一些想法\n\n理论上spring validation可以实现很多复杂的校验，你甚至可以使你的Validator获取ApplicationContext，获取spring容器中所有的资源，进行诸如数据库校验，注入其他校验工具，完成组合校验（如前后密码一致）等等操作，但是寻求一个易用性和封装复杂性之间的平衡点是我们作为工具使用者应该考虑的，我推崇的方式，是仅仅使用自带的注解和自定义注解，完成一些简单的，可复用的校验。而对于复杂的校验，则包含在业务代码之中，毕竟如用户名是否存在这样的校验，仅仅依靠数据库查询还不够，为了避免并发问题，还是得加上唯一索引之类的额外工作，不是吗？\n\n","source":"_posts/使用spring validation完成数据后端校验.md","raw":"---\ntitle: 使用spring validation完成数据后端校验\ndate: 2017-08-16 15:52:52\ntags: \n- Spring\n- Validation\ncategories: \n- Spring\n---\n\n\n## 前言\n\n数据的校验是交互式网站一个不可或缺的功能，前端的js校验可以涵盖大部分的校验职责，如用户名唯一性，生日格式，邮箱格式校验等等常用的校验。但是为了避免用户绕过浏览器，使用http工具直接向后端请求一些违法数据，服务端的数据校验也是必要的，可以防止脏数据落到数据库中，如果数据库中出现一个非法的邮箱格式，也会让运维人员头疼不已。我在之前保险产品研发过程中，系统对数据校验要求比较严格且追求可变性及效率，曾使用drools作为规则引擎，兼任了校验的功能。而在一般的应用，可以使用本文将要介绍的validation来对数据进行校验。\n\n简述JSR303/JSR-349，hibernate validation，spring validation之间的关系。JSR303是一项标准,JSR-349是其的升级版本，添加了一些新特性，他们规定一些校验规范即校验注解，如@Null，@NotNull，@Pattern，他们位于javax.validation.constraints包下，只提供规范不提供实现。而hibernate validation是对这个规范的实践（不要将hibernate和数据库orm框架联系在一起），他提供了相应的实现，并增加了一些其他校验注解，如@Email，@Length，@Range等等，他们位于org.hibernate.validator.constraints包下。而万能的spring为了给开发者提供便捷，对hibernate validation进行了二次封装，显示校验validated bean时，你可以使用spring validation或者hibernate validation，而spring validation另一个特性，便是其在springmvc模块中添加了自动校验，并将校验信息封装进了特定的类中。这无疑便捷了我们的web开发。本文主要介绍在springmvc中自动校验的机制。\n\n<!-- more -->\n\n## 引入依赖\n\n我们使用maven构建springboot应用来进行demo演示。\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n我们只需要引入spring-boot-starter-web依赖即可，如果查看其子依赖，可以发现如下的依赖：\n\n```xml\n<dependency>\n\t<groupId>org.hibernate</groupId>\n\t<artifactId>hibernate-validator</artifactId>\n</dependency>\n<dependency>\n\t<groupId>com.fasterxml.jackson.core</groupId>\n\t<artifactId>jackson-databind</artifactId>\n</dependency>\n```\n\n验证了我之前的描述，web模块使用了hibernate-validation，并且databind模块也提供了相应的数据绑定功能。\n\n## 构建启动类\n\n无需添加其他注解，一个典型的启动类\n​\t\n```java\n@SpringBootApplication\npublic class ValidateApp {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ValidateApp.class, args);\n    }\n}\n```\n\n## 创建需要被校验的实体类\n\n\n```java\npublic class Foo {    \n    @NotBlank\n    private String name;\n\n    @Min(18)\n    private Integer age;\n\n    @Pattern(regexp = \"^1(3|4|5|7|8)\\\\d{9}$\",message = \"手机号码格式错误\")\n    @NotBlank(message = \"手机号码不能为空\")\n    private String phone;\n\n    @Email(message = \"邮箱格式错误\")\n    private String email;\n    \n    //... getter setter\n\n}\n```\n使用一些比较常用的校验注解，还是比较浅显易懂的，字段上的注解名称即可推断出校验内容，每一个注解都包含了message字段，用于校验失败时作为提示信息，特殊的校验注解，如Pattern（正则校验），还可以自己添加正则表达式。\n\n## 在@Controller中校验数据\n\nspringmvc为我们提供了自动封装表单参数的功能，一个添加了参数校验的典型controller如下所示。\n\n```java\n@Controller\npublic class FooController {\n\n    @RequestMapping(\"/foo\")\n    public String foo(@Validated Foo foo <1>, BindingResult bindingResult <2>) {\n        if(bindingResult.hasErrors()){\n            for (FieldError fieldError : bindingResult.getFieldErrors()) {\n                //...\n            }\n            return \"fail\";\n        }\n        return \"success\";\n    }\n\n}\n```\n值得注意的地方：\n\n<1> 参数Foo前需要加上@Validated注解，表明需要spring对其进行校验，而校验的信息会存放到其后的BindingResult中。注意，必须相邻，如果有多个参数需要校验，形式可以如下。foo(@Validated Foo foo, BindingResult  fooBindingResult ，@Validated Bar bar, BindingResult  barBindingResult);即一个校验类对应一个校验结果。\n\n<2> 校验结果会被自动填充，在controller中可以根据业务逻辑来决定具体的操作，如跳转到错误页面。\n\n一个最基本的校验就完成了，总结下框架已经提供了哪些校验：\n**JSR提供的校验注解**:\n```java\n@Null   被注释的元素必须为 null    \n@NotNull    被注释的元素必须不为 null    \n@AssertTrue     被注释的元素必须为 true    \n@AssertFalse    被注释的元素必须为 false    \n@Min(value)     被注释的元素必须是一个数字，其值必须大于等于指定的最小值    \n@Max(value)     被注释的元素必须是一个数字，其值必须小于等于指定的最大值    \n@DecimalMin(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值    \n@DecimalMax(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值    \n@Size(max=, min=)   被注释的元素的大小必须在指定的范围内    \n@Digits (integer, fraction)     被注释的元素必须是一个数字，其值必须在可接受的范围内    \n@Past   被注释的元素必须是一个过去的日期    \n@Future     被注释的元素必须是一个将来的日期    \n@Pattern(regex=,flag=)  被注释的元素必须符合指定的正则表达式    \n```\n\n**Hibernate Validator提供的校验注解**：\n\n\n```java\n@NotBlank(message =)   验证字符串非null，且长度必须大于0    \n@Email  被注释的元素必须是电子邮箱地址    \n@Length(min=,max=)  被注释的字符串的大小必须在指定的范围内    \n@NotEmpty   被注释的字符串的必须非空    \n@Range(min=,max=,message=)  被注释的元素必须在合适的范围内\n```\n\n## 校验实验\n\n我们对上面实现的校验入口进行一次测试请求：\n访问 `http://localhost:8080/foo?name=xujingfeng&email=000&age=19` 可以得到如下的debug信息：\n\n![这里写图片描述](http://img.blog.csdn.net/20170816154850724?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n实验告诉我们，校验结果起了作用。并且，可以发现当发生多个错误，spring validation不会在第一个错误发生后立即停止，而是继续试错，告诉我们所有的错误。debug可以查看到更多丰富的错误信息，这些都是spring validation为我们提供的便捷特性，基本适用于大多数场景。\n\n你可能不满足于简单的校验特性，下面进行一些补充。\n\n## 分组校验\n\n如果同一个类，在不同的使用场景下有不同的校验规则，那么可以使用分组校验。未成年人是不能喝酒的，而在其他场景下我们不做特殊的限制，这个需求如何体现同一个实体，不同的校验规则呢？\n\n改写注解，添加分组：\n\n\n```java\nClass Foo{\n\t@Min(value = 18,groups = {Adult.class})\n\tprivate Integer age;\n\t\n\tpublic interface Adult{}\n\t\n\tpublic interface Minor{}\n}\n```\n\n这样表明，只有在Adult分组下，18岁的限制才会起作用。\n\nController层改写：\n\n```java\n@RequestMapping(\"/drink\")\npublic String drink(@Validated({Foo.Adult.class}) Foo foo, BindingResult bindingResult) {\n    if(bindingResult.hasErrors()){\n        for (FieldError fieldError : bindingResult.getFieldErrors()) {\n            //...\n        }\n        return \"fail\";\n    }\n    return \"success\";\n}\n\n@RequestMapping(\"/live\")\npublic String live(@Validated Foo foo, BindingResult bindingResult) {\n    if(bindingResult.hasErrors()){\n        for (FieldError fieldError : bindingResult.getFieldErrors()) {\n            //...\n        }\n        return \"fail\";\n    }\n    return \"success\";\n}\n```\n\ndrink方法限定需要进行Adult校验，而live方法则不做限制。\n\n## 自定义校验\n\n业务需求总是比框架提供的这些简单校验要复杂的多，我们可以自定义校验来满足我们的需求。自定义spring validation非常简单，主要分为两步。\n\n1 自定义校验注解\n我们尝试添加一个“字符串不能包含空格”的限制。\n\n```java\n@Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER})\n@Retention(RUNTIME)\n@Documented\n@Constraint(validatedBy = {CannotHaveBlankValidator.class})<1>\npublic @interface CannotHaveBlank {\n\n    //默认错误消息\n    String message() default \"不能包含空格\";\n\n    //分组\n    Class<?>[] groups() default {};\n\n    //负载\n    Class<? extends Payload>[] payload() default {};\n\n    //指定多个时使用\n    @Target({FIELD, METHOD, PARAMETER, ANNOTATION_TYPE})\n    @Retention(RUNTIME)\n    @Documented\n    @interface List {\n        CannotHaveBlank[] value();\n    }\n\n}\n```\n\n我们不需要关注太多东西，使用spring validation的原则便是便捷我们的开发，例如payload，List ，groups，都可以忽略。\n\n<1> 自定义注解中指定了这个注解真正的验证者类。\n\n2 编写真正的校验者类\n\n\n```java\npublic class CannotHaveBlankValidator implements <1> ConstraintValidator<CannotHaveBlank, String> {\n\n\t@Override\n    public void initialize(CannotHaveBlank constraintAnnotation) {\n    }\n    \n    @Override\n    public boolean isValid(String value, ConstraintValidatorContext context <2>) {\n        //null时不进行校验\n        if (value != null && value.contains(\" \")) {\n\t        <3>\n            //获取默认提示信息\n            String defaultConstraintMessageTemplate = context.getDefaultConstraintMessageTemplate();\n            System.out.println(\"default message :\" + defaultConstraintMessageTemplate);\n            //禁用默认提示信息\n            context.disableDefaultConstraintViolation();\n            //设置提示语\n            context.buildConstraintViolationWithTemplate(\"can not contains blank\").addConstraintViolation();\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n<1>  所有的验证者都需要实现ConstraintValidator接口，它的接口也很形象，包含一个初始化事件方法，和一个判断是否合法的方法。\n\n\n```java\npublic interface ConstraintValidator<A extends Annotation, T> {\n\tvoid initialize(A constraintAnnotation);\n\t\tboolean isValid(T value, ConstraintValidatorContext context);\n}\n```\n\n\n<2> ConstraintValidatorContext 这个上下文包含了认证中所有的信息，我们可以利用这个上下文实现获取默认错误提示信息，禁用错误提示信息，改写错误提示信息等操作。\n\n<3> 一些典型校验操作，或许可以对你产生启示作用。\n\n值得注意的一点是，自定义注解可以用在`METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER`之上，ConstraintValidator的第二个泛型参数T，是需要被校验的类型。\n\n## 手动校验\n\n可能在某些场景下需要我们手动校验，即使用校验器对需要被校验的实体发起validate，同步获得校验结果。理论上我们既可以使用Hibernate Validation提供Validator，也可以使用Spring对其的封装。在spring构建的项目中，提倡使用经过spring封装过后的方法，这里两种方法都介绍下：\n\n**Hibernate Validation**：\n\n```java\nFoo foo = new Foo();\nfoo.setAge(22);\nfoo.setEmail(\"000\");\nValidatorFactory vf = Validation.buildDefaultValidatorFactory();\nValidator validator = vf.getValidator();\nSet<ConstraintViolation<Foo>> set = validator.validate(foo);\nfor (ConstraintViolation<Foo> constraintViolation : set) {\n    System.out.println(constraintViolation.getMessage());\n}\n```\n\n由于依赖了Hibernate Validation框架，我们需要调用Hibernate相关的工厂方法来获取validator实例，从而校验。\n\n在spring framework文档的Validation相关章节，可以看到如下的描述：\n\n>Spring provides full support for the Bean Validation API. This includes convenient support for bootstrapping a JSR-303/JSR-349 Bean Validation provider as a Spring bean. This allows for a javax.validation.ValidatorFactory or javax.validation.Validator to be injected wherever validation is needed in your application. Use the LocalValidatorFactoryBean to configure a default Validator as a Spring bean:\n\n> bean id=\"validator\"  class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"\n\n>The basic configuration above will trigger Bean Validation to initialize using its default bootstrap mechanism. A JSR-303/JSR-349 provider, such as Hibernate Validator, is expected to be present in the classpath and will be detected automatically.\t\n\n上面这段话主要描述了spring对validation全面支持JSR-303、JSR-349的标准，并且封装了LocalValidatorFactoryBean作为validator的实现。值得一提的是，这个类的责任其实是非常重大的，他兼容了spring的validation体系和hibernate的validation体系，也可以被开发者直接调用，代替上述的从工厂方法中获取的hibernate validator。由于我们使用了springboot，会触发web模块的自动配置，LocalValidatorFactoryBean已经成为了Validator的默认实现，使用时只需要自动注入即可。\n\n```java\n@Autowired\nValidator globalValidator; <1>\n\n@RequestMapping(\"/validate\")\npublic String validate() {\n    Foo foo = new Foo();\n    foo.setAge(22);\n    foo.setEmail(\"000\");\n\n    Set<ConstraintViolation<Foo>> set = globalValidator.validate(foo);<2>\n    for (ConstraintViolation<Foo> constraintViolation : set) {\n        System.out.println(constraintViolation.getMessage());\n    }\n\n    return \"success\";\n}\n```\n\n<1> 真正使用过Validator接口的读者会发现有两个接口，一个是位于javax.validation包下，另一个位于org.springframework.validation包下，注意我们这里使用的是前者javax.validation，后者是spring自己内置的校验接口，LocalValidatorFactoryBean同时实现了这两个接口。\n\n<2> 此处校验接口最终的实现类便是LocalValidatorFactoryBean。\n\n## 基于方法校验\n\n```java\n@RestController\n@Validated <1>\npublic class BarController {\n\n    @RequestMapping(\"/bar\")\n    public @NotBlank <2> String bar(@Min(18) Integer age <3>) {\n        System.out.println(\"age : \" + age);\n        return \"\";\n    }\n\n    @ExceptionHandler(ConstraintViolationException.class)\n    public Map handleConstraintViolationException(ConstraintViolationException cve){\n        Set<ConstraintViolation<?>> cves = cve.getConstraintViolations();<4>\n        for (ConstraintViolation<?> constraintViolation : cves) {\n            System.out.println(constraintViolation.getMessage());\n        }\n        Map map = new HashMap();\n        map.put(\"errorCode\",500);\n        return map;\n    }\n\n}\n```\n\n<1> 为类添加@Validated注解\n\n<2> <3> 校验方法的返回值和入参\n\n<4> 添加一个异常处理器，可以获得没有通过校验的属性相关信息\n\n基于方法的校验，个人不推荐使用，感觉和项目结合的不是很好。\n\n## 使用校验框架的一些想法\n\n理论上spring validation可以实现很多复杂的校验，你甚至可以使你的Validator获取ApplicationContext，获取spring容器中所有的资源，进行诸如数据库校验，注入其他校验工具，完成组合校验（如前后密码一致）等等操作，但是寻求一个易用性和封装复杂性之间的平衡点是我们作为工具使用者应该考虑的，我推崇的方式，是仅仅使用自带的注解和自定义注解，完成一些简单的，可复用的校验。而对于复杂的校验，则包含在业务代码之中，毕竟如用户名是否存在这样的校验，仅仅依靠数据库查询还不够，为了避免并发问题，还是得加上唯一索引之类的额外工作，不是吗？\n\n","slug":"使用spring validation完成数据后端校验","published":1,"updated":"2017-09-04T11:49:26.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7cy3zw50056twv7vrusq4x7","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>数据的校验是交互式网站一个不可或缺的功能，前端的js校验可以涵盖大部分的校验职责，如用户名唯一性，生日格式，邮箱格式校验等等常用的校验。但是为了避免用户绕过浏览器，使用http工具直接向后端请求一些违法数据，服务端的数据校验也是必要的，可以防止脏数据落到数据库中，如果数据库中出现一个非法的邮箱格式，也会让运维人员头疼不已。我在之前保险产品研发过程中，系统对数据校验要求比较严格且追求可变性及效率，曾使用drools作为规则引擎，兼任了校验的功能。而在一般的应用，可以使用本文将要介绍的validation来对数据进行校验。</p>\n<p>简述JSR303/JSR-349，hibernate validation，spring validation之间的关系。JSR303是一项标准,JSR-349是其的升级版本，添加了一些新特性，他们规定一些校验规范即校验注解，如@Null，@NotNull，@Pattern，他们位于javax.validation.constraints包下，只提供规范不提供实现。而hibernate validation是对这个规范的实践（不要将hibernate和数据库orm框架联系在一起），他提供了相应的实现，并增加了一些其他校验注解，如@Email，@Length，@Range等等，他们位于org.hibernate.validator.constraints包下。而万能的spring为了给开发者提供便捷，对hibernate validation进行了二次封装，显示校验validated bean时，你可以使用spring validation或者hibernate validation，而spring validation另一个特性，便是其在springmvc模块中添加了自动校验，并将校验信息封装进了特定的类中。这无疑便捷了我们的web开发。本文主要介绍在springmvc中自动校验的机制。</p>\n<a id=\"more\"></a>\n<h2 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h2><p>我们使用maven构建springboot应用来进行demo演示。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>我们只需要引入spring-boot-starter-web依赖即可，如果查看其子依赖，可以发现如下的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>验证了我之前的描述，web模块使用了hibernate-validation，并且databind模块也提供了相应的数据绑定功能。</p>\n<h2 id=\"构建启动类\"><a href=\"#构建启动类\" class=\"headerlink\" title=\"构建启动类\"></a>构建启动类</h2><p>无需添加其他注解，一个典型的启动类<br>​<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ValidateApp</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        SpringApplication.run(ValidateApp.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"创建需要被校验的实体类\"><a href=\"#创建需要被校验的实体类\" class=\"headerlink\" title=\"创建需要被校验的实体类\"></a>创建需要被校验的实体类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;    </div><div class=\"line\">    <span class=\"meta\">@NotBlank</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Min</span>(<span class=\"number\">18</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer age;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Pattern</span>(regexp = <span class=\"string\">\"^1(3|4|5|7|8)\\\\d&#123;9&#125;$\"</span>,message = <span class=\"string\">\"手机号码格式错误\"</span>)</div><div class=\"line\">    <span class=\"meta\">@NotBlank</span>(message = <span class=\"string\">\"手机号码不能为空\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String phone;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Email</span>(message = <span class=\"string\">\"邮箱格式错误\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String email;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//... getter setter</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用一些比较常用的校验注解，还是比较浅显易懂的，字段上的注解名称即可推断出校验内容，每一个注解都包含了message字段，用于校验失败时作为提示信息，特殊的校验注解，如Pattern（正则校验），还可以自己添加正则表达式。</p>\n<h2 id=\"在-Controller中校验数据\"><a href=\"#在-Controller中校验数据\" class=\"headerlink\" title=\"在@Controller中校验数据\"></a>在@Controller中校验数据</h2><p>springmvc为我们提供了自动封装表单参数的功能，一个添加了参数校验的典型controller如下所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/foo\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(@Validated Foo foo &lt;<span class=\"number\">1</span>&gt;, BindingResult bindingResult &lt;<span class=\"number\">2</span>&gt;)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(bindingResult.hasErrors())&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (FieldError fieldError : bindingResult.getFieldErrors()) &#123;</div><div class=\"line\">                <span class=\"comment\">//...</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"fail\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>值得注意的地方：</p>\n<p><1> 参数Foo前需要加上@Validated注解，表明需要spring对其进行校验，而校验的信息会存放到其后的BindingResult中。注意，必须相邻，如果有多个参数需要校验，形式可以如下。foo(@Validated Foo foo, BindingResult  fooBindingResult ，@Validated Bar bar, BindingResult  barBindingResult);即一个校验类对应一个校验结果。</1></p>\n<p><2> 校验结果会被自动填充，在controller中可以根据业务逻辑来决定具体的操作，如跳转到错误页面。</2></p>\n<p>一个最基本的校验就完成了，总结下框架已经提供了哪些校验：<br><strong>JSR提供的校验注解</strong>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Null</span>   被注释的元素必须为 <span class=\"keyword\">null</span>    </div><div class=\"line\"><span class=\"meta\">@NotNull</span>    被注释的元素必须不为 <span class=\"keyword\">null</span>    </div><div class=\"line\"><span class=\"meta\">@AssertTrue</span>     被注释的元素必须为 <span class=\"keyword\">true</span>    </div><div class=\"line\"><span class=\"meta\">@AssertFalse</span>    被注释的元素必须为 <span class=\"keyword\">false</span>    </div><div class=\"line\"><span class=\"meta\">@Min</span>(value)     被注释的元素必须是一个数字，其值必须大于等于指定的最小值    </div><div class=\"line\"><span class=\"meta\">@Max</span>(value)     被注释的元素必须是一个数字，其值必须小于等于指定的最大值    </div><div class=\"line\"><span class=\"meta\">@DecimalMin</span>(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值    </div><div class=\"line\"><span class=\"meta\">@DecimalMax</span>(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值    </div><div class=\"line\"><span class=\"meta\">@Size</span>(max=, min=)   被注释的元素的大小必须在指定的范围内    </div><div class=\"line\"><span class=\"meta\">@Digits</span> (integer, fraction)     被注释的元素必须是一个数字，其值必须在可接受的范围内    </div><div class=\"line\"><span class=\"meta\">@Past</span>   被注释的元素必须是一个过去的日期    </div><div class=\"line\"><span class=\"meta\">@Future</span>     被注释的元素必须是一个将来的日期    </div><div class=\"line\"><span class=\"meta\">@Pattern</span>(regex=,flag=)  被注释的元素必须符合指定的正则表达式</div></pre></td></tr></table></figure></p>\n<p><strong>Hibernate Validator提供的校验注解</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NotBlank</span>(message =)   验证字符串非<span class=\"keyword\">null</span>，且长度必须大于<span class=\"number\">0</span>    </div><div class=\"line\"><span class=\"meta\">@Email</span>  被注释的元素必须是电子邮箱地址    </div><div class=\"line\"><span class=\"meta\">@Length</span>(min=,max=)  被注释的字符串的大小必须在指定的范围内    </div><div class=\"line\"><span class=\"meta\">@NotEmpty</span>   被注释的字符串的必须非空    </div><div class=\"line\"><span class=\"meta\">@Range</span>(min=,max=,message=)  被注释的元素必须在合适的范围内</div></pre></td></tr></table></figure>\n<h2 id=\"校验实验\"><a href=\"#校验实验\" class=\"headerlink\" title=\"校验实验\"></a>校验实验</h2><p>我们对上面实现的校验入口进行一次测试请求：<br>访问 <code>http://localhost:8080/foo?name=xujingfeng&amp;email=000&amp;age=19</code> 可以得到如下的debug信息：</p>\n<p><img src=\"http://img.blog.csdn.net/20170816154850724?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>实验告诉我们，校验结果起了作用。并且，可以发现当发生多个错误，spring validation不会在第一个错误发生后立即停止，而是继续试错，告诉我们所有的错误。debug可以查看到更多丰富的错误信息，这些都是spring validation为我们提供的便捷特性，基本适用于大多数场景。</p>\n<p>你可能不满足于简单的校验特性，下面进行一些补充。</p>\n<h2 id=\"分组校验\"><a href=\"#分组校验\" class=\"headerlink\" title=\"分组校验\"></a>分组校验</h2><p>如果同一个类，在不同的使用场景下有不同的校验规则，那么可以使用分组校验。未成年人是不能喝酒的，而在其他场景下我们不做特殊的限制，这个需求如何体现同一个实体，不同的校验规则呢？</p>\n<p>改写注解，添加分组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class Foo&#123;</div><div class=\"line\">\t<span class=\"meta\">@Min</span>(value = <span class=\"number\">18</span>,groups = &#123;Adult.class&#125;)</div><div class=\"line\">\t<span class=\"keyword\">private</span> Integer age;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Adult</span></span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Minor</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样表明，只有在Adult分组下，18岁的限制才会起作用。</p>\n<p>Controller层改写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/drink\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">drink</span><span class=\"params\">(@Validated(&#123;Foo.Adult.class&#125;)</span> Foo foo, BindingResult bindingResult) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(bindingResult.hasErrors())&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (FieldError fieldError : bindingResult.getFieldErrors()) &#123;</div><div class=\"line\">            <span class=\"comment\">//...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"fail\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/live\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">live</span><span class=\"params\">(@Validated Foo foo, BindingResult bindingResult)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(bindingResult.hasErrors())&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (FieldError fieldError : bindingResult.getFieldErrors()) &#123;</div><div class=\"line\">            <span class=\"comment\">//...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"fail\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>drink方法限定需要进行Adult校验，而live方法则不做限制。</p>\n<h2 id=\"自定义校验\"><a href=\"#自定义校验\" class=\"headerlink\" title=\"自定义校验\"></a>自定义校验</h2><p>业务需求总是比框架提供的这些简单校验要复杂的多，我们可以自定义校验来满足我们的需求。自定义spring validation非常简单，主要分为两步。</p>\n<p>1 自定义校验注解<br>我们尝试添加一个“字符串不能包含空格”的限制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER&#125;)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Constraint</span>(validatedBy = &#123;CannotHaveBlankValidator.class&#125;)&lt;<span class=\"number\">1</span>&gt;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CannotHaveBlank &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//默认错误消息</span></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">message</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"不能包含空格\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//分组</span></div><div class=\"line\">    Class&lt;?&gt;[] groups() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//负载</span></div><div class=\"line\">    Class&lt;? extends Payload&gt;[] payload() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//指定多个时使用</span></div><div class=\"line\">    <span class=\"meta\">@Target</span>(&#123;FIELD, METHOD, PARAMETER, ANNOTATION_TYPE&#125;)</div><div class=\"line\">    <span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\">    <span class=\"meta\">@Documented</span></div><div class=\"line\">    <span class=\"meta\">@interface</span> List &#123;</div><div class=\"line\">        CannotHaveBlank[] value();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们不需要关注太多东西，使用spring validation的原则便是便捷我们的开发，例如payload，List ，groups，都可以忽略。</p>\n<p><1> 自定义注解中指定了这个注解真正的验证者类。</1></p>\n<p>2 编写真正的校验者类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CannotHaveBlankValidator</span> <span class=\"keyword\">implements</span> &lt;1&gt; <span class=\"title\">ConstraintValidator</span>&lt;<span class=\"title\">CannotHaveBlank</span>, <span class=\"title\">String</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(CannotHaveBlank constraintAnnotation)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String value, ConstraintValidatorContext context &lt;<span class=\"number\">2</span>&gt;)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//null时不进行校验</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span> &amp;&amp; value.contains(<span class=\"string\">\" \"</span>)) &#123;</div><div class=\"line\">\t        &lt;<span class=\"number\">3</span>&gt;</div><div class=\"line\">            <span class=\"comment\">//获取默认提示信息</span></div><div class=\"line\">            String defaultConstraintMessageTemplate = context.getDefaultConstraintMessageTemplate();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"default message :\"</span> + defaultConstraintMessageTemplate);</div><div class=\"line\">            <span class=\"comment\">//禁用默认提示信息</span></div><div class=\"line\">            context.disableDefaultConstraintViolation();</div><div class=\"line\">            <span class=\"comment\">//设置提示语</span></div><div class=\"line\">            context.buildConstraintViolationWithTemplate(<span class=\"string\">\"can not contains blank\"</span>).addConstraintViolation();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1>  所有的验证者都需要实现ConstraintValidator接口，它的接口也很形象，包含一个初始化事件方法，和一个判断是否合法的方法。</1></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ConstraintValidator</span>&lt;<span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">Annotation</span>, <span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(A constraintAnnotation)</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(T value, ConstraintValidatorContext context)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><2> ConstraintValidatorContext 这个上下文包含了认证中所有的信息，我们可以利用这个上下文实现获取默认错误提示信息，禁用错误提示信息，改写错误提示信息等操作。</2></p>\n<p><3> 一些典型校验操作，或许可以对你产生启示作用。</3></p>\n<p>值得注意的一点是，自定义注解可以用在<code>METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER</code>之上，ConstraintValidator的第二个泛型参数T，是需要被校验的类型。</p>\n<h2 id=\"手动校验\"><a href=\"#手动校验\" class=\"headerlink\" title=\"手动校验\"></a>手动校验</h2><p>可能在某些场景下需要我们手动校验，即使用校验器对需要被校验的实体发起validate，同步获得校验结果。理论上我们既可以使用Hibernate Validation提供Validator，也可以使用Spring对其的封装。在spring构建的项目中，提倡使用经过spring封装过后的方法，这里两种方法都介绍下：</p>\n<p><strong>Hibernate Validation</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Foo foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">foo.setAge(<span class=\"number\">22</span>);</div><div class=\"line\">foo.setEmail(<span class=\"string\">\"000\"</span>);</div><div class=\"line\">ValidatorFactory vf = Validation.buildDefaultValidatorFactory();</div><div class=\"line\">Validator validator = vf.getValidator();</div><div class=\"line\">Set&lt;ConstraintViolation&lt;Foo&gt;&gt; set = validator.validate(foo);</div><div class=\"line\"><span class=\"keyword\">for</span> (ConstraintViolation&lt;Foo&gt; constraintViolation : set) &#123;</div><div class=\"line\">    System.out.println(constraintViolation.getMessage());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于依赖了Hibernate Validation框架，我们需要调用Hibernate相关的工厂方法来获取validator实例，从而校验。</p>\n<p>在spring framework文档的Validation相关章节，可以看到如下的描述：</p>\n<blockquote>\n<p>Spring provides full support for the Bean Validation API. This includes convenient support for bootstrapping a JSR-303/JSR-349 Bean Validation provider as a Spring bean. This allows for a javax.validation.ValidatorFactory or javax.validation.Validator to be injected wherever validation is needed in your application. Use the LocalValidatorFactoryBean to configure a default Validator as a Spring bean:</p>\n<p>bean id=”validator”  class=”org.springframework.validation.beanvalidation.LocalValidatorFactoryBean”</p>\n<p>The basic configuration above will trigger Bean Validation to initialize using its default bootstrap mechanism. A JSR-303/JSR-349 provider, such as Hibernate Validator, is expected to be present in the classpath and will be detected automatically.    </p>\n</blockquote>\n<p>上面这段话主要描述了spring对validation全面支持JSR-303、JSR-349的标准，并且封装了LocalValidatorFactoryBean作为validator的实现。值得一提的是，这个类的责任其实是非常重大的，他兼容了spring的validation体系和hibernate的validation体系，也可以被开发者直接调用，代替上述的从工厂方法中获取的hibernate validator。由于我们使用了springboot，会触发web模块的自动配置，LocalValidatorFactoryBean已经成为了Validator的默认实现，使用时只需要自动注入即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\">Validator globalValidator; &lt;<span class=\"number\">1</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/validate\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">validate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Foo foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">    foo.setAge(<span class=\"number\">22</span>);</div><div class=\"line\">    foo.setEmail(<span class=\"string\">\"000\"</span>);</div><div class=\"line\"></div><div class=\"line\">    Set&lt;ConstraintViolation&lt;Foo&gt;&gt; set = globalValidator.validate(foo);&lt;<span class=\"number\">2</span>&gt;</div><div class=\"line\">    <span class=\"keyword\">for</span> (ConstraintViolation&lt;Foo&gt; constraintViolation : set) &#123;</div><div class=\"line\">        System.out.println(constraintViolation.getMessage());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> 真正使用过Validator接口的读者会发现有两个接口，一个是位于javax.validation包下，另一个位于org.springframework.validation包下，注意我们这里使用的是前者javax.validation，后者是spring自己内置的校验接口，LocalValidatorFactoryBean同时实现了这两个接口。</1></p>\n<p><2> 此处校验接口最终的实现类便是LocalValidatorFactoryBean。</2></p>\n<h2 id=\"基于方法校验\"><a href=\"#基于方法校验\" class=\"headerlink\" title=\"基于方法校验\"></a>基于方法校验</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@Validated</span> &lt;<span class=\"number\">1</span>&gt;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BarController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/bar\"</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"meta\">@NotBlank</span> &lt;<span class=\"number\">2</span>&gt; <span class=\"function\">String <span class=\"title\">bar</span><span class=\"params\">(@Min(<span class=\"number\">18</span>)</span> Integer age &lt;3&gt;) </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"age : \"</span> + age);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(ConstraintViolationException.class)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">handleConstraintViolationException</span><span class=\"params\">(ConstraintViolationException cve)</span></span>&#123;</div><div class=\"line\">        Set&lt;ConstraintViolation&lt;?&gt;&gt; cves = cve.getConstraintViolations();&lt;<span class=\"number\">4</span>&gt;</div><div class=\"line\">        <span class=\"keyword\">for</span> (ConstraintViolation&lt;?&gt; constraintViolation : cves) &#123;</div><div class=\"line\">            System.out.println(constraintViolation.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\">        Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">        map.put(<span class=\"string\">\"errorCode\"</span>,<span class=\"number\">500</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> map;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> 为类添加@Validated注解</1></p>\n<p><2> <3> 校验方法的返回值和入参</3></2></p>\n<p><4> 添加一个异常处理器，可以获得没有通过校验的属性相关信息</4></p>\n<p>基于方法的校验，个人不推荐使用，感觉和项目结合的不是很好。</p>\n<h2 id=\"使用校验框架的一些想法\"><a href=\"#使用校验框架的一些想法\" class=\"headerlink\" title=\"使用校验框架的一些想法\"></a>使用校验框架的一些想法</h2><p>理论上spring validation可以实现很多复杂的校验，你甚至可以使你的Validator获取ApplicationContext，获取spring容器中所有的资源，进行诸如数据库校验，注入其他校验工具，完成组合校验（如前后密码一致）等等操作，但是寻求一个易用性和封装复杂性之间的平衡点是我们作为工具使用者应该考虑的，我推崇的方式，是仅仅使用自带的注解和自定义注解，完成一些简单的，可复用的校验。而对于复杂的校验，则包含在业务代码之中，毕竟如用户名是否存在这样的校验，仅仅依靠数据库查询还不够，为了避免并发问题，还是得加上唯一索引之类的额外工作，不是吗？</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>数据的校验是交互式网站一个不可或缺的功能，前端的js校验可以涵盖大部分的校验职责，如用户名唯一性，生日格式，邮箱格式校验等等常用的校验。但是为了避免用户绕过浏览器，使用http工具直接向后端请求一些违法数据，服务端的数据校验也是必要的，可以防止脏数据落到数据库中，如果数据库中出现一个非法的邮箱格式，也会让运维人员头疼不已。我在之前保险产品研发过程中，系统对数据校验要求比较严格且追求可变性及效率，曾使用drools作为规则引擎，兼任了校验的功能。而在一般的应用，可以使用本文将要介绍的validation来对数据进行校验。</p>\n<p>简述JSR303/JSR-349，hibernate validation，spring validation之间的关系。JSR303是一项标准,JSR-349是其的升级版本，添加了一些新特性，他们规定一些校验规范即校验注解，如@Null，@NotNull，@Pattern，他们位于javax.validation.constraints包下，只提供规范不提供实现。而hibernate validation是对这个规范的实践（不要将hibernate和数据库orm框架联系在一起），他提供了相应的实现，并增加了一些其他校验注解，如@Email，@Length，@Range等等，他们位于org.hibernate.validator.constraints包下。而万能的spring为了给开发者提供便捷，对hibernate validation进行了二次封装，显示校验validated bean时，你可以使用spring validation或者hibernate validation，而spring validation另一个特性，便是其在springmvc模块中添加了自动校验，并将校验信息封装进了特定的类中。这无疑便捷了我们的web开发。本文主要介绍在springmvc中自动校验的机制。</p>","more":"<h2 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h2><p>我们使用maven构建springboot应用来进行demo演示。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>我们只需要引入spring-boot-starter-web依赖即可，如果查看其子依赖，可以发现如下的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>验证了我之前的描述，web模块使用了hibernate-validation，并且databind模块也提供了相应的数据绑定功能。</p>\n<h2 id=\"构建启动类\"><a href=\"#构建启动类\" class=\"headerlink\" title=\"构建启动类\"></a>构建启动类</h2><p>无需添加其他注解，一个典型的启动类<br>​<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ValidateApp</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        SpringApplication.run(ValidateApp.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"创建需要被校验的实体类\"><a href=\"#创建需要被校验的实体类\" class=\"headerlink\" title=\"创建需要被校验的实体类\"></a>创建需要被校验的实体类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;    </div><div class=\"line\">    <span class=\"meta\">@NotBlank</span></div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Min</span>(<span class=\"number\">18</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> Integer age;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Pattern</span>(regexp = <span class=\"string\">\"^1(3|4|5|7|8)\\\\d&#123;9&#125;$\"</span>,message = <span class=\"string\">\"手机号码格式错误\"</span>)</div><div class=\"line\">    <span class=\"meta\">@NotBlank</span>(message = <span class=\"string\">\"手机号码不能为空\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String phone;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Email</span>(message = <span class=\"string\">\"邮箱格式错误\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String email;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//... getter setter</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用一些比较常用的校验注解，还是比较浅显易懂的，字段上的注解名称即可推断出校验内容，每一个注解都包含了message字段，用于校验失败时作为提示信息，特殊的校验注解，如Pattern（正则校验），还可以自己添加正则表达式。</p>\n<h2 id=\"在-Controller中校验数据\"><a href=\"#在-Controller中校验数据\" class=\"headerlink\" title=\"在@Controller中校验数据\"></a>在@Controller中校验数据</h2><p>springmvc为我们提供了自动封装表单参数的功能，一个添加了参数校验的典型controller如下所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/foo\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">(@Validated Foo foo &lt;<span class=\"number\">1</span>&gt;, BindingResult bindingResult &lt;<span class=\"number\">2</span>&gt;)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(bindingResult.hasErrors())&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (FieldError fieldError : bindingResult.getFieldErrors()) &#123;</div><div class=\"line\">                <span class=\"comment\">//...</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"fail\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>值得注意的地方：</p>\n<p><1> 参数Foo前需要加上@Validated注解，表明需要spring对其进行校验，而校验的信息会存放到其后的BindingResult中。注意，必须相邻，如果有多个参数需要校验，形式可以如下。foo(@Validated Foo foo, BindingResult  fooBindingResult ，@Validated Bar bar, BindingResult  barBindingResult);即一个校验类对应一个校验结果。</1></p>\n<p><2> 校验结果会被自动填充，在controller中可以根据业务逻辑来决定具体的操作，如跳转到错误页面。</2></p>\n<p>一个最基本的校验就完成了，总结下框架已经提供了哪些校验：<br><strong>JSR提供的校验注解</strong>:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Null</span>   被注释的元素必须为 <span class=\"keyword\">null</span>    </div><div class=\"line\"><span class=\"meta\">@NotNull</span>    被注释的元素必须不为 <span class=\"keyword\">null</span>    </div><div class=\"line\"><span class=\"meta\">@AssertTrue</span>     被注释的元素必须为 <span class=\"keyword\">true</span>    </div><div class=\"line\"><span class=\"meta\">@AssertFalse</span>    被注释的元素必须为 <span class=\"keyword\">false</span>    </div><div class=\"line\"><span class=\"meta\">@Min</span>(value)     被注释的元素必须是一个数字，其值必须大于等于指定的最小值    </div><div class=\"line\"><span class=\"meta\">@Max</span>(value)     被注释的元素必须是一个数字，其值必须小于等于指定的最大值    </div><div class=\"line\"><span class=\"meta\">@DecimalMin</span>(value)  被注释的元素必须是一个数字，其值必须大于等于指定的最小值    </div><div class=\"line\"><span class=\"meta\">@DecimalMax</span>(value)  被注释的元素必须是一个数字，其值必须小于等于指定的最大值    </div><div class=\"line\"><span class=\"meta\">@Size</span>(max=, min=)   被注释的元素的大小必须在指定的范围内    </div><div class=\"line\"><span class=\"meta\">@Digits</span> (integer, fraction)     被注释的元素必须是一个数字，其值必须在可接受的范围内    </div><div class=\"line\"><span class=\"meta\">@Past</span>   被注释的元素必须是一个过去的日期    </div><div class=\"line\"><span class=\"meta\">@Future</span>     被注释的元素必须是一个将来的日期    </div><div class=\"line\"><span class=\"meta\">@Pattern</span>(regex=,flag=)  被注释的元素必须符合指定的正则表达式</div></pre></td></tr></table></figure></p>\n<p><strong>Hibernate Validator提供的校验注解</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NotBlank</span>(message =)   验证字符串非<span class=\"keyword\">null</span>，且长度必须大于<span class=\"number\">0</span>    </div><div class=\"line\"><span class=\"meta\">@Email</span>  被注释的元素必须是电子邮箱地址    </div><div class=\"line\"><span class=\"meta\">@Length</span>(min=,max=)  被注释的字符串的大小必须在指定的范围内    </div><div class=\"line\"><span class=\"meta\">@NotEmpty</span>   被注释的字符串的必须非空    </div><div class=\"line\"><span class=\"meta\">@Range</span>(min=,max=,message=)  被注释的元素必须在合适的范围内</div></pre></td></tr></table></figure>\n<h2 id=\"校验实验\"><a href=\"#校验实验\" class=\"headerlink\" title=\"校验实验\"></a>校验实验</h2><p>我们对上面实现的校验入口进行一次测试请求：<br>访问 <code>http://localhost:8080/foo?name=xujingfeng&amp;email=000&amp;age=19</code> 可以得到如下的debug信息：</p>\n<p><img src=\"http://img.blog.csdn.net/20170816154850724?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzgxNTU0Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>实验告诉我们，校验结果起了作用。并且，可以发现当发生多个错误，spring validation不会在第一个错误发生后立即停止，而是继续试错，告诉我们所有的错误。debug可以查看到更多丰富的错误信息，这些都是spring validation为我们提供的便捷特性，基本适用于大多数场景。</p>\n<p>你可能不满足于简单的校验特性，下面进行一些补充。</p>\n<h2 id=\"分组校验\"><a href=\"#分组校验\" class=\"headerlink\" title=\"分组校验\"></a>分组校验</h2><p>如果同一个类，在不同的使用场景下有不同的校验规则，那么可以使用分组校验。未成年人是不能喝酒的，而在其他场景下我们不做特殊的限制，这个需求如何体现同一个实体，不同的校验规则呢？</p>\n<p>改写注解，添加分组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class Foo&#123;</div><div class=\"line\">\t<span class=\"meta\">@Min</span>(value = <span class=\"number\">18</span>,groups = &#123;Adult.class&#125;)</div><div class=\"line\">\t<span class=\"keyword\">private</span> Integer age;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Adult</span></span>&#123;&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Minor</span></span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样表明，只有在Adult分组下，18岁的限制才会起作用。</p>\n<p>Controller层改写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/drink\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">drink</span><span class=\"params\">(@Validated(&#123;Foo.Adult.class&#125;)</span> Foo foo, BindingResult bindingResult) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(bindingResult.hasErrors())&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (FieldError fieldError : bindingResult.getFieldErrors()) &#123;</div><div class=\"line\">            <span class=\"comment\">//...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"fail\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/live\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">live</span><span class=\"params\">(@Validated Foo foo, BindingResult bindingResult)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(bindingResult.hasErrors())&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (FieldError fieldError : bindingResult.getFieldErrors()) &#123;</div><div class=\"line\">            <span class=\"comment\">//...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"fail\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>drink方法限定需要进行Adult校验，而live方法则不做限制。</p>\n<h2 id=\"自定义校验\"><a href=\"#自定义校验\" class=\"headerlink\" title=\"自定义校验\"></a>自定义校验</h2><p>业务需求总是比框架提供的这些简单校验要复杂的多，我们可以自定义校验来满足我们的需求。自定义spring validation非常简单，主要分为两步。</p>\n<p>1 自定义校验注解<br>我们尝试添加一个“字符串不能包含空格”的限制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER&#125;)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Constraint</span>(validatedBy = &#123;CannotHaveBlankValidator.class&#125;)&lt;<span class=\"number\">1</span>&gt;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CannotHaveBlank &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//默认错误消息</span></div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">message</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"不能包含空格\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//分组</span></div><div class=\"line\">    Class&lt;?&gt;[] groups() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//负载</span></div><div class=\"line\">    Class&lt;? extends Payload&gt;[] payload() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//指定多个时使用</span></div><div class=\"line\">    <span class=\"meta\">@Target</span>(&#123;FIELD, METHOD, PARAMETER, ANNOTATION_TYPE&#125;)</div><div class=\"line\">    <span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\">    <span class=\"meta\">@Documented</span></div><div class=\"line\">    <span class=\"meta\">@interface</span> List &#123;</div><div class=\"line\">        CannotHaveBlank[] value();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们不需要关注太多东西，使用spring validation的原则便是便捷我们的开发，例如payload，List ，groups，都可以忽略。</p>\n<p><1> 自定义注解中指定了这个注解真正的验证者类。</1></p>\n<p>2 编写真正的校验者类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CannotHaveBlankValidator</span> <span class=\"keyword\">implements</span> &lt;1&gt; <span class=\"title\">ConstraintValidator</span>&lt;<span class=\"title\">CannotHaveBlank</span>, <span class=\"title\">String</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(CannotHaveBlank constraintAnnotation)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String value, ConstraintValidatorContext context &lt;<span class=\"number\">2</span>&gt;)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//null时不进行校验</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span> &amp;&amp; value.contains(<span class=\"string\">\" \"</span>)) &#123;</div><div class=\"line\">\t        &lt;<span class=\"number\">3</span>&gt;</div><div class=\"line\">            <span class=\"comment\">//获取默认提示信息</span></div><div class=\"line\">            String defaultConstraintMessageTemplate = context.getDefaultConstraintMessageTemplate();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"default message :\"</span> + defaultConstraintMessageTemplate);</div><div class=\"line\">            <span class=\"comment\">//禁用默认提示信息</span></div><div class=\"line\">            context.disableDefaultConstraintViolation();</div><div class=\"line\">            <span class=\"comment\">//设置提示语</span></div><div class=\"line\">            context.buildConstraintViolationWithTemplate(<span class=\"string\">\"can not contains blank\"</span>).addConstraintViolation();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1>  所有的验证者都需要实现ConstraintValidator接口，它的接口也很形象，包含一个初始化事件方法，和一个判断是否合法的方法。</1></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ConstraintValidator</span>&lt;<span class=\"title\">A</span> <span class=\"keyword\">extends</span> <span class=\"title\">Annotation</span>, <span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(A constraintAnnotation)</span></span>;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(T value, ConstraintValidatorContext context)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><2> ConstraintValidatorContext 这个上下文包含了认证中所有的信息，我们可以利用这个上下文实现获取默认错误提示信息，禁用错误提示信息，改写错误提示信息等操作。</2></p>\n<p><3> 一些典型校验操作，或许可以对你产生启示作用。</3></p>\n<p>值得注意的一点是，自定义注解可以用在<code>METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER</code>之上，ConstraintValidator的第二个泛型参数T，是需要被校验的类型。</p>\n<h2 id=\"手动校验\"><a href=\"#手动校验\" class=\"headerlink\" title=\"手动校验\"></a>手动校验</h2><p>可能在某些场景下需要我们手动校验，即使用校验器对需要被校验的实体发起validate，同步获得校验结果。理论上我们既可以使用Hibernate Validation提供Validator，也可以使用Spring对其的封装。在spring构建的项目中，提倡使用经过spring封装过后的方法，这里两种方法都介绍下：</p>\n<p><strong>Hibernate Validation</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Foo foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">foo.setAge(<span class=\"number\">22</span>);</div><div class=\"line\">foo.setEmail(<span class=\"string\">\"000\"</span>);</div><div class=\"line\">ValidatorFactory vf = Validation.buildDefaultValidatorFactory();</div><div class=\"line\">Validator validator = vf.getValidator();</div><div class=\"line\">Set&lt;ConstraintViolation&lt;Foo&gt;&gt; set = validator.validate(foo);</div><div class=\"line\"><span class=\"keyword\">for</span> (ConstraintViolation&lt;Foo&gt; constraintViolation : set) &#123;</div><div class=\"line\">    System.out.println(constraintViolation.getMessage());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于依赖了Hibernate Validation框架，我们需要调用Hibernate相关的工厂方法来获取validator实例，从而校验。</p>\n<p>在spring framework文档的Validation相关章节，可以看到如下的描述：</p>\n<blockquote>\n<p>Spring provides full support for the Bean Validation API. This includes convenient support for bootstrapping a JSR-303/JSR-349 Bean Validation provider as a Spring bean. This allows for a javax.validation.ValidatorFactory or javax.validation.Validator to be injected wherever validation is needed in your application. Use the LocalValidatorFactoryBean to configure a default Validator as a Spring bean:</p>\n<p>bean id=”validator”  class=”org.springframework.validation.beanvalidation.LocalValidatorFactoryBean”</p>\n<p>The basic configuration above will trigger Bean Validation to initialize using its default bootstrap mechanism. A JSR-303/JSR-349 provider, such as Hibernate Validator, is expected to be present in the classpath and will be detected automatically.    </p>\n</blockquote>\n<p>上面这段话主要描述了spring对validation全面支持JSR-303、JSR-349的标准，并且封装了LocalValidatorFactoryBean作为validator的实现。值得一提的是，这个类的责任其实是非常重大的，他兼容了spring的validation体系和hibernate的validation体系，也可以被开发者直接调用，代替上述的从工厂方法中获取的hibernate validator。由于我们使用了springboot，会触发web模块的自动配置，LocalValidatorFactoryBean已经成为了Validator的默认实现，使用时只需要自动注入即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Autowired</span></div><div class=\"line\">Validator globalValidator; &lt;<span class=\"number\">1</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/validate\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">validate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Foo foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">    foo.setAge(<span class=\"number\">22</span>);</div><div class=\"line\">    foo.setEmail(<span class=\"string\">\"000\"</span>);</div><div class=\"line\"></div><div class=\"line\">    Set&lt;ConstraintViolation&lt;Foo&gt;&gt; set = globalValidator.validate(foo);&lt;<span class=\"number\">2</span>&gt;</div><div class=\"line\">    <span class=\"keyword\">for</span> (ConstraintViolation&lt;Foo&gt; constraintViolation : set) &#123;</div><div class=\"line\">        System.out.println(constraintViolation.getMessage());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> 真正使用过Validator接口的读者会发现有两个接口，一个是位于javax.validation包下，另一个位于org.springframework.validation包下，注意我们这里使用的是前者javax.validation，后者是spring自己内置的校验接口，LocalValidatorFactoryBean同时实现了这两个接口。</1></p>\n<p><2> 此处校验接口最终的实现类便是LocalValidatorFactoryBean。</2></p>\n<h2 id=\"基于方法校验\"><a href=\"#基于方法校验\" class=\"headerlink\" title=\"基于方法校验\"></a>基于方法校验</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RestController</span></div><div class=\"line\"><span class=\"meta\">@Validated</span> &lt;<span class=\"number\">1</span>&gt;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BarController</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/bar\"</span>)</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"meta\">@NotBlank</span> &lt;<span class=\"number\">2</span>&gt; <span class=\"function\">String <span class=\"title\">bar</span><span class=\"params\">(@Min(<span class=\"number\">18</span>)</span> Integer age &lt;3&gt;) </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"age : \"</span> + age);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(ConstraintViolationException.class)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">handleConstraintViolationException</span><span class=\"params\">(ConstraintViolationException cve)</span></span>&#123;</div><div class=\"line\">        Set&lt;ConstraintViolation&lt;?&gt;&gt; cves = cve.getConstraintViolations();&lt;<span class=\"number\">4</span>&gt;</div><div class=\"line\">        <span class=\"keyword\">for</span> (ConstraintViolation&lt;?&gt; constraintViolation : cves) &#123;</div><div class=\"line\">            System.out.println(constraintViolation.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\">        Map map = <span class=\"keyword\">new</span> HashMap();</div><div class=\"line\">        map.put(<span class=\"string\">\"errorCode\"</span>,<span class=\"number\">500</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> map;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><1> 为类添加@Validated注解</1></p>\n<p><2> <3> 校验方法的返回值和入参</3></2></p>\n<p><4> 添加一个异常处理器，可以获得没有通过校验的属性相关信息</4></p>\n<p>基于方法的校验，个人不推荐使用，感觉和项目结合的不是很好。</p>\n<h2 id=\"使用校验框架的一些想法\"><a href=\"#使用校验框架的一些想法\" class=\"headerlink\" title=\"使用校验框架的一些想法\"></a>使用校验框架的一些想法</h2><p>理论上spring validation可以实现很多复杂的校验，你甚至可以使你的Validator获取ApplicationContext，获取spring容器中所有的资源，进行诸如数据库校验，注入其他校验工具，完成组合校验（如前后密码一致）等等操作，但是寻求一个易用性和封装复杂性之间的平衡点是我们作为工具使用者应该考虑的，我推崇的方式，是仅仅使用自带的注解和自定义注解，完成一些简单的，可复用的校验。而对于复杂的校验，则包含在业务代码之中，毕竟如用户名是否存在这样的校验，仅仅依靠数据库查询还不够，为了避免并发问题，还是得加上唯一索引之类的额外工作，不是吗？</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj7cy3zrg0001twv7i3cwf7az","category_id":"cj7cy3zrp0004twv72cijjlak","_id":"cj7cy3zry000etwv7hef1x334"},{"post_id":"cj7cy3zrm0003twv7m1ijx9sd","category_id":"cj7cy3zrp0004twv72cijjlak","_id":"cj7cy3zs5000ktwv726g9tsgz"},{"post_id":"cj7cy3zrr0007twv761jzxlic","category_id":"cj7cy3zrp0004twv72cijjlak","_id":"cj7cy3zs8000ptwv74ka1guv5"},{"post_id":"cj7cy3zrs0008twv7uflg5a0k","category_id":"cj7cy3zs7000mtwv7ehjvzm7t","_id":"cj7cy3zs9000stwv7xhyhfg04"},{"post_id":"cj7cy3zrt0009twv7q4ax2xrm","category_id":"cj7cy3zs8000qtwv7l3f66rhp","_id":"cj7cy3zsb000wtwv7k4fwi5mo"},{"post_id":"cj7cy3zrx000dtwv7nk2nsdfz","category_id":"cj7cy3zs8000qtwv7l3f66rhp","_id":"cj7cy3zse0010twv7w75gori8"},{"post_id":"cj7cy3zry000ftwv7uhf3yah4","category_id":"cj7cy3zsc000ytwv7v4f2ksuc","_id":"cj7cy3zsg0014twv7n0wq2lf0"},{"post_id":"cj7cy3zs3000jtwv70yddxit5","category_id":"cj7cy3zs8000qtwv7l3f66rhp","_id":"cj7cy3zsh0018twv75wv4js9h"},{"post_id":"cj7cy3zs5000ltwv70925rypw","category_id":"cj7cy3zsg0015twv7cudkcy3u","_id":"cj7cy3zsi001btwv7a4xm9wh7"},{"post_id":"cj7cy3zsx001ktwv7uaw631gh","category_id":"cj7cy3zt0001mtwv7hi1tn3wg","_id":"cj7cy3ztb001vtwv7vh9y9ebx"},{"post_id":"cj7cy3zt6001qtwv73vwlo1tt","category_id":"cj7cy3zt0001mtwv7hi1tn3wg","_id":"cj7cy3ztg0020twv7ds9oy1rz"},{"post_id":"cj7cy3zsy001ltwv7hlmgpj15","category_id":"cj7cy3zt7001rtwv764yjsfau","_id":"cj7cy3zti0025twv7iqzuubtj"},{"post_id":"cj7cy3ztb001xtwv75gzorz65","category_id":"cj7cy3zt0001mtwv7hi1tn3wg","_id":"cj7cy3ztl002atwv78f1iqfvb"},{"post_id":"cj7cy3ztg0022twv7kbc4w5m8","category_id":"cj7cy3zt0001mtwv7hi1tn3wg","_id":"cj7cy3ztn002dtwv7tz3pub3t"},{"post_id":"cj7cy3zt5001ptwv71s7p36qa","category_id":"cj7cy3zt7001rtwv764yjsfau","_id":"cj7cy3ztq002htwv7uvaoc60w"},{"post_id":"cj7cy3zti0024twv78carn62p","category_id":"cj7cy3zt7001rtwv764yjsfau","_id":"cj7cy3ztt002ktwv7tp0fr55z"},{"post_id":"cj7cy3ztk0029twv7tnn3fh0i","category_id":"cj7cy3zt7001rtwv764yjsfau","_id":"cj7cy3ztv002otwv7zfsprjx6"},{"post_id":"cj7cy3zt8001utwv7769qhwkn","category_id":"cj7cy3ztj0026twv71bfm3p9z","_id":"cj7cy3ztx002rtwv7g61u72gw"},{"post_id":"cj7cy3ztn002ctwv7xo1ara8b","category_id":"cj7cy3zt0001mtwv7hi1tn3wg","_id":"cj7cy3zu2002vtwv7b5jg1826"},{"post_id":"cj7cy3ztq002gtwv724ctzp6s","category_id":"cj7cy3zt0001mtwv7hi1tn3wg","_id":"cj7cy3zu4002ztwv7uf1uipvs"},{"post_id":"cj7cy3ztr002jtwv7eyggo7kh","category_id":"cj7cy3zsg0015twv7cudkcy3u","_id":"cj7cy3zu50032twv7mmkpoh6m"},{"post_id":"cj7cy3ztu002ntwv7zjkoa2x6","category_id":"cj7cy3ztj0026twv71bfm3p9z","_id":"cj7cy3zu70037twv7r7ue9735"},{"post_id":"cj7cy3ztz002utwv7ja12yc4f","category_id":"cj7cy3zt0001mtwv7hi1tn3wg","_id":"cj7cy3zu8003atwv73zv11ooy"},{"post_id":"cj7cy3zu50031twv7o3ust31m","category_id":"cj7cy3zsc000ytwv7v4f2ksuc","_id":"cj7cy3zuc003etwv7xr4pu3t6"},{"post_id":"cj7cy3ztx002qtwv7alr60z64","category_id":"cj7cy3zu3002wtwv7ot8fvc2p","_id":"cj7cy3zuf003htwv71bvvo87t"},{"post_id":"cj7cy3zu60035twv7qka0ux5k","category_id":"cj7cy3zs7000mtwv7ehjvzm7t","_id":"cj7cy3zuj003ltwv7irc0el06"},{"post_id":"cj7cy3zu80039twv7l4n6hsvh","category_id":"cj7cy3zu3002wtwv7ot8fvc2p","_id":"cj7cy3zul003otwv7wdylcqmn"},{"post_id":"cj7cy3zu3002ytwv7hx28eyhy","category_id":"cj7cy3zu70036twv77bxxhkiu","_id":"cj7cy3zun003stwv79za0a9yh"},{"post_id":"cj7cy3zua003dtwv71wncjsr8","category_id":"cj7cy3zu70036twv77bxxhkiu","_id":"cj7cy3zuo003vtwv7070zn3qw"},{"post_id":"cj7cy3zue003gtwv73vue1uth","category_id":"cj7cy3zt0001mtwv7hi1tn3wg","_id":"cj7cy3zuq003ytwv7ljhtqs0e"},{"post_id":"cj7cy3zui003ktwv7jfls638e","category_id":"cj7cy3zs7000mtwv7ehjvzm7t","_id":"cj7cy3zut0042twv7yt6snwhg"},{"post_id":"cj7cy3zuk003ntwv7nbkrm45v","category_id":"cj7cy3zt0001mtwv7hi1tn3wg","_id":"cj7cy3zux0045twv7f2c0szt6"},{"post_id":"cj7cy3zum003rtwv7ik24qgsf","category_id":"cj7cy3zsg0015twv7cudkcy3u","_id":"cj7cy3zuz0049twv7yewq7vcu"},{"post_id":"cj7cy3zun003utwv7auw7eb7k","category_id":"cj7cy3zu70036twv77bxxhkiu","_id":"cj7cy3zv0004btwv7ymkyxfj7"},{"post_id":"cj7cy3zup003xtwv7dkioon62","category_id":"cj7cy3zu70036twv77bxxhkiu","_id":"cj7cy3zv1004etwv7xzbgz74e"},{"post_id":"cj7cy3zur0041twv7diobilb5","category_id":"cj7cy3zt0001mtwv7hi1tn3wg","_id":"cj7cy3zv1004gtwv7samrh9pk"},{"post_id":"cj7cy3zuv0044twv7bsfv3fox","category_id":"cj7cy3zs7000mtwv7ehjvzm7t","_id":"cj7cy3zv2004jtwv7fu6xq1ta"},{"post_id":"cj7cy3zuz0048twv7w1svex1i","category_id":"cj7cy3ztj0026twv71bfm3p9z","_id":"cj7cy3zv2004ltwv7ac4mure4"},{"post_id":"cj7cy3zw50056twv7vrusq4x7","category_id":"cj7cy3ztj0026twv71bfm3p9z","_id":"cj7cy3zw80058twv7y1fovk02"},{"post_id":"cj7cy3zt3001otwv7c635z211","category_id":"cj7cy3zsg0015twv7cudkcy3u","_id":"cj7d5xbe80001v8v7sptzvvam"}],"PostTag":[{"post_id":"cj7cy3zrg0001twv7i3cwf7az","tag_id":"cj7cy3zrq0005twv791ylf4sg","_id":"cj7cy3zrw000ctwv7zkau3tgq"},{"post_id":"cj7cy3zrm0003twv7m1ijx9sd","tag_id":"cj7cy3zrq0005twv791ylf4sg","_id":"cj7cy3zs2000itwv7a9b01fsy"},{"post_id":"cj7cy3zrr0007twv761jzxlic","tag_id":"cj7cy3zrq0005twv791ylf4sg","_id":"cj7cy3zs8000otwv7xhdd6kb6"},{"post_id":"cj7cy3zrs0008twv7uflg5a0k","tag_id":"cj7cy3zs7000ntwv7oojcvkgo","_id":"cj7cy3zsb000vtwv7fmz19ih1"},{"post_id":"cj7cy3zrs0008twv7uflg5a0k","tag_id":"cj7cy3zs8000rtwv797c8jhzs","_id":"cj7cy3zsc000xtwv7mcs0yvmv"},{"post_id":"cj7cy3zrt0009twv7q4ax2xrm","tag_id":"cj7cy3zsa000utwv790ope1vp","_id":"cj7cy3zsf0013twv7ybi2jaur"},{"post_id":"cj7cy3zrt0009twv7q4ax2xrm","tag_id":"cj7cy3zse000ztwv7ipvan7f3","_id":"cj7cy3zsg0016twv7s9bm842g"},{"post_id":"cj7cy3zrx000dtwv7nk2nsdfz","tag_id":"cj7cy3zsa000utwv790ope1vp","_id":"cj7cy3zsi001atwv7yleac64z"},{"post_id":"cj7cy3zrx000dtwv7nk2nsdfz","tag_id":"cj7cy3zse000ztwv7ipvan7f3","_id":"cj7cy3zsi001ctwv7ynlddbmt"},{"post_id":"cj7cy3zry000ftwv7uhf3yah4","tag_id":"cj7cy3zsh0019twv7ft7lycc8","_id":"cj7cy3zsj001etwv7sew52xxx"},{"post_id":"cj7cy3zs3000jtwv70yddxit5","tag_id":"cj7cy3zsa000utwv790ope1vp","_id":"cj7cy3zsk001htwv7yi1v1huf"},{"post_id":"cj7cy3zs3000jtwv70yddxit5","tag_id":"cj7cy3zse000ztwv7ipvan7f3","_id":"cj7cy3zsk001itwv7794vern7"},{"post_id":"cj7cy3zs5000ltwv70925rypw","tag_id":"cj7cy3zsj001gtwv7mu1n2s04","_id":"cj7cy3zsk001jtwv7gk77387a"},{"post_id":"cj7cy3zsx001ktwv7uaw631gh","tag_id":"cj7cy3zs7000ntwv7oojcvkgo","_id":"cj7cy3zt8001ttwv7n72the2x"},{"post_id":"cj7cy3zsx001ktwv7uaw631gh","tag_id":"cj7cy3zt3001ntwv78812au7u","_id":"cj7cy3ztb001wtwv7wii48cif"},{"post_id":"cj7cy3zt6001qtwv73vwlo1tt","tag_id":"cj7cy3zs7000ntwv7oojcvkgo","_id":"cj7cy3ztg0021twv7vjywjhdg"},{"post_id":"cj7cy3ztb001xtwv75gzorz65","tag_id":"cj7cy3zs7000ntwv7oojcvkgo","_id":"cj7cy3zti0023twv7hh7l7jog"},{"post_id":"cj7cy3ztg0022twv7kbc4w5m8","tag_id":"cj7cy3zs7000ntwv7oojcvkgo","_id":"cj7cy3ztk0028twv7sas5xc5s"},{"post_id":"cj7cy3zsy001ltwv7hlmgpj15","tag_id":"cj7cy3zt7001stwv711cc5p08","_id":"cj7cy3ztn002btwv7uocrrvhv"},{"post_id":"cj7cy3zsy001ltwv7hlmgpj15","tag_id":"cj7cy3zte001ztwv71co9wmm4","_id":"cj7cy3ztq002ftwv71k3dntmc"},{"post_id":"cj7cy3zti0024twv78carn62p","tag_id":"cj7cy3zt7001stwv711cc5p08","_id":"cj7cy3ztr002itwv7ug74c7to"},{"post_id":"cj7cy3zti0024twv78carn62p","tag_id":"cj7cy3zte001ztwv71co9wmm4","_id":"cj7cy3ztt002mtwv73e6pedtf"},{"post_id":"cj7cy3ztk0029twv7tnn3fh0i","tag_id":"cj7cy3zt7001stwv711cc5p08","_id":"cj7cy3ztw002ptwv7b8b4s63r"},{"post_id":"cj7cy3ztk0029twv7tnn3fh0i","tag_id":"cj7cy3zte001ztwv71co9wmm4","_id":"cj7cy3zty002ttwv7fry475ko"},{"post_id":"cj7cy3ztn002ctwv7xo1ara8b","tag_id":"cj7cy3zs7000ntwv7oojcvkgo","_id":"cj7cy3zu3002xtwv7at4zwxhd"},{"post_id":"cj7cy3ztn002ctwv7xo1ara8b","tag_id":"cj7cy3zt3001ntwv78812au7u","_id":"cj7cy3zu50030twv723w24vlo"},{"post_id":"cj7cy3ztq002gtwv724ctzp6s","tag_id":"cj7cy3zt3001ntwv78812au7u","_id":"cj7cy3zu60034twv7k0xxhbh8"},{"post_id":"cj7cy3ztq002gtwv724ctzp6s","tag_id":"cj7cy3zs7000ntwv7oojcvkgo","_id":"cj7cy3zu80038twv78g2axpr8"},{"post_id":"cj7cy3zt5001ptwv71s7p36qa","tag_id":"cj7cy3zt7001stwv711cc5p08","_id":"cj7cy3zua003ctwv7dyjen85t"},{"post_id":"cj7cy3zt5001ptwv71s7p36qa","tag_id":"cj7cy3zte001ztwv71co9wmm4","_id":"cj7cy3zud003ftwv7m4bumzw5"},{"post_id":"cj7cy3ztr002jtwv7eyggo7kh","tag_id":"cj7cy3zsj001gtwv7mu1n2s04","_id":"cj7cy3zui003jtwv774ue4iq6"},{"post_id":"cj7cy3zt8001utwv7769qhwkn","tag_id":"cj7cy3zse000ztwv7ipvan7f3","_id":"cj7cy3zuk003mtwv7vvgbiycv"},{"post_id":"cj7cy3zt8001utwv7769qhwkn","tag_id":"cj7cy3ztt002ltwv7qayh5t6q","_id":"cj7cy3zul003qtwv7u70anhdq"},{"post_id":"cj7cy3ztu002ntwv7zjkoa2x6","tag_id":"cj7cy3zse000ztwv7ipvan7f3","_id":"cj7cy3zun003ttwv7xbftqsx9"},{"post_id":"cj7cy3ztu002ntwv7zjkoa2x6","tag_id":"cj7cy3zty002stwv7i9kb7xm5","_id":"cj7cy3zup003wtwv7zz3hggah"},{"post_id":"cj7cy3zu50031twv7o3ust31m","tag_id":"cj7cy3zsh0019twv7ft7lycc8","_id":"cj7cy3zur0040twv76uf9vgju"},{"post_id":"cj7cy3ztx002qtwv7alr60z64","tag_id":"cj7cy3zu60033twv7jlpgifra","_id":"cj7cy3zuu0043twv7zfwhjvfd"},{"post_id":"cj7cy3ztz002utwv7ja12yc4f","tag_id":"cj7cy3zu9003btwv7q3pttyek","_id":"cj7cy3zuy0047twv70vqmchx0"},{"post_id":"cj7cy3zu3002ytwv7hx28eyhy","tag_id":"cj7cy3zuh003itwv73w9cux6p","_id":"cj7cy3zv0004atwv7o64vg7fz"},{"post_id":"cj7cy3zun003utwv7auw7eb7k","tag_id":"cj7cy3zt3001ntwv78812au7u","_id":"cj7cy3zv1004dtwv7qlp079zi"},{"post_id":"cj7cy3zun003utwv7auw7eb7k","tag_id":"cj7cy3zs7000ntwv7oojcvkgo","_id":"cj7cy3zv1004ftwv7drj5cllf"},{"post_id":"cj7cy3zu60035twv7qka0ux5k","tag_id":"cj7cy3zul003ptwv7w9jgvt0a","_id":"cj7cy3zv2004itwv7iccqyuml"},{"post_id":"cj7cy3zu60035twv7qka0ux5k","tag_id":"cj7cy3zuq003ztwv7lik5bweb","_id":"cj7cy3zv2004ktwv76krwp37e"},{"post_id":"cj7cy3zuz0048twv7w1svex1i","tag_id":"cj7cy3zse000ztwv7ipvan7f3","_id":"cj7cy3zv2004mtwv747equott"},{"post_id":"cj7cy3zu80039twv7l4n6hsvh","tag_id":"cj7cy3zuy0046twv75egs0ngl","_id":"cj7cy3zv3004otwv76ku7kypc"},{"post_id":"cj7cy3zu80039twv7l4n6hsvh","tag_id":"cj7cy3zu60033twv7jlpgifra","_id":"cj7cy3zv3004ptwv7g6f6ctms"},{"post_id":"cj7cy3zua003dtwv71wncjsr8","tag_id":"cj7cy3zv0004ctwv7rifwjd3r","_id":"cj7cy3zv4004rtwv7dhoukx1q"},{"post_id":"cj7cy3zua003dtwv71wncjsr8","tag_id":"cj7cy3zv2004htwv7765wesez","_id":"cj7cy3zv4004stwv7zg1h9ck2"},{"post_id":"cj7cy3zue003gtwv73vue1uth","tag_id":"cj7cy3zv3004ntwv7x7k18if1","_id":"cj7cy3zv4004utwv77a9sgy5m"},{"post_id":"cj7cy3zuk003ntwv7nbkrm45v","tag_id":"cj7cy3zt3001ntwv78812au7u","_id":"cj7cy3zv5004vtwv7399tq4ck"},{"post_id":"cj7cy3zuk003ntwv7nbkrm45v","tag_id":"cj7cy3zv3004qtwv77kof3nm1","_id":"cj7cy3zv5004xtwv76bph72tf"},{"post_id":"cj7cy3zum003rtwv7ik24qgsf","tag_id":"cj7cy3zv4004ttwv7iqwkc9wx","_id":"cj7cy3zv5004ytwv7e2lak6oe"},{"post_id":"cj7cy3zup003xtwv7dkioon62","tag_id":"cj7cy3zv5004wtwv7rhr5jwiv","_id":"cj7cy3zv60050twv71wp32rmk"},{"post_id":"cj7cy3zur0041twv7diobilb5","tag_id":"cj7cy3zv6004ztwv76ml4t5mu","_id":"cj7cy3zv60052twv7t3uahl7y"},{"post_id":"cj7cy3zur0041twv7diobilb5","tag_id":"cj7cy3zs7000ntwv7oojcvkgo","_id":"cj7cy3zv70053twv7ljqvnazw"},{"post_id":"cj7cy3zuv0044twv7bsfv3fox","tag_id":"cj7cy3zuq003ztwv7lik5bweb","_id":"cj7cy3zv70054twv7ukagpeka"},{"post_id":"cj7cy3zuv0044twv7bsfv3fox","tag_id":"cj7cy3zv60051twv7uu0df3au","_id":"cj7cy3zv70055twv7hk1mer1v"},{"post_id":"cj7cy3zw50056twv7vrusq4x7","tag_id":"cj7cy3zse000ztwv7ipvan7f3","_id":"cj7cy3zw70057twv78r7ssf25"},{"post_id":"cj7cy3zw50056twv7vrusq4x7","tag_id":"cj7cy3ztt002ltwv7qayh5t6q","_id":"cj7cy3zw80059twv7e6gw1t1x"},{"post_id":"cj7cy3zt3001otwv7c635z211","tag_id":"cj7cy3zv4004ttwv7iqwkc9wx","_id":"cj7d5xbe70000v8v7pectj3m6"}],"Tag":[{"name":"Spring Security OAuth2","_id":"cj7cy3zrq0005twv791ylf4sg"},{"name":"JAVA","_id":"cj7cy3zs7000ntwv7oojcvkgo"},{"name":"杂谈","_id":"cj7cy3zs8000rtwv797c8jhzs"},{"name":"Spring Session","_id":"cj7cy3zsa000utwv790ope1vp"},{"name":"Spring","_id":"cj7cy3zse000ztwv7ipvan7f3"},{"name":"领域驱动设计","_id":"cj7cy3zsh0019twv7ft7lycc8"},{"name":"Spring Cloud Zuul","_id":"cj7cy3zsj001gtwv7mu1n2s04"},{"name":"多线程","_id":"cj7cy3zt3001ntwv78812au7u"},{"name":"规则引擎","_id":"cj7cy3zt7001stwv711cc5p08"},{"name":"drools","_id":"cj7cy3zte001ztwv71co9wmm4"},{"name":"Validation","_id":"cj7cy3ztt002ltwv7qayh5t6q"},{"name":"事务","_id":"cj7cy3zty002stwv7i9kb7xm5"},{"name":"DevOps","_id":"cj7cy3zu60033twv7jlpgifra"},{"name":"XML","_id":"cj7cy3zu9003btwv7q3pttyek"},{"name":"微服务","_id":"cj7cy3zuh003itwv73w9cux6p"},{"name":"代码规范","_id":"cj7cy3zul003ptwv7w9jgvt0a"},{"name":"技术杂谈","_id":"cj7cy3zuq003ztwv7lik5bweb"},{"name":"Zipkin","_id":"cj7cy3zuy0046twv75egs0ngl"},{"name":"redis","_id":"cj7cy3zv0004ctwv7rifwjd3r"},{"name":"lua","_id":"cj7cy3zv2004htwv7765wesez"},{"name":"zookeeper","_id":"cj7cy3zv3004ntwv7x7k18if1"},{"name":"数据库","_id":"cj7cy3zv3004qtwv77kof3nm1"},{"name":"Spring Cloud","_id":"cj7cy3zv4004ttwv7iqwkc9wx"},{"name":"RPC","_id":"cj7cy3zv5004wtwv7rhr5jwiv"},{"name":"JMM","_id":"cj7cy3zv6004ztwv76ml4t5mu"},{"name":"求职","_id":"cj7cy3zv60051twv7uu0df3au"}]}}